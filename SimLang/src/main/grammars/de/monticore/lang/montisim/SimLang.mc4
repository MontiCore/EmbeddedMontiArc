/*
 * Simulation-Settings language v1.0
 * @author Deniz Schmidt
*/
package de.monticore.lang.montisim;

grammar SimLang extends de.monticore.lang.montisim.Weather, de.monticore.lang.monticar.Types2  {
  SimLangCompilationUnit = ("package" package:(Name& || ".")+ ";")? (ImportStatement)* Simulation;

  interface SimulationAttribute;
  interface SimulationEntity;

  symbol scope Simulation = "sim" Name "{"
    ((SimulationAttribute | SimulationEntity) ";")*
  "}";

  //
  // Simulator Configuration
  //
  SimulationRenderFrequency implements SimulationAttribute = "sim_render_frequency" AlternativeInput;
  SimulationLoopFrequency implements SimulationAttribute = "sim_loop_frequency" AlternativeInput;
  SimulationDuration implements SimulationAttribute = "sim_duration" AlternativeInput;
  SimulationType implements SimulationAttribute = "sim_type" simType:["fixed"|"realtime"|"maxfps"] ;

  MapOverlap implements SimulationAttribute = "map_overlap" AlternativeInput;
  MapSectorWidth implements SimulationAttribute = "map_sector_width" AlternativeInput;
  MapSectorHeight implements SimulationAttribute = "map_sector_height" AlternativeInput;
  MaxSectorUsers implements SimulationAttribute = "max_sector_users" AlternativeInput;
  Timeout implements SimulationAttribute = "timeout" AlternativeInput;

  //
  // Environment+World Configuration
  //
  WeatherObj = "{" ((WeatherAttribute | WeatherEntity) ";")* "}";
  
  SingleWeather = (FixedWeather | SequenceWeather | RandomWeather);
  WeatherList = "[" SingleWeather ("," SingleWeather)* "]";
  Weather implements SimulationAttribute = "weather" (SingleWeather|WeatherList) ;
  FixedWeather = ["fixed"] WeatherObj;
  SequenceWeather = ["sequence"] (WeatherObj UnitNumber)+;
  RandomWeather = ["random"] (UnitNumber)?;
 
  SingleTime = hours:UnitNumber ":" minutes:UnitNumber (":" seconds:UnitNumber (":" milliseconds:UnitNumber)?)?;
  TimeList = "[" SingleTime ("," SingleTime)* "]" ;

  Time implements SimulationAttribute = "time" (SingleTime | TimeList) ;

  MapPath implements SimulationAttribute = "map_path" mapPath:Name ;
  MapName implements SimulationAttribute = "map_name" mapName:Name "." fileFormat:Name ;
  MapHeight implements SimulationAttribute = "map_height" (heightMode:["flat"|"random"]|(customHeight:Name)) ;
  
  Gravity implements SimulationAttribute = "gravity" AlternativeInput;
  
  PedestrianDensity implements SimulationAttribute = "pedestrian_density" AlternativeInput;

  //
  // Entity Configuration
  //
  Pedestrians implements SimulationEntity = ("<p>"
                "(" startX:UnitNumber "," startY:UnitNumber ("," startZ:UnitNumber)? ")"
                "->" 
                "(" destX:UnitNumber "," destY:UnitNumber ("," destZ:UnitNumber)? ")"
                ) ;

  //defined vehicle moving from start to destination pos
  ExplicitVehicle implements SimulationEntity = Name
              ("(" startX:UnitNumber "," startY:UnitNumber "," startRot:UnitNumber ")"
              "->" 
              "(" destX:UnitNumber "," destY:UnitNumber ("," destZ:UnitNumber)? ")"
              );
              
  //random vehicles spawning somewhere within a circle at x,y with radius r moving to somewhere within dest circle
  PathedVehicle implements SimulationEntity = "<v>"
                  "(" startX:UnitNumber "," startY:UnitNumber "," spawnRadius:UnitNumber ")"
                  "->"
                  "(" destX:UnitNumber "," destY:UnitNumber "," destRadius:UnitNumber ")"
                  (amount:UnitNumber)?;
  
  //completely random vehicle spawns and destinations with optional avoidance of path
  RandomVehicle implements SimulationEntity = "<v>" amount:UnitNumber ("(" startX:UnitNumber "," startY:UnitNumber ")" "->" "(" destX:UnitNumber "," destY:UnitNumber ")")?;
  
  //
  // Communication Configuration
  //
  interface ChannelAttribute;
  Channel implements SimulationEntity = channelType:["fixed"|"bound"] "channel" Name "{" (ChannelAttribute ";")* "}" ;
  TransferRate implements ChannelAttribute = "transfer_rate" AlternativeInput;
  Latency implements ChannelAttribute = "latency" AlternativeInput;
  Outage implements ChannelAttribute = "outage" AlternativeInput;
  Area implements ChannelAttribute = "area" (["global"]|(point1:Coordinate (point2:Coordinate|radius:UnitNumber))) ;
}