/* generated by template parser.MCParser*/



package si._parser;

import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.nio.charset.StandardCharsets;

import java.util.Optional;
import de.monticore.antlr4.MCConcreteParser;

import org.antlr.v4.runtime.ANTLRFileStream;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;

public class SIParser extends MCConcreteParser {

  protected SIAntlrParser create(String filename) throws IOException {
    SIAntlrLexer lexer = new SIAntlrLexer(new  ANTLRFileStream(filename, StandardCharsets.UTF_8.name()));
    CommonTokenStream tokens = new CommonTokenStream(lexer);
    SIAntlrParser parser = new SIAntlrParser(tokens);
    lexer.setMCParser(parser);  
    parser.setFilename(filename);
    setError(false);
    return parser;
  }
  
  protected SIAntlrParser create(Reader reader) throws IOException {
    SIAntlrLexer lexer = new SIAntlrLexer(new ANTLRInputStream(reader));
    CommonTokenStream tokens = new CommonTokenStream(lexer);
    SIAntlrParser parser = new SIAntlrParser(tokens);
    lexer.setMCParser(parser);  
    parser.setFilename("StringReader");
    setError(false);
    return parser;
  }
  
  /**
   * @see de.monticore.antlr4.MCConcreteParser#parse(java.lang.String)
   */
  @Override
  public Optional<si._ast.ASTNumber> parse(String fileName) throws IOException {
    return parseNumber(fileName);
  }
  
  /**
   * @see de.monticore.antlr4.MCConcreteParser#parse(java.io.Reader)
   */
  @Override
  public Optional<si._ast.ASTNumber> parse(Reader reader) throws IOException {
    return parseNumber(reader);
  }
  
  public Optional<si._ast.ASTNumber> parse_String(String str) throws IOException {
    return parseString_Number(str);
  }
 
    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<si._ast.ASTNumber> parseNumber(String filename) throws IOException {   
    SIAntlrParser parser = create(filename);    
	si._ast.ASTNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.number().ret;
    } else {
      ast = parser.number_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTNumber> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTNumber> parseNumber(Reader reader) throws IOException {
 	SIAntlrParser parser = create(reader);
	si._ast.ASTNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.number().ret;
    } else {
      ast = parser.number_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTNumber> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTNumber> parseString_Number(String str) throws IOException {
    return parseNumber(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<si._ast.ASTFloatPointUnitNumber> parseFloatPointUnitNumber(String filename) throws IOException {   
    SIAntlrParser parser = create(filename);    
	si._ast.ASTFloatPointUnitNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.floatPointUnitNumber().ret;
    } else {
      ast = parser.floatPointUnitNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTFloatPointUnitNumber> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTFloatPointUnitNumber> parseFloatPointUnitNumber(Reader reader) throws IOException {
 	SIAntlrParser parser = create(reader);
	si._ast.ASTFloatPointUnitNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.floatPointUnitNumber().ret;
    } else {
      ast = parser.floatPointUnitNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTFloatPointUnitNumber> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTFloatPointUnitNumber> parseString_FloatPointUnitNumber(String str) throws IOException {
    return parseFloatPointUnitNumber(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<si._ast.ASTHexUnitNumber> parseHexUnitNumber(String filename) throws IOException {   
    SIAntlrParser parser = create(filename);    
	si._ast.ASTHexUnitNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.hexUnitNumber().ret;
    } else {
      ast = parser.hexUnitNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTHexUnitNumber> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTHexUnitNumber> parseHexUnitNumber(Reader reader) throws IOException {
 	SIAntlrParser parser = create(reader);
	si._ast.ASTHexUnitNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.hexUnitNumber().ret;
    } else {
      ast = parser.hexUnitNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTHexUnitNumber> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTHexUnitNumber> parseString_HexUnitNumber(String str) throws IOException {
    return parseHexUnitNumber(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<si._ast.ASTUnitNumber> parseUnitNumber(String filename) throws IOException {   
    SIAntlrParser parser = create(filename);    
	si._ast.ASTUnitNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.unitNumber().ret;
    } else {
      ast = parser.unitNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTUnitNumber> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTUnitNumber> parseUnitNumber(Reader reader) throws IOException {
 	SIAntlrParser parser = create(reader);
	si._ast.ASTUnitNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.unitNumber().ret;
    } else {
      ast = parser.unitNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTUnitNumber> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTUnitNumber> parseString_UnitNumber(String str) throws IOException {
    return parseUnitNumber(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<si._ast.ASTComplexNumber> parseComplexNumber(String filename) throws IOException {   
    SIAntlrParser parser = create(filename);    
	si._ast.ASTComplexNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.complexNumber().ret;
    } else {
      ast = parser.complexNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTComplexNumber> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTComplexNumber> parseComplexNumber(Reader reader) throws IOException {
 	SIAntlrParser parser = create(reader);
	si._ast.ASTComplexNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.complexNumber().ret;
    } else {
      ast = parser.complexNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTComplexNumber> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTComplexNumber> parseString_ComplexNumber(String str) throws IOException {
    return parseComplexNumber(new StringReader(str));
  }


}