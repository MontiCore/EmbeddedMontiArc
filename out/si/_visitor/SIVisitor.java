/* generated by template visitor.SimpleVisitor*/



package si._visitor;

import java.util.Iterator;
import si._ast.ASTSINode;
import de.monticore.ast.ASTNode;

/**
 * Default AST-visitor for the {@code SI} language.<br/>
 * <br/>
 * <b>Running a visitor</b>: Starting a traversal of an AST with root {@code astNode} is as simple as calling {@code handle(astNode)}. Note that the visitor only handles nodes of language {@code SI}.<br/>
 * <br/>
 * <b>Implementing a visitor:</b><br/>
 * You should never use {@code this}, but always make use of {@link #getRealThis()}. This ensures that the visitor can be reused by composition.<br/>
 * <br/>
 * <ul>
 *   <li><b>Visiting nodes</b>: You may override the {@code visit(node)} and {@code endVisit(node)} methods to do something at specific AST-nodes.<br/><br/></li>
 *   <li><b>Traversal</b>: You may override the {@code traverse(node)} methods, if you want to change the climb down strategy for traversing children (e.g. ordering the children). Be aware of the underlying double-dispatch mechanism: probably you want to call {@code childNode.accept(getRealThis())} and <b>not</b> {@code handle(childNode)}<br/><br/></li>
 *   <li><b>Handling of nodes</b>: You may override the {@code handle(node)} methods, if you want to change its default implementation (depth-first iteration): {@code visit(node); traverse(node); endVisit(node);}<br/><br/></li>
 * </ul>
 * <b>Special node type {@code ASTNode}:</b><br/>
 * Visitors do not provide handle or traverse methods for {@code ASTNode},
 * because handling and traversal are defined in the language depending node
 * types. However, an {@link SIInheritanceVisitor} visits and
 * endVisits each node as {@code ASTNode}. Due to composition of all kinds of
 * visitors we must define the methods here in the main visitor interface.
 *
 * @see ASTSINode#accept(SIVisitor visitor)
 */
public interface SIVisitor  {

  /**
   * Sets the visitor to use for handling and traversing nodes.
   * This method is not implemented by default and visitors intended for reusage
   * in other languages should override this method together with
   * {@link #getRealThis()} to make a visitor composable.
   * RealThis is used to allow visitor composition, where a delegating visitor
   * utilizes this setter to set another visitor as the handle/traversal
   * controller. If this method is not overridden by the language developer,
   * the visitor still can be reused, by implementing this method in a
   * decorator.
   * @param realThis the real instance to use for handling and traversing nodes.
   * @see SIDelegatorVisitor 
   */
  default public void setRealThis(SIVisitor realThis) {
    throw new UnsupportedOperationException("0xA7011_513 The setter for realThis is not implemented. You might want to implement a wrapper class to allow setting/getting realThis.");
  }

  /**
   * By default this method returns {@code this}. Visitors intended for reusage
   * in other languages should override this method together with
   * {@link #setRealThis(SIVisitor)} to make a visitor
   * composable.
   * See {@link #setRealThis(SIVisitor)} for more information.
   * @see #setRealThis(SIVisitor)
   * @see SIDelegatorVisitor
   */
  default public SIVisitor getRealThis() {
    return this;
  }
  
  /* ------------------------------------------------------------------------*/
  
  /**
   * By default this method is not called, because the default visitor only
   * visits a node in its dynamic runtime type. Use an InheritanceVisitor
   * if you want to visit a node in its super types as well.
   *
   * @param node the node that is entered 
   */
  default public void visit(ASTNode node) {
  }

  /**
   * By default this method is not called, because the default visitor only
   * visits a node in its dynamic runtime type. Use an InheritanceVisitor
   * if you want to visit a node in its super types as well.
   *
   * @param node the node that is left 
   */
  default public void endVisit(ASTNode node) {
  }
  
  /* ------------------------------------------------------------------------*/
  
  
      
      default public void visit(si._ast.ASTNumber node) {}
      
      default public void endVisit(si._ast.ASTNumber node) {}
      
      default public void handle(si._ast.ASTNumber node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(si._ast.ASTNumber node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

                if (node.getFloatPointUnitNumber().isPresent()) {
                  node.getFloatPointUnitNumber().get().accept(getRealThis());
                }
                if (node.getHexUnitNumber().isPresent()) {
                  node.getHexUnitNumber().get().accept(getRealThis());
                }
                if (node.getComplexNumber().isPresent()) {
                  node.getComplexNumber().get().accept(getRealThis());
                }
                if (node.getUnitNumber().isPresent()) {
                  node.getUnitNumber().get().accept(getRealThis());
                }
      }
      
      default public void visit(si._ast.ASTFloatPointUnitNumber node) {}
      
      default public void endVisit(si._ast.ASTFloatPointUnitNumber node) {}
      
      default public void handle(si._ast.ASTFloatPointUnitNumber node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(si._ast.ASTFloatPointUnitNumber node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

      }
      
      default public void visit(si._ast.ASTHexUnitNumber node) {}
      
      default public void endVisit(si._ast.ASTHexUnitNumber node) {}
      
      default public void handle(si._ast.ASTHexUnitNumber node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(si._ast.ASTHexUnitNumber node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

      }
      
      default public void visit(si._ast.ASTUnitNumber node) {}
      
      default public void endVisit(si._ast.ASTUnitNumber node) {}
      
      default public void handle(si._ast.ASTUnitNumber node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(si._ast.ASTUnitNumber node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

      }
      
      default public void visit(si._ast.ASTComplexNumber node) {}
      
      default public void endVisit(si._ast.ASTComplexNumber node) {}
      
      default public void handle(si._ast.ASTComplexNumber node) {
        getRealThis().visit(node);
          getRealThis().traverse(node);
        getRealThis().endVisit(node);
      }
    
      default public void traverse(si._ast.ASTComplexNumber node) {
        // One might think that we could call traverse(subelement) immediately,
        // but this is not true for interface-types where we do not know the
        // concrete type of the element.
        // Instead we double-dispatch the call, to call the correctly typed
        // traverse(...) method with the elements concrete type.

      }
      
      default public void visit(si._ast.ASTSINode node) {}
      
      default public void endVisit(si._ast.ASTSINode node) {}
      
      default public void handle(si._ast.ASTSINode node) {
        getRealThis().visit(node);
        // no traverse() for interfaces and enums, only concrete classes are traversed
        getRealThis().endVisit(node);
      }
    
    
}
