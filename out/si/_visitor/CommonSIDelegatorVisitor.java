/* generated by template visitor.CommonDelegatorVisitor*/



package si._visitor;

import java.util.Optional;
import de.monticore.ast.ASTNode;

import de.se_rwth.commons.logging.Log;

/**
 * Common delegator visitor for the <code>SI</code>
 * language.<br/>
 * <br/>
 */
public class CommonSIDelegatorVisitor  implements SIInheritanceVisitor {

  private CommonSIDelegatorVisitor realThis = this;

  @Override
  public void setRealThis(SIVisitor realThis) {
    if (this.realThis != realThis) {
      if (!(realThis instanceof CommonSIDelegatorVisitor)) {
          Log.error("0xA7111_513 realThis of CommonSIDelegatorVisitor must be SIDelegatorVisitor itself.");
      }
      this.realThis = (CommonSIDelegatorVisitor) realThis;
      // register the known delegates to the realThis (and therby also set their new realThis)
        if (this.si__visitor_SIVisitor.isPresent()) {
          this.set_si__visitor_SIVisitor(si__visitor_SIVisitor.get());
        }
    }
  }

  public CommonSIDelegatorVisitor getRealThis() {
    return realThis;
  }

    
    
    private Optional<si._visitor.SIVisitor> si__visitor_SIVisitor = Optional.empty();
    
    public void set_si__visitor_SIVisitor(si._visitor.SIVisitor si__visitor_SIVisitor) {
      this.si__visitor_SIVisitor = Optional.ofNullable(si__visitor_SIVisitor);
      if (this.si__visitor_SIVisitor.isPresent()) {
        this.si__visitor_SIVisitor.get().setRealThis(getRealThis());
      }
      // register the si._visitor.SIVisitor also to realThis if not this
      if (getRealThis() != this) {
        // to prevent recursion we must differentiate between realThis being
        // the current this or another instance.
        getRealThis().set_si__visitor_SIVisitor(si__visitor_SIVisitor);
      }
    }

    public Optional<si._visitor.SIVisitor> get_si__visitor_SIVisitor() {
      return si__visitor_SIVisitor;
    }

        @Override
        public void handle(si._ast.ASTNumber node) {
          if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
            getRealThis().get_si__visitor_SIVisitor().get().handle(node);
          }
        }
  
          @Override
          public void traverse(si._ast.ASTNumber node) {
            if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
              getRealThis().get_si__visitor_SIVisitor().get().traverse(node);
            }
          }
 
        @Override
        public void visit(si._ast.ASTNumber node) {
          if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
            getRealThis().get_si__visitor_SIVisitor().get().visit(node);
          }
        }

        @Override
        public void endVisit(si._ast.ASTNumber node) {
          if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
            getRealThis().get_si__visitor_SIVisitor().get().endVisit(node);
          }
        }
        @Override
        public void handle(si._ast.ASTFloatPointUnitNumber node) {
          if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
            getRealThis().get_si__visitor_SIVisitor().get().handle(node);
          }
        }
  
          @Override
          public void traverse(si._ast.ASTFloatPointUnitNumber node) {
            if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
              getRealThis().get_si__visitor_SIVisitor().get().traverse(node);
            }
          }
 
        @Override
        public void visit(si._ast.ASTFloatPointUnitNumber node) {
          if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
            getRealThis().get_si__visitor_SIVisitor().get().visit(node);
          }
        }

        @Override
        public void endVisit(si._ast.ASTFloatPointUnitNumber node) {
          if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
            getRealThis().get_si__visitor_SIVisitor().get().endVisit(node);
          }
        }
        @Override
        public void handle(si._ast.ASTHexUnitNumber node) {
          if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
            getRealThis().get_si__visitor_SIVisitor().get().handle(node);
          }
        }
  
          @Override
          public void traverse(si._ast.ASTHexUnitNumber node) {
            if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
              getRealThis().get_si__visitor_SIVisitor().get().traverse(node);
            }
          }
 
        @Override
        public void visit(si._ast.ASTHexUnitNumber node) {
          if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
            getRealThis().get_si__visitor_SIVisitor().get().visit(node);
          }
        }

        @Override
        public void endVisit(si._ast.ASTHexUnitNumber node) {
          if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
            getRealThis().get_si__visitor_SIVisitor().get().endVisit(node);
          }
        }
        @Override
        public void handle(si._ast.ASTUnitNumber node) {
          if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
            getRealThis().get_si__visitor_SIVisitor().get().handle(node);
          }
        }
  
          @Override
          public void traverse(si._ast.ASTUnitNumber node) {
            if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
              getRealThis().get_si__visitor_SIVisitor().get().traverse(node);
            }
          }
 
        @Override
        public void visit(si._ast.ASTUnitNumber node) {
          if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
            getRealThis().get_si__visitor_SIVisitor().get().visit(node);
          }
        }

        @Override
        public void endVisit(si._ast.ASTUnitNumber node) {
          if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
            getRealThis().get_si__visitor_SIVisitor().get().endVisit(node);
          }
        }
        @Override
        public void handle(si._ast.ASTComplexNumber node) {
          if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
            getRealThis().get_si__visitor_SIVisitor().get().handle(node);
          }
        }
  
          @Override
          public void traverse(si._ast.ASTComplexNumber node) {
            if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
              getRealThis().get_si__visitor_SIVisitor().get().traverse(node);
            }
          }
 
        @Override
        public void visit(si._ast.ASTComplexNumber node) {
          if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
            getRealThis().get_si__visitor_SIVisitor().get().visit(node);
          }
        }

        @Override
        public void endVisit(si._ast.ASTComplexNumber node) {
          if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
            getRealThis().get_si__visitor_SIVisitor().get().endVisit(node);
          }
        }
        @Override
        public void handle(si._ast.ASTSINode node) {
          if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
            getRealThis().get_si__visitor_SIVisitor().get().handle(node);
          }
        }
  
 
        @Override
        public void visit(si._ast.ASTSINode node) {
          if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
            getRealThis().get_si__visitor_SIVisitor().get().visit(node);
          }
        }

        @Override
        public void endVisit(si._ast.ASTSINode node) {
          if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
            getRealThis().get_si__visitor_SIVisitor().get().endVisit(node);
          }
        }
  

  public void visit(ASTNode node) {
    // delegate to all present delegates
      if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
        getRealThis().get_si__visitor_SIVisitor().get().visit(node);
      }
  }

  public void endVisit(ASTNode node) {
    // delegate to all present delegates 
      if (getRealThis().get_si__visitor_SIVisitor().isPresent()) {
        getRealThis().get_si__visitor_SIVisitor().get().endVisit(node);
      }
    }
}
