/* generated by template visitor.InheritanceVisitor*/



package si._visitor;

import si._ast.ASTSINode;

import de.monticore.ast.ASTNode;

/**
 * Visitor for the {@code SI} language that visits super
 * types of the AST nodes as well.
 *
 * @see SIVisitor
 * @see ASTSINode#accept(SIVisitor visitor)
 */
 public interface SIInheritanceVisitor extends SIVisitor  {


      default public void handle(si._ast.ASTNumber node) {
        getRealThis().visit((ASTNode) node);
        SIVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(si._ast.ASTFloatPointUnitNumber node) {
        getRealThis().visit((ASTNode) node);
        SIVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(si._ast.ASTHexUnitNumber node) {
        getRealThis().visit((ASTNode) node);
        SIVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(si._ast.ASTUnitNumber node) {
        getRealThis().visit((ASTNode) node);
        SIVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(si._ast.ASTComplexNumber node) {
        getRealThis().visit((ASTNode) node);
        SIVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(si._ast.ASTSINode node) {
        getRealThis().visit((ASTNode) node);
        SIVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

}
