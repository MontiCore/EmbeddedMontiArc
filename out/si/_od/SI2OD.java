/* generated by template od.DiagramVisitor*/



package si._od;

import si._visitor.SIVisitor;
import si._ast.ASTSINode;
import de.monticore.prettyprint.IndentPrinter;
import de.se_rwth.commons.Names;
import de.se_rwth.commons.StringTransformations;
import de.monticore.generating.templateengine.reporting.commons.ReportingRepository;
import java.util.Iterator;

public class SI2OD implements SIVisitor {
      
  private SIVisitor realThis = this;
  
  protected IndentPrinter pp;
  
  protected ReportingRepository reporting;
  
  protected boolean printEmptyOptional = false;
  
  protected boolean printEmptyList = false;
    
  public SI2OD(IndentPrinter printer, ReportingRepository reporting) {
    this.reporting = reporting;
    this.pp = printer;
  }
    
  
      @Override
      public void handle(si._ast.ASTNumber node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "si._ast.ASTNumber");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              if (node.getFloatPointUnitNumber().isPresent()) {
     			pp.print("floatPointUnitNumber");
   			    pp.print(" = ");
                node.getFloatPointUnitNumber().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("floatPointUnitNumber = absent;");
              }
 
              if (node.getHexUnitNumber().isPresent()) {
     			pp.print("hexUnitNumber");
   			    pp.print(" = ");
                node.getHexUnitNumber().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("hexUnitNumber = absent;");
              }
 
              if (node.getComplexNumber().isPresent()) {
     			pp.print("complexNumber");
   			    pp.print(" = ");
                node.getComplexNumber().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("complexNumber = absent;");
              }
 
              if (node.getUnitNumber().isPresent()) {
     			pp.print("unitNumber");
   			    pp.print(" = ");
                node.getUnitNumber().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("unitNumber = absent;");
              }
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(si._ast.ASTFloatPointUnitNumber node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "si._ast.ASTFloatPointUnitNumber");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              printAttribute("tFloatPointUnitNumber", "\"" + String.valueOf(node.getTFloatPointUnitNumber()) + "\"");
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(si._ast.ASTHexUnitNumber node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "si._ast.ASTHexUnitNumber");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              printAttribute("tHexUnitNumber", "\"" + String.valueOf(node.getTHexUnitNumber()) + "\"");
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(si._ast.ASTUnitNumber node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "si._ast.ASTUnitNumber");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              printAttribute("tUnitNumber", "\"" + String.valueOf(node.getTUnitNumber()) + "\"");
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(si._ast.ASTComplexNumber node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "si._ast.ASTComplexNumber");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              printAttribute("tComplexNumber", "\"" + String.valueOf(node.getTComplexNumber()) + "\"");
        pp.unindent();
        pp.print("}");
     } 

  
  private void printAttribute(String name, String value) {
    pp.print(name);
    pp.print(" = ");
    pp.print(value);
    pp.println(";");
  }
  
  private void printObject(String objName, String objType) {
    pp.print(objName);
    pp.print(":");
    pp.print(Names.getSimpleName(objType));
    pp.println(" {");
  }
  
  public String printObjectDiagram(String modelName, ASTSINode node) {
    pp.clearBuffer();
    pp.setIndentLength(2);
    pp.print("objectdiagram ");
    pp.print(modelName);
    pp.println(" {");
    pp.indent();
    node.accept(getRealThis());
    pp.print(";");
    pp.unindent();
    pp.println("}");
    return pp.getContent();
  }
  
  @Override
  public void setRealThis(SIVisitor realThis) {
    this.realThis = realThis;
  }

  @Override
  public SIVisitor getRealThis() {
    return realThis;
  }
  
  /**
   * @return the printEmptyOptional
   */
  public boolean isPrintEmptyOptional() {
    return this.printEmptyOptional;
  }

  
  /**
   * @param printEmptyOptional the printEmptyOptional to set
   */
  public void setPrintEmptyOptional(boolean printEmptyOptional) {
    this.printEmptyOptional = printEmptyOptional;
  }

  
  /**
   * @return the printEmptyList
   */
  public boolean isPrintEmptyList() {
    return this.printEmptyList;
  }

  
  /**
   * @param printEmptyList the printEmptyList to set
   */
  public void setPrintEmptyList(boolean printEmptyList) {
    this.printEmptyList = printEmptyList;
  }
  
}
