/* generated by template cocos.CoCoChecker*/



package si._cocos;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.LinkedHashSet;

import si._ast.ASTSINode;
import si._visitor.SIVisitor;
import si._visitor.SIInheritanceVisitor;

/**
 * This class is capable of checking context conditions of the language and all
 * their super languages. Beside such composition of single context conditions
 * ({@code addCoCo(...)}) it also allows composing of existing checkers of
 * the language itself and checkers of (transitive) super languages
 * ({@code addChecker(...)}). Composing multiple checkers of the same (super)
 * language is possible. The composed checkers are not modified. Also it is
 * supported to mix both composing existing checkers as well as single.<br/>
 * <b>Keep in mind</b> that context conditions are executed multiple-times if
 * added multiple times. This might be tricky when multiple composed checkers
 * hold the same context condition.<br/>
 * <br/>
 * <b>Add context conditions</b> using {@code #addCoCo(...}.<br/>
 * <br/>
 * <b>Add checkers</b> using {@code #addCoCo(...}.<br/>
 * <br/>
 * <b>Execute all</b> registered context conditions and checkers by calling
 * {@link #checkAll(ASTSINode)}.
 * 
 * @author Robert Heim
 */
public class SICoCoChecker implements SIInheritanceVisitor {

  public SICoCoChecker() {
  }

  // --- realThis-Pattern ---
  
  private SIVisitor realThis = this;

  @Override
  public SIVisitor getRealThis() {
    return realThis;
  }

  @Override
  public void setRealThis(SIVisitor realThis) {
    this.realThis = realThis;
  }
  
  // --- /realThis-Pattern ---

    /**
     * Executes all registered context conditions and checkers on the given ast.
     * @param node the node to check the context conditions on.
     */
    public void checkAll(si._ast.ASTSINode node) {
      // start the double-dispatch visitor
      // checks are performed in the visit methods.
      node.accept(getRealThis());
    }


      private List<si._cocos.SICoCoChecker> si__cocos_SICoCoChecker = new ArrayList<>();

    /**
     * Registers a checker whose context conditions will be executed once the
     * checker runs.<br/>
     * <br/>
     * Use this to compose checkers that already have cocos added. All
     * registered context conditions of all checkers are executed. By default
     * at least an empty checker is registered for super languages.
     * {@code si._cocos.SICoCoChecker} is used.
     * 
     * @param checker the checker to add.
     * @see #checkAll(ASTSINode)
     */
    public void addChecker(si._cocos.SICoCoChecker checker) {
      // note that getRealThis is not needed here.
      this.si__cocos_SICoCoChecker.add(checker);
    }


          private Collection<si._cocos.SIASTNumberCoCo> si__ast_ASTNumberCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSINode)
         */
        public SICoCoChecker addCoCo(si._cocos.SIASTNumberCoCo coco) {
            si__ast_ASTNumberCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(si._ast.ASTNumber node) {
            // execute all registered cocos of this checker
            for (si._cocos.SIASTNumberCoCo coco : si__ast_ASTNumberCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            si__cocos_SICoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<si._cocos.SIASTFloatPointUnitNumberCoCo> si__ast_ASTFloatPointUnitNumberCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSINode)
         */
        public SICoCoChecker addCoCo(si._cocos.SIASTFloatPointUnitNumberCoCo coco) {
            si__ast_ASTFloatPointUnitNumberCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(si._ast.ASTFloatPointUnitNumber node) {
            // execute all registered cocos of this checker
            for (si._cocos.SIASTFloatPointUnitNumberCoCo coco : si__ast_ASTFloatPointUnitNumberCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            si__cocos_SICoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<si._cocos.SIASTHexUnitNumberCoCo> si__ast_ASTHexUnitNumberCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSINode)
         */
        public SICoCoChecker addCoCo(si._cocos.SIASTHexUnitNumberCoCo coco) {
            si__ast_ASTHexUnitNumberCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(si._ast.ASTHexUnitNumber node) {
            // execute all registered cocos of this checker
            for (si._cocos.SIASTHexUnitNumberCoCo coco : si__ast_ASTHexUnitNumberCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            si__cocos_SICoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<si._cocos.SIASTUnitNumberCoCo> si__ast_ASTUnitNumberCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSINode)
         */
        public SICoCoChecker addCoCo(si._cocos.SIASTUnitNumberCoCo coco) {
            si__ast_ASTUnitNumberCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(si._ast.ASTUnitNumber node) {
            // execute all registered cocos of this checker
            for (si._cocos.SIASTUnitNumberCoCo coco : si__ast_ASTUnitNumberCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            si__cocos_SICoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<si._cocos.SIASTComplexNumberCoCo> si__ast_ASTComplexNumberCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSINode)
         */
        public SICoCoChecker addCoCo(si._cocos.SIASTComplexNumberCoCo coco) {
            si__ast_ASTComplexNumberCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(si._ast.ASTComplexNumber node) {
            // execute all registered cocos of this checker
            for (si._cocos.SIASTComplexNumberCoCo coco : si__ast_ASTComplexNumberCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            si__cocos_SICoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<si._cocos.SIASTSINodeCoCo> si__ast_ASTSINodeCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSINode)
         */
        public SICoCoChecker addCoCo(si._cocos.SIASTSINodeCoCo coco) {
            si__ast_ASTSINodeCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(si._ast.ASTSINode node) {
            // execute all registered cocos of this checker
            for (si._cocos.SIASTSINodeCoCo coco : si__ast_ASTSINodeCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            si__cocos_SICoCoChecker.stream().forEach(c -> c.visit(node));
        }
}
