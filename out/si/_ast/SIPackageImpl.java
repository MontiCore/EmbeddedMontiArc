/* generated from model SI*/
/* generated by template ast.Class*/
// Class declaration
/* generated by template ast_emf.EPackageImpl*/




package si._ast;

import java.util.*;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EOperation;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.impl.EPackageImpl;
import de.monticore.emf._ast.*;

public class SIPackageImpl extends EPackageImpl implements SIPackage {

  private EClass numberEClass = null;
  private EClass floatPointUnitNumberEClass = null;
  private EClass hexUnitNumberEClass = null;
  private EClass unitNumberEClass = null;
  private EClass complexNumberEClass = null;
  private EEnum constantsSIEEnum = null;
  
  private boolean isCreated = false;
    
  private boolean isInitialized = false;
    
  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
  */
  private SIPackageImpl() {
    super(eNS_URI, SINodeFactory.getFactory());
  }
    
  private static boolean isInited = false;
    
  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   * 
   * This method is used to initialize eInstance when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
  */
  public static SIPackage init() {
    if (isInited) {
      return (SIPackage)EPackage.Registry.INSTANCE.getEPackage(SIPackage.eNS_URI);
    }
        
    // Obtain or create and register package
    SIPackageImpl theSIPackage = (SIPackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof SIPackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new SIPackageImpl());

    isInited = true;
       
    // Obtain or create and register interdependencies
    ASTENodePackageImpl theASTENodePackage = (ASTENodePackageImpl) (EPackage.Registry.INSTANCE.getEPackage(ASTENodePackage.eNS_URI)  instanceof ASTENodePackage ? 
                                                                    EPackage.Registry.INSTANCE.getEPackage(ASTENodePackage.eNS_URI) : ASTENodePackage.eINSTANCE);
        
    
    // Create package meta-data objects
    theSIPackage.createPackageContents();
    theASTENodePackage.createPackageContents();
        
    // Initialize created meta-data
    theSIPackage.initializePackageContents();
    theASTENodePackage.initializePackageContents();
        
    // Mark meta-data to indicate it can't be changed
  //  theSIPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(SIPackage.eNS_URI, theSIPackage);
    return theSIPackage;
  }
    
  public SINodeFactory getSIFactory() {
    return (SINodeFactory)getEFactoryInstance();
  }
  
  public EEnum getConstantsSI(){
    return constantsSIEEnum;
  }
  
  public String getPackageName() {
    return "si";
  }
  
  public List<ASTEPackage> getASTESuperPackages() {
    List<ASTEPackage> eSuperPackages = new ArrayList<>();
    eSuperPackages.add((ASTEPackage)de.monticore.emf._ast.ASTENodePackage.eINSTANCE);
    return eSuperPackages;
  }
    
  public EClass getNumber() {
    return numberEClass;
  }
  public EClass getFloatPointUnitNumber() {
    return floatPointUnitNumberEClass;
  }
  public EClass getHexUnitNumber() {
    return hexUnitNumberEClass;
  }
  public EClass getUnitNumber() {
    return unitNumberEClass;
  }
  public EClass getComplexNumber() {
    return complexNumberEClass;
  }
   
  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTNumber_ComplexNumber()   { 
     
     return (EReference)numberEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTNumber_FloatPointUnitNumber()   { 
     
     return (EReference)numberEClass.getEStructuralFeatures().get(1);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTNumber_HexUnitNumber()   { 
     
     return (EReference)numberEClass.getEStructuralFeatures().get(2);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTNumber_UnitNumber()   { 
     
     return (EReference)numberEClass.getEStructuralFeatures().get(3);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTFloatPointUnitNumber_TFloatPointUnitNumber()   { 
     
     return (EAttribute)floatPointUnitNumberEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTHexUnitNumber_THexUnitNumber()   { 
     
     return (EAttribute)hexUnitNumberEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTUnitNumber_TUnitNumber()   { 
     
     return (EAttribute)unitNumberEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTComplexNumber_TComplexNumber()   { 
     
     return (EAttribute)complexNumberEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  void createPackageContents()   { 
     
     /* generated by template ast_emf.epackagemethods.CreatePackageContents*/
  
/**
 * Creates the meta-model objects for the package.  This method is
 * guarded to have no affect on any invocation but its first.
*/
    if (isCreated) {
      return;
    }
    isCreated = true;
    
    // Create classes and their features
    constantsSIEEnum = createEEnum(ConstantsSI);
  
    numberEClass = createEClass(ASTNumber);
    floatPointUnitNumberEClass = createEClass(ASTFloatPointUnitNumber);
    hexUnitNumberEClass = createEClass(ASTHexUnitNumber);
    unitNumberEClass = createEClass(ASTUnitNumber);
    complexNumberEClass = createEClass(ASTComplexNumber);
  
    createEReference(numberEClass, ASTNumber_ComplexNumber);
    createEReference(numberEClass, ASTNumber_FloatPointUnitNumber);
    createEReference(numberEClass, ASTNumber_HexUnitNumber);
    createEReference(numberEClass, ASTNumber_UnitNumber);
    createEAttribute(floatPointUnitNumberEClass, ASTFloatPointUnitNumber_TFloatPointUnitNumber);
    createEAttribute(hexUnitNumberEClass, ASTHexUnitNumber_THexUnitNumber);
    createEAttribute(unitNumberEClass, ASTUnitNumber_TUnitNumber);
    createEAttribute(complexNumberEClass, ASTComplexNumber_TComplexNumber);
  
   
  } 

  /* generated by template ast.ClassMethod*/
  
   public  void initializePackageContents()   { 
     
     /* generated by template ast_emf.epackagemethods.InitializePackageContents*/
  
/**
 * Complete the initialization of the package and its meta-model.  This
 * method is guarded to have no affect on any invocation but its first.
*/
    if (isInitialized) {
      return;
    }
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);
    
       
    EOperation op;
     // Obtain other dependent packages
    ASTENodePackage theASTENodePackage = (ASTENodePackage)EPackage.Registry.INSTANCE.getEPackage(ASTENodePackage.eNS_URI);      
  
    numberEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    floatPointUnitNumberEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    hexUnitNumberEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    unitNumberEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    complexNumberEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
  
    // Initialize classes and features; add operations and parameters
  
    // Initialize enums and add enum literals
    initEEnum(constantsSIEEnum, SILiterals.class, "SILiterals");
    
    initEClass(numberEClass, ASTNumber.class, "ASTNumber", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(floatPointUnitNumberEClass, ASTFloatPointUnitNumber.class, "ASTFloatPointUnitNumber", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(hexUnitNumberEClass, ASTHexUnitNumber.class, "ASTHexUnitNumber", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(unitNumberEClass, ASTUnitNumber.class, "ASTUnitNumber", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(complexNumberEClass, ASTComplexNumber.class, "ASTComplexNumber", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getASTNumber_ComplexNumber(), this.getComplexNumber(), null, "ComplexNumber", null,
      0, 1, ASTNumber.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTNumber_FloatPointUnitNumber(), this.getFloatPointUnitNumber(), null, "FloatPointUnitNumber", null,
      0, 1, ASTNumber.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTNumber_HexUnitNumber(), this.getHexUnitNumber(), null, "HexUnitNumber", null,
      0, 1, ASTNumber.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTNumber_UnitNumber(), this.getUnitNumber(), null, "UnitNumber", null,
      0, 1, ASTNumber.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTFloatPointUnitNumber_TFloatPointUnitNumber(), ecorePackage.getEString(), "TFloatPointUnitNumber", null, 
      0, 1, ASTFloatPointUnitNumber.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTHexUnitNumber_THexUnitNumber(), ecorePackage.getEString(), "THexUnitNumber", null, 
      0, 1, ASTHexUnitNumber.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTUnitNumber_TUnitNumber(), ecorePackage.getEString(), "TUnitNumber", null, 
      0, 1, ASTUnitNumber.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTComplexNumber_TComplexNumber(), ecorePackage.getEString(), "TComplexNumber", null, 
      0, 1, ASTComplexNumber.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
  
   
  
    // Create resource
    createResource(eNS_URI);
    

  } 

   
}
