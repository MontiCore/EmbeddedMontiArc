/* generated from model SI*/
/* generated by template ast.AstClass*/

package si._ast;

/* generated by template ast_emf.AstEImports*/
import java.util.Optional;
import java.util.Iterator;
import de.se_rwth.commons.logging.Log;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;

 public  class ASTNumber extends /* generated by template ast.AstSuperTypes*/
de.monticore.emf._ast.ASTECNode implements  ASTSINode
 {
  /* generated by template ast.Attribute*/
  
   protected  Optional<si._ast.ASTFloatPointUnitNumber> floatPointUnitNumber = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<si._ast.ASTHexUnitNumber> hexUnitNumber = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<si._ast.ASTComplexNumber> complexNumber = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<si._ast.ASTUnitNumber> unitNumber = Optional.empty();

    /* generated by template ast.Constructor*/
  
   protected  ASTNumber (/* generated by template ast.ParametersDeclaration*/
    // Parameters declaration
 
    )  
  /* generated by template ast.EmptyMethodBody*/

  { // empty body 
  }


    /* generated by template ast.Constructor*/
  
   protected  ASTNumber (/* generated by template ast.ConstructorParametersDeclaration*/
     si._ast.ASTFloatPointUnitNumber floatPointUnitNumber 
    ,
     si._ast.ASTHexUnitNumber hexUnitNumber 
    ,
     si._ast.ASTComplexNumber complexNumber 
    ,
     si._ast.ASTUnitNumber unitNumber 
 
    )  
  /* generated by template ast.ConstructorAttributesSetter*/
  {
    setFloatPointUnitNumber(floatPointUnitNumber);
    setHexUnitNumber(hexUnitNumber);
    setComplexNumber(complexNumber);
    setUnitNumber(unitNumber);
  }


  
    /* generated by template ast.ClassMethod*/
  
   public  void accept(si._visitor.SIVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_732 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.Accept*/

      visitor.handle(this);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEquals(Object o,boolean forceSameOrder)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_008 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.DeepEqualsWithOrder*/

      ASTNumber comp;
    if ((o instanceof ASTNumber)) {
      comp = (ASTNumber) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing floatPointUnitNumber   
    if ( this.floatPointUnitNumber.isPresent() != comp.floatPointUnitNumber.isPresent() ||
      (this.floatPointUnitNumber.isPresent() && !this.floatPointUnitNumber.get().deepEquals(comp.floatPointUnitNumber.get())) ) {
      return false;
    }
    // comparing hexUnitNumber   
    if ( this.hexUnitNumber.isPresent() != comp.hexUnitNumber.isPresent() ||
      (this.hexUnitNumber.isPresent() && !this.hexUnitNumber.get().deepEquals(comp.hexUnitNumber.get())) ) {
      return false;
    }
    // comparing complexNumber   
    if ( this.complexNumber.isPresent() != comp.complexNumber.isPresent() ||
      (this.complexNumber.isPresent() && !this.complexNumber.get().deepEquals(comp.complexNumber.get())) ) {
      return false;
    }
    // comparing unitNumber   
    if ( this.unitNumber.isPresent() != comp.unitNumber.isPresent() ||
      (this.unitNumber.isPresent() && !this.unitNumber.get().deepEquals(comp.unitNumber.get())) ) {
      return false;
    }
    return true;     


  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEquals(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_241 Parameter 'o' must not be null.");

     return deepEquals(o, true);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEqualsWithComments(Object o,boolean forceSameOrder)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_169 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.DeepEqualsWithComments*/

      ASTNumber comp;
    if ((o instanceof ASTNumber)) {
      comp = (ASTNumber) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    // comparing floatPointUnitNumber
    if ( this.floatPointUnitNumber.isPresent() != comp.floatPointUnitNumber.isPresent() ||
      (this.floatPointUnitNumber.isPresent() && !this.floatPointUnitNumber.get().deepEqualsWithComments(comp.floatPointUnitNumber.get())) ) {
      return false;
    }
    // comparing hexUnitNumber
    if ( this.hexUnitNumber.isPresent() != comp.hexUnitNumber.isPresent() ||
      (this.hexUnitNumber.isPresent() && !this.hexUnitNumber.get().deepEqualsWithComments(comp.hexUnitNumber.get())) ) {
      return false;
    }
    // comparing complexNumber
    if ( this.complexNumber.isPresent() != comp.complexNumber.isPresent() ||
      (this.complexNumber.isPresent() && !this.complexNumber.get().deepEqualsWithComments(comp.complexNumber.get())) ) {
      return false;
    }
    // comparing unitNumber
    if ( this.unitNumber.isPresent() != comp.unitNumber.isPresent() ||
      (this.unitNumber.isPresent() && !this.unitNumber.get().deepEqualsWithComments(comp.unitNumber.get())) ) {
      return false;
    }
    return true;     

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEqualsWithComments(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_630 Parameter 'o' must not be null.");

     return deepEqualsWithComments(o, true);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean equalAttributes(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_538 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.EqualAttributes*/

      ASTNumber comp;
    if ((o instanceof ASTNumber)) {
      comp = (ASTNumber) o;
    } else {
      return false;
    }
    return true;     


  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean equalsWithComments(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_667 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.EqualsWithComments*/

      ASTNumber comp;
    if ((o instanceof ASTNumber)) {
      comp = (ASTNumber) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreComments().size() == comp.get_PreComments().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreComments().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreComments().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostComments().size() == comp.get_PostComments().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostComments().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostComments().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  java.util.Collection<de.monticore.ast.ASTNode> get_Children()   { 
     
     /* generated by template ast.additionalmethods.GetChildren*/

    java.util.LinkedList<de.monticore.ast.ASTNode> result = new java.util.LinkedList<de.monticore.ast.ASTNode>();
        if (getFloatPointUnitNumber().isPresent()) {
          result.add(getFloatPointUnitNumber().get());
        }
        if (getHexUnitNumber().isPresent()) {
          result.add(getHexUnitNumber().get());
        }
        if (getComplexNumber().isPresent()) {
          result.add(getComplexNumber().get());
        }
        if (getUnitNumber().isPresent()) {
          result.add(getUnitNumber().get());
        }
    return result;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void remove_Child(de.monticore.ast.ASTNode child)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(child, "0xA7006_413 Parameter 'child' must not be null.");

     /* generated by template ast.additionalmethods.RemoveChild*/

      if (getFloatPointUnitNumber().isPresent() && getFloatPointUnitNumber().get() == child) {
        setFloatPointUnitNumber(null);
      }
      if (getHexUnitNumber().isPresent() && getHexUnitNumber().get() == child) {
        setHexUnitNumber(null);
      }
      if (getComplexNumber().isPresent() && getComplexNumber().get() == child) {
        setComplexNumber(null);
      }
      if (getUnitNumber().isPresent() && getUnitNumber().get() == child) {
        setUnitNumber(null);
      }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  static  Builder getBuilder()   { 
     
     return new Builder();

  } 

    /* generated by template ast.ClassMethod*/
  
   public  ASTNumber deepClone()   { 
     
     return deepClone(_construct());

  } 

    /* generated by template ast.ClassMethod*/
  
   public  ASTNumber deepClone(ASTNumber result)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(result, "0xA7006_439 Parameter 'result' must not be null.");

     /* generated by template ast.additionalmethods.DeepCloneWithParameters*/
  
    super.deepClone(result);
    
    result.floatPointUnitNumber = this.floatPointUnitNumber.isPresent()? Optional.ofNullable((si._ast.ASTFloatPointUnitNumber)this.floatPointUnitNumber.get().deepClone()) : Optional.empty();
    result.hexUnitNumber = this.hexUnitNumber.isPresent()? Optional.ofNullable((si._ast.ASTHexUnitNumber)this.hexUnitNumber.get().deepClone()) : Optional.empty();
    result.complexNumber = this.complexNumber.isPresent()? Optional.ofNullable((si._ast.ASTComplexNumber)this.complexNumber.get().deepClone()) : Optional.empty();
    result.unitNumber = this.unitNumber.isPresent()? Optional.ofNullable((si._ast.ASTUnitNumber)this.unitNumber.get().deepClone()) : Optional.empty();
    
    return result;

  } 

    /* generated by template ast.ClassMethod*/
  
   protected  ASTNumber _construct()   { 
     
     return new ASTNumber();

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<si._ast.ASTFloatPointUnitNumber> getFloatPointUnitNumber()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.floatPointUnitNumber;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<si._ast.ASTHexUnitNumber> getHexUnitNumber()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.hexUnitNumber;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<si._ast.ASTComplexNumber> getComplexNumber()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.complexNumber;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<si._ast.ASTUnitNumber> getUnitNumber()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.unitNumber;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setComplexNumber(si._ast.ASTComplexNumber complexNumber)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    si._ast.ASTComplexNumber oldComplexNumber = this.complexNumber.isPresent()? this.complexNumber.get() : null;
    this.complexNumber = Optional.ofNullable(complexNumber);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SIPackage.ASTNumber_ComplexNumber, oldComplexNumber, complexNumber));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean complexNumberIsPresent()   { 
     
       return complexNumber.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setFloatPointUnitNumber(si._ast.ASTFloatPointUnitNumber floatPointUnitNumber)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    si._ast.ASTFloatPointUnitNumber oldFloatPointUnitNumber = this.floatPointUnitNumber.isPresent()? this.floatPointUnitNumber.get() : null;
    this.floatPointUnitNumber = Optional.ofNullable(floatPointUnitNumber);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SIPackage.ASTNumber_FloatPointUnitNumber, oldFloatPointUnitNumber, floatPointUnitNumber));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean floatPointUnitNumberIsPresent()   { 
     
       return floatPointUnitNumber.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setHexUnitNumber(si._ast.ASTHexUnitNumber hexUnitNumber)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    si._ast.ASTHexUnitNumber oldHexUnitNumber = this.hexUnitNumber.isPresent()? this.hexUnitNumber.get() : null;
    this.hexUnitNumber = Optional.ofNullable(hexUnitNumber);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SIPackage.ASTNumber_HexUnitNumber, oldHexUnitNumber, hexUnitNumber));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean hexUnitNumberIsPresent()   { 
     
       return hexUnitNumber.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setUnitNumber(si._ast.ASTUnitNumber unitNumber)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    si._ast.ASTUnitNumber oldUnitNumber = this.unitNumber.isPresent()? this.unitNumber.get() : null;
    this.unitNumber = Optional.ofNullable(unitNumber);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SIPackage.ASTNumber_UnitNumber, oldUnitNumber, unitNumber));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean unitNumberIsPresent()   { 
     
       return unitNumber.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Object eGet(int featureID,boolean resolve,boolean coreType)   { 
     
     /* generated by template ast_emf.additionalmethods.EGet*/
  
    switch (featureID) {
      case SIPackage.ASTNumber_FloatPointUnitNumber:
         return getFloatPointUnitNumber().isPresent()? getFloatPointUnitNumber().get() : null;
      case SIPackage.ASTNumber_HexUnitNumber:
         return getHexUnitNumber().isPresent()? getHexUnitNumber().get() : null;
      case SIPackage.ASTNumber_ComplexNumber:
         return getComplexNumber().isPresent()? getComplexNumber().get() : null;
      case SIPackage.ASTNumber_UnitNumber:
         return getUnitNumber().isPresent()? getUnitNumber().get() : null;
    }
    return eDynamicGet(featureID, resolve, coreType);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  void eSet(int featureID,Object newValue)   { 
     
     /* generated by template ast_emf.additionalmethods.ESet*/
  
    switch (featureID) {
      case SIPackage.ASTNumber_FloatPointUnitNumber:
        setFloatPointUnitNumber((si._ast.ASTFloatPointUnitNumber)newValue);
        return;
      case SIPackage.ASTNumber_HexUnitNumber:
        setHexUnitNumber((si._ast.ASTHexUnitNumber)newValue);
        return;
      case SIPackage.ASTNumber_ComplexNumber:
        setComplexNumber((si._ast.ASTComplexNumber)newValue);
        return;
      case SIPackage.ASTNumber_UnitNumber:
        setUnitNumber((si._ast.ASTUnitNumber)newValue);
        return;
    }
    eDynamicSet(featureID, newValue);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  void eUnset(int featureID)   { 
     
     /* generated by template ast_emf.additionalmethods.EUnset*/
 
    switch (featureID) {
      case SIPackage.ASTNumber_FloatPointUnitNumber:
        setFloatPointUnitNumber(null);
      return;
      case SIPackage.ASTNumber_HexUnitNumber:
        setHexUnitNumber(null);
      return;
      case SIPackage.ASTNumber_ComplexNumber:
        setComplexNumber(null);
      return;
      case SIPackage.ASTNumber_UnitNumber:
        setUnitNumber(null);
      return;
    }
    eDynamicUnset(featureID);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean eIsSet(int featureID)   { 
     
     /* generated by template ast_emf.additionalmethods.EIsSet*/
 
    switch (featureID) {
      case SIPackage.ASTNumber_FloatPointUnitNumber:
        return getFloatPointUnitNumber().isPresent();
      case SIPackage.ASTNumber_HexUnitNumber:
        return getHexUnitNumber().isPresent();
      case SIPackage.ASTNumber_ComplexNumber:
        return getComplexNumber().isPresent();
      case SIPackage.ASTNumber_UnitNumber:
        return getUnitNumber().isPresent();
    }
    return eDynamicIsSet(featureID);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  int eBaseStructuralFeatureID(int featureID,Class<?> baseClass)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(baseClass, "0xA7006_419 Parameter 'baseClass' must not be null.");

     /* generated by template ast_emf.additionalmethods.EStructuralFeature*/
  
    return super.eBaseStructuralFeatureID(featureID, baseClass);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  int eDerivedStructuralFeatureID(int featureID,Class<?> baseClass)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(baseClass, "0xA7006_225 Parameter 'baseClass' must not be null.");

     /* generated by template ast_emf.additionalmethods.EStructuralFeature*/
  
    return super.eDerivedStructuralFeatureID(featureID, baseClass);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  String toString()   { 
     
     /* generated by template ast_emf.additionalmethods.EToString*/
  
    if (eIsProxy()) {
      return super.toString();
    }
    StringBuffer result = new StringBuffer(getClass().getSimpleName());
    if (complexNumber.isPresent()) {
      result.append(" ComplexNumber: ");
      result.append(complexNumber.get());
    } 
    if (floatPointUnitNumber.isPresent()) {
      result.append(" FloatPointUnitNumber: ");
      result.append(floatPointUnitNumber.get());
    } 
    if (hexUnitNumber.isPresent()) {
      result.append(" HexUnitNumber: ");
      result.append(hexUnitNumber.get());
    } 
    if (unitNumber.isPresent()) {
      result.append(" UnitNumber: ");
      result.append(unitNumber.get());
    } 
    return result.toString();
  } 

    /* generated by template ast.ClassMethod*/
  
   protected  EClass eStaticClass()   { 
     
     return SIPackage.Literals.ASTNumber;
  } 

   
  /* generated by template ast.ClassContent*/
  // Class content

    /* generated by template ast.AstBuilder*/

 /**
   * Builder for {@link ASTNumber}.
   */
  public static class Builder  {
    /* generated by template ast.BuilderAttribute*/
     protected  si._ast.ASTFloatPointUnitNumber floatPointUnitNumber;

    /* generated by template ast.BuilderAttribute*/
     protected  si._ast.ASTHexUnitNumber hexUnitNumber;

    /* generated by template ast.BuilderAttribute*/
     protected  si._ast.ASTComplexNumber complexNumber;

    /* generated by template ast.BuilderAttribute*/
     protected  si._ast.ASTUnitNumber unitNumber;

    public ASTNumber build() {
      return new ASTNumber (/* generated by template ast.BuilderConstructorParametersDeclaration*/
  
        this.floatPointUnitNumber 
       ,
       this.hexUnitNumber 
       ,
       this.complexNumber 
       ,
       this.unitNumber 

      );
    }
    /* generated by template ast.AstBuilderAttributeSetter*/
    public Builder floatPointUnitNumber(si._ast.ASTFloatPointUnitNumber floatPointUnitNumber) {
      this.floatPointUnitNumber = floatPointUnitNumber;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder hexUnitNumber(si._ast.ASTHexUnitNumber hexUnitNumber) {
      this.hexUnitNumber = hexUnitNumber;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder complexNumber(si._ast.ASTComplexNumber complexNumber) {
      this.complexNumber = complexNumber;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder unitNumber(si._ast.ASTUnitNumber unitNumber) {
      this.unitNumber = unitNumber;
      return this;
    }

  }    

  
}
