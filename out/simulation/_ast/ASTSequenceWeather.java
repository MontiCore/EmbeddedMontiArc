/* generated from model Simulation*/
/* generated by template ast.AstClass*/

package simulation._ast;

/* generated by template ast_emf.AstEImports*/
import java.util.Optional;
import java.util.Iterator;
import de.se_rwth.commons.logging.Log;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;

 public  class ASTSequenceWeather extends /* generated by template ast.AstSuperTypes*/
de.monticore.emf._ast.ASTECNode implements  ASTSimulationNode
 {
  /* generated by template ast.Attribute*/
  
   protected  java.util.List<simulation._ast.ASTWeatherObj> randomWeatherObj = new EObjectContainmentEList<ASTWeatherObj>(ASTWeatherObj.class, this, SimulationPackage.ASTSequenceWeather_RandomWeatherObj);

  /* generated by template ast.Attribute*/
  
   protected  Optional<si._ast.ASTUnitNumber> sequenceDuration = Optional.empty();

    /* generated by template ast.Constructor*/
  
   protected  ASTSequenceWeather (/* generated by template ast.ParametersDeclaration*/
    // Parameters declaration
 
    )  
  /* generated by template ast.EmptyMethodBody*/

  { // empty body 
  }


    /* generated by template ast.Constructor*/
  
   protected  ASTSequenceWeather (/* generated by template ast.ConstructorParametersDeclaration*/
     java.util.List<simulation._ast.ASTWeatherObj> randomWeatherObj 
    ,
     si._ast.ASTUnitNumber sequenceDuration 
 
    )  
  /* generated by template ast.ConstructorAttributesSetter*/
  {
    setRandomWeatherObj(randomWeatherObj);
    setSequenceDuration(sequenceDuration);
  }


  
    /* generated by template ast.ClassMethod*/
  
   public  void accept(simulation._visitor.SimulationVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_801 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.Accept*/

      visitor.handle(this);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void accept(weather._visitor.WeatherVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_161 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.AcceptSuper*/

    if (visitor instanceof simulation._visitor.SimulationVisitor) {
      accept((simulation._visitor.SimulationVisitor) visitor);      
    } else {
      de.se_rwth.commons.logging.Log.error("0xA7000_690AST node type ASTSequenceWeather of the sub language Simulation expected a visitor of type simulation._visitor.SimulationVisitor, but got weather._visitor.WeatherVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
    }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void accept(si._visitor.SIVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_813 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.AcceptSuper*/

    if (visitor instanceof simulation._visitor.SimulationVisitor) {
      accept((simulation._visitor.SimulationVisitor) visitor);      
    } else {
      de.se_rwth.commons.logging.Log.error("0xA7000_775AST node type ASTSequenceWeather of the sub language Simulation expected a visitor of type simulation._visitor.SimulationVisitor, but got si._visitor.SIVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
    }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEquals(Object o,boolean forceSameOrder)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_808 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.DeepEqualsWithOrder*/

      ASTSequenceWeather comp;
    if ((o instanceof ASTSequenceWeather)) {
      comp = (ASTSequenceWeather) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing randomWeatherObj
    if (this.randomWeatherObj.size() != comp.randomWeatherObj.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<simulation._ast.ASTWeatherObj> it1 = this.randomWeatherObj.iterator();
        Iterator<simulation._ast.ASTWeatherObj> it2 = comp.randomWeatherObj.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<simulation._ast.ASTWeatherObj> it1 = this.randomWeatherObj.iterator();
        while (it1.hasNext()) {
          simulation._ast.ASTWeatherObj oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<simulation._ast.ASTWeatherObj> it2 = comp.randomWeatherObj.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing sequenceDuration   
    if ( this.sequenceDuration.isPresent() != comp.sequenceDuration.isPresent() ||
      (this.sequenceDuration.isPresent() && !this.sequenceDuration.get().deepEquals(comp.sequenceDuration.get())) ) {
      return false;
    }
    return true;     


  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEquals(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_731 Parameter 'o' must not be null.");

     return deepEquals(o, true);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEqualsWithComments(Object o,boolean forceSameOrder)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_343 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.DeepEqualsWithComments*/

      ASTSequenceWeather comp;
    if ((o instanceof ASTSequenceWeather)) {
      comp = (ASTSequenceWeather) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    // comparing randomWeatherObj
    if (this.randomWeatherObj.size() != comp.randomWeatherObj.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<simulation._ast.ASTWeatherObj> it1 = this.randomWeatherObj.iterator();
        Iterator<simulation._ast.ASTWeatherObj> it2 = comp.randomWeatherObj.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<simulation._ast.ASTWeatherObj> it1 = this.randomWeatherObj.iterator();
        while (it1.hasNext()) {
          simulation._ast.ASTWeatherObj oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<simulation._ast.ASTWeatherObj> it2 = comp.randomWeatherObj.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing sequenceDuration
    if ( this.sequenceDuration.isPresent() != comp.sequenceDuration.isPresent() ||
      (this.sequenceDuration.isPresent() && !this.sequenceDuration.get().deepEqualsWithComments(comp.sequenceDuration.get())) ) {
      return false;
    }
    return true;     

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEqualsWithComments(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_849 Parameter 'o' must not be null.");

     return deepEqualsWithComments(o, true);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean equalAttributes(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_688 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.EqualAttributes*/

      ASTSequenceWeather comp;
    if ((o instanceof ASTSequenceWeather)) {
      comp = (ASTSequenceWeather) o;
    } else {
      return false;
    }
    return true;     


  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean equalsWithComments(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_567 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.EqualsWithComments*/

      ASTSequenceWeather comp;
    if ((o instanceof ASTSequenceWeather)) {
      comp = (ASTSequenceWeather) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreComments().size() == comp.get_PreComments().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreComments().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreComments().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostComments().size() == comp.get_PostComments().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostComments().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostComments().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  java.util.Collection<de.monticore.ast.ASTNode> get_Children()   { 
     
     /* generated by template ast.additionalmethods.GetChildren*/

    java.util.LinkedList<de.monticore.ast.ASTNode> result = new java.util.LinkedList<de.monticore.ast.ASTNode>();
        result.addAll(getRandomWeatherObj());
        if (getSequenceDuration().isPresent()) {
          result.add(getSequenceDuration().get());
        }
    return result;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void remove_Child(de.monticore.ast.ASTNode child)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(child, "0xA7006_272 Parameter 'child' must not be null.");

     /* generated by template ast.additionalmethods.RemoveChild*/

      if (getRandomWeatherObj().contains(child)) {
        getRandomWeatherObj().remove(child);
      }
      if (getSequenceDuration().isPresent() && getSequenceDuration().get() == child) {
        setSequenceDuration(null);
      }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  static  Builder getBuilder()   { 
     
     return new Builder();

  } 

    /* generated by template ast.ClassMethod*/
  
   public  ASTSequenceWeather deepClone()   { 
     
     return deepClone(_construct());

  } 

    /* generated by template ast.ClassMethod*/
  
   public  ASTSequenceWeather deepClone(ASTSequenceWeather result)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(result, "0xA7006_947 Parameter 'result' must not be null.");

     /* generated by template ast.additionalmethods.DeepCloneWithParameters*/
  
    super.deepClone(result);
    
    result.randomWeatherObj = com.google.common.collect.Lists.newArrayList();
    this.randomWeatherObj.forEach(s -> result.randomWeatherObj.add(s.deepClone()));
    result.sequenceDuration = this.sequenceDuration.isPresent()? Optional.ofNullable((si._ast.ASTUnitNumber)this.sequenceDuration.get().deepClone()) : Optional.empty();
    
    return result;

  } 

    /* generated by template ast.ClassMethod*/
  
   protected  ASTSequenceWeather _construct()   { 
     
     return new ASTSequenceWeather();

  } 

    /* generated by template ast.ClassMethod*/
  
   public  java.util.List<simulation._ast.ASTWeatherObj> getRandomWeatherObj()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.randomWeatherObj;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<si._ast.ASTUnitNumber> getSequenceDuration()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.sequenceDuration;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setRandomWeatherObj(java.util.List<simulation._ast.ASTWeatherObj> randomWeatherObj)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(randomWeatherObj, "0xA7006_924 Parameter 'randomWeatherObj' must not be null.");

     /* generated by template ast_emf.additionalmethods.Set*/

    if (randomWeatherObj.isEmpty() && this.randomWeatherObj.isEmpty()) {
      return;
    }  
    java.util.List<simulation._ast.ASTWeatherObj> oldRandomWeatherObj = this.randomWeatherObj;
    this.randomWeatherObj = randomWeatherObj;
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTSequenceWeather_RandomWeatherObj, oldRandomWeatherObj, randomWeatherObj));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setSequenceDuration(si._ast.ASTUnitNumber sequenceDuration)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    si._ast.ASTUnitNumber oldSequenceDuration = this.sequenceDuration.isPresent()? this.sequenceDuration.get() : null;
    this.sequenceDuration = Optional.ofNullable(sequenceDuration);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTSequenceWeather_SequenceDuration, oldSequenceDuration, sequenceDuration));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean sequenceDurationIsPresent()   { 
     
       return sequenceDuration.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Object eGet(int featureID,boolean resolve,boolean coreType)   { 
     
     /* generated by template ast_emf.additionalmethods.EGet*/
  
    switch (featureID) {
      case SimulationPackage.ASTSequenceWeather_RandomWeatherObj:
         return getRandomWeatherObj();
      case SimulationPackage.ASTSequenceWeather_SequenceDuration:
         return getSequenceDuration().isPresent()? getSequenceDuration().get() : null;
    }
    return eDynamicGet(featureID, resolve, coreType);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  void eSet(int featureID,Object newValue)   { 
     
     /* generated by template ast_emf.additionalmethods.ESet*/
  
    switch (featureID) {
      case SimulationPackage.ASTSequenceWeather_RandomWeatherObj:
        setRandomWeatherObj((java.util.List<simulation._ast.ASTWeatherObj>)newValue);
        return;
      case SimulationPackage.ASTSequenceWeather_SequenceDuration:
        setSequenceDuration((si._ast.ASTUnitNumber)newValue);
        return;
    }
    eDynamicSet(featureID, newValue);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  void eUnset(int featureID)   { 
     
     /* generated by template ast_emf.additionalmethods.EUnset*/
 
    switch (featureID) {
      case SimulationPackage.ASTSequenceWeather_RandomWeatherObj:
        randomWeatherObj.clear();
      return;
      case SimulationPackage.ASTSequenceWeather_SequenceDuration:
        setSequenceDuration(null);
      return;
    }
    eDynamicUnset(featureID);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean eIsSet(int featureID)   { 
     
     /* generated by template ast_emf.additionalmethods.EIsSet*/
 
    switch (featureID) {
      case SimulationPackage.ASTSequenceWeather_RandomWeatherObj:
        return !getRandomWeatherObj().isEmpty();
      case SimulationPackage.ASTSequenceWeather_SequenceDuration:
        return getSequenceDuration().isPresent();
    }
    return eDynamicIsSet(featureID);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  int eBaseStructuralFeatureID(int featureID,Class<?> baseClass)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(baseClass, "0xA7006_398 Parameter 'baseClass' must not be null.");

     /* generated by template ast_emf.additionalmethods.EStructuralFeature*/
  
    return super.eBaseStructuralFeatureID(featureID, baseClass);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  int eDerivedStructuralFeatureID(int featureID,Class<?> baseClass)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(baseClass, "0xA7006_083 Parameter 'baseClass' must not be null.");

     /* generated by template ast_emf.additionalmethods.EStructuralFeature*/
  
    return super.eDerivedStructuralFeatureID(featureID, baseClass);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  String toString()   { 
     
     /* generated by template ast_emf.additionalmethods.EToString*/
  
    if (eIsProxy()) {
      return super.toString();
    }
    StringBuffer result = new StringBuffer(getClass().getSimpleName());
    if (!randomWeatherObj.isEmpty()) {
      result.append(" RandomWeatherObj: ");
      result.append(randomWeatherObj);
    } 
    if (sequenceDuration.isPresent()) {
      result.append(" SequenceDuration: ");
      result.append(sequenceDuration.get());
    } 
    return result.toString();
  } 

    /* generated by template ast.ClassMethod*/
  
   protected  EClass eStaticClass()   { 
     
     return SimulationPackage.Literals.ASTSequenceWeather;
  } 

   
  /* generated by template ast.ClassContent*/
  // Class content

    /* generated by template ast.AstBuilder*/

 /**
   * Builder for {@link ASTSequenceWeather}.
   */
  public static class Builder  {
    /* generated by template ast.BuilderAttribute*/
     protected  java.util.List<simulation._ast.ASTWeatherObj> randomWeatherObj = new java.util.ArrayList<>();

    /* generated by template ast.BuilderAttribute*/
     protected  si._ast.ASTUnitNumber sequenceDuration;

    public ASTSequenceWeather build() {
      return new ASTSequenceWeather (/* generated by template ast.BuilderConstructorParametersDeclaration*/
  
        this.randomWeatherObj 
       ,
       this.sequenceDuration 

      );
    }
    /* generated by template ast.AstBuilderAttributeSetter*/
    public Builder randomWeatherObj(java.util.List<simulation._ast.ASTWeatherObj> randomWeatherObj) {
      this.randomWeatherObj = randomWeatherObj;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder sequenceDuration(si._ast.ASTUnitNumber sequenceDuration) {
      this.sequenceDuration = sequenceDuration;
      return this;
    }

  }    

  
}
