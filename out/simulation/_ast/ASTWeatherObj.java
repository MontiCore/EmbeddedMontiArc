/* generated from model Simulation*/
/* generated by template ast.AstClass*/

package simulation._ast;

/* generated by template ast_emf.AstEImports*/
import java.util.Optional;
import java.util.Iterator;
import de.se_rwth.commons.logging.Log;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;

 public  class ASTWeatherObj extends /* generated by template ast.AstSuperTypes*/
de.monticore.emf._ast.ASTECNode implements  ASTSimulationNode
 {
  /* generated by template ast.Attribute*/
  
   protected  weather._ast.ASTTemperature temperature;

  /* generated by template ast.Attribute*/
  
   protected  weather._ast.ASTClouding clouding;

  /* generated by template ast.Attribute*/
  
   protected  weather._ast.ASTSight sight;

  /* generated by template ast.Attribute*/
  
   protected  weather._ast.ASTPrecipitationtype precipitationtype;

  /* generated by template ast.Attribute*/
  
   protected  Optional<weather._ast.ASTHumidity> humidity = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<weather._ast.ASTPressure> pressure = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<weather._ast.ASTWindstrength> windstrength = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<weather._ast.ASTWinddirection> winddirection = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<weather._ast.ASTPrecipitationamount> precipitationamount = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  java.util.List<weather._ast.ASTWeatherPhenomena> weatherPhenomenas = new EDataTypeEList<weather._ast.ASTWeatherPhenomena>(weather._ast.ASTWeatherPhenomena.class, this, SimulationPackage.ASTWeatherObj_WeatherPhenomenas);

  /* generated by template ast.Attribute*/
  
   protected  java.util.List<weather._ast.ASTOpticalPhenomena> opticalPhenomenas = new EDataTypeEList<weather._ast.ASTOpticalPhenomena>(weather._ast.ASTOpticalPhenomena.class, this, SimulationPackage.ASTWeatherObj_OpticalPhenomenas);

  /* generated by template ast.Attribute*/
  
   protected  java.util.List<weather._ast.ASTArtificialPhenomena> artificialPhenomenas = new EDataTypeEList<weather._ast.ASTArtificialPhenomena>(weather._ast.ASTArtificialPhenomena.class, this, SimulationPackage.ASTWeatherObj_ArtificialPhenomenas);

    /* generated by template ast.Constructor*/
  
   protected  ASTWeatherObj (/* generated by template ast.ParametersDeclaration*/
    // Parameters declaration
 
    )  
  /* generated by template ast.EmptyMethodBody*/

  { // empty body 
  }


    /* generated by template ast.Constructor*/
  
   protected  ASTWeatherObj (/* generated by template ast.ConstructorParametersDeclaration*/
     weather._ast.ASTTemperature temperature 
    ,
     weather._ast.ASTClouding clouding 
    ,
     weather._ast.ASTSight sight 
    ,
     weather._ast.ASTPrecipitationtype precipitationtype 
    ,
     weather._ast.ASTHumidity humidity 
    ,
     weather._ast.ASTPressure pressure 
    ,
     weather._ast.ASTWindstrength windstrength 
    ,
     weather._ast.ASTWinddirection winddirection 
    ,
     weather._ast.ASTPrecipitationamount precipitationamount 
    ,
     java.util.List<weather._ast.ASTWeatherPhenomena> weatherPhenomenas 
    ,
     java.util.List<weather._ast.ASTOpticalPhenomena> opticalPhenomenas 
    ,
     java.util.List<weather._ast.ASTArtificialPhenomena> artificialPhenomenas 
 
    )  
  /* generated by template ast.ConstructorAttributesSetter*/
  {
    setTemperature(temperature);
    setClouding(clouding);
    setSight(sight);
    setPrecipitationtype(precipitationtype);
    setHumidity(humidity);
    setPressure(pressure);
    setWindstrength(windstrength);
    setWinddirection(winddirection);
    setPrecipitationamount(precipitationamount);
    setWeatherPhenomenas(weatherPhenomenas);
    setOpticalPhenomenas(opticalPhenomenas);
    setArtificialPhenomenas(artificialPhenomenas);
  }


  
    /* generated by template ast.ClassMethod*/
  
   public  void accept(simulation._visitor.SimulationVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_202 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.Accept*/

      visitor.handle(this);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void accept(weather._visitor.WeatherVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_997 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.AcceptSuper*/

    if (visitor instanceof simulation._visitor.SimulationVisitor) {
      accept((simulation._visitor.SimulationVisitor) visitor);      
    } else {
      de.se_rwth.commons.logging.Log.error("0xA7000_942AST node type ASTWeatherObj of the sub language Simulation expected a visitor of type simulation._visitor.SimulationVisitor, but got weather._visitor.WeatherVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
    }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void accept(si._visitor.SIVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_569 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.AcceptSuper*/

    if (visitor instanceof simulation._visitor.SimulationVisitor) {
      accept((simulation._visitor.SimulationVisitor) visitor);      
    } else {
      de.se_rwth.commons.logging.Log.error("0xA7000_537AST node type ASTWeatherObj of the sub language Simulation expected a visitor of type simulation._visitor.SimulationVisitor, but got si._visitor.SIVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
    }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEquals(Object o,boolean forceSameOrder)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_598 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.DeepEqualsWithOrder*/

      ASTWeatherObj comp;
    if ((o instanceof ASTWeatherObj)) {
      comp = (ASTWeatherObj) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing temperature
    if ( (this.temperature == null && comp.temperature != null) || 
      (this.temperature != null && !this.temperature.deepEquals(comp.temperature)) ) {
      return false;
    }
    // comparing clouding
    if ( (this.clouding == null && comp.clouding != null) || 
      (this.clouding != null && !this.clouding.deepEquals(comp.clouding)) ) {
      return false;
    }
    // comparing sight
    if ( (this.sight == null && comp.sight != null) || 
      (this.sight != null && !this.sight.deepEquals(comp.sight)) ) {
      return false;
    }
    // comparing precipitationtype
    if ( (this.precipitationtype == null && comp.precipitationtype != null) || 
      (this.precipitationtype != null && !this.precipitationtype.deepEquals(comp.precipitationtype)) ) {
      return false;
    }
    // comparing humidity   
    if ( this.humidity.isPresent() != comp.humidity.isPresent() ||
      (this.humidity.isPresent() && !this.humidity.get().deepEquals(comp.humidity.get())) ) {
      return false;
    }
    // comparing pressure   
    if ( this.pressure.isPresent() != comp.pressure.isPresent() ||
      (this.pressure.isPresent() && !this.pressure.get().deepEquals(comp.pressure.get())) ) {
      return false;
    }
    // comparing windstrength   
    if ( this.windstrength.isPresent() != comp.windstrength.isPresent() ||
      (this.windstrength.isPresent() && !this.windstrength.get().deepEquals(comp.windstrength.get())) ) {
      return false;
    }
    // comparing winddirection   
    if ( this.winddirection.isPresent() != comp.winddirection.isPresent() ||
      (this.winddirection.isPresent() && !this.winddirection.get().deepEquals(comp.winddirection.get())) ) {
      return false;
    }
    // comparing precipitationamount   
    if ( this.precipitationamount.isPresent() != comp.precipitationamount.isPresent() ||
      (this.precipitationamount.isPresent() && !this.precipitationamount.get().deepEquals(comp.precipitationamount.get())) ) {
      return false;
    }
    // comparing weatherPhenomenas
    if (this.weatherPhenomenas.size() != comp.weatherPhenomenas.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<weather._ast.ASTWeatherPhenomena> it1 = this.weatherPhenomenas.iterator();
        Iterator<weather._ast.ASTWeatherPhenomena> it2 = comp.weatherPhenomenas.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<weather._ast.ASTWeatherPhenomena> it1 = this.weatherPhenomenas.iterator();
        while (it1.hasNext()) {
          weather._ast.ASTWeatherPhenomena oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<weather._ast.ASTWeatherPhenomena> it2 = comp.weatherPhenomenas.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing opticalPhenomenas
    if (this.opticalPhenomenas.size() != comp.opticalPhenomenas.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<weather._ast.ASTOpticalPhenomena> it1 = this.opticalPhenomenas.iterator();
        Iterator<weather._ast.ASTOpticalPhenomena> it2 = comp.opticalPhenomenas.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<weather._ast.ASTOpticalPhenomena> it1 = this.opticalPhenomenas.iterator();
        while (it1.hasNext()) {
          weather._ast.ASTOpticalPhenomena oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<weather._ast.ASTOpticalPhenomena> it2 = comp.opticalPhenomenas.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing artificialPhenomenas
    if (this.artificialPhenomenas.size() != comp.artificialPhenomenas.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<weather._ast.ASTArtificialPhenomena> it1 = this.artificialPhenomenas.iterator();
        Iterator<weather._ast.ASTArtificialPhenomena> it2 = comp.artificialPhenomenas.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<weather._ast.ASTArtificialPhenomena> it1 = this.artificialPhenomenas.iterator();
        while (it1.hasNext()) {
          weather._ast.ASTArtificialPhenomena oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<weather._ast.ASTArtificialPhenomena> it2 = comp.artificialPhenomenas.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     


  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEquals(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_622 Parameter 'o' must not be null.");

     return deepEquals(o, true);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEqualsWithComments(Object o,boolean forceSameOrder)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_282 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.DeepEqualsWithComments*/

      ASTWeatherObj comp;
    if ((o instanceof ASTWeatherObj)) {
      comp = (ASTWeatherObj) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    // comparing temperature
    if ( (this.temperature == null && comp.temperature != null) || 
      (this.temperature != null && !this.temperature.deepEqualsWithComments(comp.temperature)) ) {
      return false;
    }
    // comparing clouding
    if ( (this.clouding == null && comp.clouding != null) || 
      (this.clouding != null && !this.clouding.deepEqualsWithComments(comp.clouding)) ) {
      return false;
    }
    // comparing sight
    if ( (this.sight == null && comp.sight != null) || 
      (this.sight != null && !this.sight.deepEqualsWithComments(comp.sight)) ) {
      return false;
    }
    // comparing precipitationtype
    if ( (this.precipitationtype == null && comp.precipitationtype != null) || 
      (this.precipitationtype != null && !this.precipitationtype.deepEqualsWithComments(comp.precipitationtype)) ) {
      return false;
    }
    // comparing humidity
    if ( this.humidity.isPresent() != comp.humidity.isPresent() ||
      (this.humidity.isPresent() && !this.humidity.get().deepEqualsWithComments(comp.humidity.get())) ) {
      return false;
    }
    // comparing pressure
    if ( this.pressure.isPresent() != comp.pressure.isPresent() ||
      (this.pressure.isPresent() && !this.pressure.get().deepEqualsWithComments(comp.pressure.get())) ) {
      return false;
    }
    // comparing windstrength
    if ( this.windstrength.isPresent() != comp.windstrength.isPresent() ||
      (this.windstrength.isPresent() && !this.windstrength.get().deepEqualsWithComments(comp.windstrength.get())) ) {
      return false;
    }
    // comparing winddirection
    if ( this.winddirection.isPresent() != comp.winddirection.isPresent() ||
      (this.winddirection.isPresent() && !this.winddirection.get().deepEqualsWithComments(comp.winddirection.get())) ) {
      return false;
    }
    // comparing precipitationamount
    if ( this.precipitationamount.isPresent() != comp.precipitationamount.isPresent() ||
      (this.precipitationamount.isPresent() && !this.precipitationamount.get().deepEqualsWithComments(comp.precipitationamount.get())) ) {
      return false;
    }
    // comparing weatherPhenomenas
    if (this.weatherPhenomenas.size() != comp.weatherPhenomenas.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<weather._ast.ASTWeatherPhenomena> it1 = this.weatherPhenomenas.iterator();
        Iterator<weather._ast.ASTWeatherPhenomena> it2 = comp.weatherPhenomenas.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<weather._ast.ASTWeatherPhenomena> it1 = this.weatherPhenomenas.iterator();
        while (it1.hasNext()) {
          weather._ast.ASTWeatherPhenomena oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<weather._ast.ASTWeatherPhenomena> it2 = comp.weatherPhenomenas.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing opticalPhenomenas
    if (this.opticalPhenomenas.size() != comp.opticalPhenomenas.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<weather._ast.ASTOpticalPhenomena> it1 = this.opticalPhenomenas.iterator();
        Iterator<weather._ast.ASTOpticalPhenomena> it2 = comp.opticalPhenomenas.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<weather._ast.ASTOpticalPhenomena> it1 = this.opticalPhenomenas.iterator();
        while (it1.hasNext()) {
          weather._ast.ASTOpticalPhenomena oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<weather._ast.ASTOpticalPhenomena> it2 = comp.opticalPhenomenas.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing artificialPhenomenas
    if (this.artificialPhenomenas.size() != comp.artificialPhenomenas.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<weather._ast.ASTArtificialPhenomena> it1 = this.artificialPhenomenas.iterator();
        Iterator<weather._ast.ASTArtificialPhenomena> it2 = comp.artificialPhenomenas.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<weather._ast.ASTArtificialPhenomena> it1 = this.artificialPhenomenas.iterator();
        while (it1.hasNext()) {
          weather._ast.ASTArtificialPhenomena oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<weather._ast.ASTArtificialPhenomena> it2 = comp.artificialPhenomenas.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEqualsWithComments(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_307 Parameter 'o' must not be null.");

     return deepEqualsWithComments(o, true);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean equalAttributes(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_946 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.EqualAttributes*/

      ASTWeatherObj comp;
    if ((o instanceof ASTWeatherObj)) {
      comp = (ASTWeatherObj) o;
    } else {
      return false;
    }
    return true;     


  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean equalsWithComments(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_322 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.EqualsWithComments*/

      ASTWeatherObj comp;
    if ((o instanceof ASTWeatherObj)) {
      comp = (ASTWeatherObj) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreComments().size() == comp.get_PreComments().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreComments().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreComments().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostComments().size() == comp.get_PostComments().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostComments().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostComments().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  java.util.Collection<de.monticore.ast.ASTNode> get_Children()   { 
     
     /* generated by template ast.additionalmethods.GetChildren*/

    java.util.LinkedList<de.monticore.ast.ASTNode> result = new java.util.LinkedList<de.monticore.ast.ASTNode>();
        if ( getTemperature() != null ) {
          result.add(getTemperature());
        }
        if ( getClouding() != null ) {
          result.add(getClouding());
        }
        if ( getSight() != null ) {
          result.add(getSight());
        }
        if ( getPrecipitationtype() != null ) {
          result.add(getPrecipitationtype());
        }
        if (getHumidity().isPresent()) {
          result.add(getHumidity().get());
        }
        if (getPressure().isPresent()) {
          result.add(getPressure().get());
        }
        if (getWindstrength().isPresent()) {
          result.add(getWindstrength().get());
        }
        if (getWinddirection().isPresent()) {
          result.add(getWinddirection().get());
        }
        if (getPrecipitationamount().isPresent()) {
          result.add(getPrecipitationamount().get());
        }
        result.addAll(getWeatherPhenomenas());
        result.addAll(getOpticalPhenomenas());
        result.addAll(getArtificialPhenomenas());
    return result;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void remove_Child(de.monticore.ast.ASTNode child)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(child, "0xA7006_672 Parameter 'child' must not be null.");

     /* generated by template ast.additionalmethods.RemoveChild*/

      if (getTemperature() == child) {
        setTemperature(null);
      }
      if (getClouding() == child) {
        setClouding(null);
      }
      if (getSight() == child) {
        setSight(null);
      }
      if (getPrecipitationtype() == child) {
        setPrecipitationtype(null);
      }
      if (getHumidity().isPresent() && getHumidity().get() == child) {
        setHumidity(null);
      }
      if (getPressure().isPresent() && getPressure().get() == child) {
        setPressure(null);
      }
      if (getWindstrength().isPresent() && getWindstrength().get() == child) {
        setWindstrength(null);
      }
      if (getWinddirection().isPresent() && getWinddirection().get() == child) {
        setWinddirection(null);
      }
      if (getPrecipitationamount().isPresent() && getPrecipitationamount().get() == child) {
        setPrecipitationamount(null);
      }
      if (getWeatherPhenomenas().contains(child)) {
        getWeatherPhenomenas().remove(child);
      }
      if (getOpticalPhenomenas().contains(child)) {
        getOpticalPhenomenas().remove(child);
      }
      if (getArtificialPhenomenas().contains(child)) {
        getArtificialPhenomenas().remove(child);
      }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  static  Builder getBuilder()   { 
     
     return new Builder();

  } 

    /* generated by template ast.ClassMethod*/
  
   public  ASTWeatherObj deepClone()   { 
     
     return deepClone(_construct());

  } 

    /* generated by template ast.ClassMethod*/
  
   public  ASTWeatherObj deepClone(ASTWeatherObj result)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(result, "0xA7006_096 Parameter 'result' must not be null.");

     /* generated by template ast.additionalmethods.DeepCloneWithParameters*/
  
    super.deepClone(result);
    
    result.setTemperature((weather._ast.ASTTemperature) this.temperature.deepClone());
    result.setClouding((weather._ast.ASTClouding) this.clouding.deepClone());
    result.setSight((weather._ast.ASTSight) this.sight.deepClone());
    result.setPrecipitationtype((weather._ast.ASTPrecipitationtype) this.precipitationtype.deepClone());
    result.humidity = this.humidity.isPresent()? Optional.ofNullable((weather._ast.ASTHumidity)this.humidity.get().deepClone()) : Optional.empty();
    result.pressure = this.pressure.isPresent()? Optional.ofNullable((weather._ast.ASTPressure)this.pressure.get().deepClone()) : Optional.empty();
    result.windstrength = this.windstrength.isPresent()? Optional.ofNullable((weather._ast.ASTWindstrength)this.windstrength.get().deepClone()) : Optional.empty();
    result.winddirection = this.winddirection.isPresent()? Optional.ofNullable((weather._ast.ASTWinddirection)this.winddirection.get().deepClone()) : Optional.empty();
    result.precipitationamount = this.precipitationamount.isPresent()? Optional.ofNullable((weather._ast.ASTPrecipitationamount)this.precipitationamount.get().deepClone()) : Optional.empty();
    result.weatherPhenomenas = com.google.common.collect.Lists.newArrayList();
    this.weatherPhenomenas.forEach(s -> result.weatherPhenomenas.add(s.deepClone()));
    result.opticalPhenomenas = com.google.common.collect.Lists.newArrayList();
    this.opticalPhenomenas.forEach(s -> result.opticalPhenomenas.add(s.deepClone()));
    result.artificialPhenomenas = com.google.common.collect.Lists.newArrayList();
    this.artificialPhenomenas.forEach(s -> result.artificialPhenomenas.add(s.deepClone()));
    
    return result;

  } 

    /* generated by template ast.ClassMethod*/
  
   protected  ASTWeatherObj _construct()   { 
     
     return new ASTWeatherObj();

  } 

    /* generated by template ast.ClassMethod*/
  
   public  weather._ast.ASTTemperature getTemperature()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.temperature;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  weather._ast.ASTClouding getClouding()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.clouding;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  weather._ast.ASTSight getSight()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.sight;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  weather._ast.ASTPrecipitationtype getPrecipitationtype()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.precipitationtype;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<weather._ast.ASTHumidity> getHumidity()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.humidity;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<weather._ast.ASTPressure> getPressure()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.pressure;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<weather._ast.ASTWindstrength> getWindstrength()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.windstrength;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<weather._ast.ASTWinddirection> getWinddirection()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.winddirection;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<weather._ast.ASTPrecipitationamount> getPrecipitationamount()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.precipitationamount;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  java.util.List<weather._ast.ASTWeatherPhenomena> getWeatherPhenomenas()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.weatherPhenomenas;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  java.util.List<weather._ast.ASTOpticalPhenomena> getOpticalPhenomenas()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.opticalPhenomenas;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  java.util.List<weather._ast.ASTArtificialPhenomena> getArtificialPhenomenas()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.artificialPhenomenas;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setArtificialPhenomenas(java.util.List<weather._ast.ASTArtificialPhenomena> artificialPhenomenas)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(artificialPhenomenas, "0xA7006_074 Parameter 'artificialPhenomenas' must not be null.");

     /* generated by template ast_emf.additionalmethods.Set*/

    if (artificialPhenomenas.isEmpty() && this.artificialPhenomenas.isEmpty()) {
      return;
    }  
    java.util.List<weather._ast.ASTArtificialPhenomena> oldArtificialPhenomenas = this.artificialPhenomenas;
    this.artificialPhenomenas = artificialPhenomenas;
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTWeatherObj_ArtificialPhenomenas, oldArtificialPhenomenas, artificialPhenomenas));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setClouding(weather._ast.ASTClouding clouding)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(clouding, "0xA7006_455 Parameter 'clouding' must not be null.");

     /* generated by template ast_emf.additionalmethods.Set*/

    weather._ast.ASTClouding oldClouding = this.clouding;
    this.clouding = clouding;
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTWeatherObj_Clouding, oldClouding, clouding));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setHumidity(weather._ast.ASTHumidity humidity)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    weather._ast.ASTHumidity oldHumidity = this.humidity.isPresent()? this.humidity.get() : null;
    this.humidity = Optional.ofNullable(humidity);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTWeatherObj_Humidity, oldHumidity, humidity));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean humidityIsPresent()   { 
     
       return humidity.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setOpticalPhenomenas(java.util.List<weather._ast.ASTOpticalPhenomena> opticalPhenomenas)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(opticalPhenomenas, "0xA7006_395 Parameter 'opticalPhenomenas' must not be null.");

     /* generated by template ast_emf.additionalmethods.Set*/

    if (opticalPhenomenas.isEmpty() && this.opticalPhenomenas.isEmpty()) {
      return;
    }  
    java.util.List<weather._ast.ASTOpticalPhenomena> oldOpticalPhenomenas = this.opticalPhenomenas;
    this.opticalPhenomenas = opticalPhenomenas;
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTWeatherObj_OpticalPhenomenas, oldOpticalPhenomenas, opticalPhenomenas));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setPrecipitationamount(weather._ast.ASTPrecipitationamount precipitationamount)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    weather._ast.ASTPrecipitationamount oldPrecipitationamount = this.precipitationamount.isPresent()? this.precipitationamount.get() : null;
    this.precipitationamount = Optional.ofNullable(precipitationamount);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTWeatherObj_Precipitationamount, oldPrecipitationamount, precipitationamount));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean precipitationamountIsPresent()   { 
     
       return precipitationamount.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setPrecipitationtype(weather._ast.ASTPrecipitationtype precipitationtype)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(precipitationtype, "0xA7006_863 Parameter 'precipitationtype' must not be null.");

     /* generated by template ast_emf.additionalmethods.Set*/

    weather._ast.ASTPrecipitationtype oldPrecipitationtype = this.precipitationtype;
    this.precipitationtype = precipitationtype;
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTWeatherObj_Precipitationtype, oldPrecipitationtype, precipitationtype));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setPressure(weather._ast.ASTPressure pressure)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    weather._ast.ASTPressure oldPressure = this.pressure.isPresent()? this.pressure.get() : null;
    this.pressure = Optional.ofNullable(pressure);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTWeatherObj_Pressure, oldPressure, pressure));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean pressureIsPresent()   { 
     
       return pressure.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setSight(weather._ast.ASTSight sight)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(sight, "0xA7006_618 Parameter 'sight' must not be null.");

     /* generated by template ast_emf.additionalmethods.Set*/

    weather._ast.ASTSight oldSight = this.sight;
    this.sight = sight;
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTWeatherObj_Sight, oldSight, sight));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setTemperature(weather._ast.ASTTemperature temperature)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(temperature, "0xA7006_262 Parameter 'temperature' must not be null.");

     /* generated by template ast_emf.additionalmethods.Set*/

    weather._ast.ASTTemperature oldTemperature = this.temperature;
    this.temperature = temperature;
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTWeatherObj_Temperature, oldTemperature, temperature));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setWeatherPhenomenas(java.util.List<weather._ast.ASTWeatherPhenomena> weatherPhenomenas)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(weatherPhenomenas, "0xA7006_789 Parameter 'weatherPhenomenas' must not be null.");

     /* generated by template ast_emf.additionalmethods.Set*/

    if (weatherPhenomenas.isEmpty() && this.weatherPhenomenas.isEmpty()) {
      return;
    }  
    java.util.List<weather._ast.ASTWeatherPhenomena> oldWeatherPhenomenas = this.weatherPhenomenas;
    this.weatherPhenomenas = weatherPhenomenas;
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTWeatherObj_WeatherPhenomenas, oldWeatherPhenomenas, weatherPhenomenas));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setWinddirection(weather._ast.ASTWinddirection winddirection)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    weather._ast.ASTWinddirection oldWinddirection = this.winddirection.isPresent()? this.winddirection.get() : null;
    this.winddirection = Optional.ofNullable(winddirection);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTWeatherObj_Winddirection, oldWinddirection, winddirection));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean winddirectionIsPresent()   { 
     
       return winddirection.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setWindstrength(weather._ast.ASTWindstrength windstrength)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    weather._ast.ASTWindstrength oldWindstrength = this.windstrength.isPresent()? this.windstrength.get() : null;
    this.windstrength = Optional.ofNullable(windstrength);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTWeatherObj_Windstrength, oldWindstrength, windstrength));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean windstrengthIsPresent()   { 
     
       return windstrength.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Object eGet(int featureID,boolean resolve,boolean coreType)   { 
     
     /* generated by template ast_emf.additionalmethods.EGet*/
  
    switch (featureID) {
      case SimulationPackage.ASTWeatherObj_Temperature:
         return getTemperature();
      case SimulationPackage.ASTWeatherObj_Clouding:
         return getClouding();
      case SimulationPackage.ASTWeatherObj_Sight:
         return getSight();
      case SimulationPackage.ASTWeatherObj_Precipitationtype:
         return getPrecipitationtype();
      case SimulationPackage.ASTWeatherObj_Humidity:
         return getHumidity().isPresent()? getHumidity().get() : null;
      case SimulationPackage.ASTWeatherObj_Pressure:
         return getPressure().isPresent()? getPressure().get() : null;
      case SimulationPackage.ASTWeatherObj_Windstrength:
         return getWindstrength().isPresent()? getWindstrength().get() : null;
      case SimulationPackage.ASTWeatherObj_Winddirection:
         return getWinddirection().isPresent()? getWinddirection().get() : null;
      case SimulationPackage.ASTWeatherObj_Precipitationamount:
         return getPrecipitationamount().isPresent()? getPrecipitationamount().get() : null;
      case SimulationPackage.ASTWeatherObj_WeatherPhenomenas:
         return getWeatherPhenomenas();
      case SimulationPackage.ASTWeatherObj_OpticalPhenomenas:
         return getOpticalPhenomenas();
      case SimulationPackage.ASTWeatherObj_ArtificialPhenomenas:
         return getArtificialPhenomenas();
    }
    return eDynamicGet(featureID, resolve, coreType);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  void eSet(int featureID,Object newValue)   { 
     
     /* generated by template ast_emf.additionalmethods.ESet*/
  
    switch (featureID) {
      case SimulationPackage.ASTWeatherObj_Temperature:
        setTemperature((weather._ast.ASTTemperature)newValue);
        return;
      case SimulationPackage.ASTWeatherObj_Clouding:
        setClouding((weather._ast.ASTClouding)newValue);
        return;
      case SimulationPackage.ASTWeatherObj_Sight:
        setSight((weather._ast.ASTSight)newValue);
        return;
      case SimulationPackage.ASTWeatherObj_Precipitationtype:
        setPrecipitationtype((weather._ast.ASTPrecipitationtype)newValue);
        return;
      case SimulationPackage.ASTWeatherObj_Humidity:
        setHumidity((weather._ast.ASTHumidity)newValue);
        return;
      case SimulationPackage.ASTWeatherObj_Pressure:
        setPressure((weather._ast.ASTPressure)newValue);
        return;
      case SimulationPackage.ASTWeatherObj_Windstrength:
        setWindstrength((weather._ast.ASTWindstrength)newValue);
        return;
      case SimulationPackage.ASTWeatherObj_Winddirection:
        setWinddirection((weather._ast.ASTWinddirection)newValue);
        return;
      case SimulationPackage.ASTWeatherObj_Precipitationamount:
        setPrecipitationamount((weather._ast.ASTPrecipitationamount)newValue);
        return;
      case SimulationPackage.ASTWeatherObj_WeatherPhenomenas:
        setWeatherPhenomenas((java.util.List<weather._ast.ASTWeatherPhenomena>)newValue);
        return;
      case SimulationPackage.ASTWeatherObj_OpticalPhenomenas:
        setOpticalPhenomenas((java.util.List<weather._ast.ASTOpticalPhenomena>)newValue);
        return;
      case SimulationPackage.ASTWeatherObj_ArtificialPhenomenas:
        setArtificialPhenomenas((java.util.List<weather._ast.ASTArtificialPhenomena>)newValue);
        return;
    }
    eDynamicSet(featureID, newValue);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  void eUnset(int featureID)   { 
     
     /* generated by template ast_emf.additionalmethods.EUnset*/
 
    switch (featureID) {
      case SimulationPackage.ASTWeatherObj_Temperature:
        setTemperature(null);
      return;
      case SimulationPackage.ASTWeatherObj_Clouding:
        setClouding(null);
      return;
      case SimulationPackage.ASTWeatherObj_Sight:
        setSight(null);
      return;
      case SimulationPackage.ASTWeatherObj_Precipitationtype:
        setPrecipitationtype(null);
      return;
      case SimulationPackage.ASTWeatherObj_Humidity:
        setHumidity(null);
      return;
      case SimulationPackage.ASTWeatherObj_Pressure:
        setPressure(null);
      return;
      case SimulationPackage.ASTWeatherObj_Windstrength:
        setWindstrength(null);
      return;
      case SimulationPackage.ASTWeatherObj_Winddirection:
        setWinddirection(null);
      return;
      case SimulationPackage.ASTWeatherObj_Precipitationamount:
        setPrecipitationamount(null);
      return;
      case SimulationPackage.ASTWeatherObj_WeatherPhenomenas:
        weatherPhenomenas.clear();
      return;
      case SimulationPackage.ASTWeatherObj_OpticalPhenomenas:
        opticalPhenomenas.clear();
      return;
      case SimulationPackage.ASTWeatherObj_ArtificialPhenomenas:
        artificialPhenomenas.clear();
      return;
    }
    eDynamicUnset(featureID);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean eIsSet(int featureID)   { 
     
     /* generated by template ast_emf.additionalmethods.EIsSet*/
 
    switch (featureID) {
      case SimulationPackage.ASTWeatherObj_Temperature:
        return getTemperature() != null;
      case SimulationPackage.ASTWeatherObj_Clouding:
        return getClouding() != null;
      case SimulationPackage.ASTWeatherObj_Sight:
        return getSight() != null;
      case SimulationPackage.ASTWeatherObj_Precipitationtype:
        return getPrecipitationtype() != null;
      case SimulationPackage.ASTWeatherObj_Humidity:
        return getHumidity().isPresent();
      case SimulationPackage.ASTWeatherObj_Pressure:
        return getPressure().isPresent();
      case SimulationPackage.ASTWeatherObj_Windstrength:
        return getWindstrength().isPresent();
      case SimulationPackage.ASTWeatherObj_Winddirection:
        return getWinddirection().isPresent();
      case SimulationPackage.ASTWeatherObj_Precipitationamount:
        return getPrecipitationamount().isPresent();
      case SimulationPackage.ASTWeatherObj_WeatherPhenomenas:
        return !getWeatherPhenomenas().isEmpty();
      case SimulationPackage.ASTWeatherObj_OpticalPhenomenas:
        return !getOpticalPhenomenas().isEmpty();
      case SimulationPackage.ASTWeatherObj_ArtificialPhenomenas:
        return !getArtificialPhenomenas().isEmpty();
    }
    return eDynamicIsSet(featureID);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  int eBaseStructuralFeatureID(int featureID,Class<?> baseClass)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(baseClass, "0xA7006_270 Parameter 'baseClass' must not be null.");

     /* generated by template ast_emf.additionalmethods.EStructuralFeature*/
  
    return super.eBaseStructuralFeatureID(featureID, baseClass);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  int eDerivedStructuralFeatureID(int featureID,Class<?> baseClass)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(baseClass, "0xA7006_400 Parameter 'baseClass' must not be null.");

     /* generated by template ast_emf.additionalmethods.EStructuralFeature*/
  
    return super.eDerivedStructuralFeatureID(featureID, baseClass);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  String toString()   { 
     
     /* generated by template ast_emf.additionalmethods.EToString*/
  
    if (eIsProxy()) {
      return super.toString();
    }
    StringBuffer result = new StringBuffer(getClass().getSimpleName());
    if (!artificialPhenomenas.isEmpty()) {
      result.append(" ArtificialPhenomenas: ");
      result.append(artificialPhenomenas);
    } 
    result.append(" Clouding: ");
    result.append(clouding);
    if (humidity.isPresent()) {
      result.append(" Humidity: ");
      result.append(humidity.get());
    } 
    if (!opticalPhenomenas.isEmpty()) {
      result.append(" OpticalPhenomenas: ");
      result.append(opticalPhenomenas);
    } 
    if (precipitationamount.isPresent()) {
      result.append(" Precipitationamount: ");
      result.append(precipitationamount.get());
    } 
    result.append(" Precipitationtype: ");
    result.append(precipitationtype);
    if (pressure.isPresent()) {
      result.append(" Pressure: ");
      result.append(pressure.get());
    } 
    result.append(" Sight: ");
    result.append(sight);
    result.append(" Temperature: ");
    result.append(temperature);
    if (!weatherPhenomenas.isEmpty()) {
      result.append(" WeatherPhenomenas: ");
      result.append(weatherPhenomenas);
    } 
    if (winddirection.isPresent()) {
      result.append(" Winddirection: ");
      result.append(winddirection.get());
    } 
    if (windstrength.isPresent()) {
      result.append(" Windstrength: ");
      result.append(windstrength.get());
    } 
    return result.toString();
  } 

    /* generated by template ast.ClassMethod*/
  
   protected  EClass eStaticClass()   { 
     
     return SimulationPackage.Literals.ASTWeatherObj;
  } 

   
  /* generated by template ast.ClassContent*/
  // Class content

    /* generated by template ast.AstBuilder*/

 /**
   * Builder for {@link ASTWeatherObj}.
   */
  public static class Builder  {
    /* generated by template ast.BuilderAttribute*/
     protected  weather._ast.ASTTemperature temperature;

    /* generated by template ast.BuilderAttribute*/
     protected  weather._ast.ASTClouding clouding;

    /* generated by template ast.BuilderAttribute*/
     protected  weather._ast.ASTSight sight;

    /* generated by template ast.BuilderAttribute*/
     protected  weather._ast.ASTPrecipitationtype precipitationtype;

    /* generated by template ast.BuilderAttribute*/
     protected  weather._ast.ASTHumidity humidity;

    /* generated by template ast.BuilderAttribute*/
     protected  weather._ast.ASTPressure pressure;

    /* generated by template ast.BuilderAttribute*/
     protected  weather._ast.ASTWindstrength windstrength;

    /* generated by template ast.BuilderAttribute*/
     protected  weather._ast.ASTWinddirection winddirection;

    /* generated by template ast.BuilderAttribute*/
     protected  weather._ast.ASTPrecipitationamount precipitationamount;

    /* generated by template ast.BuilderAttribute*/
     protected  java.util.List<weather._ast.ASTWeatherPhenomena> weatherPhenomenas = new java.util.ArrayList<>();

    /* generated by template ast.BuilderAttribute*/
     protected  java.util.List<weather._ast.ASTOpticalPhenomena> opticalPhenomenas = new java.util.ArrayList<>();

    /* generated by template ast.BuilderAttribute*/
     protected  java.util.List<weather._ast.ASTArtificialPhenomena> artificialPhenomenas = new java.util.ArrayList<>();

    public ASTWeatherObj build() {
      return new ASTWeatherObj (/* generated by template ast.BuilderConstructorParametersDeclaration*/
  
        this.temperature 
       ,
       this.clouding 
       ,
       this.sight 
       ,
       this.precipitationtype 
       ,
       this.humidity 
       ,
       this.pressure 
       ,
       this.windstrength 
       ,
       this.winddirection 
       ,
       this.precipitationamount 
       ,
       this.weatherPhenomenas 
       ,
       this.opticalPhenomenas 
       ,
       this.artificialPhenomenas 

      );
    }
    /* generated by template ast.AstBuilderAttributeSetter*/
    public Builder temperature(weather._ast.ASTTemperature temperature) {
      this.temperature = temperature;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder clouding(weather._ast.ASTClouding clouding) {
      this.clouding = clouding;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder sight(weather._ast.ASTSight sight) {
      this.sight = sight;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder precipitationtype(weather._ast.ASTPrecipitationtype precipitationtype) {
      this.precipitationtype = precipitationtype;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder humidity(weather._ast.ASTHumidity humidity) {
      this.humidity = humidity;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder pressure(weather._ast.ASTPressure pressure) {
      this.pressure = pressure;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder windstrength(weather._ast.ASTWindstrength windstrength) {
      this.windstrength = windstrength;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder winddirection(weather._ast.ASTWinddirection winddirection) {
      this.winddirection = winddirection;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder precipitationamount(weather._ast.ASTPrecipitationamount precipitationamount) {
      this.precipitationamount = precipitationamount;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder weatherPhenomenas(java.util.List<weather._ast.ASTWeatherPhenomena> weatherPhenomenas) {
      this.weatherPhenomenas = weatherPhenomenas;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder opticalPhenomenas(java.util.List<weather._ast.ASTOpticalPhenomena> opticalPhenomenas) {
      this.opticalPhenomenas = opticalPhenomenas;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder artificialPhenomenas(java.util.List<weather._ast.ASTArtificialPhenomena> artificialPhenomenas) {
      this.artificialPhenomenas = artificialPhenomenas;
      return this;
    }

  }    

  
}
