/* generated from model Simulation*/
/* generated by template ast.Class*/
// Class declaration
/* generated by template ast_emf.AstNodeFactory*/



package simulation._ast;

import java.util.ArrayList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.plugin.EcorePlugin;
import org.eclipse.emf.ecore.impl.EFactoryImpl;
import de.se_rwth.commons.logging.Log;

import simulation._ast.*;
import weather._ast.*;
import si._ast.*;


public class SimulationNodeFactory extends EFactoryImpl {
  
  // Creates the default factory implementation.
  public static SimulationNodeFactory getFactory() {
    try {
      SimulationNodeFactory eFactory = (SimulationNodeFactory)EPackage.Registry.INSTANCE.getEFactory("http://Simulation/1.0"); 
      if (eFactory != null) {
        return eFactory;
     }
    }
    catch (Exception exception) {
      EcorePlugin.INSTANCE.log(exception);
    }
    if (factory == null) {
      factory = new SimulationNodeFactory();
    }
    return factory;
  }

  
  protected static SimulationNodeFactory factory = null;
  
  @Override
  public EObject create(EClass eClass) {
    switch (eClass.getClassifierID()) {
      case SimulationPackage.ASTSimulation: return SimulationNodeFactory.createASTSimulation();
      case SimulationPackage.ASTSimulationRenderFrequency: return SimulationNodeFactory.createASTSimulationRenderFrequency();
      case SimulationPackage.ASTSimulationLoopFrequency: return SimulationNodeFactory.createASTSimulationLoopFrequency();
      case SimulationPackage.ASTSimulationDuration: return SimulationNodeFactory.createASTSimulationDuration();
      case SimulationPackage.ASTSimulationType: return SimulationNodeFactory.createASTSimulationType();
      case SimulationPackage.ASTWeatherObj: return SimulationNodeFactory.createASTWeatherObj();
      case SimulationPackage.ASTWeather: return SimulationNodeFactory.createASTWeather();
      case SimulationPackage.ASTFixedWeather: return SimulationNodeFactory.createASTFixedWeather();
      case SimulationPackage.ASTSequenceWeather: return SimulationNodeFactory.createASTSequenceWeather();
      case SimulationPackage.ASTRandomWeather: return SimulationNodeFactory.createASTRandomWeather();
      case SimulationPackage.ASTForecast: return SimulationNodeFactory.createASTForecast();
      case SimulationPackage.ASTTime: return SimulationNodeFactory.createASTTime();
      case SimulationPackage.ASTMapPath: return SimulationNodeFactory.createASTMapPath();
      case SimulationPackage.ASTMapName: return SimulationNodeFactory.createASTMapName();
      case SimulationPackage.ASTMapHeight: return SimulationNodeFactory.createASTMapHeight();
      case SimulationPackage.ASTMapOverlap: return SimulationNodeFactory.createASTMapOverlap();
      case SimulationPackage.ASTMapSectorWidth: return SimulationNodeFactory.createASTMapSectorWidth();
      case SimulationPackage.ASTMapSectorHeight: return SimulationNodeFactory.createASTMapSectorHeight();
      case SimulationPackage.ASTMaxSectorUsers: return SimulationNodeFactory.createASTMaxSectorUsers();
      case SimulationPackage.ASTTimeout: return SimulationNodeFactory.createASTTimeout();
      case SimulationPackage.ASTPedestrians: return SimulationNodeFactory.createASTPedestrians();
      case SimulationPackage.ASTPedestrianDensity: return SimulationNodeFactory.createASTPedestrianDensity();
      case SimulationPackage.ASTVehicles: return SimulationNodeFactory.createASTVehicles();
      case SimulationPackage.ASTExplicitVehicle: return SimulationNodeFactory.createASTExplicitVehicle();
      case SimulationPackage.ASTPathedVehicle: return SimulationNodeFactory.createASTPathedVehicle();
      case SimulationPackage.ASTRandomVehicle: return SimulationNodeFactory.createASTRandomVehicle();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }
  
  // Returns the package supported by this factory.
  SimulationPackage getSimulationPackage() {
    return (SimulationPackage)getEPackage();
  }
    
  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTSimulation = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTSimulationRenderFrequency = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTSimulationLoopFrequency = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTSimulationDuration = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTSimulationType = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTWeatherObj = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTWeather = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTFixedWeather = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTSequenceWeather = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTRandomWeather = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTForecast = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTTime = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTMapPath = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTMapName = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTMapHeight = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTMapOverlap = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTMapSectorWidth = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTMapSectorHeight = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTMaxSectorUsers = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTTimeout = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTPedestrians = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTPedestrianDensity = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTVehicles = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTExplicitVehicle = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTPathedVehicle = null;

  /* generated by template ast.Attribute*/
  
   protected  static  SimulationNodeFactory factoryASTRandomVehicle = null;


  protected SimulationNodeFactory () {}

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTSimulation createASTSimulation()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTSimulation == null) {
      factoryASTSimulation = getFactory();
    }
    return factoryASTSimulation.doCreateASTSimulation();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTSimulation doCreateASTSimulation()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTSimulation();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTSimulation createASTSimulation(String name,simulation._ast.ASTSimulationRenderFrequency simulationRenderFrequency,simulation._ast.ASTSimulationLoopFrequency simulationLoopFrequency,simulation._ast.ASTSimulationDuration simulationDuration,simulation._ast.ASTSimulationType simulationType,simulation._ast.ASTWeather weather,simulation._ast.ASTTime time,simulation._ast.ASTMapPath mapPath,simulation._ast.ASTMapName mapName,simulation._ast.ASTMapHeight mapHeight,simulation._ast.ASTMapOverlap mapOverlap,simulation._ast.ASTMapSectorWidth mapSectorWidth,simulation._ast.ASTMapSectorHeight mapSectorHeight,simulation._ast.ASTMaxSectorUsers maxSectorUsers,simulation._ast.ASTTimeout timeout,simulation._ast.ASTPedestrians pedestrians,simulation._ast.ASTPedestrianDensity pedestrianDensity,simulation._ast.ASTVehicles vehicles)   { 
     /* generated by template ast.factorymethods.ErrorIfNull*/

    Log.errorIfNull(name, "0xA7007_744 Parameter 'name' must not be null.");
    Log.errorIfNull(mapName, "0xA7007_580 Parameter 'mapName' must not be null.");

     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTSimulation == null) {
      factoryASTSimulation = getFactory();
    }
    return factoryASTSimulation.doCreateASTSimulation(name, simulationRenderFrequency, simulationLoopFrequency, simulationDuration, simulationType, weather, time, mapPath, mapName, mapHeight, mapOverlap, mapSectorWidth, mapSectorHeight, maxSectorUsers, timeout, pedestrians, pedestrianDensity, vehicles);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTSimulation doCreateASTSimulation(String name,simulation._ast.ASTSimulationRenderFrequency simulationRenderFrequency,simulation._ast.ASTSimulationLoopFrequency simulationLoopFrequency,simulation._ast.ASTSimulationDuration simulationDuration,simulation._ast.ASTSimulationType simulationType,simulation._ast.ASTWeather weather,simulation._ast.ASTTime time,simulation._ast.ASTMapPath mapPath,simulation._ast.ASTMapName mapName,simulation._ast.ASTMapHeight mapHeight,simulation._ast.ASTMapOverlap mapOverlap,simulation._ast.ASTMapSectorWidth mapSectorWidth,simulation._ast.ASTMapSectorHeight mapSectorHeight,simulation._ast.ASTMaxSectorUsers maxSectorUsers,simulation._ast.ASTTimeout timeout,simulation._ast.ASTPedestrians pedestrians,simulation._ast.ASTPedestrianDensity pedestrianDensity,simulation._ast.ASTVehicles vehicles)   { 
     /* generated by template ast.factorymethods.ErrorIfNull*/

    Log.errorIfNull(name, "0xA7007_744 Parameter 'name' must not be null.");
    Log.errorIfNull(mapName, "0xA7007_580 Parameter 'mapName' must not be null.");

     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTSimulation(name, simulationRenderFrequency, simulationLoopFrequency, simulationDuration, simulationType, weather, time, mapPath, mapName, mapHeight, mapOverlap, mapSectorWidth, mapSectorHeight, maxSectorUsers, timeout, pedestrians, pedestrianDensity, vehicles);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTSimulationRenderFrequency createASTSimulationRenderFrequency()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTSimulationRenderFrequency == null) {
      factoryASTSimulationRenderFrequency = getFactory();
    }
    return factoryASTSimulationRenderFrequency.doCreateASTSimulationRenderFrequency();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTSimulationRenderFrequency doCreateASTSimulationRenderFrequency()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTSimulationRenderFrequency();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTSimulationRenderFrequency createASTSimulationRenderFrequency(si._ast.ASTUnitNumber simRenderFreq)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(simRenderFreq, "0xA7006_581 Parameter 'simRenderFreq' must not be null.");

     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTSimulationRenderFrequency == null) {
      factoryASTSimulationRenderFrequency = getFactory();
    }
    return factoryASTSimulationRenderFrequency.doCreateASTSimulationRenderFrequency(simRenderFreq);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTSimulationRenderFrequency doCreateASTSimulationRenderFrequency(si._ast.ASTUnitNumber simRenderFreq)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(simRenderFreq, "0xA7006_241 Parameter 'simRenderFreq' must not be null.");

     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTSimulationRenderFrequency(simRenderFreq);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTSimulationLoopFrequency createASTSimulationLoopFrequency()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTSimulationLoopFrequency == null) {
      factoryASTSimulationLoopFrequency = getFactory();
    }
    return factoryASTSimulationLoopFrequency.doCreateASTSimulationLoopFrequency();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTSimulationLoopFrequency doCreateASTSimulationLoopFrequency()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTSimulationLoopFrequency();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTSimulationLoopFrequency createASTSimulationLoopFrequency(si._ast.ASTUnitNumber simLoopFreq)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(simLoopFreq, "0xA7006_193 Parameter 'simLoopFreq' must not be null.");

     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTSimulationLoopFrequency == null) {
      factoryASTSimulationLoopFrequency = getFactory();
    }
    return factoryASTSimulationLoopFrequency.doCreateASTSimulationLoopFrequency(simLoopFreq);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTSimulationLoopFrequency doCreateASTSimulationLoopFrequency(si._ast.ASTUnitNumber simLoopFreq)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(simLoopFreq, "0xA7006_565 Parameter 'simLoopFreq' must not be null.");

     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTSimulationLoopFrequency(simLoopFreq);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTSimulationDuration createASTSimulationDuration()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTSimulationDuration == null) {
      factoryASTSimulationDuration = getFactory();
    }
    return factoryASTSimulationDuration.doCreateASTSimulationDuration();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTSimulationDuration doCreateASTSimulationDuration()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTSimulationDuration();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTSimulationDuration createASTSimulationDuration(si._ast.ASTUnitNumber simDuration)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(simDuration, "0xA7006_443 Parameter 'simDuration' must not be null.");

     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTSimulationDuration == null) {
      factoryASTSimulationDuration = getFactory();
    }
    return factoryASTSimulationDuration.doCreateASTSimulationDuration(simDuration);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTSimulationDuration doCreateASTSimulationDuration(si._ast.ASTUnitNumber simDuration)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(simDuration, "0xA7006_510 Parameter 'simDuration' must not be null.");

     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTSimulationDuration(simDuration);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTSimulationType createASTSimulationType()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTSimulationType == null) {
      factoryASTSimulationType = getFactory();
    }
    return factoryASTSimulationType.doCreateASTSimulationType();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTSimulationType doCreateASTSimulationType()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTSimulationType();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTWeatherObj createASTWeatherObj()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTWeatherObj == null) {
      factoryASTWeatherObj = getFactory();
    }
    return factoryASTWeatherObj.doCreateASTWeatherObj();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTWeatherObj doCreateASTWeatherObj()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTWeatherObj();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTWeatherObj createASTWeatherObj(weather._ast.ASTTemperature temperature,weather._ast.ASTClouding clouding,weather._ast.ASTSight sight,weather._ast.ASTPrecipitationtype precipitationtype,weather._ast.ASTHumidity humidity,weather._ast.ASTPressure pressure,weather._ast.ASTWindstrength windstrength,weather._ast.ASTWinddirection winddirection,weather._ast.ASTPrecipitationamount precipitationamount,java.util.List<weather._ast.ASTWeatherPhenomena> weatherPhenomenas,java.util.List<weather._ast.ASTOpticalPhenomena> opticalPhenomenas,java.util.List<weather._ast.ASTArtificialPhenomena> artificialPhenomenas)   { 
     /* generated by template ast.factorymethods.ErrorIfNull*/

    Log.errorIfNull(temperature, "0xA7007_179 Parameter 'temperature' must not be null.");
    Log.errorIfNull(clouding, "0xA7007_910 Parameter 'clouding' must not be null.");
    Log.errorIfNull(sight, "0xA7007_066 Parameter 'sight' must not be null.");
    Log.errorIfNull(precipitationtype, "0xA7007_418 Parameter 'precipitationtype' must not be null.");
    Log.errorIfNull(weatherPhenomenas, "0xA7007_361 Parameter 'weatherPhenomenas' must not be null.");
    Log.errorIfNull(opticalPhenomenas, "0xA7007_397 Parameter 'opticalPhenomenas' must not be null.");
    Log.errorIfNull(artificialPhenomenas, "0xA7007_645 Parameter 'artificialPhenomenas' must not be null.");

     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTWeatherObj == null) {
      factoryASTWeatherObj = getFactory();
    }
    return factoryASTWeatherObj.doCreateASTWeatherObj(temperature, clouding, sight, precipitationtype, humidity, pressure, windstrength, winddirection, precipitationamount, weatherPhenomenas, opticalPhenomenas, artificialPhenomenas);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTWeatherObj doCreateASTWeatherObj(weather._ast.ASTTemperature temperature,weather._ast.ASTClouding clouding,weather._ast.ASTSight sight,weather._ast.ASTPrecipitationtype precipitationtype,weather._ast.ASTHumidity humidity,weather._ast.ASTPressure pressure,weather._ast.ASTWindstrength windstrength,weather._ast.ASTWinddirection winddirection,weather._ast.ASTPrecipitationamount precipitationamount,java.util.List<weather._ast.ASTWeatherPhenomena> weatherPhenomenas,java.util.List<weather._ast.ASTOpticalPhenomena> opticalPhenomenas,java.util.List<weather._ast.ASTArtificialPhenomena> artificialPhenomenas)   { 
     /* generated by template ast.factorymethods.ErrorIfNull*/

    Log.errorIfNull(temperature, "0xA7007_179 Parameter 'temperature' must not be null.");
    Log.errorIfNull(clouding, "0xA7007_910 Parameter 'clouding' must not be null.");
    Log.errorIfNull(sight, "0xA7007_066 Parameter 'sight' must not be null.");
    Log.errorIfNull(precipitationtype, "0xA7007_418 Parameter 'precipitationtype' must not be null.");
    Log.errorIfNull(weatherPhenomenas, "0xA7007_361 Parameter 'weatherPhenomenas' must not be null.");
    Log.errorIfNull(opticalPhenomenas, "0xA7007_397 Parameter 'opticalPhenomenas' must not be null.");
    Log.errorIfNull(artificialPhenomenas, "0xA7007_645 Parameter 'artificialPhenomenas' must not be null.");

     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTWeatherObj(temperature, clouding, sight, precipitationtype, humidity, pressure, windstrength, winddirection, precipitationamount, weatherPhenomenas, opticalPhenomenas, artificialPhenomenas);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTWeather createASTWeather()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTWeather == null) {
      factoryASTWeather = getFactory();
    }
    return factoryASTWeather.doCreateASTWeather();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTWeather doCreateASTWeather()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTWeather();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTWeather createASTWeather(simulation._ast.ASTFixedWeather fixedWeather,simulation._ast.ASTSequenceWeather sequenceWeather,simulation._ast.ASTRandomWeather randomWeather,simulation._ast.ASTForecast forecast)   { 
     /* generated by template ast.factorymethods.ErrorIfNull*/


     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTWeather == null) {
      factoryASTWeather = getFactory();
    }
    return factoryASTWeather.doCreateASTWeather(fixedWeather, sequenceWeather, randomWeather, forecast);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTWeather doCreateASTWeather(simulation._ast.ASTFixedWeather fixedWeather,simulation._ast.ASTSequenceWeather sequenceWeather,simulation._ast.ASTRandomWeather randomWeather,simulation._ast.ASTForecast forecast)   { 
     /* generated by template ast.factorymethods.ErrorIfNull*/


     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTWeather(fixedWeather, sequenceWeather, randomWeather, forecast);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTFixedWeather createASTFixedWeather()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTFixedWeather == null) {
      factoryASTFixedWeather = getFactory();
    }
    return factoryASTFixedWeather.doCreateASTFixedWeather();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTFixedWeather doCreateASTFixedWeather()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTFixedWeather();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTFixedWeather createASTFixedWeather(simulation._ast.ASTWeatherObj fixedWeatherObj)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(fixedWeatherObj, "0xA7006_684 Parameter 'fixedWeatherObj' must not be null.");

     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTFixedWeather == null) {
      factoryASTFixedWeather = getFactory();
    }
    return factoryASTFixedWeather.doCreateASTFixedWeather(fixedWeatherObj);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTFixedWeather doCreateASTFixedWeather(simulation._ast.ASTWeatherObj fixedWeatherObj)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(fixedWeatherObj, "0xA7006_075 Parameter 'fixedWeatherObj' must not be null.");

     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTFixedWeather(fixedWeatherObj);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTSequenceWeather createASTSequenceWeather()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTSequenceWeather == null) {
      factoryASTSequenceWeather = getFactory();
    }
    return factoryASTSequenceWeather.doCreateASTSequenceWeather();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTSequenceWeather doCreateASTSequenceWeather()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTSequenceWeather();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTSequenceWeather createASTSequenceWeather(java.util.List<simulation._ast.ASTWeatherObj> randomWeatherObj,si._ast.ASTUnitNumber sequenceDuration)   { 
     /* generated by template ast.factorymethods.ErrorIfNull*/

    Log.errorIfNull(randomWeatherObj, "0xA7007_971 Parameter 'randomWeatherObj' must not be null.");

     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTSequenceWeather == null) {
      factoryASTSequenceWeather = getFactory();
    }
    return factoryASTSequenceWeather.doCreateASTSequenceWeather(randomWeatherObj, sequenceDuration);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTSequenceWeather doCreateASTSequenceWeather(java.util.List<simulation._ast.ASTWeatherObj> randomWeatherObj,si._ast.ASTUnitNumber sequenceDuration)   { 
     /* generated by template ast.factorymethods.ErrorIfNull*/

    Log.errorIfNull(randomWeatherObj, "0xA7007_971 Parameter 'randomWeatherObj' must not be null.");

     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTSequenceWeather(randomWeatherObj, sequenceDuration);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTRandomWeather createASTRandomWeather()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTRandomWeather == null) {
      factoryASTRandomWeather = getFactory();
    }
    return factoryASTRandomWeather.doCreateASTRandomWeather();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTRandomWeather doCreateASTRandomWeather()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTRandomWeather();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTRandomWeather createASTRandomWeather(si._ast.ASTUnitNumber randomDuration)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(randomDuration, "0xA7006_319 Parameter 'randomDuration' must not be null.");

     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTRandomWeather == null) {
      factoryASTRandomWeather = getFactory();
    }
    return factoryASTRandomWeather.doCreateASTRandomWeather(randomDuration);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTRandomWeather doCreateASTRandomWeather(si._ast.ASTUnitNumber randomDuration)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(randomDuration, "0xA7006_515 Parameter 'randomDuration' must not be null.");

     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTRandomWeather(randomDuration);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTForecast createASTForecast()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTForecast == null) {
      factoryASTForecast = getFactory();
    }
    return factoryASTForecast.doCreateASTForecast();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTForecast doCreateASTForecast()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTForecast();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTForecast createASTForecast(simulation._ast.ASTWeatherObj forecastWeatherObj,si._ast.ASTUnitNumber forecastDuration)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(forecastWeatherObj, "0xA7006_834 Parameter 'forecastWeatherObj' must not be null.");
    Log.errorIfNull(forecastDuration, "0xA7006_455 Parameter 'forecastDuration' must not be null.");

     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTForecast == null) {
      factoryASTForecast = getFactory();
    }
    return factoryASTForecast.doCreateASTForecast(forecastWeatherObj, forecastDuration);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTForecast doCreateASTForecast(simulation._ast.ASTWeatherObj forecastWeatherObj,si._ast.ASTUnitNumber forecastDuration)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(forecastWeatherObj, "0xA7006_342 Parameter 'forecastWeatherObj' must not be null.");
    Log.errorIfNull(forecastDuration, "0xA7006_929 Parameter 'forecastDuration' must not be null.");

     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTForecast(forecastWeatherObj, forecastDuration);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTTime createASTTime()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTTime == null) {
      factoryASTTime = getFactory();
    }
    return factoryASTTime.doCreateASTTime();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTTime doCreateASTTime()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTTime();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTTime createASTTime(si._ast.ASTUnitNumber unitNumber,String timeHours,String timeMinutes,String timeSeconds,String timeMilliseconds)   { 
     /* generated by template ast.factorymethods.ErrorIfNull*/


     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTTime == null) {
      factoryASTTime = getFactory();
    }
    return factoryASTTime.doCreateASTTime(unitNumber, timeHours, timeMinutes, timeSeconds, timeMilliseconds);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTTime doCreateASTTime(si._ast.ASTUnitNumber unitNumber,String timeHours,String timeMinutes,String timeSeconds,String timeMilliseconds)   { 
     /* generated by template ast.factorymethods.ErrorIfNull*/


     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTTime(unitNumber, timeHours, timeMinutes, timeSeconds, timeMilliseconds);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTMapPath createASTMapPath()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTMapPath == null) {
      factoryASTMapPath = getFactory();
    }
    return factoryASTMapPath.doCreateASTMapPath();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTMapPath doCreateASTMapPath()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTMapPath();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTMapPath createASTMapPath(String mapPath)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(mapPath, "0xA7006_242 Parameter 'mapPath' must not be null.");

     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTMapPath == null) {
      factoryASTMapPath = getFactory();
    }
    return factoryASTMapPath.doCreateASTMapPath(mapPath);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTMapPath doCreateASTMapPath(String mapPath)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(mapPath, "0xA7006_636 Parameter 'mapPath' must not be null.");

     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTMapPath(mapPath);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTMapName createASTMapName()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTMapName == null) {
      factoryASTMapName = getFactory();
    }
    return factoryASTMapName.doCreateASTMapName();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTMapName doCreateASTMapName()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTMapName();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTMapName createASTMapName(String mapName)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(mapName, "0xA7006_683 Parameter 'mapName' must not be null.");

     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTMapName == null) {
      factoryASTMapName = getFactory();
    }
    return factoryASTMapName.doCreateASTMapName(mapName);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTMapName doCreateASTMapName(String mapName)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(mapName, "0xA7006_893 Parameter 'mapName' must not be null.");

     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTMapName(mapName);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTMapHeight createASTMapHeight()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTMapHeight == null) {
      factoryASTMapHeight = getFactory();
    }
    return factoryASTMapHeight.doCreateASTMapHeight();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTMapHeight doCreateASTMapHeight()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTMapHeight();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTMapHeight createASTMapHeight(String heightMap)   { 
     /* generated by template ast.factorymethods.ErrorIfNull*/


     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTMapHeight == null) {
      factoryASTMapHeight = getFactory();
    }
    return factoryASTMapHeight.doCreateASTMapHeight(heightMap);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTMapHeight doCreateASTMapHeight(String heightMap)   { 
     /* generated by template ast.factorymethods.ErrorIfNull*/


     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTMapHeight(heightMap);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTMapOverlap createASTMapOverlap()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTMapOverlap == null) {
      factoryASTMapOverlap = getFactory();
    }
    return factoryASTMapOverlap.doCreateASTMapOverlap();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTMapOverlap doCreateASTMapOverlap()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTMapOverlap();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTMapOverlap createASTMapOverlap(String mapOverlap)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(mapOverlap, "0xA7006_418 Parameter 'mapOverlap' must not be null.");

     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTMapOverlap == null) {
      factoryASTMapOverlap = getFactory();
    }
    return factoryASTMapOverlap.doCreateASTMapOverlap(mapOverlap);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTMapOverlap doCreateASTMapOverlap(String mapOverlap)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(mapOverlap, "0xA7006_777 Parameter 'mapOverlap' must not be null.");

     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTMapOverlap(mapOverlap);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTMapSectorWidth createASTMapSectorWidth()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTMapSectorWidth == null) {
      factoryASTMapSectorWidth = getFactory();
    }
    return factoryASTMapSectorWidth.doCreateASTMapSectorWidth();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTMapSectorWidth doCreateASTMapSectorWidth()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTMapSectorWidth();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTMapSectorWidth createASTMapSectorWidth(String sectorWidth)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(sectorWidth, "0xA7006_767 Parameter 'sectorWidth' must not be null.");

     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTMapSectorWidth == null) {
      factoryASTMapSectorWidth = getFactory();
    }
    return factoryASTMapSectorWidth.doCreateASTMapSectorWidth(sectorWidth);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTMapSectorWidth doCreateASTMapSectorWidth(String sectorWidth)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(sectorWidth, "0xA7006_485 Parameter 'sectorWidth' must not be null.");

     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTMapSectorWidth(sectorWidth);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTMapSectorHeight createASTMapSectorHeight()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTMapSectorHeight == null) {
      factoryASTMapSectorHeight = getFactory();
    }
    return factoryASTMapSectorHeight.doCreateASTMapSectorHeight();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTMapSectorHeight doCreateASTMapSectorHeight()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTMapSectorHeight();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTMapSectorHeight createASTMapSectorHeight(String sectorHeight)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(sectorHeight, "0xA7006_010 Parameter 'sectorHeight' must not be null.");

     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTMapSectorHeight == null) {
      factoryASTMapSectorHeight = getFactory();
    }
    return factoryASTMapSectorHeight.doCreateASTMapSectorHeight(sectorHeight);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTMapSectorHeight doCreateASTMapSectorHeight(String sectorHeight)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(sectorHeight, "0xA7006_300 Parameter 'sectorHeight' must not be null.");

     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTMapSectorHeight(sectorHeight);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTMaxSectorUsers createASTMaxSectorUsers()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTMaxSectorUsers == null) {
      factoryASTMaxSectorUsers = getFactory();
    }
    return factoryASTMaxSectorUsers.doCreateASTMaxSectorUsers();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTMaxSectorUsers doCreateASTMaxSectorUsers()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTMaxSectorUsers();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTMaxSectorUsers createASTMaxSectorUsers(String maxSectorUsers)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(maxSectorUsers, "0xA7006_517 Parameter 'maxSectorUsers' must not be null.");

     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTMaxSectorUsers == null) {
      factoryASTMaxSectorUsers = getFactory();
    }
    return factoryASTMaxSectorUsers.doCreateASTMaxSectorUsers(maxSectorUsers);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTMaxSectorUsers doCreateASTMaxSectorUsers(String maxSectorUsers)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(maxSectorUsers, "0xA7006_074 Parameter 'maxSectorUsers' must not be null.");

     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTMaxSectorUsers(maxSectorUsers);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTTimeout createASTTimeout()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTTimeout == null) {
      factoryASTTimeout = getFactory();
    }
    return factoryASTTimeout.doCreateASTTimeout();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTTimeout doCreateASTTimeout()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTTimeout();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTTimeout createASTTimeout(si._ast.ASTUnitNumber timeout)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(timeout, "0xA7006_797 Parameter 'timeout' must not be null.");

     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTTimeout == null) {
      factoryASTTimeout = getFactory();
    }
    return factoryASTTimeout.doCreateASTTimeout(timeout);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTTimeout doCreateASTTimeout(si._ast.ASTUnitNumber timeout)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(timeout, "0xA7006_230 Parameter 'timeout' must not be null.");

     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTTimeout(timeout);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTPedestrians createASTPedestrians()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTPedestrians == null) {
      factoryASTPedestrians = getFactory();
    }
    return factoryASTPedestrians.doCreateASTPedestrians();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTPedestrians doCreateASTPedestrians()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTPedestrians();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTPedestrians createASTPedestrians(java.util.List<si._ast.ASTUnitNumber> startX,java.util.List<si._ast.ASTUnitNumber> startY,java.util.List<si._ast.ASTUnitNumber> endX,java.util.List<si._ast.ASTUnitNumber> endY,java.util.List<si._ast.ASTUnitNumber> endZ)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(startX, "0xA7006_718 Parameter 'startX' must not be null.");
    Log.errorIfNull(startY, "0xA7006_984 Parameter 'startY' must not be null.");
    Log.errorIfNull(endX, "0xA7006_987 Parameter 'endX' must not be null.");
    Log.errorIfNull(endY, "0xA7006_135 Parameter 'endY' must not be null.");
    Log.errorIfNull(endZ, "0xA7006_243 Parameter 'endZ' must not be null.");

     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTPedestrians == null) {
      factoryASTPedestrians = getFactory();
    }
    return factoryASTPedestrians.doCreateASTPedestrians(startX, startY, endX, endY, endZ);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTPedestrians doCreateASTPedestrians(java.util.List<si._ast.ASTUnitNumber> startX,java.util.List<si._ast.ASTUnitNumber> startY,java.util.List<si._ast.ASTUnitNumber> endX,java.util.List<si._ast.ASTUnitNumber> endY,java.util.List<si._ast.ASTUnitNumber> endZ)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(startX, "0xA7006_637 Parameter 'startX' must not be null.");
    Log.errorIfNull(startY, "0xA7006_400 Parameter 'startY' must not be null.");
    Log.errorIfNull(endX, "0xA7006_994 Parameter 'endX' must not be null.");
    Log.errorIfNull(endY, "0xA7006_941 Parameter 'endY' must not be null.");
    Log.errorIfNull(endZ, "0xA7006_785 Parameter 'endZ' must not be null.");

     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTPedestrians(startX, startY, endX, endY, endZ);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTPedestrianDensity createASTPedestrianDensity()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTPedestrianDensity == null) {
      factoryASTPedestrianDensity = getFactory();
    }
    return factoryASTPedestrianDensity.doCreateASTPedestrianDensity();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTPedestrianDensity doCreateASTPedestrianDensity()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTPedestrianDensity();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTPedestrianDensity createASTPedestrianDensity(si._ast.ASTUnitNumber pedestrianDensity)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(pedestrianDensity, "0xA7006_471 Parameter 'pedestrianDensity' must not be null.");

     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTPedestrianDensity == null) {
      factoryASTPedestrianDensity = getFactory();
    }
    return factoryASTPedestrianDensity.doCreateASTPedestrianDensity(pedestrianDensity);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTPedestrianDensity doCreateASTPedestrianDensity(si._ast.ASTUnitNumber pedestrianDensity)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(pedestrianDensity, "0xA7006_163 Parameter 'pedestrianDensity' must not be null.");

     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTPedestrianDensity(pedestrianDensity);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTVehicles createASTVehicles()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTVehicles == null) {
      factoryASTVehicles = getFactory();
    }
    return factoryASTVehicles.doCreateASTVehicles();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTVehicles doCreateASTVehicles()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTVehicles();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTVehicles createASTVehicles(java.util.List<simulation._ast.ASTExplicitVehicle> explicitVehicles,java.util.List<simulation._ast.ASTPathedVehicle> pathedVehicles,java.util.List<simulation._ast.ASTRandomVehicle> randomVehicles)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(explicitVehicles, "0xA7006_472 Parameter 'explicitVehicles' must not be null.");
    Log.errorIfNull(pathedVehicles, "0xA7006_175 Parameter 'pathedVehicles' must not be null.");
    Log.errorIfNull(randomVehicles, "0xA7006_948 Parameter 'randomVehicles' must not be null.");

     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTVehicles == null) {
      factoryASTVehicles = getFactory();
    }
    return factoryASTVehicles.doCreateASTVehicles(explicitVehicles, pathedVehicles, randomVehicles);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTVehicles doCreateASTVehicles(java.util.List<simulation._ast.ASTExplicitVehicle> explicitVehicles,java.util.List<simulation._ast.ASTPathedVehicle> pathedVehicles,java.util.List<simulation._ast.ASTRandomVehicle> randomVehicles)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(explicitVehicles, "0xA7006_666 Parameter 'explicitVehicles' must not be null.");
    Log.errorIfNull(pathedVehicles, "0xA7006_696 Parameter 'pathedVehicles' must not be null.");
    Log.errorIfNull(randomVehicles, "0xA7006_452 Parameter 'randomVehicles' must not be null.");

     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTVehicles(explicitVehicles, pathedVehicles, randomVehicles);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTExplicitVehicle createASTExplicitVehicle()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTExplicitVehicle == null) {
      factoryASTExplicitVehicle = getFactory();
    }
    return factoryASTExplicitVehicle.doCreateASTExplicitVehicle();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTExplicitVehicle doCreateASTExplicitVehicle()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTExplicitVehicle();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTExplicitVehicle createASTExplicitVehicle(String vehicle,si._ast.ASTUnitNumber startX,si._ast.ASTUnitNumber startY,si._ast.ASTUnitNumber startRot,si._ast.ASTUnitNumber destX,si._ast.ASTUnitNumber destY,si._ast.ASTUnitNumber destZ)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(vehicle, "0xA7006_947 Parameter 'vehicle' must not be null.");
    Log.errorIfNull(startX, "0xA7006_267 Parameter 'startX' must not be null.");
    Log.errorIfNull(startY, "0xA7006_750 Parameter 'startY' must not be null.");
    Log.errorIfNull(startRot, "0xA7006_320 Parameter 'startRot' must not be null.");
    Log.errorIfNull(destX, "0xA7006_360 Parameter 'destX' must not be null.");
    Log.errorIfNull(destY, "0xA7006_978 Parameter 'destY' must not be null.");
    Log.errorIfNull(destZ, "0xA7006_853 Parameter 'destZ' must not be null.");

     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTExplicitVehicle == null) {
      factoryASTExplicitVehicle = getFactory();
    }
    return factoryASTExplicitVehicle.doCreateASTExplicitVehicle(vehicle, startX, startY, startRot, destX, destY, destZ);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTExplicitVehicle doCreateASTExplicitVehicle(String vehicle,si._ast.ASTUnitNumber startX,si._ast.ASTUnitNumber startY,si._ast.ASTUnitNumber startRot,si._ast.ASTUnitNumber destX,si._ast.ASTUnitNumber destY,si._ast.ASTUnitNumber destZ)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(vehicle, "0xA7006_139 Parameter 'vehicle' must not be null.");
    Log.errorIfNull(startX, "0xA7006_933 Parameter 'startX' must not be null.");
    Log.errorIfNull(startY, "0xA7006_918 Parameter 'startY' must not be null.");
    Log.errorIfNull(startRot, "0xA7006_275 Parameter 'startRot' must not be null.");
    Log.errorIfNull(destX, "0xA7006_901 Parameter 'destX' must not be null.");
    Log.errorIfNull(destY, "0xA7006_973 Parameter 'destY' must not be null.");
    Log.errorIfNull(destZ, "0xA7006_194 Parameter 'destZ' must not be null.");

     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTExplicitVehicle(vehicle, startX, startY, startRot, destX, destY, destZ);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTPathedVehicle createASTPathedVehicle()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTPathedVehicle == null) {
      factoryASTPathedVehicle = getFactory();
    }
    return factoryASTPathedVehicle.doCreateASTPathedVehicle();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTPathedVehicle doCreateASTPathedVehicle()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTPathedVehicle();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTPathedVehicle createASTPathedVehicle(si._ast.ASTUnitNumber spawnX,si._ast.ASTUnitNumber spawnY,si._ast.ASTUnitNumber spawnRadius,si._ast.ASTUnitNumber destX,si._ast.ASTUnitNumber destY,si._ast.ASTUnitNumber destRadius,String amount)   { 
     /* generated by template ast.factorymethods.ErrorIfNull*/

    Log.errorIfNull(spawnX, "0xA7007_447 Parameter 'spawnX' must not be null.");
    Log.errorIfNull(spawnY, "0xA7007_448 Parameter 'spawnY' must not be null.");
    Log.errorIfNull(spawnRadius, "0xA7007_093 Parameter 'spawnRadius' must not be null.");
    Log.errorIfNull(destX, "0xA7007_786 Parameter 'destX' must not be null.");
    Log.errorIfNull(destY, "0xA7007_785 Parameter 'destY' must not be null.");
    Log.errorIfNull(destRadius, "0xA7007_990 Parameter 'destRadius' must not be null.");

     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTPathedVehicle == null) {
      factoryASTPathedVehicle = getFactory();
    }
    return factoryASTPathedVehicle.doCreateASTPathedVehicle(spawnX, spawnY, spawnRadius, destX, destY, destRadius, amount);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTPathedVehicle doCreateASTPathedVehicle(si._ast.ASTUnitNumber spawnX,si._ast.ASTUnitNumber spawnY,si._ast.ASTUnitNumber spawnRadius,si._ast.ASTUnitNumber destX,si._ast.ASTUnitNumber destY,si._ast.ASTUnitNumber destRadius,String amount)   { 
     /* generated by template ast.factorymethods.ErrorIfNull*/

    Log.errorIfNull(spawnX, "0xA7007_447 Parameter 'spawnX' must not be null.");
    Log.errorIfNull(spawnY, "0xA7007_448 Parameter 'spawnY' must not be null.");
    Log.errorIfNull(spawnRadius, "0xA7007_093 Parameter 'spawnRadius' must not be null.");
    Log.errorIfNull(destX, "0xA7007_786 Parameter 'destX' must not be null.");
    Log.errorIfNull(destY, "0xA7007_785 Parameter 'destY' must not be null.");
    Log.errorIfNull(destRadius, "0xA7007_990 Parameter 'destRadius' must not be null.");

     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTPathedVehicle(spawnX, spawnY, spawnRadius, destX, destY, destRadius, amount);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTRandomVehicle createASTRandomVehicle()   { 
     
     /* generated by template ast.factorymethods.Create*/

  {
    if (factoryASTRandomVehicle == null) {
      factoryASTRandomVehicle = getFactory();
    }
    return factoryASTRandomVehicle.doCreateASTRandomVehicle();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTRandomVehicle doCreateASTRandomVehicle()   { 
     
     /* generated by template ast.factorymethods.DoCreate*/

  {
    return new ASTRandomVehicle();
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  ASTRandomVehicle createASTRandomVehicle(String amount,si._ast.ASTUnitNumber startX,si._ast.ASTUnitNumber startY,si._ast.ASTUnitNumber destX,si._ast.ASTUnitNumber destY)   { 
     /* generated by template ast.factorymethods.ErrorIfNull*/

    Log.errorIfNull(amount, "0xA7007_145 Parameter 'amount' must not be null.");

     /* generated by template ast.factorymethods.CreateWithParams*/

  {
    if (factoryASTRandomVehicle == null) {
      factoryASTRandomVehicle = getFactory();
    }
    return factoryASTRandomVehicle.doCreateASTRandomVehicle(amount, startX, startY, destX, destY);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   protected  ASTRandomVehicle doCreateASTRandomVehicle(String amount,si._ast.ASTUnitNumber startX,si._ast.ASTUnitNumber startY,si._ast.ASTUnitNumber destX,si._ast.ASTUnitNumber destY)   { 
     /* generated by template ast.factorymethods.ErrorIfNull*/

    Log.errorIfNull(amount, "0xA7007_145 Parameter 'amount' must not be null.");

     /* generated by template ast.factorymethods.DoCreateWithParams*/
 
  {
    return new ASTRandomVehicle(amount, startX, startY, destX, destY);
  }

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  weather._ast.ASTTemperature createASTTemperature()   { 
     
     /* generated by template ast.factorymethods.CreateDelegate*/

   return weather._ast.WeatherNodeFactory.createASTTemperature();

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  weather._ast.ASTHumidity createASTHumidity()   { 
     
     /* generated by template ast.factorymethods.CreateDelegate*/

   return weather._ast.WeatherNodeFactory.createASTHumidity();

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  weather._ast.ASTPressure createASTPressure()   { 
     
     /* generated by template ast.factorymethods.CreateDelegate*/

   return weather._ast.WeatherNodeFactory.createASTPressure();

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  weather._ast.ASTWindstrength createASTWindstrength()   { 
     
     /* generated by template ast.factorymethods.CreateDelegate*/

   return weather._ast.WeatherNodeFactory.createASTWindstrength();

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  weather._ast.ASTWinddirection createASTWinddirection()   { 
     
     /* generated by template ast.factorymethods.CreateDelegate*/

   return weather._ast.WeatherNodeFactory.createASTWinddirection();

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  weather._ast.ASTPrecipitationtype createASTPrecipitationtype()   { 
     
     /* generated by template ast.factorymethods.CreateDelegate*/

   return weather._ast.WeatherNodeFactory.createASTPrecipitationtype();

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  weather._ast.ASTPrecipitationamount createASTPrecipitationamount()   { 
     
     /* generated by template ast.factorymethods.CreateDelegate*/

   return weather._ast.WeatherNodeFactory.createASTPrecipitationamount();

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  weather._ast.ASTClouding createASTClouding()   { 
     
     /* generated by template ast.factorymethods.CreateDelegate*/

   return weather._ast.WeatherNodeFactory.createASTClouding();

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  weather._ast.ASTSight createASTSight()   { 
     
     /* generated by template ast.factorymethods.CreateDelegate*/

   return weather._ast.WeatherNodeFactory.createASTSight();

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  weather._ast.ASTWeatherPhenomena createASTWeatherPhenomena()   { 
     
     /* generated by template ast.factorymethods.CreateDelegate*/

   return weather._ast.WeatherNodeFactory.createASTWeatherPhenomena();

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  weather._ast.ASTOpticalPhenomena createASTOpticalPhenomena()   { 
     
     /* generated by template ast.factorymethods.CreateDelegate*/

   return weather._ast.WeatherNodeFactory.createASTOpticalPhenomena();

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  weather._ast.ASTArtificialPhenomena createASTArtificialPhenomena()   { 
     
     /* generated by template ast.factorymethods.CreateDelegate*/

   return weather._ast.WeatherNodeFactory.createASTArtificialPhenomena();

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  si._ast.ASTNumber createASTNumber()   { 
     
     /* generated by template ast.factorymethods.CreateDelegate*/

   return si._ast.SINodeFactory.createASTNumber();

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  si._ast.ASTNumber createASTNumber(si._ast.ASTFloatPointUnitNumber floatPointUnitNumber,si._ast.ASTHexUnitNumber hexUnitNumber,si._ast.ASTComplexNumber complexNumber,si._ast.ASTUnitNumber unitNumber)   { 
     
     /* generated by template ast.factorymethods.CreateWithParamsDelegate*/

   return si._ast.SINodeFactory.createASTNumber(floatPointUnitNumber, hexUnitNumber, complexNumber, unitNumber);

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  si._ast.ASTFloatPointUnitNumber createASTFloatPointUnitNumber()   { 
     
     /* generated by template ast.factorymethods.CreateDelegate*/

   return si._ast.SINodeFactory.createASTFloatPointUnitNumber();

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  si._ast.ASTHexUnitNumber createASTHexUnitNumber()   { 
     
     /* generated by template ast.factorymethods.CreateDelegate*/

   return si._ast.SINodeFactory.createASTHexUnitNumber();

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  si._ast.ASTUnitNumber createASTUnitNumber()   { 
     
     /* generated by template ast.factorymethods.CreateDelegate*/

   return si._ast.SINodeFactory.createASTUnitNumber();

  } 

  /* generated by template ast.ClassMethod*/
  
   public  static  si._ast.ASTComplexNumber createASTComplexNumber()   { 
     
     /* generated by template ast.factorymethods.CreateDelegate*/

   return si._ast.SINodeFactory.createASTComplexNumber();

  } 


}

