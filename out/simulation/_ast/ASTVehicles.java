/* generated from model Simulation*/
/* generated by template ast.AstClass*/

package simulation._ast;

/* generated by template ast_emf.AstEImports*/
import java.util.Optional;
import java.util.Iterator;
import de.se_rwth.commons.logging.Log;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;

 public  class ASTVehicles extends /* generated by template ast.AstSuperTypes*/
de.monticore.emf._ast.ASTECNode implements  ASTSimulationNode
 {
  /* generated by template ast.Attribute*/
  
   protected  java.util.List<simulation._ast.ASTExplicitVehicle> explicitVehicles = new EObjectContainmentEList<ASTExplicitVehicle>(ASTExplicitVehicle.class, this, SimulationPackage.ASTVehicles_ExplicitVehicles);

  /* generated by template ast.Attribute*/
  
   protected  java.util.List<simulation._ast.ASTPathedVehicle> pathedVehicles = new EObjectContainmentEList<ASTPathedVehicle>(ASTPathedVehicle.class, this, SimulationPackage.ASTVehicles_PathedVehicles);

  /* generated by template ast.Attribute*/
  
   protected  java.util.List<simulation._ast.ASTRandomVehicle> randomVehicles = new EObjectContainmentEList<ASTRandomVehicle>(ASTRandomVehicle.class, this, SimulationPackage.ASTVehicles_RandomVehicles);

    /* generated by template ast.Constructor*/
  
   protected  ASTVehicles (/* generated by template ast.ParametersDeclaration*/
    // Parameters declaration
 
    )  
  /* generated by template ast.EmptyMethodBody*/

  { // empty body 
  }


    /* generated by template ast.Constructor*/
  
   protected  ASTVehicles (/* generated by template ast.ConstructorParametersDeclaration*/
     java.util.List<simulation._ast.ASTExplicitVehicle> explicitVehicles 
    ,
     java.util.List<simulation._ast.ASTPathedVehicle> pathedVehicles 
    ,
     java.util.List<simulation._ast.ASTRandomVehicle> randomVehicles 
 
    )  
  /* generated by template ast.ConstructorAttributesSetter*/
  {
    setExplicitVehicles(explicitVehicles);
    setPathedVehicles(pathedVehicles);
    setRandomVehicles(randomVehicles);
  }


  
    /* generated by template ast.ClassMethod*/
  
   public  void accept(simulation._visitor.SimulationVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_313 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.Accept*/

      visitor.handle(this);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void accept(weather._visitor.WeatherVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_961 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.AcceptSuper*/

    if (visitor instanceof simulation._visitor.SimulationVisitor) {
      accept((simulation._visitor.SimulationVisitor) visitor);      
    } else {
      de.se_rwth.commons.logging.Log.error("0xA7000_846AST node type ASTVehicles of the sub language Simulation expected a visitor of type simulation._visitor.SimulationVisitor, but got weather._visitor.WeatherVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
    }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void accept(si._visitor.SIVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_423 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.AcceptSuper*/

    if (visitor instanceof simulation._visitor.SimulationVisitor) {
      accept((simulation._visitor.SimulationVisitor) visitor);      
    } else {
      de.se_rwth.commons.logging.Log.error("0xA7000_324AST node type ASTVehicles of the sub language Simulation expected a visitor of type simulation._visitor.SimulationVisitor, but got si._visitor.SIVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
    }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEquals(Object o,boolean forceSameOrder)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_909 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.DeepEqualsWithOrder*/

      ASTVehicles comp;
    if ((o instanceof ASTVehicles)) {
      comp = (ASTVehicles) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing explicitVehicles
    if (this.explicitVehicles.size() != comp.explicitVehicles.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<simulation._ast.ASTExplicitVehicle> it1 = this.explicitVehicles.iterator();
        Iterator<simulation._ast.ASTExplicitVehicle> it2 = comp.explicitVehicles.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<simulation._ast.ASTExplicitVehicle> it1 = this.explicitVehicles.iterator();
        while (it1.hasNext()) {
          simulation._ast.ASTExplicitVehicle oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<simulation._ast.ASTExplicitVehicle> it2 = comp.explicitVehicles.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing pathedVehicles
    if (this.pathedVehicles.size() != comp.pathedVehicles.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<simulation._ast.ASTPathedVehicle> it1 = this.pathedVehicles.iterator();
        Iterator<simulation._ast.ASTPathedVehicle> it2 = comp.pathedVehicles.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<simulation._ast.ASTPathedVehicle> it1 = this.pathedVehicles.iterator();
        while (it1.hasNext()) {
          simulation._ast.ASTPathedVehicle oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<simulation._ast.ASTPathedVehicle> it2 = comp.pathedVehicles.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing randomVehicles
    if (this.randomVehicles.size() != comp.randomVehicles.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<simulation._ast.ASTRandomVehicle> it1 = this.randomVehicles.iterator();
        Iterator<simulation._ast.ASTRandomVehicle> it2 = comp.randomVehicles.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<simulation._ast.ASTRandomVehicle> it1 = this.randomVehicles.iterator();
        while (it1.hasNext()) {
          simulation._ast.ASTRandomVehicle oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<simulation._ast.ASTRandomVehicle> it2 = comp.randomVehicles.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     


  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEquals(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_386 Parameter 'o' must not be null.");

     return deepEquals(o, true);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEqualsWithComments(Object o,boolean forceSameOrder)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_485 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.DeepEqualsWithComments*/

      ASTVehicles comp;
    if ((o instanceof ASTVehicles)) {
      comp = (ASTVehicles) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    // comparing explicitVehicles
    if (this.explicitVehicles.size() != comp.explicitVehicles.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<simulation._ast.ASTExplicitVehicle> it1 = this.explicitVehicles.iterator();
        Iterator<simulation._ast.ASTExplicitVehicle> it2 = comp.explicitVehicles.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<simulation._ast.ASTExplicitVehicle> it1 = this.explicitVehicles.iterator();
        while (it1.hasNext()) {
          simulation._ast.ASTExplicitVehicle oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<simulation._ast.ASTExplicitVehicle> it2 = comp.explicitVehicles.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing pathedVehicles
    if (this.pathedVehicles.size() != comp.pathedVehicles.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<simulation._ast.ASTPathedVehicle> it1 = this.pathedVehicles.iterator();
        Iterator<simulation._ast.ASTPathedVehicle> it2 = comp.pathedVehicles.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<simulation._ast.ASTPathedVehicle> it1 = this.pathedVehicles.iterator();
        while (it1.hasNext()) {
          simulation._ast.ASTPathedVehicle oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<simulation._ast.ASTPathedVehicle> it2 = comp.pathedVehicles.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing randomVehicles
    if (this.randomVehicles.size() != comp.randomVehicles.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<simulation._ast.ASTRandomVehicle> it1 = this.randomVehicles.iterator();
        Iterator<simulation._ast.ASTRandomVehicle> it2 = comp.randomVehicles.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<simulation._ast.ASTRandomVehicle> it1 = this.randomVehicles.iterator();
        while (it1.hasNext()) {
          simulation._ast.ASTRandomVehicle oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<simulation._ast.ASTRandomVehicle> it2 = comp.randomVehicles.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEqualsWithComments(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_780 Parameter 'o' must not be null.");

     return deepEqualsWithComments(o, true);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean equalAttributes(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_319 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.EqualAttributes*/

      ASTVehicles comp;
    if ((o instanceof ASTVehicles)) {
      comp = (ASTVehicles) o;
    } else {
      return false;
    }
    return true;     


  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean equalsWithComments(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_360 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.EqualsWithComments*/

      ASTVehicles comp;
    if ((o instanceof ASTVehicles)) {
      comp = (ASTVehicles) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreComments().size() == comp.get_PreComments().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreComments().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreComments().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostComments().size() == comp.get_PostComments().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostComments().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostComments().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  java.util.Collection<de.monticore.ast.ASTNode> get_Children()   { 
     
     /* generated by template ast.additionalmethods.GetChildren*/

    java.util.LinkedList<de.monticore.ast.ASTNode> result = new java.util.LinkedList<de.monticore.ast.ASTNode>();
        result.addAll(getExplicitVehicles());
        result.addAll(getPathedVehicles());
        result.addAll(getRandomVehicles());
    return result;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void remove_Child(de.monticore.ast.ASTNode child)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(child, "0xA7006_501 Parameter 'child' must not be null.");

     /* generated by template ast.additionalmethods.RemoveChild*/

      if (getExplicitVehicles().contains(child)) {
        getExplicitVehicles().remove(child);
      }
      if (getPathedVehicles().contains(child)) {
        getPathedVehicles().remove(child);
      }
      if (getRandomVehicles().contains(child)) {
        getRandomVehicles().remove(child);
      }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  static  Builder getBuilder()   { 
     
     return new Builder();

  } 

    /* generated by template ast.ClassMethod*/
  
   public  ASTVehicles deepClone()   { 
     
     return deepClone(_construct());

  } 

    /* generated by template ast.ClassMethod*/
  
   public  ASTVehicles deepClone(ASTVehicles result)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(result, "0xA7006_225 Parameter 'result' must not be null.");

     /* generated by template ast.additionalmethods.DeepCloneWithParameters*/
  
    super.deepClone(result);
    
    result.explicitVehicles = com.google.common.collect.Lists.newArrayList();
    this.explicitVehicles.forEach(s -> result.explicitVehicles.add(s.deepClone()));
    result.pathedVehicles = com.google.common.collect.Lists.newArrayList();
    this.pathedVehicles.forEach(s -> result.pathedVehicles.add(s.deepClone()));
    result.randomVehicles = com.google.common.collect.Lists.newArrayList();
    this.randomVehicles.forEach(s -> result.randomVehicles.add(s.deepClone()));
    
    return result;

  } 

    /* generated by template ast.ClassMethod*/
  
   protected  ASTVehicles _construct()   { 
     
     return new ASTVehicles();

  } 

    /* generated by template ast.ClassMethod*/
  
   public  java.util.List<simulation._ast.ASTExplicitVehicle> getExplicitVehicles()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.explicitVehicles;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  java.util.List<simulation._ast.ASTPathedVehicle> getPathedVehicles()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.pathedVehicles;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  java.util.List<simulation._ast.ASTRandomVehicle> getRandomVehicles()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.randomVehicles;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setExplicitVehicles(java.util.List<simulation._ast.ASTExplicitVehicle> explicitVehicles)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(explicitVehicles, "0xA7006_137 Parameter 'explicitVehicles' must not be null.");

     /* generated by template ast_emf.additionalmethods.Set*/

    if (explicitVehicles.isEmpty() && this.explicitVehicles.isEmpty()) {
      return;
    }  
    java.util.List<simulation._ast.ASTExplicitVehicle> oldExplicitVehicles = this.explicitVehicles;
    this.explicitVehicles = explicitVehicles;
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTVehicles_ExplicitVehicles, oldExplicitVehicles, explicitVehicles));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setPathedVehicles(java.util.List<simulation._ast.ASTPathedVehicle> pathedVehicles)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(pathedVehicles, "0xA7006_287 Parameter 'pathedVehicles' must not be null.");

     /* generated by template ast_emf.additionalmethods.Set*/

    if (pathedVehicles.isEmpty() && this.pathedVehicles.isEmpty()) {
      return;
    }  
    java.util.List<simulation._ast.ASTPathedVehicle> oldPathedVehicles = this.pathedVehicles;
    this.pathedVehicles = pathedVehicles;
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTVehicles_PathedVehicles, oldPathedVehicles, pathedVehicles));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setRandomVehicles(java.util.List<simulation._ast.ASTRandomVehicle> randomVehicles)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(randomVehicles, "0xA7006_463 Parameter 'randomVehicles' must not be null.");

     /* generated by template ast_emf.additionalmethods.Set*/

    if (randomVehicles.isEmpty() && this.randomVehicles.isEmpty()) {
      return;
    }  
    java.util.List<simulation._ast.ASTRandomVehicle> oldRandomVehicles = this.randomVehicles;
    this.randomVehicles = randomVehicles;
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTVehicles_RandomVehicles, oldRandomVehicles, randomVehicles));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Object eGet(int featureID,boolean resolve,boolean coreType)   { 
     
     /* generated by template ast_emf.additionalmethods.EGet*/
  
    switch (featureID) {
      case SimulationPackage.ASTVehicles_ExplicitVehicles:
         return getExplicitVehicles();
      case SimulationPackage.ASTVehicles_PathedVehicles:
         return getPathedVehicles();
      case SimulationPackage.ASTVehicles_RandomVehicles:
         return getRandomVehicles();
    }
    return eDynamicGet(featureID, resolve, coreType);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  void eSet(int featureID,Object newValue)   { 
     
     /* generated by template ast_emf.additionalmethods.ESet*/
  
    switch (featureID) {
      case SimulationPackage.ASTVehicles_ExplicitVehicles:
        setExplicitVehicles((java.util.List<simulation._ast.ASTExplicitVehicle>)newValue);
        return;
      case SimulationPackage.ASTVehicles_PathedVehicles:
        setPathedVehicles((java.util.List<simulation._ast.ASTPathedVehicle>)newValue);
        return;
      case SimulationPackage.ASTVehicles_RandomVehicles:
        setRandomVehicles((java.util.List<simulation._ast.ASTRandomVehicle>)newValue);
        return;
    }
    eDynamicSet(featureID, newValue);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  void eUnset(int featureID)   { 
     
     /* generated by template ast_emf.additionalmethods.EUnset*/
 
    switch (featureID) {
      case SimulationPackage.ASTVehicles_ExplicitVehicles:
        explicitVehicles.clear();
      return;
      case SimulationPackage.ASTVehicles_PathedVehicles:
        pathedVehicles.clear();
      return;
      case SimulationPackage.ASTVehicles_RandomVehicles:
        randomVehicles.clear();
      return;
    }
    eDynamicUnset(featureID);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean eIsSet(int featureID)   { 
     
     /* generated by template ast_emf.additionalmethods.EIsSet*/
 
    switch (featureID) {
      case SimulationPackage.ASTVehicles_ExplicitVehicles:
        return !getExplicitVehicles().isEmpty();
      case SimulationPackage.ASTVehicles_PathedVehicles:
        return !getPathedVehicles().isEmpty();
      case SimulationPackage.ASTVehicles_RandomVehicles:
        return !getRandomVehicles().isEmpty();
    }
    return eDynamicIsSet(featureID);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  int eBaseStructuralFeatureID(int featureID,Class<?> baseClass)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(baseClass, "0xA7006_212 Parameter 'baseClass' must not be null.");

     /* generated by template ast_emf.additionalmethods.EStructuralFeature*/
  
    return super.eBaseStructuralFeatureID(featureID, baseClass);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  int eDerivedStructuralFeatureID(int featureID,Class<?> baseClass)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(baseClass, "0xA7006_912 Parameter 'baseClass' must not be null.");

     /* generated by template ast_emf.additionalmethods.EStructuralFeature*/
  
    return super.eDerivedStructuralFeatureID(featureID, baseClass);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  String toString()   { 
     
     /* generated by template ast_emf.additionalmethods.EToString*/
  
    if (eIsProxy()) {
      return super.toString();
    }
    StringBuffer result = new StringBuffer(getClass().getSimpleName());
    if (!explicitVehicles.isEmpty()) {
      result.append(" ExplicitVehicles: ");
      result.append(explicitVehicles);
    } 
    if (!pathedVehicles.isEmpty()) {
      result.append(" PathedVehicles: ");
      result.append(pathedVehicles);
    } 
    if (!randomVehicles.isEmpty()) {
      result.append(" RandomVehicles: ");
      result.append(randomVehicles);
    } 
    return result.toString();
  } 

    /* generated by template ast.ClassMethod*/
  
   protected  EClass eStaticClass()   { 
     
     return SimulationPackage.Literals.ASTVehicles;
  } 

   
  /* generated by template ast.ClassContent*/
  // Class content

    /* generated by template ast.AstBuilder*/

 /**
   * Builder for {@link ASTVehicles}.
   */
  public static class Builder  {
    /* generated by template ast.BuilderAttribute*/
     protected  java.util.List<simulation._ast.ASTExplicitVehicle> explicitVehicles = new java.util.ArrayList<>();

    /* generated by template ast.BuilderAttribute*/
     protected  java.util.List<simulation._ast.ASTPathedVehicle> pathedVehicles = new java.util.ArrayList<>();

    /* generated by template ast.BuilderAttribute*/
     protected  java.util.List<simulation._ast.ASTRandomVehicle> randomVehicles = new java.util.ArrayList<>();

    public ASTVehicles build() {
      return new ASTVehicles (/* generated by template ast.BuilderConstructorParametersDeclaration*/
  
        this.explicitVehicles 
       ,
       this.pathedVehicles 
       ,
       this.randomVehicles 

      );
    }
    /* generated by template ast.AstBuilderAttributeSetter*/
    public Builder explicitVehicles(java.util.List<simulation._ast.ASTExplicitVehicle> explicitVehicles) {
      this.explicitVehicles = explicitVehicles;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder pathedVehicles(java.util.List<simulation._ast.ASTPathedVehicle> pathedVehicles) {
      this.pathedVehicles = pathedVehicles;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder randomVehicles(java.util.List<simulation._ast.ASTRandomVehicle> randomVehicles) {
      this.randomVehicles = randomVehicles;
      return this;
    }

  }    

  
}
