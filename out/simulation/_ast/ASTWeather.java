/* generated from model Simulation*/
/* generated by template ast.AstClass*/

package simulation._ast;

/* generated by template ast_emf.AstEImports*/
import java.util.Optional;
import java.util.Iterator;
import de.se_rwth.commons.logging.Log;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;

 public  class ASTWeather extends /* generated by template ast.AstSuperTypes*/
de.monticore.emf._ast.ASTECNode implements  ASTSimulationNode
 {
  /* generated by template ast.Attribute*/
  
   protected  Optional<simulation._ast.ASTFixedWeather> fixedWeather = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<simulation._ast.ASTSequenceWeather> sequenceWeather = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<simulation._ast.ASTRandomWeather> randomWeather = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<simulation._ast.ASTForecast> forecast = Optional.empty();

    /* generated by template ast.Constructor*/
  
   protected  ASTWeather (/* generated by template ast.ParametersDeclaration*/
    // Parameters declaration
 
    )  
  /* generated by template ast.EmptyMethodBody*/

  { // empty body 
  }


    /* generated by template ast.Constructor*/
  
   protected  ASTWeather (/* generated by template ast.ConstructorParametersDeclaration*/
     simulation._ast.ASTFixedWeather fixedWeather 
    ,
     simulation._ast.ASTSequenceWeather sequenceWeather 
    ,
     simulation._ast.ASTRandomWeather randomWeather 
    ,
     simulation._ast.ASTForecast forecast 
 
    )  
  /* generated by template ast.ConstructorAttributesSetter*/
  {
    setFixedWeather(fixedWeather);
    setSequenceWeather(sequenceWeather);
    setRandomWeather(randomWeather);
    setForecast(forecast);
  }


  
    /* generated by template ast.ClassMethod*/
  
   public  void accept(simulation._visitor.SimulationVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_466 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.Accept*/

      visitor.handle(this);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void accept(weather._visitor.WeatherVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_091 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.AcceptSuper*/

    if (visitor instanceof simulation._visitor.SimulationVisitor) {
      accept((simulation._visitor.SimulationVisitor) visitor);      
    } else {
      de.se_rwth.commons.logging.Log.error("0xA7000_150AST node type ASTWeather of the sub language Simulation expected a visitor of type simulation._visitor.SimulationVisitor, but got weather._visitor.WeatherVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
    }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void accept(si._visitor.SIVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_287 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.AcceptSuper*/

    if (visitor instanceof simulation._visitor.SimulationVisitor) {
      accept((simulation._visitor.SimulationVisitor) visitor);      
    } else {
      de.se_rwth.commons.logging.Log.error("0xA7000_959AST node type ASTWeather of the sub language Simulation expected a visitor of type simulation._visitor.SimulationVisitor, but got si._visitor.SIVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
    }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEquals(Object o,boolean forceSameOrder)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_158 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.DeepEqualsWithOrder*/

      ASTWeather comp;
    if ((o instanceof ASTWeather)) {
      comp = (ASTWeather) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing fixedWeather   
    if ( this.fixedWeather.isPresent() != comp.fixedWeather.isPresent() ||
      (this.fixedWeather.isPresent() && !this.fixedWeather.get().deepEquals(comp.fixedWeather.get())) ) {
      return false;
    }
    // comparing sequenceWeather   
    if ( this.sequenceWeather.isPresent() != comp.sequenceWeather.isPresent() ||
      (this.sequenceWeather.isPresent() && !this.sequenceWeather.get().deepEquals(comp.sequenceWeather.get())) ) {
      return false;
    }
    // comparing randomWeather   
    if ( this.randomWeather.isPresent() != comp.randomWeather.isPresent() ||
      (this.randomWeather.isPresent() && !this.randomWeather.get().deepEquals(comp.randomWeather.get())) ) {
      return false;
    }
    // comparing forecast   
    if ( this.forecast.isPresent() != comp.forecast.isPresent() ||
      (this.forecast.isPresent() && !this.forecast.get().deepEquals(comp.forecast.get())) ) {
      return false;
    }
    return true;     


  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEquals(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_104 Parameter 'o' must not be null.");

     return deepEquals(o, true);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEqualsWithComments(Object o,boolean forceSameOrder)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_286 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.DeepEqualsWithComments*/

      ASTWeather comp;
    if ((o instanceof ASTWeather)) {
      comp = (ASTWeather) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    // comparing fixedWeather
    if ( this.fixedWeather.isPresent() != comp.fixedWeather.isPresent() ||
      (this.fixedWeather.isPresent() && !this.fixedWeather.get().deepEqualsWithComments(comp.fixedWeather.get())) ) {
      return false;
    }
    // comparing sequenceWeather
    if ( this.sequenceWeather.isPresent() != comp.sequenceWeather.isPresent() ||
      (this.sequenceWeather.isPresent() && !this.sequenceWeather.get().deepEqualsWithComments(comp.sequenceWeather.get())) ) {
      return false;
    }
    // comparing randomWeather
    if ( this.randomWeather.isPresent() != comp.randomWeather.isPresent() ||
      (this.randomWeather.isPresent() && !this.randomWeather.get().deepEqualsWithComments(comp.randomWeather.get())) ) {
      return false;
    }
    // comparing forecast
    if ( this.forecast.isPresent() != comp.forecast.isPresent() ||
      (this.forecast.isPresent() && !this.forecast.get().deepEqualsWithComments(comp.forecast.get())) ) {
      return false;
    }
    return true;     

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEqualsWithComments(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_927 Parameter 'o' must not be null.");

     return deepEqualsWithComments(o, true);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean equalAttributes(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_665 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.EqualAttributes*/

      ASTWeather comp;
    if ((o instanceof ASTWeather)) {
      comp = (ASTWeather) o;
    } else {
      return false;
    }
    return true;     


  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean equalsWithComments(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_920 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.EqualsWithComments*/

      ASTWeather comp;
    if ((o instanceof ASTWeather)) {
      comp = (ASTWeather) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreComments().size() == comp.get_PreComments().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreComments().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreComments().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostComments().size() == comp.get_PostComments().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostComments().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostComments().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  java.util.Collection<de.monticore.ast.ASTNode> get_Children()   { 
     
     /* generated by template ast.additionalmethods.GetChildren*/

    java.util.LinkedList<de.monticore.ast.ASTNode> result = new java.util.LinkedList<de.monticore.ast.ASTNode>();
        if (getFixedWeather().isPresent()) {
          result.add(getFixedWeather().get());
        }
        if (getSequenceWeather().isPresent()) {
          result.add(getSequenceWeather().get());
        }
        if (getRandomWeather().isPresent()) {
          result.add(getRandomWeather().get());
        }
        if (getForecast().isPresent()) {
          result.add(getForecast().get());
        }
    return result;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void remove_Child(de.monticore.ast.ASTNode child)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(child, "0xA7006_081 Parameter 'child' must not be null.");

     /* generated by template ast.additionalmethods.RemoveChild*/

      if (getFixedWeather().isPresent() && getFixedWeather().get() == child) {
        setFixedWeather(null);
      }
      if (getSequenceWeather().isPresent() && getSequenceWeather().get() == child) {
        setSequenceWeather(null);
      }
      if (getRandomWeather().isPresent() && getRandomWeather().get() == child) {
        setRandomWeather(null);
      }
      if (getForecast().isPresent() && getForecast().get() == child) {
        setForecast(null);
      }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  static  Builder getBuilder()   { 
     
     return new Builder();

  } 

    /* generated by template ast.ClassMethod*/
  
   public  ASTWeather deepClone()   { 
     
     return deepClone(_construct());

  } 

    /* generated by template ast.ClassMethod*/
  
   public  ASTWeather deepClone(ASTWeather result)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(result, "0xA7006_505 Parameter 'result' must not be null.");

     /* generated by template ast.additionalmethods.DeepCloneWithParameters*/
  
    super.deepClone(result);
    
    result.fixedWeather = this.fixedWeather.isPresent()? Optional.ofNullable((simulation._ast.ASTFixedWeather)this.fixedWeather.get().deepClone()) : Optional.empty();
    result.sequenceWeather = this.sequenceWeather.isPresent()? Optional.ofNullable((simulation._ast.ASTSequenceWeather)this.sequenceWeather.get().deepClone()) : Optional.empty();
    result.randomWeather = this.randomWeather.isPresent()? Optional.ofNullable((simulation._ast.ASTRandomWeather)this.randomWeather.get().deepClone()) : Optional.empty();
    result.forecast = this.forecast.isPresent()? Optional.ofNullable((simulation._ast.ASTForecast)this.forecast.get().deepClone()) : Optional.empty();
    
    return result;

  } 

    /* generated by template ast.ClassMethod*/
  
   protected  ASTWeather _construct()   { 
     
     return new ASTWeather();

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<simulation._ast.ASTFixedWeather> getFixedWeather()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.fixedWeather;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<simulation._ast.ASTSequenceWeather> getSequenceWeather()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.sequenceWeather;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<simulation._ast.ASTRandomWeather> getRandomWeather()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.randomWeather;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<simulation._ast.ASTForecast> getForecast()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.forecast;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setFixedWeather(simulation._ast.ASTFixedWeather fixedWeather)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    simulation._ast.ASTFixedWeather oldFixedWeather = this.fixedWeather.isPresent()? this.fixedWeather.get() : null;
    this.fixedWeather = Optional.ofNullable(fixedWeather);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTWeather_FixedWeather, oldFixedWeather, fixedWeather));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean fixedWeatherIsPresent()   { 
     
       return fixedWeather.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setForecast(simulation._ast.ASTForecast forecast)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    simulation._ast.ASTForecast oldForecast = this.forecast.isPresent()? this.forecast.get() : null;
    this.forecast = Optional.ofNullable(forecast);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTWeather_Forecast, oldForecast, forecast));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean forecastIsPresent()   { 
     
       return forecast.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setRandomWeather(simulation._ast.ASTRandomWeather randomWeather)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    simulation._ast.ASTRandomWeather oldRandomWeather = this.randomWeather.isPresent()? this.randomWeather.get() : null;
    this.randomWeather = Optional.ofNullable(randomWeather);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTWeather_RandomWeather, oldRandomWeather, randomWeather));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean randomWeatherIsPresent()   { 
     
       return randomWeather.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setSequenceWeather(simulation._ast.ASTSequenceWeather sequenceWeather)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    simulation._ast.ASTSequenceWeather oldSequenceWeather = this.sequenceWeather.isPresent()? this.sequenceWeather.get() : null;
    this.sequenceWeather = Optional.ofNullable(sequenceWeather);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTWeather_SequenceWeather, oldSequenceWeather, sequenceWeather));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean sequenceWeatherIsPresent()   { 
     
       return sequenceWeather.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Object eGet(int featureID,boolean resolve,boolean coreType)   { 
     
     /* generated by template ast_emf.additionalmethods.EGet*/
  
    switch (featureID) {
      case SimulationPackage.ASTWeather_FixedWeather:
         return getFixedWeather().isPresent()? getFixedWeather().get() : null;
      case SimulationPackage.ASTWeather_SequenceWeather:
         return getSequenceWeather().isPresent()? getSequenceWeather().get() : null;
      case SimulationPackage.ASTWeather_RandomWeather:
         return getRandomWeather().isPresent()? getRandomWeather().get() : null;
      case SimulationPackage.ASTWeather_Forecast:
         return getForecast().isPresent()? getForecast().get() : null;
    }
    return eDynamicGet(featureID, resolve, coreType);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  void eSet(int featureID,Object newValue)   { 
     
     /* generated by template ast_emf.additionalmethods.ESet*/
  
    switch (featureID) {
      case SimulationPackage.ASTWeather_FixedWeather:
        setFixedWeather((simulation._ast.ASTFixedWeather)newValue);
        return;
      case SimulationPackage.ASTWeather_SequenceWeather:
        setSequenceWeather((simulation._ast.ASTSequenceWeather)newValue);
        return;
      case SimulationPackage.ASTWeather_RandomWeather:
        setRandomWeather((simulation._ast.ASTRandomWeather)newValue);
        return;
      case SimulationPackage.ASTWeather_Forecast:
        setForecast((simulation._ast.ASTForecast)newValue);
        return;
    }
    eDynamicSet(featureID, newValue);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  void eUnset(int featureID)   { 
     
     /* generated by template ast_emf.additionalmethods.EUnset*/
 
    switch (featureID) {
      case SimulationPackage.ASTWeather_FixedWeather:
        setFixedWeather(null);
      return;
      case SimulationPackage.ASTWeather_SequenceWeather:
        setSequenceWeather(null);
      return;
      case SimulationPackage.ASTWeather_RandomWeather:
        setRandomWeather(null);
      return;
      case SimulationPackage.ASTWeather_Forecast:
        setForecast(null);
      return;
    }
    eDynamicUnset(featureID);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean eIsSet(int featureID)   { 
     
     /* generated by template ast_emf.additionalmethods.EIsSet*/
 
    switch (featureID) {
      case SimulationPackage.ASTWeather_FixedWeather:
        return getFixedWeather().isPresent();
      case SimulationPackage.ASTWeather_SequenceWeather:
        return getSequenceWeather().isPresent();
      case SimulationPackage.ASTWeather_RandomWeather:
        return getRandomWeather().isPresent();
      case SimulationPackage.ASTWeather_Forecast:
        return getForecast().isPresent();
    }
    return eDynamicIsSet(featureID);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  int eBaseStructuralFeatureID(int featureID,Class<?> baseClass)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(baseClass, "0xA7006_890 Parameter 'baseClass' must not be null.");

     /* generated by template ast_emf.additionalmethods.EStructuralFeature*/
  
    return super.eBaseStructuralFeatureID(featureID, baseClass);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  int eDerivedStructuralFeatureID(int featureID,Class<?> baseClass)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(baseClass, "0xA7006_012 Parameter 'baseClass' must not be null.");

     /* generated by template ast_emf.additionalmethods.EStructuralFeature*/
  
    return super.eDerivedStructuralFeatureID(featureID, baseClass);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  String toString()   { 
     
     /* generated by template ast_emf.additionalmethods.EToString*/
  
    if (eIsProxy()) {
      return super.toString();
    }
    StringBuffer result = new StringBuffer(getClass().getSimpleName());
    if (fixedWeather.isPresent()) {
      result.append(" FixedWeather: ");
      result.append(fixedWeather.get());
    } 
    if (forecast.isPresent()) {
      result.append(" Forecast: ");
      result.append(forecast.get());
    } 
    if (randomWeather.isPresent()) {
      result.append(" RandomWeather: ");
      result.append(randomWeather.get());
    } 
    if (sequenceWeather.isPresent()) {
      result.append(" SequenceWeather: ");
      result.append(sequenceWeather.get());
    } 
    return result.toString();
  } 

    /* generated by template ast.ClassMethod*/
  
   protected  EClass eStaticClass()   { 
     
     return SimulationPackage.Literals.ASTWeather;
  } 

   
  /* generated by template ast.ClassContent*/
  // Class content

    /* generated by template ast.AstBuilder*/

 /**
   * Builder for {@link ASTWeather}.
   */
  public static class Builder  {
    /* generated by template ast.BuilderAttribute*/
     protected  simulation._ast.ASTFixedWeather fixedWeather;

    /* generated by template ast.BuilderAttribute*/
     protected  simulation._ast.ASTSequenceWeather sequenceWeather;

    /* generated by template ast.BuilderAttribute*/
     protected  simulation._ast.ASTRandomWeather randomWeather;

    /* generated by template ast.BuilderAttribute*/
     protected  simulation._ast.ASTForecast forecast;

    public ASTWeather build() {
      return new ASTWeather (/* generated by template ast.BuilderConstructorParametersDeclaration*/
  
        this.fixedWeather 
       ,
       this.sequenceWeather 
       ,
       this.randomWeather 
       ,
       this.forecast 

      );
    }
    /* generated by template ast.AstBuilderAttributeSetter*/
    public Builder fixedWeather(simulation._ast.ASTFixedWeather fixedWeather) {
      this.fixedWeather = fixedWeather;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder sequenceWeather(simulation._ast.ASTSequenceWeather sequenceWeather) {
      this.sequenceWeather = sequenceWeather;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder randomWeather(simulation._ast.ASTRandomWeather randomWeather) {
      this.randomWeather = randomWeather;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder forecast(simulation._ast.ASTForecast forecast) {
      this.forecast = forecast;
      return this;
    }

  }    

  
}
