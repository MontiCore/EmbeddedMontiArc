/* generated from model Simulation*/
/* generated by template ast.AstClass*/

package simulation._ast;

/* generated by template ast_emf.AstEImports*/
import java.util.Optional;
import java.util.Iterator;
import de.se_rwth.commons.logging.Log;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;

 public  class ASTPedestrians extends /* generated by template ast.AstSuperTypes*/
de.monticore.emf._ast.ASTECNode implements  ASTSimulationNode
 {
  /* generated by template ast.Attribute*/
  
   protected  java.util.List<si._ast.ASTUnitNumber> startX = new EDataTypeEList<si._ast.ASTUnitNumber>(si._ast.ASTUnitNumber.class, this, SimulationPackage.ASTPedestrians_StartX);

  /* generated by template ast.Attribute*/
  
   protected  java.util.List<si._ast.ASTUnitNumber> startY = new EDataTypeEList<si._ast.ASTUnitNumber>(si._ast.ASTUnitNumber.class, this, SimulationPackage.ASTPedestrians_StartY);

  /* generated by template ast.Attribute*/
  
   protected  java.util.List<si._ast.ASTUnitNumber> endX = new EDataTypeEList<si._ast.ASTUnitNumber>(si._ast.ASTUnitNumber.class, this, SimulationPackage.ASTPedestrians_EndX);

  /* generated by template ast.Attribute*/
  
   protected  java.util.List<si._ast.ASTUnitNumber> endY = new EDataTypeEList<si._ast.ASTUnitNumber>(si._ast.ASTUnitNumber.class, this, SimulationPackage.ASTPedestrians_EndY);

  /* generated by template ast.Attribute*/
  
   protected  java.util.List<si._ast.ASTUnitNumber> endZ = new EDataTypeEList<si._ast.ASTUnitNumber>(si._ast.ASTUnitNumber.class, this, SimulationPackage.ASTPedestrians_EndZ);

    /* generated by template ast.Constructor*/
  
   protected  ASTPedestrians (/* generated by template ast.ParametersDeclaration*/
    // Parameters declaration
 
    )  
  /* generated by template ast.EmptyMethodBody*/

  { // empty body 
  }


    /* generated by template ast.Constructor*/
  
   protected  ASTPedestrians (/* generated by template ast.ConstructorParametersDeclaration*/
     java.util.List<si._ast.ASTUnitNumber> startX 
    ,
     java.util.List<si._ast.ASTUnitNumber> startY 
    ,
     java.util.List<si._ast.ASTUnitNumber> endX 
    ,
     java.util.List<si._ast.ASTUnitNumber> endY 
    ,
     java.util.List<si._ast.ASTUnitNumber> endZ 
 
    )  
  /* generated by template ast.ConstructorAttributesSetter*/
  {
    setStartX(startX);
    setStartY(startY);
    setEndX(endX);
    setEndY(endY);
    setEndZ(endZ);
  }


  
    /* generated by template ast.ClassMethod*/
  
   public  void accept(simulation._visitor.SimulationVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_753 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.Accept*/

      visitor.handle(this);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void accept(weather._visitor.WeatherVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_790 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.AcceptSuper*/

    if (visitor instanceof simulation._visitor.SimulationVisitor) {
      accept((simulation._visitor.SimulationVisitor) visitor);      
    } else {
      de.se_rwth.commons.logging.Log.error("0xA7000_964AST node type ASTPedestrians of the sub language Simulation expected a visitor of type simulation._visitor.SimulationVisitor, but got weather._visitor.WeatherVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
    }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void accept(si._visitor.SIVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_932 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.AcceptSuper*/

    if (visitor instanceof simulation._visitor.SimulationVisitor) {
      accept((simulation._visitor.SimulationVisitor) visitor);      
    } else {
      de.se_rwth.commons.logging.Log.error("0xA7000_739AST node type ASTPedestrians of the sub language Simulation expected a visitor of type simulation._visitor.SimulationVisitor, but got si._visitor.SIVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
    }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEquals(Object o,boolean forceSameOrder)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_659 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.DeepEqualsWithOrder*/

      ASTPedestrians comp;
    if ((o instanceof ASTPedestrians)) {
      comp = (ASTPedestrians) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing startX
    if (this.startX.size() != comp.startX.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<si._ast.ASTUnitNumber> it1 = this.startX.iterator();
        Iterator<si._ast.ASTUnitNumber> it2 = comp.startX.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<si._ast.ASTUnitNumber> it1 = this.startX.iterator();
        while (it1.hasNext()) {
          si._ast.ASTUnitNumber oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<si._ast.ASTUnitNumber> it2 = comp.startX.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing startY
    if (this.startY.size() != comp.startY.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<si._ast.ASTUnitNumber> it1 = this.startY.iterator();
        Iterator<si._ast.ASTUnitNumber> it2 = comp.startY.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<si._ast.ASTUnitNumber> it1 = this.startY.iterator();
        while (it1.hasNext()) {
          si._ast.ASTUnitNumber oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<si._ast.ASTUnitNumber> it2 = comp.startY.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing endX
    if (this.endX.size() != comp.endX.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<si._ast.ASTUnitNumber> it1 = this.endX.iterator();
        Iterator<si._ast.ASTUnitNumber> it2 = comp.endX.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<si._ast.ASTUnitNumber> it1 = this.endX.iterator();
        while (it1.hasNext()) {
          si._ast.ASTUnitNumber oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<si._ast.ASTUnitNumber> it2 = comp.endX.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing endY
    if (this.endY.size() != comp.endY.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<si._ast.ASTUnitNumber> it1 = this.endY.iterator();
        Iterator<si._ast.ASTUnitNumber> it2 = comp.endY.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<si._ast.ASTUnitNumber> it1 = this.endY.iterator();
        while (it1.hasNext()) {
          si._ast.ASTUnitNumber oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<si._ast.ASTUnitNumber> it2 = comp.endY.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing endZ
    if (this.endZ.size() != comp.endZ.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<si._ast.ASTUnitNumber> it1 = this.endZ.iterator();
        Iterator<si._ast.ASTUnitNumber> it2 = comp.endZ.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEquals(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<si._ast.ASTUnitNumber> it1 = this.endZ.iterator();
        while (it1.hasNext()) {
          si._ast.ASTUnitNumber oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<si._ast.ASTUnitNumber> it2 = comp.endZ.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEquals(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     


  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEquals(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_117 Parameter 'o' must not be null.");

     return deepEquals(o, true);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEqualsWithComments(Object o,boolean forceSameOrder)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_702 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.DeepEqualsWithComments*/

      ASTPedestrians comp;
    if ((o instanceof ASTPedestrians)) {
      comp = (ASTPedestrians) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    // comparing startX
    if (this.startX.size() != comp.startX.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<si._ast.ASTUnitNumber> it1 = this.startX.iterator();
        Iterator<si._ast.ASTUnitNumber> it2 = comp.startX.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<si._ast.ASTUnitNumber> it1 = this.startX.iterator();
        while (it1.hasNext()) {
          si._ast.ASTUnitNumber oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<si._ast.ASTUnitNumber> it2 = comp.startX.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing startY
    if (this.startY.size() != comp.startY.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<si._ast.ASTUnitNumber> it1 = this.startY.iterator();
        Iterator<si._ast.ASTUnitNumber> it2 = comp.startY.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<si._ast.ASTUnitNumber> it1 = this.startY.iterator();
        while (it1.hasNext()) {
          si._ast.ASTUnitNumber oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<si._ast.ASTUnitNumber> it2 = comp.startY.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing endX
    if (this.endX.size() != comp.endX.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<si._ast.ASTUnitNumber> it1 = this.endX.iterator();
        Iterator<si._ast.ASTUnitNumber> it2 = comp.endX.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<si._ast.ASTUnitNumber> it1 = this.endX.iterator();
        while (it1.hasNext()) {
          si._ast.ASTUnitNumber oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<si._ast.ASTUnitNumber> it2 = comp.endX.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing endY
    if (this.endY.size() != comp.endY.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<si._ast.ASTUnitNumber> it1 = this.endY.iterator();
        Iterator<si._ast.ASTUnitNumber> it2 = comp.endY.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<si._ast.ASTUnitNumber> it1 = this.endY.iterator();
        while (it1.hasNext()) {
          si._ast.ASTUnitNumber oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<si._ast.ASTUnitNumber> it2 = comp.endY.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    // comparing endZ
    if (this.endZ.size() != comp.endZ.size()) {
      return false;
    } else {
      if (forceSameOrder) {
        Iterator<si._ast.ASTUnitNumber> it1 = this.endZ.iterator();
        Iterator<si._ast.ASTUnitNumber> it2 = comp.endZ.iterator();
        while (it1.hasNext() && it2.hasNext()) {
          if (!it1.next().deepEqualsWithComments(it2.next())) {
            return false;
          }
        }
      } else {
        java.util.Iterator<si._ast.ASTUnitNumber> it1 = this.endZ.iterator();
        while (it1.hasNext()) {
          si._ast.ASTUnitNumber oneNext = it1.next();
          boolean matchFound = false;
          java.util.Iterator<si._ast.ASTUnitNumber> it2 = comp.endZ.iterator();
          while (it2.hasNext()) {
            if (oneNext.deepEqualsWithComments(it2.next())) {
              matchFound = true;
              break;
            }
          }
          if (!matchFound) {
            return false;
          }
        }
      }
    }
    return true;     

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEqualsWithComments(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_290 Parameter 'o' must not be null.");

     return deepEqualsWithComments(o, true);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean equalAttributes(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_462 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.EqualAttributes*/

      ASTPedestrians comp;
    if ((o instanceof ASTPedestrians)) {
      comp = (ASTPedestrians) o;
    } else {
      return false;
    }
    return true;     


  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean equalsWithComments(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_022 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.EqualsWithComments*/

      ASTPedestrians comp;
    if ((o instanceof ASTPedestrians)) {
      comp = (ASTPedestrians) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreComments().size() == comp.get_PreComments().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreComments().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreComments().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostComments().size() == comp.get_PostComments().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostComments().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostComments().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  java.util.Collection<de.monticore.ast.ASTNode> get_Children()   { 
     
     /* generated by template ast.additionalmethods.GetChildren*/

    java.util.LinkedList<de.monticore.ast.ASTNode> result = new java.util.LinkedList<de.monticore.ast.ASTNode>();
        result.addAll(getStartX());
        result.addAll(getStartY());
        result.addAll(getEndX());
        result.addAll(getEndY());
        result.addAll(getEndZ());
    return result;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void remove_Child(de.monticore.ast.ASTNode child)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(child, "0xA7006_649 Parameter 'child' must not be null.");

     /* generated by template ast.additionalmethods.RemoveChild*/

      if (getStartX().contains(child)) {
        getStartX().remove(child);
      }
      if (getStartY().contains(child)) {
        getStartY().remove(child);
      }
      if (getEndX().contains(child)) {
        getEndX().remove(child);
      }
      if (getEndY().contains(child)) {
        getEndY().remove(child);
      }
      if (getEndZ().contains(child)) {
        getEndZ().remove(child);
      }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  static  Builder getBuilder()   { 
     
     return new Builder();

  } 

    /* generated by template ast.ClassMethod*/
  
   public  ASTPedestrians deepClone()   { 
     
     return deepClone(_construct());

  } 

    /* generated by template ast.ClassMethod*/
  
   public  ASTPedestrians deepClone(ASTPedestrians result)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(result, "0xA7006_672 Parameter 'result' must not be null.");

     /* generated by template ast.additionalmethods.DeepCloneWithParameters*/
  
    super.deepClone(result);
    
    result.startX = com.google.common.collect.Lists.newArrayList();
    this.startX.forEach(s -> result.startX.add(s.deepClone()));
    result.startY = com.google.common.collect.Lists.newArrayList();
    this.startY.forEach(s -> result.startY.add(s.deepClone()));
    result.endX = com.google.common.collect.Lists.newArrayList();
    this.endX.forEach(s -> result.endX.add(s.deepClone()));
    result.endY = com.google.common.collect.Lists.newArrayList();
    this.endY.forEach(s -> result.endY.add(s.deepClone()));
    result.endZ = com.google.common.collect.Lists.newArrayList();
    this.endZ.forEach(s -> result.endZ.add(s.deepClone()));
    
    return result;

  } 

    /* generated by template ast.ClassMethod*/
  
   protected  ASTPedestrians _construct()   { 
     
     return new ASTPedestrians();

  } 

    /* generated by template ast.ClassMethod*/
  
   public  java.util.List<si._ast.ASTUnitNumber> getStartX()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.startX;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  java.util.List<si._ast.ASTUnitNumber> getStartY()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.startY;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  java.util.List<si._ast.ASTUnitNumber> getEndX()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.endX;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  java.util.List<si._ast.ASTUnitNumber> getEndY()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.endY;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  java.util.List<si._ast.ASTUnitNumber> getEndZ()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.endZ;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setEndX(java.util.List<si._ast.ASTUnitNumber> endX)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(endX, "0xA7006_379 Parameter 'endX' must not be null.");

     /* generated by template ast_emf.additionalmethods.Set*/

    if (endX.isEmpty() && this.endX.isEmpty()) {
      return;
    }  
    java.util.List<si._ast.ASTUnitNumber> oldEndX = this.endX;
    this.endX = endX;
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTPedestrians_EndX, oldEndX, endX));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setEndY(java.util.List<si._ast.ASTUnitNumber> endY)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(endY, "0xA7006_178 Parameter 'endY' must not be null.");

     /* generated by template ast_emf.additionalmethods.Set*/

    if (endY.isEmpty() && this.endY.isEmpty()) {
      return;
    }  
    java.util.List<si._ast.ASTUnitNumber> oldEndY = this.endY;
    this.endY = endY;
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTPedestrians_EndY, oldEndY, endY));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setEndZ(java.util.List<si._ast.ASTUnitNumber> endZ)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(endZ, "0xA7006_342 Parameter 'endZ' must not be null.");

     /* generated by template ast_emf.additionalmethods.Set*/

    if (endZ.isEmpty() && this.endZ.isEmpty()) {
      return;
    }  
    java.util.List<si._ast.ASTUnitNumber> oldEndZ = this.endZ;
    this.endZ = endZ;
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTPedestrians_EndZ, oldEndZ, endZ));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setStartX(java.util.List<si._ast.ASTUnitNumber> startX)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(startX, "0xA7006_229 Parameter 'startX' must not be null.");

     /* generated by template ast_emf.additionalmethods.Set*/

    if (startX.isEmpty() && this.startX.isEmpty()) {
      return;
    }  
    java.util.List<si._ast.ASTUnitNumber> oldStartX = this.startX;
    this.startX = startX;
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTPedestrians_StartX, oldStartX, startX));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setStartY(java.util.List<si._ast.ASTUnitNumber> startY)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(startY, "0xA7006_130 Parameter 'startY' must not be null.");

     /* generated by template ast_emf.additionalmethods.Set*/

    if (startY.isEmpty() && this.startY.isEmpty()) {
      return;
    }  
    java.util.List<si._ast.ASTUnitNumber> oldStartY = this.startY;
    this.startY = startY;
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTPedestrians_StartY, oldStartY, startY));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Object eGet(int featureID,boolean resolve,boolean coreType)   { 
     
     /* generated by template ast_emf.additionalmethods.EGet*/
  
    switch (featureID) {
      case SimulationPackage.ASTPedestrians_StartX:
         return getStartX();
      case SimulationPackage.ASTPedestrians_StartY:
         return getStartY();
      case SimulationPackage.ASTPedestrians_EndX:
         return getEndX();
      case SimulationPackage.ASTPedestrians_EndY:
         return getEndY();
      case SimulationPackage.ASTPedestrians_EndZ:
         return getEndZ();
    }
    return eDynamicGet(featureID, resolve, coreType);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  void eSet(int featureID,Object newValue)   { 
     
     /* generated by template ast_emf.additionalmethods.ESet*/
  
    switch (featureID) {
      case SimulationPackage.ASTPedestrians_StartX:
        setStartX((java.util.List<si._ast.ASTUnitNumber>)newValue);
        return;
      case SimulationPackage.ASTPedestrians_StartY:
        setStartY((java.util.List<si._ast.ASTUnitNumber>)newValue);
        return;
      case SimulationPackage.ASTPedestrians_EndX:
        setEndX((java.util.List<si._ast.ASTUnitNumber>)newValue);
        return;
      case SimulationPackage.ASTPedestrians_EndY:
        setEndY((java.util.List<si._ast.ASTUnitNumber>)newValue);
        return;
      case SimulationPackage.ASTPedestrians_EndZ:
        setEndZ((java.util.List<si._ast.ASTUnitNumber>)newValue);
        return;
    }
    eDynamicSet(featureID, newValue);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  void eUnset(int featureID)   { 
     
     /* generated by template ast_emf.additionalmethods.EUnset*/
 
    switch (featureID) {
      case SimulationPackage.ASTPedestrians_StartX:
        startX.clear();
      return;
      case SimulationPackage.ASTPedestrians_StartY:
        startY.clear();
      return;
      case SimulationPackage.ASTPedestrians_EndX:
        endX.clear();
      return;
      case SimulationPackage.ASTPedestrians_EndY:
        endY.clear();
      return;
      case SimulationPackage.ASTPedestrians_EndZ:
        endZ.clear();
      return;
    }
    eDynamicUnset(featureID);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean eIsSet(int featureID)   { 
     
     /* generated by template ast_emf.additionalmethods.EIsSet*/
 
    switch (featureID) {
      case SimulationPackage.ASTPedestrians_StartX:
        return !getStartX().isEmpty();
      case SimulationPackage.ASTPedestrians_StartY:
        return !getStartY().isEmpty();
      case SimulationPackage.ASTPedestrians_EndX:
        return !getEndX().isEmpty();
      case SimulationPackage.ASTPedestrians_EndY:
        return !getEndY().isEmpty();
      case SimulationPackage.ASTPedestrians_EndZ:
        return !getEndZ().isEmpty();
    }
    return eDynamicIsSet(featureID);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  int eBaseStructuralFeatureID(int featureID,Class<?> baseClass)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(baseClass, "0xA7006_549 Parameter 'baseClass' must not be null.");

     /* generated by template ast_emf.additionalmethods.EStructuralFeature*/
  
    return super.eBaseStructuralFeatureID(featureID, baseClass);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  int eDerivedStructuralFeatureID(int featureID,Class<?> baseClass)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(baseClass, "0xA7006_384 Parameter 'baseClass' must not be null.");

     /* generated by template ast_emf.additionalmethods.EStructuralFeature*/
  
    return super.eDerivedStructuralFeatureID(featureID, baseClass);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  String toString()   { 
     
     /* generated by template ast_emf.additionalmethods.EToString*/
  
    if (eIsProxy()) {
      return super.toString();
    }
    StringBuffer result = new StringBuffer(getClass().getSimpleName());
    if (!endX.isEmpty()) {
      result.append(" EndX: ");
      result.append(endX);
    } 
    if (!endY.isEmpty()) {
      result.append(" EndY: ");
      result.append(endY);
    } 
    if (!endZ.isEmpty()) {
      result.append(" EndZ: ");
      result.append(endZ);
    } 
    if (!startX.isEmpty()) {
      result.append(" StartX: ");
      result.append(startX);
    } 
    if (!startY.isEmpty()) {
      result.append(" StartY: ");
      result.append(startY);
    } 
    return result.toString();
  } 

    /* generated by template ast.ClassMethod*/
  
   protected  EClass eStaticClass()   { 
     
     return SimulationPackage.Literals.ASTPedestrians;
  } 

   
  /* generated by template ast.ClassContent*/
  // Class content

    /* generated by template ast.AstBuilder*/

 /**
   * Builder for {@link ASTPedestrians}.
   */
  public static class Builder  {
    /* generated by template ast.BuilderAttribute*/
     protected  java.util.List<si._ast.ASTUnitNumber> startX = new java.util.ArrayList<>();

    /* generated by template ast.BuilderAttribute*/
     protected  java.util.List<si._ast.ASTUnitNumber> startY = new java.util.ArrayList<>();

    /* generated by template ast.BuilderAttribute*/
     protected  java.util.List<si._ast.ASTUnitNumber> endX = new java.util.ArrayList<>();

    /* generated by template ast.BuilderAttribute*/
     protected  java.util.List<si._ast.ASTUnitNumber> endY = new java.util.ArrayList<>();

    /* generated by template ast.BuilderAttribute*/
     protected  java.util.List<si._ast.ASTUnitNumber> endZ = new java.util.ArrayList<>();

    public ASTPedestrians build() {
      return new ASTPedestrians (/* generated by template ast.BuilderConstructorParametersDeclaration*/
  
        this.startX 
       ,
       this.startY 
       ,
       this.endX 
       ,
       this.endY 
       ,
       this.endZ 

      );
    }
    /* generated by template ast.AstBuilderAttributeSetter*/
    public Builder startX(java.util.List<si._ast.ASTUnitNumber> startX) {
      this.startX = startX;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder startY(java.util.List<si._ast.ASTUnitNumber> startY) {
      this.startY = startY;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder endX(java.util.List<si._ast.ASTUnitNumber> endX) {
      this.endX = endX;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder endY(java.util.List<si._ast.ASTUnitNumber> endY) {
      this.endY = endY;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder endZ(java.util.List<si._ast.ASTUnitNumber> endZ) {
      this.endZ = endZ;
      return this;
    }

  }    

  
}
