/* generated by template visitor.InheritanceVisitor*/



package simulation._visitor;

import simulation._ast.ASTSimulationNode;

import de.monticore.ast.ASTNode;

/**
 * Visitor for the {@code Simulation} language that visits super
 * types of the AST nodes as well.
 *
 * @see SimulationVisitor
 * @see ASTSimulationNode#accept(SimulationVisitor visitor)
 */
 public interface SimulationInheritanceVisitor extends SimulationVisitor , weather._visitor.WeatherInheritanceVisitor, si._visitor.SIInheritanceVisitor {


      default public void handle(simulation._ast.ASTSimulation node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTSimulationRenderFrequency node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTSimulationLoopFrequency node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTSimulationDuration node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTSimulationType node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTWeatherObj node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTWeather node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTFixedWeather node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTSequenceWeather node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTRandomWeather node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTForecast node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTTime node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTMapPath node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTMapName node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTMapHeight node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTMapOverlap node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTMapSectorWidth node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTMapSectorHeight node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTMaxSectorUsers node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTTimeout node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTPedestrians node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTPedestrianDensity node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTVehicles node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTExplicitVehicle node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTPathedVehicle node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTRandomVehicle node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(simulation._ast.ASTSimulationNode node) {
        getRealThis().visit((ASTNode) node);
        SimulationVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

}
