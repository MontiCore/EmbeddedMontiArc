/* generated by template od.DiagramVisitor*/



package simulation._od;

import simulation._visitor.SimulationVisitor;
import simulation._ast.ASTSimulationNode;
import de.monticore.prettyprint.IndentPrinter;
import de.se_rwth.commons.Names;
import de.se_rwth.commons.StringTransformations;
import de.monticore.generating.templateengine.reporting.commons.ReportingRepository;
import java.util.Iterator;

public class Simulation2OD implements SimulationVisitor {
      
  private SimulationVisitor realThis = this;
  
  protected IndentPrinter pp;
  
  protected ReportingRepository reporting;
  
  protected boolean printEmptyOptional = false;
  
  protected boolean printEmptyList = false;
    
  public Simulation2OD(IndentPrinter printer, ReportingRepository reporting) {
    this.reporting = reporting;
    this.pp = printer;
  }
    
  
      @Override
      public void handle(simulation._ast.ASTSimulation node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTSimulation");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              printAttribute("name", "\"" + String.valueOf(node.getName()) + "\"");
 
              if (node.getSimulationRenderFrequency().isPresent()) {
     			pp.print("simulationRenderFrequency");
   			    pp.print(" = ");
                node.getSimulationRenderFrequency().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("simulationRenderFrequency = absent;");
              }
 
              if (node.getSimulationLoopFrequency().isPresent()) {
     			pp.print("simulationLoopFrequency");
   			    pp.print(" = ");
                node.getSimulationLoopFrequency().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("simulationLoopFrequency = absent;");
              }
 
              if (node.getSimulationDuration().isPresent()) {
     			pp.print("simulationDuration");
   			    pp.print(" = ");
                node.getSimulationDuration().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("simulationDuration = absent;");
              }
 
              if (node.getSimulationType().isPresent()) {
     			pp.print("simulationType");
   			    pp.print(" = ");
                node.getSimulationType().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("simulationType = absent;");
              }
 
              if (node.getWeather().isPresent()) {
     			pp.print("weather");
   			    pp.print(" = ");
                node.getWeather().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("weather = absent;");
              }
 
              if (node.getTime().isPresent()) {
     			pp.print("time");
   			    pp.print(" = ");
                node.getTime().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("time = absent;");
              }
 
              if (node.getMapPath().isPresent()) {
     			pp.print("mapPath");
   			    pp.print(" = ");
                node.getMapPath().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("mapPath = absent;");
              }
 
              if (null != node.getMapName()) {          
      			pp.print("mapName");
   			    pp.print(" = ");
                node.getMapName().accept(getRealThis());
                pp.println(";");
              }
 
              if (node.getMapHeight().isPresent()) {
     			pp.print("mapHeight");
   			    pp.print(" = ");
                node.getMapHeight().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("mapHeight = absent;");
              }
 
              if (node.getMapOverlap().isPresent()) {
     			pp.print("mapOverlap");
   			    pp.print(" = ");
                node.getMapOverlap().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("mapOverlap = absent;");
              }
 
              if (node.getMapSectorWidth().isPresent()) {
     			pp.print("mapSectorWidth");
   			    pp.print(" = ");
                node.getMapSectorWidth().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("mapSectorWidth = absent;");
              }
 
              if (node.getMapSectorHeight().isPresent()) {
     			pp.print("mapSectorHeight");
   			    pp.print(" = ");
                node.getMapSectorHeight().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("mapSectorHeight = absent;");
              }
 
              if (node.getMaxSectorUsers().isPresent()) {
     			pp.print("maxSectorUsers");
   			    pp.print(" = ");
                node.getMaxSectorUsers().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("maxSectorUsers = absent;");
              }
 
              if (node.getTimeout().isPresent()) {
     			pp.print("timeout");
   			    pp.print(" = ");
                node.getTimeout().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("timeout = absent;");
              }
 
              if (node.getPedestrians().isPresent()) {
     			pp.print("pedestrians");
   			    pp.print(" = ");
                node.getPedestrians().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("pedestrians = absent;");
              }
 
              if (node.getPedestrianDensity().isPresent()) {
     			pp.print("pedestrianDensity");
   			    pp.print(" = ");
                node.getPedestrianDensity().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("pedestrianDensity = absent;");
              }
 
              if (node.getVehicles().isPresent()) {
     			pp.print("vehicles");
   			    pp.print(" = ");
                node.getVehicles().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("vehicles = absent;");
              }
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTSimulationRenderFrequency node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTSimulationRenderFrequency");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              if (null != node.getSimRenderFreq()) {          
      			pp.print("simRenderFreq");
   			    pp.print(" = ");
                node.getSimRenderFreq().accept(getRealThis());
                pp.println(";");
              }
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTSimulationLoopFrequency node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTSimulationLoopFrequency");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              if (null != node.getSimLoopFreq()) {          
      			pp.print("simLoopFreq");
   			    pp.print(" = ");
                node.getSimLoopFreq().accept(getRealThis());
                pp.println(";");
              }
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTSimulationDuration node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTSimulationDuration");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              if (null != node.getSimDuration()) {          
      			pp.print("simDuration");
   			    pp.print(" = ");
                node.getSimDuration().accept(getRealThis());
                pp.println(";");
              }
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTSimulationType node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTSimulationType");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTWeatherObj node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTWeatherObj");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              if (null != node.getTemperature()) {          
      			pp.print("temperature");
   			    pp.print(" = ");
                node.getTemperature().accept(getRealThis());
                pp.println(";");
              }
 
              if (null != node.getClouding()) {          
      			pp.print("clouding");
   			    pp.print(" = ");
                node.getClouding().accept(getRealThis());
                pp.println(";");
              }
 
              if (null != node.getSight()) {          
      			pp.print("sight");
   			    pp.print(" = ");
                node.getSight().accept(getRealThis());
                pp.println(";");
              }
 
              if (null != node.getPrecipitationtype()) {          
      			pp.print("precipitationtype");
   			    pp.print(" = ");
                node.getPrecipitationtype().accept(getRealThis());
                pp.println(";");
              }
 
              if (node.getHumidity().isPresent()) {
     			pp.print("humidity");
   			    pp.print(" = ");
                node.getHumidity().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("humidity = absent;");
              }
 
              if (node.getPressure().isPresent()) {
     			pp.print("pressure");
   			    pp.print(" = ");
                node.getPressure().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("pressure = absent;");
              }
 
              if (node.getWindstrength().isPresent()) {
     			pp.print("windstrength");
   			    pp.print(" = ");
                node.getWindstrength().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("windstrength = absent;");
              }
 
              if (node.getWinddirection().isPresent()) {
     			pp.print("winddirection");
   			    pp.print(" = ");
                node.getWinddirection().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("winddirection = absent;");
              }
 
              if (node.getPrecipitationamount().isPresent()) {
     			pp.print("precipitationamount");
   			    pp.print(" = ");
                node.getPrecipitationamount().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("precipitationamount = absent;");
              }
 
            {
              Iterator<weather._ast.ASTWeatherPhenomena> iter_weatherPhenomenas = node.getWeatherPhenomenas().iterator();
              boolean isEmpty = true;
              if (iter_weatherPhenomenas.hasNext()) {
       			pp.print("weatherPhenomenas");
   			    pp.print(" = [");
   			    pp.println("// *size: " + node.getWeatherPhenomenas().size());
				pp.indent();
   			    isEmpty = false;
              } else if (printEmptyList) {
                pp.print("weatherPhenomenas");
                pp.println(" = [];");
              }
              boolean isFirst = true;
              while (iter_weatherPhenomenas.hasNext()) {
                if (!isFirst) {
                  pp.println(",");
                }
                isFirst = false;
                iter_weatherPhenomenas.next().accept(getRealThis());
              }
              if (!isEmpty) {
              	pp.println("];");
              	pp.unindent();
              }
             
            }
 
            {
              Iterator<weather._ast.ASTOpticalPhenomena> iter_opticalPhenomenas = node.getOpticalPhenomenas().iterator();
              boolean isEmpty = true;
              if (iter_opticalPhenomenas.hasNext()) {
       			pp.print("opticalPhenomenas");
   			    pp.print(" = [");
   			    pp.println("// *size: " + node.getOpticalPhenomenas().size());
				pp.indent();
   			    isEmpty = false;
              } else if (printEmptyList) {
                pp.print("opticalPhenomenas");
                pp.println(" = [];");
              }
              boolean isFirst = true;
              while (iter_opticalPhenomenas.hasNext()) {
                if (!isFirst) {
                  pp.println(",");
                }
                isFirst = false;
                iter_opticalPhenomenas.next().accept(getRealThis());
              }
              if (!isEmpty) {
              	pp.println("];");
              	pp.unindent();
              }
             
            }
 
            {
              Iterator<weather._ast.ASTArtificialPhenomena> iter_artificialPhenomenas = node.getArtificialPhenomenas().iterator();
              boolean isEmpty = true;
              if (iter_artificialPhenomenas.hasNext()) {
       			pp.print("artificialPhenomenas");
   			    pp.print(" = [");
   			    pp.println("// *size: " + node.getArtificialPhenomenas().size());
				pp.indent();
   			    isEmpty = false;
              } else if (printEmptyList) {
                pp.print("artificialPhenomenas");
                pp.println(" = [];");
              }
              boolean isFirst = true;
              while (iter_artificialPhenomenas.hasNext()) {
                if (!isFirst) {
                  pp.println(",");
                }
                isFirst = false;
                iter_artificialPhenomenas.next().accept(getRealThis());
              }
              if (!isEmpty) {
              	pp.println("];");
              	pp.unindent();
              }
             
            }
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTWeather node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTWeather");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              if (node.getFixedWeather().isPresent()) {
     			pp.print("fixedWeather");
   			    pp.print(" = ");
                node.getFixedWeather().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("fixedWeather = absent;");
              }
 
              if (node.getSequenceWeather().isPresent()) {
     			pp.print("sequenceWeather");
   			    pp.print(" = ");
                node.getSequenceWeather().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("sequenceWeather = absent;");
              }
 
              if (node.getRandomWeather().isPresent()) {
     			pp.print("randomWeather");
   			    pp.print(" = ");
                node.getRandomWeather().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("randomWeather = absent;");
              }
 
              if (node.getForecast().isPresent()) {
     			pp.print("forecast");
   			    pp.print(" = ");
                node.getForecast().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("forecast = absent;");
              }
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTFixedWeather node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTFixedWeather");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              if (null != node.getFixedWeatherObj()) {          
      			pp.print("fixedWeatherObj");
   			    pp.print(" = ");
                node.getFixedWeatherObj().accept(getRealThis());
                pp.println(";");
              }
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTSequenceWeather node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTSequenceWeather");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
            {
              Iterator<simulation._ast.ASTWeatherObj> iter_randomWeatherObj = node.getRandomWeatherObj().iterator();
              boolean isEmpty = true;
              if (iter_randomWeatherObj.hasNext()) {
       			pp.print("randomWeatherObj");
   			    pp.print(" = [");
   			    pp.println("// *size: " + node.getRandomWeatherObj().size());
				pp.indent();
   			    isEmpty = false;
              } else if (printEmptyList) {
                pp.print("randomWeatherObj");
                pp.println(" = [];");
              }
              boolean isFirst = true;
              while (iter_randomWeatherObj.hasNext()) {
                if (!isFirst) {
                  pp.println(",");
                }
                isFirst = false;
                iter_randomWeatherObj.next().accept(getRealThis());
              }
              if (!isEmpty) {
              	pp.println("];");
              	pp.unindent();
              }
             
            }
 
              if (node.getSequenceDuration().isPresent()) {
     			pp.print("sequenceDuration");
   			    pp.print(" = ");
                node.getSequenceDuration().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("sequenceDuration = absent;");
              }
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTRandomWeather node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTRandomWeather");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              if (null != node.getRandomDuration()) {          
      			pp.print("randomDuration");
   			    pp.print(" = ");
                node.getRandomDuration().accept(getRealThis());
                pp.println(";");
              }
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTForecast node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTForecast");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              if (null != node.getForecastWeatherObj()) {          
      			pp.print("forecastWeatherObj");
   			    pp.print(" = ");
                node.getForecastWeatherObj().accept(getRealThis());
                pp.println(";");
              }
 
              if (null != node.getForecastDuration()) {          
      			pp.print("forecastDuration");
   			    pp.print(" = ");
                node.getForecastDuration().accept(getRealThis());
                pp.println(";");
              }
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTTime node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTTime");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              if (node.getUnitNumber().isPresent()) {
     			pp.print("unitNumber");
   			    pp.print(" = ");
                node.getUnitNumber().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("unitNumber = absent;");
              }
 
            if (node.getTimeHours().isPresent()) {
              printAttribute("timeHours", "\"" + String.valueOf(node.getTimeHours().get()) + "\"");
            } else if (printEmptyOptional) {
              pp.println("timeHours = absent;");
            }
 
            if (node.getTimeMinutes().isPresent()) {
              printAttribute("timeMinutes", "\"" + String.valueOf(node.getTimeMinutes().get()) + "\"");
            } else if (printEmptyOptional) {
              pp.println("timeMinutes = absent;");
            }
 
            if (node.getTimeSeconds().isPresent()) {
              printAttribute("timeSeconds", "\"" + String.valueOf(node.getTimeSeconds().get()) + "\"");
            } else if (printEmptyOptional) {
              pp.println("timeSeconds = absent;");
            }
 
            if (node.getTimeMilliseconds().isPresent()) {
              printAttribute("timeMilliseconds", "\"" + String.valueOf(node.getTimeMilliseconds().get()) + "\"");
            } else if (printEmptyOptional) {
              pp.println("timeMilliseconds = absent;");
            }
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTMapPath node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTMapPath");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              printAttribute("mapPath", "\"" + String.valueOf(node.getMapPath()) + "\"");
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTMapName node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTMapName");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              printAttribute("mapName", "\"" + String.valueOf(node.getMapName()) + "\"");
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTMapHeight node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTMapHeight");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
            if (node.getHeightMap().isPresent()) {
              printAttribute("heightMap", "\"" + String.valueOf(node.getHeightMap().get()) + "\"");
            } else if (printEmptyOptional) {
              pp.println("heightMap = absent;");
            }
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTMapOverlap node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTMapOverlap");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              printAttribute("mapOverlap", "\"" + String.valueOf(node.getMapOverlap()) + "\"");
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTMapSectorWidth node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTMapSectorWidth");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              printAttribute("sectorWidth", "\"" + String.valueOf(node.getSectorWidth()) + "\"");
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTMapSectorHeight node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTMapSectorHeight");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              printAttribute("sectorHeight", "\"" + String.valueOf(node.getSectorHeight()) + "\"");
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTMaxSectorUsers node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTMaxSectorUsers");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              printAttribute("maxSectorUsers", "\"" + String.valueOf(node.getMaxSectorUsers()) + "\"");
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTTimeout node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTTimeout");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              if (null != node.getTimeout()) {          
      			pp.print("timeout");
   			    pp.print(" = ");
                node.getTimeout().accept(getRealThis());
                pp.println(";");
              }
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTPedestrians node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTPedestrians");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
            {
              Iterator<si._ast.ASTUnitNumber> iter_startX = node.getStartX().iterator();
              boolean isEmpty = true;
              if (iter_startX.hasNext()) {
       			pp.print("startX");
   			    pp.print(" = [");
   			    pp.println("// *size: " + node.getStartX().size());
				pp.indent();
   			    isEmpty = false;
              } else if (printEmptyList) {
                pp.print("startX");
                pp.println(" = [];");
              }
              boolean isFirst = true;
              while (iter_startX.hasNext()) {
                if (!isFirst) {
                  pp.println(",");
                }
                isFirst = false;
                iter_startX.next().accept(getRealThis());
              }
              if (!isEmpty) {
              	pp.println("];");
              	pp.unindent();
              }
             
            }
 
            {
              Iterator<si._ast.ASTUnitNumber> iter_startY = node.getStartY().iterator();
              boolean isEmpty = true;
              if (iter_startY.hasNext()) {
       			pp.print("startY");
   			    pp.print(" = [");
   			    pp.println("// *size: " + node.getStartY().size());
				pp.indent();
   			    isEmpty = false;
              } else if (printEmptyList) {
                pp.print("startY");
                pp.println(" = [];");
              }
              boolean isFirst = true;
              while (iter_startY.hasNext()) {
                if (!isFirst) {
                  pp.println(",");
                }
                isFirst = false;
                iter_startY.next().accept(getRealThis());
              }
              if (!isEmpty) {
              	pp.println("];");
              	pp.unindent();
              }
             
            }
 
            {
              Iterator<si._ast.ASTUnitNumber> iter_endX = node.getEndX().iterator();
              boolean isEmpty = true;
              if (iter_endX.hasNext()) {
       			pp.print("endX");
   			    pp.print(" = [");
   			    pp.println("// *size: " + node.getEndX().size());
				pp.indent();
   			    isEmpty = false;
              } else if (printEmptyList) {
                pp.print("endX");
                pp.println(" = [];");
              }
              boolean isFirst = true;
              while (iter_endX.hasNext()) {
                if (!isFirst) {
                  pp.println(",");
                }
                isFirst = false;
                iter_endX.next().accept(getRealThis());
              }
              if (!isEmpty) {
              	pp.println("];");
              	pp.unindent();
              }
             
            }
 
            {
              Iterator<si._ast.ASTUnitNumber> iter_endY = node.getEndY().iterator();
              boolean isEmpty = true;
              if (iter_endY.hasNext()) {
       			pp.print("endY");
   			    pp.print(" = [");
   			    pp.println("// *size: " + node.getEndY().size());
				pp.indent();
   			    isEmpty = false;
              } else if (printEmptyList) {
                pp.print("endY");
                pp.println(" = [];");
              }
              boolean isFirst = true;
              while (iter_endY.hasNext()) {
                if (!isFirst) {
                  pp.println(",");
                }
                isFirst = false;
                iter_endY.next().accept(getRealThis());
              }
              if (!isEmpty) {
              	pp.println("];");
              	pp.unindent();
              }
             
            }
 
            {
              Iterator<si._ast.ASTUnitNumber> iter_endZ = node.getEndZ().iterator();
              boolean isEmpty = true;
              if (iter_endZ.hasNext()) {
       			pp.print("endZ");
   			    pp.print(" = [");
   			    pp.println("// *size: " + node.getEndZ().size());
				pp.indent();
   			    isEmpty = false;
              } else if (printEmptyList) {
                pp.print("endZ");
                pp.println(" = [];");
              }
              boolean isFirst = true;
              while (iter_endZ.hasNext()) {
                if (!isFirst) {
                  pp.println(",");
                }
                isFirst = false;
                iter_endZ.next().accept(getRealThis());
              }
              if (!isEmpty) {
              	pp.println("];");
              	pp.unindent();
              }
             
            }
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTPedestrianDensity node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTPedestrianDensity");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              if (null != node.getPedestrianDensity()) {          
      			pp.print("pedestrianDensity");
   			    pp.print(" = ");
                node.getPedestrianDensity().accept(getRealThis());
                pp.println(";");
              }
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTVehicles node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTVehicles");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
            {
              Iterator<simulation._ast.ASTExplicitVehicle> iter_explicitVehicles = node.getExplicitVehicles().iterator();
              boolean isEmpty = true;
              if (iter_explicitVehicles.hasNext()) {
       			pp.print("explicitVehicles");
   			    pp.print(" = [");
   			    pp.println("// *size: " + node.getExplicitVehicles().size());
				pp.indent();
   			    isEmpty = false;
              } else if (printEmptyList) {
                pp.print("explicitVehicles");
                pp.println(" = [];");
              }
              boolean isFirst = true;
              while (iter_explicitVehicles.hasNext()) {
                if (!isFirst) {
                  pp.println(",");
                }
                isFirst = false;
                iter_explicitVehicles.next().accept(getRealThis());
              }
              if (!isEmpty) {
              	pp.println("];");
              	pp.unindent();
              }
             
            }
 
            {
              Iterator<simulation._ast.ASTPathedVehicle> iter_pathedVehicles = node.getPathedVehicles().iterator();
              boolean isEmpty = true;
              if (iter_pathedVehicles.hasNext()) {
       			pp.print("pathedVehicles");
   			    pp.print(" = [");
   			    pp.println("// *size: " + node.getPathedVehicles().size());
				pp.indent();
   			    isEmpty = false;
              } else if (printEmptyList) {
                pp.print("pathedVehicles");
                pp.println(" = [];");
              }
              boolean isFirst = true;
              while (iter_pathedVehicles.hasNext()) {
                if (!isFirst) {
                  pp.println(",");
                }
                isFirst = false;
                iter_pathedVehicles.next().accept(getRealThis());
              }
              if (!isEmpty) {
              	pp.println("];");
              	pp.unindent();
              }
             
            }
 
            {
              Iterator<simulation._ast.ASTRandomVehicle> iter_randomVehicles = node.getRandomVehicles().iterator();
              boolean isEmpty = true;
              if (iter_randomVehicles.hasNext()) {
       			pp.print("randomVehicles");
   			    pp.print(" = [");
   			    pp.println("// *size: " + node.getRandomVehicles().size());
				pp.indent();
   			    isEmpty = false;
              } else if (printEmptyList) {
                pp.print("randomVehicles");
                pp.println(" = [];");
              }
              boolean isFirst = true;
              while (iter_randomVehicles.hasNext()) {
                if (!isFirst) {
                  pp.println(",");
                }
                isFirst = false;
                iter_randomVehicles.next().accept(getRealThis());
              }
              if (!isEmpty) {
              	pp.println("];");
              	pp.unindent();
              }
             
            }
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTExplicitVehicle node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTExplicitVehicle");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              printAttribute("vehicle", "\"" + String.valueOf(node.getVehicle()) + "\"");
 
              if (null != node.getStartX()) {          
      			pp.print("startX");
   			    pp.print(" = ");
                node.getStartX().accept(getRealThis());
                pp.println(";");
              }
 
              if (null != node.getStartY()) {          
      			pp.print("startY");
   			    pp.print(" = ");
                node.getStartY().accept(getRealThis());
                pp.println(";");
              }
 
              if (null != node.getStartRot()) {          
      			pp.print("startRot");
   			    pp.print(" = ");
                node.getStartRot().accept(getRealThis());
                pp.println(";");
              }
 
              if (null != node.getDestX()) {          
      			pp.print("destX");
   			    pp.print(" = ");
                node.getDestX().accept(getRealThis());
                pp.println(";");
              }
 
              if (null != node.getDestY()) {          
      			pp.print("destY");
   			    pp.print(" = ");
                node.getDestY().accept(getRealThis());
                pp.println(";");
              }
 
              if (null != node.getDestZ()) {          
      			pp.print("destZ");
   			    pp.print(" = ");
                node.getDestZ().accept(getRealThis());
                pp.println(";");
              }
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTPathedVehicle node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTPathedVehicle");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              if (null != node.getSpawnX()) {          
      			pp.print("spawnX");
   			    pp.print(" = ");
                node.getSpawnX().accept(getRealThis());
                pp.println(";");
              }
 
              if (null != node.getSpawnY()) {          
      			pp.print("spawnY");
   			    pp.print(" = ");
                node.getSpawnY().accept(getRealThis());
                pp.println(";");
              }
 
              if (null != node.getSpawnRadius()) {          
      			pp.print("spawnRadius");
   			    pp.print(" = ");
                node.getSpawnRadius().accept(getRealThis());
                pp.println(";");
              }
 
              if (null != node.getDestX()) {          
      			pp.print("destX");
   			    pp.print(" = ");
                node.getDestX().accept(getRealThis());
                pp.println(";");
              }
 
              if (null != node.getDestY()) {          
      			pp.print("destY");
   			    pp.print(" = ");
                node.getDestY().accept(getRealThis());
                pp.println(";");
              }
 
              if (null != node.getDestRadius()) {          
      			pp.print("destRadius");
   			    pp.print(" = ");
                node.getDestRadius().accept(getRealThis());
                pp.println(";");
              }
 
            if (node.getAmount().isPresent()) {
              printAttribute("amount", "\"" + String.valueOf(node.getAmount().get()) + "\"");
            } else if (printEmptyOptional) {
              pp.println("amount = absent;");
            }
        pp.unindent();
        pp.print("}");
     } 

  
      @Override
      public void handle(simulation._ast.ASTRandomVehicle node) {
        String name = StringTransformations.uncapitalize(reporting.getASTNodeNameFormatted(node));
        printObject(name, "simulation._ast.ASTRandomVehicle");
        pp.indent();
        if (node.getSymbol().isPresent()) {
          String symName = StringTransformations.uncapitalize(reporting.getSymbolNameFormatted(node.getSymbol().get()));
          pp.println("symbol = " + symName + ";");
        } else if (printEmptyOptional) {
          pp.println("symbol = absent;");
        }
        if (node.getEnclosingScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getEnclosingScope().get()));
          pp.println("enclosingScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("enclosingScope = absent;");
        }
        if (node.getSpannedScope().isPresent()) {
          String scopeName = StringTransformations.uncapitalize(reporting.getScopeNameFormatted(node.getSpannedScope().get()));
          pp.println("spanningScope = " + scopeName + ";");
        } else if (printEmptyOptional) {
          pp.println("spannedScope = absent;");
        }
 
              printAttribute("amount", "\"" + String.valueOf(node.getAmount()) + "\"");
 
              if (node.getStartX().isPresent()) {
     			pp.print("startX");
   			    pp.print(" = ");
                node.getStartX().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("startX = absent;");
              }
 
              if (node.getStartY().isPresent()) {
     			pp.print("startY");
   			    pp.print(" = ");
                node.getStartY().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("startY = absent;");
              }
 
              if (node.getDestX().isPresent()) {
     			pp.print("destX");
   			    pp.print(" = ");
                node.getDestX().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("destX = absent;");
              }
 
              if (node.getDestY().isPresent()) {
     			pp.print("destY");
   			    pp.print(" = ");
                node.getDestY().get().accept(getRealThis());
                pp.println(";");
              } else if (printEmptyOptional) {
                pp.println("destY = absent;");
              }
        pp.unindent();
        pp.print("}");
     } 

  
  private void printAttribute(String name, String value) {
    pp.print(name);
    pp.print(" = ");
    pp.print(value);
    pp.println(";");
  }
  
  private void printObject(String objName, String objType) {
    pp.print(objName);
    pp.print(":");
    pp.print(Names.getSimpleName(objType));
    pp.println(" {");
  }
  
  public String printObjectDiagram(String modelName, ASTSimulationNode node) {
    pp.clearBuffer();
    pp.setIndentLength(2);
    pp.print("objectdiagram ");
    pp.print(modelName);
    pp.println(" {");
    pp.indent();
    node.accept(getRealThis());
    pp.print(";");
    pp.unindent();
    pp.println("}");
    return pp.getContent();
  }
  
  @Override
  public void setRealThis(SimulationVisitor realThis) {
    this.realThis = realThis;
  }

  @Override
  public SimulationVisitor getRealThis() {
    return realThis;
  }
  
  /**
   * @return the printEmptyOptional
   */
  public boolean isPrintEmptyOptional() {
    return this.printEmptyOptional;
  }

  
  /**
   * @param printEmptyOptional the printEmptyOptional to set
   */
  public void setPrintEmptyOptional(boolean printEmptyOptional) {
    this.printEmptyOptional = printEmptyOptional;
  }

  
  /**
   * @return the printEmptyList
   */
  public boolean isPrintEmptyList() {
    return this.printEmptyList;
  }

  
  /**
   * @param printEmptyList the printEmptyList to set
   */
  public void setPrintEmptyList(boolean printEmptyList) {
    this.printEmptyList = printEmptyList;
  }
  
}
