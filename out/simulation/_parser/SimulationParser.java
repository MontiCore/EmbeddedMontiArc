/* generated by template parser.MCParser*/



package simulation._parser;

import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.nio.charset.StandardCharsets;

import java.util.Optional;
import de.monticore.antlr4.MCConcreteParser;

import org.antlr.v4.runtime.ANTLRFileStream;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;

public class SimulationParser extends MCConcreteParser {

  protected SimulationAntlrParser create(String filename) throws IOException {
    SimulationAntlrLexer lexer = new SimulationAntlrLexer(new  ANTLRFileStream(filename, StandardCharsets.UTF_8.name()));
    CommonTokenStream tokens = new CommonTokenStream(lexer);
    SimulationAntlrParser parser = new SimulationAntlrParser(tokens);
    lexer.setMCParser(parser);  
    parser.setFilename(filename);
    setError(false);
    return parser;
  }
  
  protected SimulationAntlrParser create(Reader reader) throws IOException {
    SimulationAntlrLexer lexer = new SimulationAntlrLexer(new ANTLRInputStream(reader));
    CommonTokenStream tokens = new CommonTokenStream(lexer);
    SimulationAntlrParser parser = new SimulationAntlrParser(tokens);
    lexer.setMCParser(parser);  
    parser.setFilename("StringReader");
    setError(false);
    return parser;
  }
  
  /**
   * @see de.monticore.antlr4.MCConcreteParser#parse(java.lang.String)
   */
  @Override
  public Optional<simulation._ast.ASTSimulation> parse(String fileName) throws IOException {
    return parseSimulation(fileName);
  }
  
  /**
   * @see de.monticore.antlr4.MCConcreteParser#parse(java.io.Reader)
   */
  @Override
  public Optional<simulation._ast.ASTSimulation> parse(Reader reader) throws IOException {
    return parseSimulation(reader);
  }
  
  public Optional<simulation._ast.ASTSimulation> parse_String(String str) throws IOException {
    return parseString_Simulation(str);
  }
 
    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<si._ast.ASTNumber> parseNumber(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	si._ast.ASTNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.number().ret;
    } else {
      ast = parser.number_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTNumber> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTNumber> parseNumber(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	si._ast.ASTNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.number().ret;
    } else {
      ast = parser.number_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTNumber> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTNumber> parseString_Number(String str) throws IOException {
    return parseNumber(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<si._ast.ASTFloatPointUnitNumber> parseFloatPointUnitNumber(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	si._ast.ASTFloatPointUnitNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.floatPointUnitNumber().ret;
    } else {
      ast = parser.floatPointUnitNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTFloatPointUnitNumber> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTFloatPointUnitNumber> parseFloatPointUnitNumber(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	si._ast.ASTFloatPointUnitNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.floatPointUnitNumber().ret;
    } else {
      ast = parser.floatPointUnitNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTFloatPointUnitNumber> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTFloatPointUnitNumber> parseString_FloatPointUnitNumber(String str) throws IOException {
    return parseFloatPointUnitNumber(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<si._ast.ASTHexUnitNumber> parseHexUnitNumber(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	si._ast.ASTHexUnitNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.hexUnitNumber().ret;
    } else {
      ast = parser.hexUnitNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTHexUnitNumber> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTHexUnitNumber> parseHexUnitNumber(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	si._ast.ASTHexUnitNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.hexUnitNumber().ret;
    } else {
      ast = parser.hexUnitNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTHexUnitNumber> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTHexUnitNumber> parseString_HexUnitNumber(String str) throws IOException {
    return parseHexUnitNumber(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<si._ast.ASTUnitNumber> parseUnitNumber(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	si._ast.ASTUnitNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.unitNumber().ret;
    } else {
      ast = parser.unitNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTUnitNumber> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTUnitNumber> parseUnitNumber(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	si._ast.ASTUnitNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.unitNumber().ret;
    } else {
      ast = parser.unitNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTUnitNumber> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTUnitNumber> parseString_UnitNumber(String str) throws IOException {
    return parseUnitNumber(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<si._ast.ASTComplexNumber> parseComplexNumber(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	si._ast.ASTComplexNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.complexNumber().ret;
    } else {
      ast = parser.complexNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTComplexNumber> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTComplexNumber> parseComplexNumber(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	si._ast.ASTComplexNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.complexNumber().ret;
    } else {
      ast = parser.complexNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTComplexNumber> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTComplexNumber> parseString_ComplexNumber(String str) throws IOException {
    return parseComplexNumber(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTTemperature> parseTemperature(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	weather._ast.ASTTemperature ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.temperature().ret;
    } else {
      ast = parser.temperature_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTTemperature> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTTemperature> parseTemperature(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	weather._ast.ASTTemperature ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.temperature().ret;
    } else {
      ast = parser.temperature_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTTemperature> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTTemperature> parseString_Temperature(String str) throws IOException {
    return parseTemperature(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTHumidity> parseHumidity(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	weather._ast.ASTHumidity ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.humidity().ret;
    } else {
      ast = parser.humidity_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTHumidity> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTHumidity> parseHumidity(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	weather._ast.ASTHumidity ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.humidity().ret;
    } else {
      ast = parser.humidity_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTHumidity> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTHumidity> parseString_Humidity(String str) throws IOException {
    return parseHumidity(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTPressure> parsePressure(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	weather._ast.ASTPressure ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.pressure().ret;
    } else {
      ast = parser.pressure_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTPressure> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTPressure> parsePressure(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	weather._ast.ASTPressure ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.pressure().ret;
    } else {
      ast = parser.pressure_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTPressure> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTPressure> parseString_Pressure(String str) throws IOException {
    return parsePressure(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTWindstrength> parseWindstrength(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	weather._ast.ASTWindstrength ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.windstrength().ret;
    } else {
      ast = parser.windstrength_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTWindstrength> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTWindstrength> parseWindstrength(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	weather._ast.ASTWindstrength ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.windstrength().ret;
    } else {
      ast = parser.windstrength_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTWindstrength> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTWindstrength> parseString_Windstrength(String str) throws IOException {
    return parseWindstrength(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTWinddirection> parseWinddirection(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	weather._ast.ASTWinddirection ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.winddirection().ret;
    } else {
      ast = parser.winddirection_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTWinddirection> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTWinddirection> parseWinddirection(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	weather._ast.ASTWinddirection ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.winddirection().ret;
    } else {
      ast = parser.winddirection_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTWinddirection> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTWinddirection> parseString_Winddirection(String str) throws IOException {
    return parseWinddirection(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTPrecipitationtype> parsePrecipitationtype(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	weather._ast.ASTPrecipitationtype ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.precipitationtype().ret;
    } else {
      ast = parser.precipitationtype_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTPrecipitationtype> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTPrecipitationtype> parsePrecipitationtype(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	weather._ast.ASTPrecipitationtype ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.precipitationtype().ret;
    } else {
      ast = parser.precipitationtype_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTPrecipitationtype> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTPrecipitationtype> parseString_Precipitationtype(String str) throws IOException {
    return parsePrecipitationtype(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTPrecipitationamount> parsePrecipitationamount(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	weather._ast.ASTPrecipitationamount ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.precipitationamount().ret;
    } else {
      ast = parser.precipitationamount_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTPrecipitationamount> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTPrecipitationamount> parsePrecipitationamount(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	weather._ast.ASTPrecipitationamount ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.precipitationamount().ret;
    } else {
      ast = parser.precipitationamount_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTPrecipitationamount> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTPrecipitationamount> parseString_Precipitationamount(String str) throws IOException {
    return parsePrecipitationamount(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTClouding> parseClouding(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	weather._ast.ASTClouding ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.clouding().ret;
    } else {
      ast = parser.clouding_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTClouding> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTClouding> parseClouding(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	weather._ast.ASTClouding ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.clouding().ret;
    } else {
      ast = parser.clouding_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTClouding> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTClouding> parseString_Clouding(String str) throws IOException {
    return parseClouding(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTSight> parseSight(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	weather._ast.ASTSight ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.sight().ret;
    } else {
      ast = parser.sight_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTSight> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTSight> parseSight(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	weather._ast.ASTSight ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.sight().ret;
    } else {
      ast = parser.sight_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTSight> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTSight> parseString_Sight(String str) throws IOException {
    return parseSight(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTWeatherPhenomena> parseWeatherPhenomena(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	weather._ast.ASTWeatherPhenomena ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.weatherPhenomena().ret;
    } else {
      ast = parser.weatherPhenomena_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTWeatherPhenomena> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTWeatherPhenomena> parseWeatherPhenomena(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	weather._ast.ASTWeatherPhenomena ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.weatherPhenomena().ret;
    } else {
      ast = parser.weatherPhenomena_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTWeatherPhenomena> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTWeatherPhenomena> parseString_WeatherPhenomena(String str) throws IOException {
    return parseWeatherPhenomena(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTOpticalPhenomena> parseOpticalPhenomena(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	weather._ast.ASTOpticalPhenomena ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.opticalPhenomena().ret;
    } else {
      ast = parser.opticalPhenomena_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTOpticalPhenomena> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTOpticalPhenomena> parseOpticalPhenomena(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	weather._ast.ASTOpticalPhenomena ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.opticalPhenomena().ret;
    } else {
      ast = parser.opticalPhenomena_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTOpticalPhenomena> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTOpticalPhenomena> parseString_OpticalPhenomena(String str) throws IOException {
    return parseOpticalPhenomena(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTArtificialPhenomena> parseArtificialPhenomena(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	weather._ast.ASTArtificialPhenomena ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.artificialPhenomena().ret;
    } else {
      ast = parser.artificialPhenomena_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTArtificialPhenomena> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTArtificialPhenomena> parseArtificialPhenomena(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	weather._ast.ASTArtificialPhenomena ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.artificialPhenomena().ret;
    } else {
      ast = parser.artificialPhenomena_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTArtificialPhenomena> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTArtificialPhenomena> parseString_ArtificialPhenomena(String str) throws IOException {
    return parseArtificialPhenomena(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTSimulation> parseSimulation(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTSimulation ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.simulation().ret;
    } else {
      ast = parser.simulation_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTSimulation> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTSimulation> parseSimulation(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTSimulation ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.simulation().ret;
    } else {
      ast = parser.simulation_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTSimulation> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTSimulation> parseString_Simulation(String str) throws IOException {
    return parseSimulation(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTSimulationRenderFrequency> parseSimulationRenderFrequency(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTSimulationRenderFrequency ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.simulationRenderFrequency().ret;
    } else {
      ast = parser.simulationRenderFrequency_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTSimulationRenderFrequency> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTSimulationRenderFrequency> parseSimulationRenderFrequency(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTSimulationRenderFrequency ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.simulationRenderFrequency().ret;
    } else {
      ast = parser.simulationRenderFrequency_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTSimulationRenderFrequency> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTSimulationRenderFrequency> parseString_SimulationRenderFrequency(String str) throws IOException {
    return parseSimulationRenderFrequency(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTSimulationLoopFrequency> parseSimulationLoopFrequency(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTSimulationLoopFrequency ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.simulationLoopFrequency().ret;
    } else {
      ast = parser.simulationLoopFrequency_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTSimulationLoopFrequency> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTSimulationLoopFrequency> parseSimulationLoopFrequency(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTSimulationLoopFrequency ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.simulationLoopFrequency().ret;
    } else {
      ast = parser.simulationLoopFrequency_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTSimulationLoopFrequency> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTSimulationLoopFrequency> parseString_SimulationLoopFrequency(String str) throws IOException {
    return parseSimulationLoopFrequency(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTSimulationDuration> parseSimulationDuration(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTSimulationDuration ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.simulationDuration().ret;
    } else {
      ast = parser.simulationDuration_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTSimulationDuration> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTSimulationDuration> parseSimulationDuration(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTSimulationDuration ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.simulationDuration().ret;
    } else {
      ast = parser.simulationDuration_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTSimulationDuration> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTSimulationDuration> parseString_SimulationDuration(String str) throws IOException {
    return parseSimulationDuration(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTSimulationType> parseSimulationType(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTSimulationType ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.simulationType().ret;
    } else {
      ast = parser.simulationType_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTSimulationType> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTSimulationType> parseSimulationType(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTSimulationType ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.simulationType().ret;
    } else {
      ast = parser.simulationType_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTSimulationType> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTSimulationType> parseString_SimulationType(String str) throws IOException {
    return parseSimulationType(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTWeatherObj> parseWeatherObj(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTWeatherObj ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.weatherObj().ret;
    } else {
      ast = parser.weatherObj_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTWeatherObj> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTWeatherObj> parseWeatherObj(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTWeatherObj ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.weatherObj().ret;
    } else {
      ast = parser.weatherObj_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTWeatherObj> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTWeatherObj> parseString_WeatherObj(String str) throws IOException {
    return parseWeatherObj(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTWeather> parseWeather(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTWeather ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.weather().ret;
    } else {
      ast = parser.weather_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTWeather> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTWeather> parseWeather(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTWeather ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.weather().ret;
    } else {
      ast = parser.weather_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTWeather> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTWeather> parseString_Weather(String str) throws IOException {
    return parseWeather(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTFixedWeather> parseFixedWeather(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTFixedWeather ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.fixedWeather().ret;
    } else {
      ast = parser.fixedWeather_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTFixedWeather> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTFixedWeather> parseFixedWeather(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTFixedWeather ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.fixedWeather().ret;
    } else {
      ast = parser.fixedWeather_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTFixedWeather> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTFixedWeather> parseString_FixedWeather(String str) throws IOException {
    return parseFixedWeather(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTSequenceWeather> parseSequenceWeather(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTSequenceWeather ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.sequenceWeather().ret;
    } else {
      ast = parser.sequenceWeather_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTSequenceWeather> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTSequenceWeather> parseSequenceWeather(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTSequenceWeather ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.sequenceWeather().ret;
    } else {
      ast = parser.sequenceWeather_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTSequenceWeather> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTSequenceWeather> parseString_SequenceWeather(String str) throws IOException {
    return parseSequenceWeather(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTRandomWeather> parseRandomWeather(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTRandomWeather ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.randomWeather().ret;
    } else {
      ast = parser.randomWeather_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTRandomWeather> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTRandomWeather> parseRandomWeather(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTRandomWeather ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.randomWeather().ret;
    } else {
      ast = parser.randomWeather_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTRandomWeather> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTRandomWeather> parseString_RandomWeather(String str) throws IOException {
    return parseRandomWeather(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTForecast> parseForecast(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTForecast ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.forecast().ret;
    } else {
      ast = parser.forecast_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTForecast> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTForecast> parseForecast(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTForecast ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.forecast().ret;
    } else {
      ast = parser.forecast_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTForecast> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTForecast> parseString_Forecast(String str) throws IOException {
    return parseForecast(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTTime> parseTime(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTTime ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.time().ret;
    } else {
      ast = parser.time_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTTime> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTTime> parseTime(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTTime ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.time().ret;
    } else {
      ast = parser.time_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTTime> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTTime> parseString_Time(String str) throws IOException {
    return parseTime(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTMapPath> parseMapPath(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTMapPath ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.mapPath().ret;
    } else {
      ast = parser.mapPath_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTMapPath> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTMapPath> parseMapPath(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTMapPath ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.mapPath().ret;
    } else {
      ast = parser.mapPath_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTMapPath> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTMapPath> parseString_MapPath(String str) throws IOException {
    return parseMapPath(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTMapName> parseMapName(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTMapName ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.mapName().ret;
    } else {
      ast = parser.mapName_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTMapName> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTMapName> parseMapName(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTMapName ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.mapName().ret;
    } else {
      ast = parser.mapName_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTMapName> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTMapName> parseString_MapName(String str) throws IOException {
    return parseMapName(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTMapHeight> parseMapHeight(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTMapHeight ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.mapHeight().ret;
    } else {
      ast = parser.mapHeight_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTMapHeight> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTMapHeight> parseMapHeight(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTMapHeight ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.mapHeight().ret;
    } else {
      ast = parser.mapHeight_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTMapHeight> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTMapHeight> parseString_MapHeight(String str) throws IOException {
    return parseMapHeight(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTMapOverlap> parseMapOverlap(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTMapOverlap ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.mapOverlap().ret;
    } else {
      ast = parser.mapOverlap_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTMapOverlap> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTMapOverlap> parseMapOverlap(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTMapOverlap ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.mapOverlap().ret;
    } else {
      ast = parser.mapOverlap_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTMapOverlap> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTMapOverlap> parseString_MapOverlap(String str) throws IOException {
    return parseMapOverlap(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTMapSectorWidth> parseMapSectorWidth(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTMapSectorWidth ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.mapSectorWidth().ret;
    } else {
      ast = parser.mapSectorWidth_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTMapSectorWidth> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTMapSectorWidth> parseMapSectorWidth(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTMapSectorWidth ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.mapSectorWidth().ret;
    } else {
      ast = parser.mapSectorWidth_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTMapSectorWidth> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTMapSectorWidth> parseString_MapSectorWidth(String str) throws IOException {
    return parseMapSectorWidth(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTMapSectorHeight> parseMapSectorHeight(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTMapSectorHeight ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.mapSectorHeight().ret;
    } else {
      ast = parser.mapSectorHeight_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTMapSectorHeight> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTMapSectorHeight> parseMapSectorHeight(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTMapSectorHeight ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.mapSectorHeight().ret;
    } else {
      ast = parser.mapSectorHeight_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTMapSectorHeight> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTMapSectorHeight> parseString_MapSectorHeight(String str) throws IOException {
    return parseMapSectorHeight(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTMaxSectorUsers> parseMaxSectorUsers(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTMaxSectorUsers ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.maxSectorUsers().ret;
    } else {
      ast = parser.maxSectorUsers_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTMaxSectorUsers> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTMaxSectorUsers> parseMaxSectorUsers(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTMaxSectorUsers ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.maxSectorUsers().ret;
    } else {
      ast = parser.maxSectorUsers_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTMaxSectorUsers> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTMaxSectorUsers> parseString_MaxSectorUsers(String str) throws IOException {
    return parseMaxSectorUsers(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTTimeout> parseTimeout(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTTimeout ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.timeout().ret;
    } else {
      ast = parser.timeout_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTTimeout> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTTimeout> parseTimeout(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTTimeout ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.timeout().ret;
    } else {
      ast = parser.timeout_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTTimeout> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTTimeout> parseString_Timeout(String str) throws IOException {
    return parseTimeout(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTPedestrians> parsePedestrians(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTPedestrians ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.pedestrians().ret;
    } else {
      ast = parser.pedestrians_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTPedestrians> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTPedestrians> parsePedestrians(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTPedestrians ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.pedestrians().ret;
    } else {
      ast = parser.pedestrians_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTPedestrians> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTPedestrians> parseString_Pedestrians(String str) throws IOException {
    return parsePedestrians(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTPedestrianDensity> parsePedestrianDensity(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTPedestrianDensity ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.pedestrianDensity().ret;
    } else {
      ast = parser.pedestrianDensity_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTPedestrianDensity> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTPedestrianDensity> parsePedestrianDensity(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTPedestrianDensity ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.pedestrianDensity().ret;
    } else {
      ast = parser.pedestrianDensity_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTPedestrianDensity> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTPedestrianDensity> parseString_PedestrianDensity(String str) throws IOException {
    return parsePedestrianDensity(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTVehicles> parseVehicles(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTVehicles ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.vehicles().ret;
    } else {
      ast = parser.vehicles_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTVehicles> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTVehicles> parseVehicles(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTVehicles ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.vehicles().ret;
    } else {
      ast = parser.vehicles_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTVehicles> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTVehicles> parseString_Vehicles(String str) throws IOException {
    return parseVehicles(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTExplicitVehicle> parseExplicitVehicle(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTExplicitVehicle ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.explicitVehicle().ret;
    } else {
      ast = parser.explicitVehicle_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTExplicitVehicle> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTExplicitVehicle> parseExplicitVehicle(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTExplicitVehicle ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.explicitVehicle().ret;
    } else {
      ast = parser.explicitVehicle_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTExplicitVehicle> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTExplicitVehicle> parseString_ExplicitVehicle(String str) throws IOException {
    return parseExplicitVehicle(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTPathedVehicle> parsePathedVehicle(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTPathedVehicle ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.pathedVehicle().ret;
    } else {
      ast = parser.pathedVehicle_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTPathedVehicle> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTPathedVehicle> parsePathedVehicle(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTPathedVehicle ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.pathedVehicle().ret;
    } else {
      ast = parser.pathedVehicle_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTPathedVehicle> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTPathedVehicle> parseString_PathedVehicle(String str) throws IOException {
    return parsePathedVehicle(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<simulation._ast.ASTRandomVehicle> parseRandomVehicle(String filename) throws IOException {   
    SimulationAntlrParser parser = create(filename);    
	simulation._ast.ASTRandomVehicle ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.randomVehicle().ret;
    } else {
      ast = parser.randomVehicle_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTRandomVehicle> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTRandomVehicle> parseRandomVehicle(Reader reader) throws IOException {
 	SimulationAntlrParser parser = create(reader);
	simulation._ast.ASTRandomVehicle ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.randomVehicle().ret;
    } else {
      ast = parser.randomVehicle_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<simulation._ast.ASTRandomVehicle> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<simulation._ast.ASTRandomVehicle> parseString_RandomVehicle(String str) throws IOException {
    return parseRandomVehicle(new StringReader(str));
  }


}