/* generated by template parser.MCParser*/



package weather._parser;

import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.nio.charset.StandardCharsets;

import java.util.Optional;
import de.monticore.antlr4.MCConcreteParser;

import org.antlr.v4.runtime.ANTLRFileStream;
import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;

public class WeatherParser extends MCConcreteParser {

  protected WeatherAntlrParser create(String filename) throws IOException {
    WeatherAntlrLexer lexer = new WeatherAntlrLexer(new  ANTLRFileStream(filename, StandardCharsets.UTF_8.name()));
    CommonTokenStream tokens = new CommonTokenStream(lexer);
    WeatherAntlrParser parser = new WeatherAntlrParser(tokens);
    lexer.setMCParser(parser);  
    parser.setFilename(filename);
    setError(false);
    return parser;
  }
  
  protected WeatherAntlrParser create(Reader reader) throws IOException {
    WeatherAntlrLexer lexer = new WeatherAntlrLexer(new ANTLRInputStream(reader));
    CommonTokenStream tokens = new CommonTokenStream(lexer);
    WeatherAntlrParser parser = new WeatherAntlrParser(tokens);
    lexer.setMCParser(parser);  
    parser.setFilename("StringReader");
    setError(false);
    return parser;
  }
  
  /**
   * @see de.monticore.antlr4.MCConcreteParser#parse(java.lang.String)
   */
  @Override
  public Optional<weather._ast.ASTTemperature> parse(String fileName) throws IOException {
    return parseTemperature(fileName);
  }
  
  /**
   * @see de.monticore.antlr4.MCConcreteParser#parse(java.io.Reader)
   */
  @Override
  public Optional<weather._ast.ASTTemperature> parse(Reader reader) throws IOException {
    return parseTemperature(reader);
  }
  
  public Optional<weather._ast.ASTTemperature> parse_String(String str) throws IOException {
    return parseString_Temperature(str);
  }
 
    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<si._ast.ASTNumber> parseNumber(String filename) throws IOException {   
    WeatherAntlrParser parser = create(filename);    
	si._ast.ASTNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.number().ret;
    } else {
      ast = parser.number_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTNumber> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTNumber> parseNumber(Reader reader) throws IOException {
 	WeatherAntlrParser parser = create(reader);
	si._ast.ASTNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.number().ret;
    } else {
      ast = parser.number_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTNumber> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTNumber> parseString_Number(String str) throws IOException {
    return parseNumber(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<si._ast.ASTFloatPointUnitNumber> parseFloatPointUnitNumber(String filename) throws IOException {   
    WeatherAntlrParser parser = create(filename);    
	si._ast.ASTFloatPointUnitNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.floatPointUnitNumber().ret;
    } else {
      ast = parser.floatPointUnitNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTFloatPointUnitNumber> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTFloatPointUnitNumber> parseFloatPointUnitNumber(Reader reader) throws IOException {
 	WeatherAntlrParser parser = create(reader);
	si._ast.ASTFloatPointUnitNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.floatPointUnitNumber().ret;
    } else {
      ast = parser.floatPointUnitNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTFloatPointUnitNumber> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTFloatPointUnitNumber> parseString_FloatPointUnitNumber(String str) throws IOException {
    return parseFloatPointUnitNumber(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<si._ast.ASTHexUnitNumber> parseHexUnitNumber(String filename) throws IOException {   
    WeatherAntlrParser parser = create(filename);    
	si._ast.ASTHexUnitNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.hexUnitNumber().ret;
    } else {
      ast = parser.hexUnitNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTHexUnitNumber> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTHexUnitNumber> parseHexUnitNumber(Reader reader) throws IOException {
 	WeatherAntlrParser parser = create(reader);
	si._ast.ASTHexUnitNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.hexUnitNumber().ret;
    } else {
      ast = parser.hexUnitNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTHexUnitNumber> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTHexUnitNumber> parseString_HexUnitNumber(String str) throws IOException {
    return parseHexUnitNumber(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<si._ast.ASTUnitNumber> parseUnitNumber(String filename) throws IOException {   
    WeatherAntlrParser parser = create(filename);    
	si._ast.ASTUnitNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.unitNumber().ret;
    } else {
      ast = parser.unitNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTUnitNumber> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTUnitNumber> parseUnitNumber(Reader reader) throws IOException {
 	WeatherAntlrParser parser = create(reader);
	si._ast.ASTUnitNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.unitNumber().ret;
    } else {
      ast = parser.unitNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTUnitNumber> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTUnitNumber> parseString_UnitNumber(String str) throws IOException {
    return parseUnitNumber(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<si._ast.ASTComplexNumber> parseComplexNumber(String filename) throws IOException {   
    WeatherAntlrParser parser = create(filename);    
	si._ast.ASTComplexNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.complexNumber().ret;
    } else {
      ast = parser.complexNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTComplexNumber> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTComplexNumber> parseComplexNumber(Reader reader) throws IOException {
 	WeatherAntlrParser parser = create(reader);
	si._ast.ASTComplexNumber ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.complexNumber().ret;
    } else {
      ast = parser.complexNumber_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<si._ast.ASTComplexNumber> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<si._ast.ASTComplexNumber> parseString_ComplexNumber(String str) throws IOException {
    return parseComplexNumber(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTTemperature> parseTemperature(String filename) throws IOException {   
    WeatherAntlrParser parser = create(filename);    
	weather._ast.ASTTemperature ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.temperature().ret;
    } else {
      ast = parser.temperature_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTTemperature> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTTemperature> parseTemperature(Reader reader) throws IOException {
 	WeatherAntlrParser parser = create(reader);
	weather._ast.ASTTemperature ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.temperature().ret;
    } else {
      ast = parser.temperature_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTTemperature> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTTemperature> parseString_Temperature(String str) throws IOException {
    return parseTemperature(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTHumidity> parseHumidity(String filename) throws IOException {   
    WeatherAntlrParser parser = create(filename);    
	weather._ast.ASTHumidity ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.humidity().ret;
    } else {
      ast = parser.humidity_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTHumidity> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTHumidity> parseHumidity(Reader reader) throws IOException {
 	WeatherAntlrParser parser = create(reader);
	weather._ast.ASTHumidity ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.humidity().ret;
    } else {
      ast = parser.humidity_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTHumidity> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTHumidity> parseString_Humidity(String str) throws IOException {
    return parseHumidity(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTPressure> parsePressure(String filename) throws IOException {   
    WeatherAntlrParser parser = create(filename);    
	weather._ast.ASTPressure ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.pressure().ret;
    } else {
      ast = parser.pressure_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTPressure> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTPressure> parsePressure(Reader reader) throws IOException {
 	WeatherAntlrParser parser = create(reader);
	weather._ast.ASTPressure ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.pressure().ret;
    } else {
      ast = parser.pressure_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTPressure> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTPressure> parseString_Pressure(String str) throws IOException {
    return parsePressure(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTWindstrength> parseWindstrength(String filename) throws IOException {   
    WeatherAntlrParser parser = create(filename);    
	weather._ast.ASTWindstrength ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.windstrength().ret;
    } else {
      ast = parser.windstrength_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTWindstrength> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTWindstrength> parseWindstrength(Reader reader) throws IOException {
 	WeatherAntlrParser parser = create(reader);
	weather._ast.ASTWindstrength ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.windstrength().ret;
    } else {
      ast = parser.windstrength_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTWindstrength> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTWindstrength> parseString_Windstrength(String str) throws IOException {
    return parseWindstrength(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTWinddirection> parseWinddirection(String filename) throws IOException {   
    WeatherAntlrParser parser = create(filename);    
	weather._ast.ASTWinddirection ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.winddirection().ret;
    } else {
      ast = parser.winddirection_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTWinddirection> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTWinddirection> parseWinddirection(Reader reader) throws IOException {
 	WeatherAntlrParser parser = create(reader);
	weather._ast.ASTWinddirection ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.winddirection().ret;
    } else {
      ast = parser.winddirection_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTWinddirection> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTWinddirection> parseString_Winddirection(String str) throws IOException {
    return parseWinddirection(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTPrecipitationtype> parsePrecipitationtype(String filename) throws IOException {   
    WeatherAntlrParser parser = create(filename);    
	weather._ast.ASTPrecipitationtype ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.precipitationtype().ret;
    } else {
      ast = parser.precipitationtype_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTPrecipitationtype> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTPrecipitationtype> parsePrecipitationtype(Reader reader) throws IOException {
 	WeatherAntlrParser parser = create(reader);
	weather._ast.ASTPrecipitationtype ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.precipitationtype().ret;
    } else {
      ast = parser.precipitationtype_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTPrecipitationtype> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTPrecipitationtype> parseString_Precipitationtype(String str) throws IOException {
    return parsePrecipitationtype(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTPrecipitationamount> parsePrecipitationamount(String filename) throws IOException {   
    WeatherAntlrParser parser = create(filename);    
	weather._ast.ASTPrecipitationamount ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.precipitationamount().ret;
    } else {
      ast = parser.precipitationamount_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTPrecipitationamount> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTPrecipitationamount> parsePrecipitationamount(Reader reader) throws IOException {
 	WeatherAntlrParser parser = create(reader);
	weather._ast.ASTPrecipitationamount ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.precipitationamount().ret;
    } else {
      ast = parser.precipitationamount_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTPrecipitationamount> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTPrecipitationamount> parseString_Precipitationamount(String str) throws IOException {
    return parsePrecipitationamount(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTClouding> parseClouding(String filename) throws IOException {   
    WeatherAntlrParser parser = create(filename);    
	weather._ast.ASTClouding ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.clouding().ret;
    } else {
      ast = parser.clouding_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTClouding> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTClouding> parseClouding(Reader reader) throws IOException {
 	WeatherAntlrParser parser = create(reader);
	weather._ast.ASTClouding ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.clouding().ret;
    } else {
      ast = parser.clouding_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTClouding> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTClouding> parseString_Clouding(String str) throws IOException {
    return parseClouding(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTSight> parseSight(String filename) throws IOException {   
    WeatherAntlrParser parser = create(filename);    
	weather._ast.ASTSight ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.sight().ret;
    } else {
      ast = parser.sight_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTSight> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTSight> parseSight(Reader reader) throws IOException {
 	WeatherAntlrParser parser = create(reader);
	weather._ast.ASTSight ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.sight().ret;
    } else {
      ast = parser.sight_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTSight> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTSight> parseString_Sight(String str) throws IOException {
    return parseSight(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTWeatherPhenomena> parseWeatherPhenomena(String filename) throws IOException {   
    WeatherAntlrParser parser = create(filename);    
	weather._ast.ASTWeatherPhenomena ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.weatherPhenomena().ret;
    } else {
      ast = parser.weatherPhenomena_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTWeatherPhenomena> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTWeatherPhenomena> parseWeatherPhenomena(Reader reader) throws IOException {
 	WeatherAntlrParser parser = create(reader);
	weather._ast.ASTWeatherPhenomena ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.weatherPhenomena().ret;
    } else {
      ast = parser.weatherPhenomena_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTWeatherPhenomena> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTWeatherPhenomena> parseString_WeatherPhenomena(String str) throws IOException {
    return parseWeatherPhenomena(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTOpticalPhenomena> parseOpticalPhenomena(String filename) throws IOException {   
    WeatherAntlrParser parser = create(filename);    
	weather._ast.ASTOpticalPhenomena ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.opticalPhenomena().ret;
    } else {
      ast = parser.opticalPhenomena_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTOpticalPhenomena> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTOpticalPhenomena> parseOpticalPhenomena(Reader reader) throws IOException {
 	WeatherAntlrParser parser = create(reader);
	weather._ast.ASTOpticalPhenomena ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.opticalPhenomena().ret;
    } else {
      ast = parser.opticalPhenomena_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTOpticalPhenomena> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTOpticalPhenomena> parseString_OpticalPhenomena(String str) throws IOException {
    return parseOpticalPhenomena(new StringReader(str));
  }

    /* generated by template parser.MCParserMethods*/


  /** Parses a file. 
   * 
   * @param filename Name of file to parse
   * @return Resulting AST
   * @throws IOException 
   */
  public Optional<weather._ast.ASTArtificialPhenomena> parseArtificialPhenomena(String filename) throws IOException {   
    WeatherAntlrParser parser = create(filename);    
	weather._ast.ASTArtificialPhenomena ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.artificialPhenomena().ret;
    } else {
      ast = parser.artificialPhenomena_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTArtificialPhenomena> empty();
    }
    return Optional.ofNullable(ast);
  }

  /** Parses content of a Reader.
   * 
   * @param reader Reader to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTArtificialPhenomena> parseArtificialPhenomena(Reader reader) throws IOException {
 	WeatherAntlrParser parser = create(reader);
	weather._ast.ASTArtificialPhenomena ast;
    if (getParserTarget().equals(MCConcreteParser.ParserExecution.NORMAL)) {
      ast = parser.artificialPhenomena().ret;
    } else {
      ast = parser.artificialPhenomena_eof().ret;
    }
    if (parser.hasErrors()) {
      setError(true);
      return Optional.<weather._ast.ASTArtificialPhenomena> empty();
    }
    return Optional.ofNullable(ast);
  }
  
  /** Parses content of a String.
   * 
   * @param str String to parse from
   * @return Resulting AST
   * @throws IOException 
   * */
  public  Optional<weather._ast.ASTArtificialPhenomena> parseString_ArtificialPhenomena(String str) throws IOException {
    return parseArtificialPhenomena(new StringReader(str));
  }


}