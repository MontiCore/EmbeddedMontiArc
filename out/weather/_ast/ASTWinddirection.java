/* generated from model Weather*/
/* generated by template ast.AstClass*/

package weather._ast;

/* generated by template ast_emf.AstEImports*/
import java.util.Optional;
import java.util.Iterator;
import de.se_rwth.commons.logging.Log;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;

 public  class ASTWinddirection extends /* generated by template ast.AstSuperTypes*/
de.monticore.emf._ast.ASTECNode implements  ASTWeatherNode
 {
  /* generated by template ast.Attribute*/
  
   protected  si._ast.ASTUnitNumber weatherWinddirection;

    /* generated by template ast.Constructor*/
  
   protected  ASTWinddirection (/* generated by template ast.ParametersDeclaration*/
    // Parameters declaration
 
    )  
  /* generated by template ast.EmptyMethodBody*/

  { // empty body 
  }


    /* generated by template ast.Constructor*/
  
   protected  ASTWinddirection (/* generated by template ast.ConstructorParametersDeclaration*/
     si._ast.ASTUnitNumber weatherWinddirection 
 
    )  
  /* generated by template ast.ConstructorAttributesSetter*/
  {
    setWeatherWinddirection(weatherWinddirection);
  }


  
    /* generated by template ast.ClassMethod*/
  
   public  void accept(weather._visitor.WeatherVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_289 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.Accept*/

      visitor.handle(this);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void accept(si._visitor.SIVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_111 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.AcceptSuper*/

    if (visitor instanceof weather._visitor.WeatherVisitor) {
      accept((weather._visitor.WeatherVisitor) visitor);      
    } else {
      de.se_rwth.commons.logging.Log.error("0xA7000_745AST node type ASTWinddirection of the sub language Weather expected a visitor of type weather._visitor.WeatherVisitor, but got si._visitor.SIVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
    }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEquals(Object o,boolean forceSameOrder)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_792 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.DeepEqualsWithOrder*/

      ASTWinddirection comp;
    if ((o instanceof ASTWinddirection)) {
      comp = (ASTWinddirection) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing weatherWinddirection
    if ( (this.weatherWinddirection == null && comp.weatherWinddirection != null) || 
      (this.weatherWinddirection != null && !this.weatherWinddirection.deepEquals(comp.weatherWinddirection)) ) {
      return false;
    }
    return true;     


  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEquals(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_893 Parameter 'o' must not be null.");

     return deepEquals(o, true);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEqualsWithComments(Object o,boolean forceSameOrder)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_414 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.DeepEqualsWithComments*/

      ASTWinddirection comp;
    if ((o instanceof ASTWinddirection)) {
      comp = (ASTWinddirection) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    // comparing weatherWinddirection
    if ( (this.weatherWinddirection == null && comp.weatherWinddirection != null) || 
      (this.weatherWinddirection != null && !this.weatherWinddirection.deepEqualsWithComments(comp.weatherWinddirection)) ) {
      return false;
    }
    return true;     

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEqualsWithComments(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_039 Parameter 'o' must not be null.");

     return deepEqualsWithComments(o, true);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean equalAttributes(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_221 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.EqualAttributes*/

    return o instanceof ASTWinddirection;


  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean equalsWithComments(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_498 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.EqualsWithComments*/

      ASTWinddirection comp;
    if ((o instanceof ASTWinddirection)) {
      comp = (ASTWinddirection) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreComments().size() == comp.get_PreComments().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreComments().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreComments().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostComments().size() == comp.get_PostComments().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostComments().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostComments().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  java.util.Collection<de.monticore.ast.ASTNode> get_Children()   { 
     
     /* generated by template ast.additionalmethods.GetChildren*/

    java.util.LinkedList<de.monticore.ast.ASTNode> result = new java.util.LinkedList<de.monticore.ast.ASTNode>();
        if ( getWeatherWinddirection() != null ) {
          result.add(getWeatherWinddirection());
        }
    return result;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void remove_Child(de.monticore.ast.ASTNode child)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(child, "0xA7006_567 Parameter 'child' must not be null.");

     /* generated by template ast.additionalmethods.RemoveChild*/

      if (getWeatherWinddirection() == child) {
        setWeatherWinddirection(null);
      }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  static  Builder getBuilder()   { 
     
     return new Builder();

  } 

    /* generated by template ast.ClassMethod*/
  
   public  ASTWinddirection deepClone()   { 
     
     return deepClone(_construct());

  } 

    /* generated by template ast.ClassMethod*/
  
   public  ASTWinddirection deepClone(ASTWinddirection result)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(result, "0xA7006_683 Parameter 'result' must not be null.");

     /* generated by template ast.additionalmethods.DeepCloneWithParameters*/
  
    super.deepClone(result);
    
    result.setWeatherWinddirection((si._ast.ASTUnitNumber) this.weatherWinddirection.deepClone());
    
    return result;

  } 

    /* generated by template ast.ClassMethod*/
  
   protected  ASTWinddirection _construct()   { 
     
     return new ASTWinddirection();

  } 

    /* generated by template ast.ClassMethod*/
  
   public  si._ast.ASTUnitNumber getWeatherWinddirection()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.weatherWinddirection;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setWeatherWinddirection(si._ast.ASTUnitNumber weatherWinddirection)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(weatherWinddirection, "0xA7006_688 Parameter 'weatherWinddirection' must not be null.");

     /* generated by template ast_emf.additionalmethods.Set*/

    si._ast.ASTUnitNumber oldWeatherWinddirection = this.weatherWinddirection;
    this.weatherWinddirection = weatherWinddirection;
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, WeatherPackage.ASTWinddirection_WeatherWinddirection, oldWeatherWinddirection, weatherWinddirection));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Object eGet(int featureID,boolean resolve,boolean coreType)   { 
     
     /* generated by template ast_emf.additionalmethods.EGet*/
  
    switch (featureID) {
      case WeatherPackage.ASTWinddirection_WeatherWinddirection:
         return getWeatherWinddirection();
    }
    return eDynamicGet(featureID, resolve, coreType);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  void eSet(int featureID,Object newValue)   { 
     
     /* generated by template ast_emf.additionalmethods.ESet*/
  
    switch (featureID) {
      case WeatherPackage.ASTWinddirection_WeatherWinddirection:
        setWeatherWinddirection((si._ast.ASTUnitNumber)newValue);
        return;
    }
    eDynamicSet(featureID, newValue);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  void eUnset(int featureID)   { 
     
     /* generated by template ast_emf.additionalmethods.EUnset*/
 
    switch (featureID) {
      case WeatherPackage.ASTWinddirection_WeatherWinddirection:
        setWeatherWinddirection(null);
      return;
    }
    eDynamicUnset(featureID);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean eIsSet(int featureID)   { 
     
     /* generated by template ast_emf.additionalmethods.EIsSet*/
 
    switch (featureID) {
      case WeatherPackage.ASTWinddirection_WeatherWinddirection:
        return getWeatherWinddirection() != null;
    }
    return eDynamicIsSet(featureID);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  int eBaseStructuralFeatureID(int featureID,Class<?> baseClass)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(baseClass, "0xA7006_194 Parameter 'baseClass' must not be null.");

     /* generated by template ast_emf.additionalmethods.EStructuralFeature*/
  
    return super.eBaseStructuralFeatureID(featureID, baseClass);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  int eDerivedStructuralFeatureID(int featureID,Class<?> baseClass)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(baseClass, "0xA7006_602 Parameter 'baseClass' must not be null.");

     /* generated by template ast_emf.additionalmethods.EStructuralFeature*/
  
    return super.eDerivedStructuralFeatureID(featureID, baseClass);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  String toString()   { 
     
     /* generated by template ast_emf.additionalmethods.EToString*/
  
    if (eIsProxy()) {
      return super.toString();
    }
    StringBuffer result = new StringBuffer(getClass().getSimpleName());
    result.append(" WeatherWinddirection: ");
    result.append(weatherWinddirection);
    return result.toString();
  } 

    /* generated by template ast.ClassMethod*/
  
   protected  EClass eStaticClass()   { 
     
     return WeatherPackage.Literals.ASTWinddirection;
  } 

   
  /* generated by template ast.ClassContent*/
  // Class content

    /* generated by template ast.AstBuilder*/

 /**
   * Builder for {@link ASTWinddirection}.
   */
  public static class Builder  {
    /* generated by template ast.BuilderAttribute*/
     protected  si._ast.ASTUnitNumber weatherWinddirection;

    public ASTWinddirection build() {
      return new ASTWinddirection (/* generated by template ast.BuilderConstructorParametersDeclaration*/
  
        this.weatherWinddirection 

      );
    }
    /* generated by template ast.AstBuilderAttributeSetter*/
    public Builder weatherWinddirection(si._ast.ASTUnitNumber weatherWinddirection) {
      this.weatherWinddirection = weatherWinddirection;
      return this;
    }

  }    

  
}
