/* generated by template cocos.CoCoChecker*/



package weather._cocos;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.LinkedHashSet;

import weather._ast.ASTWeatherNode;
import weather._visitor.WeatherVisitor;
import weather._visitor.WeatherInheritanceVisitor;

/**
 * This class is capable of checking context conditions of the language and all
 * their super languages. Beside such composition of single context conditions
 * ({@code addCoCo(...)}) it also allows composing of existing checkers of
 * the language itself and checkers of (transitive) super languages
 * ({@code addChecker(...)}). Composing multiple checkers of the same (super)
 * language is possible. The composed checkers are not modified. Also it is
 * supported to mix both composing existing checkers as well as single.<br/>
 * <b>Keep in mind</b> that context conditions are executed multiple-times if
 * added multiple times. This might be tricky when multiple composed checkers
 * hold the same context condition.<br/>
 * <br/>
 * <b>Add context conditions</b> using {@code #addCoCo(...}.<br/>
 * <br/>
 * <b>Add checkers</b> using {@code #addCoCo(...}.<br/>
 * <br/>
 * <b>Execute all</b> registered context conditions and checkers by calling
 * {@link #checkAll(ASTWeatherNode)}.
 * 
 * @author Robert Heim
 */
public class WeatherCoCoChecker implements WeatherInheritanceVisitor {

  public WeatherCoCoChecker() {
  }

  // --- realThis-Pattern ---
  
  private WeatherVisitor realThis = this;

  @Override
  public WeatherVisitor getRealThis() {
    return realThis;
  }

  @Override
  public void setRealThis(WeatherVisitor realThis) {
    this.realThis = realThis;
  }
  
  // --- /realThis-Pattern ---

    /**
     * Executes all registered context conditions and checkers on the given ast.
     * @param node the node to check the context conditions on.
     */
    public void checkAll(weather._ast.ASTWeatherNode node) {
      // start the double-dispatch visitor
      // checks are performed in the visit methods.
      node.accept(getRealThis());
    }
    /**
     * Executes all registered context conditions and checkers on the given ast.
     * @param node the node to check the context conditions on.
     */
    public void checkAll(si._ast.ASTSINode node) {
      // start the double-dispatch visitor
      // checks are performed in the visit methods.
      node.accept(getRealThis());
    }


      private List<weather._cocos.WeatherCoCoChecker> weather__cocos_WeatherCoCoChecker = new ArrayList<>();

    /**
     * Registers a checker whose context conditions will be executed once the
     * checker runs.<br/>
     * <br/>
     * Use this to compose checkers that already have cocos added. All
     * registered context conditions of all checkers are executed. By default
     * at least an empty checker is registered for super languages.
     * {@code weather._cocos.WeatherCoCoChecker} is used.
     * 
     * @param checker the checker to add.
     * @see #checkAll(ASTWeatherNode)
     */
    public void addChecker(weather._cocos.WeatherCoCoChecker checker) {
      // note that getRealThis is not needed here.
      this.weather__cocos_WeatherCoCoChecker.add(checker);
    }


          private Collection<weather._cocos.WeatherASTTemperatureCoCo> weather__ast_ASTTemperatureCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTWeatherNode)
         */
        public WeatherCoCoChecker addCoCo(weather._cocos.WeatherASTTemperatureCoCo coco) {
            weather__ast_ASTTemperatureCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTTemperature node) {
            // execute all registered cocos of this checker
            for (weather._cocos.WeatherASTTemperatureCoCo coco : weather__ast_ASTTemperatureCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<weather._cocos.WeatherASTHumidityCoCo> weather__ast_ASTHumidityCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTWeatherNode)
         */
        public WeatherCoCoChecker addCoCo(weather._cocos.WeatherASTHumidityCoCo coco) {
            weather__ast_ASTHumidityCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTHumidity node) {
            // execute all registered cocos of this checker
            for (weather._cocos.WeatherASTHumidityCoCo coco : weather__ast_ASTHumidityCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<weather._cocos.WeatherASTPressureCoCo> weather__ast_ASTPressureCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTWeatherNode)
         */
        public WeatherCoCoChecker addCoCo(weather._cocos.WeatherASTPressureCoCo coco) {
            weather__ast_ASTPressureCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTPressure node) {
            // execute all registered cocos of this checker
            for (weather._cocos.WeatherASTPressureCoCo coco : weather__ast_ASTPressureCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<weather._cocos.WeatherASTWindstrengthCoCo> weather__ast_ASTWindstrengthCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTWeatherNode)
         */
        public WeatherCoCoChecker addCoCo(weather._cocos.WeatherASTWindstrengthCoCo coco) {
            weather__ast_ASTWindstrengthCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTWindstrength node) {
            // execute all registered cocos of this checker
            for (weather._cocos.WeatherASTWindstrengthCoCo coco : weather__ast_ASTWindstrengthCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<weather._cocos.WeatherASTWinddirectionCoCo> weather__ast_ASTWinddirectionCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTWeatherNode)
         */
        public WeatherCoCoChecker addCoCo(weather._cocos.WeatherASTWinddirectionCoCo coco) {
            weather__ast_ASTWinddirectionCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTWinddirection node) {
            // execute all registered cocos of this checker
            for (weather._cocos.WeatherASTWinddirectionCoCo coco : weather__ast_ASTWinddirectionCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<weather._cocos.WeatherASTPrecipitationtypeCoCo> weather__ast_ASTPrecipitationtypeCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTWeatherNode)
         */
        public WeatherCoCoChecker addCoCo(weather._cocos.WeatherASTPrecipitationtypeCoCo coco) {
            weather__ast_ASTPrecipitationtypeCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTPrecipitationtype node) {
            // execute all registered cocos of this checker
            for (weather._cocos.WeatherASTPrecipitationtypeCoCo coco : weather__ast_ASTPrecipitationtypeCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<weather._cocos.WeatherASTPrecipitationamountCoCo> weather__ast_ASTPrecipitationamountCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTWeatherNode)
         */
        public WeatherCoCoChecker addCoCo(weather._cocos.WeatherASTPrecipitationamountCoCo coco) {
            weather__ast_ASTPrecipitationamountCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTPrecipitationamount node) {
            // execute all registered cocos of this checker
            for (weather._cocos.WeatherASTPrecipitationamountCoCo coco : weather__ast_ASTPrecipitationamountCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<weather._cocos.WeatherASTCloudingCoCo> weather__ast_ASTCloudingCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTWeatherNode)
         */
        public WeatherCoCoChecker addCoCo(weather._cocos.WeatherASTCloudingCoCo coco) {
            weather__ast_ASTCloudingCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTClouding node) {
            // execute all registered cocos of this checker
            for (weather._cocos.WeatherASTCloudingCoCo coco : weather__ast_ASTCloudingCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<weather._cocos.WeatherASTSightCoCo> weather__ast_ASTSightCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTWeatherNode)
         */
        public WeatherCoCoChecker addCoCo(weather._cocos.WeatherASTSightCoCo coco) {
            weather__ast_ASTSightCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTSight node) {
            // execute all registered cocos of this checker
            for (weather._cocos.WeatherASTSightCoCo coco : weather__ast_ASTSightCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<weather._cocos.WeatherASTWeatherPhenomenaCoCo> weather__ast_ASTWeatherPhenomenaCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTWeatherNode)
         */
        public WeatherCoCoChecker addCoCo(weather._cocos.WeatherASTWeatherPhenomenaCoCo coco) {
            weather__ast_ASTWeatherPhenomenaCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTWeatherPhenomena node) {
            // execute all registered cocos of this checker
            for (weather._cocos.WeatherASTWeatherPhenomenaCoCo coco : weather__ast_ASTWeatherPhenomenaCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<weather._cocos.WeatherASTOpticalPhenomenaCoCo> weather__ast_ASTOpticalPhenomenaCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTWeatherNode)
         */
        public WeatherCoCoChecker addCoCo(weather._cocos.WeatherASTOpticalPhenomenaCoCo coco) {
            weather__ast_ASTOpticalPhenomenaCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTOpticalPhenomena node) {
            // execute all registered cocos of this checker
            for (weather._cocos.WeatherASTOpticalPhenomenaCoCo coco : weather__ast_ASTOpticalPhenomenaCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<weather._cocos.WeatherASTArtificialPhenomenaCoCo> weather__ast_ASTArtificialPhenomenaCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTWeatherNode)
         */
        public WeatherCoCoChecker addCoCo(weather._cocos.WeatherASTArtificialPhenomenaCoCo coco) {
            weather__ast_ASTArtificialPhenomenaCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTArtificialPhenomena node) {
            // execute all registered cocos of this checker
            for (weather._cocos.WeatherASTArtificialPhenomenaCoCo coco : weather__ast_ASTArtificialPhenomenaCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<weather._cocos.WeatherASTWeatherNodeCoCo> weather__ast_ASTWeatherNodeCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTWeatherNode)
         */
        public WeatherCoCoChecker addCoCo(weather._cocos.WeatherASTWeatherNodeCoCo coco) {
            weather__ast_ASTWeatherNodeCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTWeatherNode node) {
            // execute all registered cocos of this checker
            for (weather._cocos.WeatherASTWeatherNodeCoCo coco : weather__ast_ASTWeatherNodeCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

      private List<si._cocos.SICoCoChecker> si__cocos_SICoCoChecker = new ArrayList<>(Arrays.asList(new si._cocos.SICoCoChecker()));

    /**
     * Registers a checker whose context conditions will be executed once the
     * checker runs.<br/>
     * <br/>
     * Use this to compose checkers that already have cocos added. All
     * registered context conditions of all checkers are executed. By default
     * at least an empty checker is registered for super languages.
     * {@code si._cocos.SICoCoChecker} is used.
     * 
     * @param checker the checker to add.
     * @see #checkAll(ASTWeatherNode)
     */
    public void addChecker(si._cocos.SICoCoChecker checker) {
      // note that getRealThis is not needed here.
      this.si__cocos_SICoCoChecker.add(checker);
    }


 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTWeatherNode)
         */
        public WeatherCoCoChecker addCoCo(si._cocos.SIASTNumberCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            si__cocos_SICoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(si._ast.ASTNumber node) {
            // delegate to all registered checkers of the corresponding super language
            si__cocos_SICoCoChecker.stream().forEach(c -> c.visit(node));
        }

 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTWeatherNode)
         */
        public WeatherCoCoChecker addCoCo(si._cocos.SIASTFloatPointUnitNumberCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            si__cocos_SICoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(si._ast.ASTFloatPointUnitNumber node) {
            // delegate to all registered checkers of the corresponding super language
            si__cocos_SICoCoChecker.stream().forEach(c -> c.visit(node));
        }

 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTWeatherNode)
         */
        public WeatherCoCoChecker addCoCo(si._cocos.SIASTHexUnitNumberCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            si__cocos_SICoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(si._ast.ASTHexUnitNumber node) {
            // delegate to all registered checkers of the corresponding super language
            si__cocos_SICoCoChecker.stream().forEach(c -> c.visit(node));
        }

 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTWeatherNode)
         */
        public WeatherCoCoChecker addCoCo(si._cocos.SIASTUnitNumberCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            si__cocos_SICoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(si._ast.ASTUnitNumber node) {
            // delegate to all registered checkers of the corresponding super language
            si__cocos_SICoCoChecker.stream().forEach(c -> c.visit(node));
        }

 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTWeatherNode)
         */
        public WeatherCoCoChecker addCoCo(si._cocos.SIASTComplexNumberCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            si__cocos_SICoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(si._ast.ASTComplexNumber node) {
            // delegate to all registered checkers of the corresponding super language
            si__cocos_SICoCoChecker.stream().forEach(c -> c.visit(node));
        }

 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTWeatherNode)
         */
        public WeatherCoCoChecker addCoCo(si._cocos.SIASTSINodeCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            si__cocos_SICoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(si._ast.ASTSINode node) {
            // delegate to all registered checkers of the corresponding super language
            si__cocos_SICoCoChecker.stream().forEach(c -> c.visit(node));
        }
}
