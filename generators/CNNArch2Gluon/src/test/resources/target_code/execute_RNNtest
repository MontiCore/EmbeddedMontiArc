    vector<float> source_ = CNNTranslator::translate(source);

    vector<vector<float>> target_(5);
    for (size_t i = 0; i < target_.size(); ++i) {
        target_[i].emplace_back(30000);
    }



    _predictor_0_.predict(source_, target_[0]);

    {
        int k = 1;
        vector<pair<vector<vector<float>>, double>> sequences{make_pair(vector<vector<float>>{target_[1-1+0]}, 1.0)};

        for (size_t i = 1; i < 5; ++i) {
            vector<pair<vector<vector<float>>, double>> allCandidates;

            for (const pair<vector<vector<float>>, double>& p : sequences) {
                vector<vector<float>> seq = p.first;
                double score = p.second;

                target_[i-1+0] = seq.back();
                _predictor_1_.predict(target_[i-1+0], target_[i-1+1]);
                vector<float> out = target_[i-1+1];

                vector<pair<int, float>> topk;
                for (size_t i = 0; i < out.size(); ++i) {
                    topk.emplace_back(i, out[i]);
                }

                sort(topk.begin(), topk.end(), [] (const pair<int, float>& p1, const pair<int, float>& p2) {
                    return p1.second > p2.second;
                });
                topk = vector<pair<int, float>>(topk.begin(), topk.begin() + std::min<int>(k, topk.size()));

                for (const pair<int, float>& pair : topk) {
                    vector<vector<float>> currentSeq = seq;
                    currentSeq.push_back(vector<float>{(float) pair.first});
                    allCandidates.emplace_back(currentSeq, score * pair.second);
                }
            }

            sort(allCandidates.begin(), allCandidates.end(), [] (const pair<vector<vector<float>>, double>& p1, const pair<vector<vector<float>>, double>& p2) {
                return p1.second > p2.second;
            });
            sequences = vector<pair<vector<vector<float>>, double>>(allCandidates.begin(), allCandidates.begin() + std::min<int>(k, allCandidates.size()));
        }

        for (size_t i = 1; i < 5; ++i) {
            target_[i-1+1] = sequences[0].first[i];
        }
    }

    target[0] = CNNTranslator::translateToCol(target_[0], std::vector<size_t> {30000});
    target[1] = CNNTranslator::translateToCol(target_[1], std::vector<size_t> {30000});
    target[2] = CNNTranslator::translateToCol(target_[2], std::vector<size_t> {30000});
    target[3] = CNNTranslator::translateToCol(target_[3], std::vector<size_t> {30000});
    target[4] = CNNTranslator::translateToCol(target_[4], std::vector<size_t> {30000});
