    vector<float> source_ = CNNTranslator::translate(source);

    vector<vector<float>> target_(30);
    for (size_t i = 0; i < target_.size(); ++i) {
        target_[i].emplace_back(1);
    }

    vector<float> encoder_state_0_(1 * 1000 * 1);
    vector<float> encoder_state_1_(1 * 1000 * 1);
    vector<float> encoder_output_(30 * 1000 * 1);
    vector<float> decoder_state_0_(1 * 1000 * 1);
    vector<float> decoder_state_1_(1 * 1000 * 1);
    vector<float> decoder_output_(1 * 1000 * 1);

    vector<float> const1_{1};

    _predictor_0_.predict(source_, encoder_state_0_, encoder_state_1_, encoder_output_, encoder_state_0_, encoder_state_1_);

    _predictor_1_.predict(const1_, target_[0]);

    _predictor_2_.predict(encoder_state_0_, encoder_state_1_, decoder_state_0_, decoder_state_1_);

    {
        int k = 3;
        vector<pair<vector<vector<float>>, double>> sequences{make_pair(vector<vector<float>>{target_[1-1+0]}, 1.0)};

        for (size_t i = 1; i < 30; ++i) {
            vector<pair<vector<vector<float>>, double>> allCandidates;

            for (const pair<vector<vector<float>>, double>& p : sequences) {
                vector<vector<float>> seq = p.first;
                double score = p.second;

                target_[i-1+0] = seq.back();
                _predictor_3_.predict(target_[i-1+0], decoder_state_0_, decoder_state_1_, target_[i-1+1], decoder_state_0_, decoder_state_1_, decoder_output_);
                std::vector<float>::iterator maxElement = std::max_element(target_[i-1+1].begin(), target_[i-1+1].end());
                target_[i-1+1] = std::vector<float>{static_cast<float>(std::distance(target_[i-1+1].begin(), maxElement))};
                vector<float> out = target_[i-1+1];

                vector<pair<int, float>> topk;
                for (size_t i = 0; i < out.size(); ++i) {
                    topk.emplace_back(i, out[i]);
                }

                sort(topk.begin(), topk.end(), [] (const pair<int, float>& p1, const pair<int, float>& p2) {
                    return p1.second > p2.second;
                });
                topk = vector<pair<int, float>>(topk.begin(), topk.begin() + std::min<int>(k, topk.size()));

                for (const pair<int, float>& pair : topk) {
                    vector<vector<float>> currentSeq = seq;
                    currentSeq.push_back(vector<float>{(float) pair.first});
                    allCandidates.emplace_back(currentSeq, score * pair.second);
                }
            }

            sort(allCandidates.begin(), allCandidates.end(), [] (const pair<vector<vector<float>>, double>& p1, const pair<vector<vector<float>>, double>& p2) {
                return p1.second > p2.second;
            });
            sequences = vector<pair<vector<vector<float>>, double>>(allCandidates.begin(), allCandidates.begin() + std::min<int>(k, allCandidates.size()));
        }

        for (size_t i = 1; i < 30; ++i) {
            target_[i-1+1] = sequences[0].first[i];
        }
    }

    target[0] = CNNTranslator::translateToIntCol(target_[0], std::vector<size_t> {1});
    target[1] = CNNTranslator::translateToIntCol(target_[1], std::vector<size_t> {1});
    target[2] = CNNTranslator::translateToIntCol(target_[2], std::vector<size_t> {1});
    target[3] = CNNTranslator::translateToIntCol(target_[3], std::vector<size_t> {1});
    target[4] = CNNTranslator::translateToIntCol(target_[4], std::vector<size_t> {1});
    target[5] = CNNTranslator::translateToIntCol(target_[5], std::vector<size_t> {1});
    target[6] = CNNTranslator::translateToIntCol(target_[6], std::vector<size_t> {1});
    target[7] = CNNTranslator::translateToIntCol(target_[7], std::vector<size_t> {1});
    target[8] = CNNTranslator::translateToIntCol(target_[8], std::vector<size_t> {1});
    target[9] = CNNTranslator::translateToIntCol(target_[9], std::vector<size_t> {1});
    target[10] = CNNTranslator::translateToIntCol(target_[10], std::vector<size_t> {1});
    target[11] = CNNTranslator::translateToIntCol(target_[11], std::vector<size_t> {1});
    target[12] = CNNTranslator::translateToIntCol(target_[12], std::vector<size_t> {1});
    target[13] = CNNTranslator::translateToIntCol(target_[13], std::vector<size_t> {1});
    target[14] = CNNTranslator::translateToIntCol(target_[14], std::vector<size_t> {1});
    target[15] = CNNTranslator::translateToIntCol(target_[15], std::vector<size_t> {1});
    target[16] = CNNTranslator::translateToIntCol(target_[16], std::vector<size_t> {1});
    target[17] = CNNTranslator::translateToIntCol(target_[17], std::vector<size_t> {1});
    target[18] = CNNTranslator::translateToIntCol(target_[18], std::vector<size_t> {1});
    target[19] = CNNTranslator::translateToIntCol(target_[19], std::vector<size_t> {1});
    target[20] = CNNTranslator::translateToIntCol(target_[20], std::vector<size_t> {1});
    target[21] = CNNTranslator::translateToIntCol(target_[21], std::vector<size_t> {1});
    target[22] = CNNTranslator::translateToIntCol(target_[22], std::vector<size_t> {1});
    target[23] = CNNTranslator::translateToIntCol(target_[23], std::vector<size_t> {1});
    target[24] = CNNTranslator::translateToIntCol(target_[24], std::vector<size_t> {1});
    target[25] = CNNTranslator::translateToIntCol(target_[25], std::vector<size_t> {1});
    target[26] = CNNTranslator::translateToIntCol(target_[26], std::vector<size_t> {1});
    target[27] = CNNTranslator::translateToIntCol(target_[27], std::vector<size_t> {1});
    target[28] = CNNTranslator::translateToIntCol(target_[28], std::vector<size_t> {1});
    target[29] = CNNTranslator::translateToIntCol(target_[29], std::vector<size_t> {1});
