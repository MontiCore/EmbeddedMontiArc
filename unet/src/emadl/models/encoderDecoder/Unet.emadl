/* (c) https://github.com/MontiCore/monticore */
package encoderDecoder;

component Unet<Z(2:oo) first_channels = 64, Z(1:oo) classes = 21>{
    ports in Q(0:1)^{3, 480, 480} data,
         out Q(0:1)^{classes, 480, 480} softmax;

        implementation CNN{

            def conv(filter, channels){
                Convolution(kernel=(filter,filter), channels=channels) ->
                Relu()
            }

            def encode_block(filter, channels, num_conv=2){
                conv(filter=filter, channels=channels, ->=num_conv)
            }

            def decode_block(filter, channels, num_conv=2){
                conv(filter=filter, channels=channels, ->=num_conv) ->
                TransConv(kernel=(4,4), channels=channels, stride=(2,2))
            }

            def fully_conv(filter, channels, dropout){
                conv(filter=filter, channels=channels) ->
                Relu() ->
                Dropout(p=dropout)
            }

            data ->

            /* encode block 1 */
            encode_block(filter=3, channels=first_channels, num_conv=2) ->
            (
                Pooling(pool_type="max", kernel=(2,2), stride=(2,2)) ->
                /* encode block 2 */
                encode_block(filter=3, channels=first_channels*2, num_conv=2) ->
                (
                    Pooling(pool_type="max", kernel=(2,2), stride=(2,2)) ->
                    /* encode block 3 */
                    encode_block(filter=3, channels=first_channels*4, num_conv=2) ->
                    (
                        Pooling(pool_type="max", kernel=(2,2), stride=(2,2)) ->
                        /* encode block 4 */
                        encode_block(filter=3, channels=first_channels*8, num_conv=2) ->
                        (
                            Pooling(pool_type="max", kernel=(2,2), stride=(2,2)) ->
                            /* deepest block */
                            decode_block(filter=3, channels=first_channels*16, num_conv=2)

                        |
                            /* crop block 4 */
                            [0]
                        ) ->
                        Concatenate() ->
                        /* decode block 3 */
                        decode_block(filter=3, channels=first_channels*8, num_conv=2)
                    |
                        /* crop block 3 */
                        [0]
                    ) ->
                    Concatenate() ->
                    /* decode block 3 */
                    decode_block(filter=3, channels=first_channels*4, num_conv=2)
                |
                    /* crop block 2 */
                    [0]
                ) ->
                Concatenate() ->
                /* decode block 2 */
                decode_block(filter=3, channels=first_channels*2, num_conv=2)
            |
                /* crop block 1 */
                [0]
            ) ->
            Concatenate() ->
            /* decode block 1 */
            conv(filter=3, channels=first_channels) ->

            /* end */
            Convolution(kernel=(1,1), channels=classes) ->

            softmax;
        }
}