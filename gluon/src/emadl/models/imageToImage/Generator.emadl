package imageToImage;

//encoder C64-C128-C256-C512-C512-C512-C512-C512
//decoder:CD512-CD512-CD512-C512-C256-C128-C64
//Let Ck denote  a  Convolution-BatchNorm-ReLU  layer with  k  filters.
//CDk denotes  a  Convolution-BatchNorm-Dropout-ReLU layer with a dropout rate of 50%.
//All convolutions are 4Ã—4 spatial filters applied with stride 2.
//Convolutions in the encoder, and in the discriminator, downsample by a factor of 2, whereas in the decoder they upsample by a factor of 2.

component Generator<Z(1:oo) in_channels = 3, Z(1:oo) out_channels = 3, Z(2:oo) first_channels = 64>{
    ports in Q(0:1)^{in_channels, 256, 256} data,
         out Q(0:1)^{out_channels, 256, 256} target_label;

    implementation CNN{

        def encode(channels, filter=4, num_conv=1){
            LeakyRelu(alpha=0.2) ->
            Convolution(kernel=(filter,filter), channels=channels, stride=(2,2)) ->
            BatchNorm() 
        }

        def encode_nobatch(channels, filter=4, num_conv=1){
            LeakyRelu(alpha=0.2) ->
            Convolution(kernel=(filter,filter), channels=channels, stride=(2,2)) 
        }

        def decode(channels, filter=4, num_conv=1){
            Relu() ->
            TransConv(kernel=(filter, filter), channels=channels, stride=(2,2)) ->
            BatchNorm() ->
            Dropout(p=0.5) 
        }

        def decode_nodrop(channels, filter=4, num_conv=1){
            Relu() ->
            TransConv(kernel=(filter, filter), channels=channels, stride=(2,2)) ->
            BatchNorm() 
        }

        data ->

        /* encoder 1 without BatchNorm */
        Convolution(kernel=(4,4), channels=64, stride=(2,2)) ->
        (
            /* encoder 2 */
            encode(channels=128) ->
                (
                    /* encoder 3 */
                    encode(channels=256) ->
                    (
                        /* encoder 4 */
                        encode(channels=512) ->
                        (
                            /* encoder 5 */
                            encode(channels=512) ->
                            (
                                /* encoder 6 */
                                encode(channels=512) ->
                                    (
                                        /* encoder 7 */
                                        encode(channels=512) ->
                                        (
                                            /* encoder 8 */
                                            encode_nobatch(channels=512) ->

                                            /* decoder 8 */
                                            decode_nodrop(channels=512)
                                        |
                                            [0]
                                        ) ->
                                    Concatenate() ->
                                    /* decoder 7 */
                                    decode(channels=512)
                                    |
                                        [0]
                                    ) ->
                                Concatenate() ->
                                /* decoder 6 */
                                decode(channels=512)
                            |
                                [0]
                            ) ->
                        Concatenate() ->
                        /* decoder 5 */
                        decode(channels=512)
                        |
                            [0]
                        ) ->
                    Concatenate() ->
                    /* decoder 4 */
                    decode_nodrop(channels=256)
                    |
                        [0]
                    ) ->
                Concatenate() ->
                /* decoder 3 */
                decode_nodrop(channels=128)
                |
                    [0]
                ) ->
            Concatenate() ->
            /* decoder 2 */
            decode_nodrop(channels=64)
        |
            [0]
        ) ->
        Concatenate() ->
        /* decoder 1 */
        /* channels = output channels and Tanh as activation */
		Relu() ->
        TransConv(kernel=(4, 4), channels=3, stride=(2,2)) ->
        Tanh() ->
        target_label;
    }
}

