
package models;

//discriminator arch: C64-C128-C256-C512
//Patchsize 70x70

component Generator<Z(1:oo) in_channels = 3, Z(1:oo) out_channels = 3, Z(2:oo) first_channels = 64>{
    ports in Q(0:1)^{in_channels, 256, 256} syn_data,
		  in Q(0:1)^{in_channels, 256, 256} target
         out Q(0:1)^{out_channels, 256, 256} discriminated;

    implementation CNN{

		(
        	syn_data
		|
			target
		) ->
		Convolution(kernel=(4,4), channels=first_channels, stride=(2,2)) ->
		LeakyRelu(alpha=0.2) ->
		Convolution(kernel=(4,4), channels=2*first_channels, stride=(2,2)) ->
		BatchNorm() ->
		LeakyRelu(alpha=0.2) ->
		Convolution(kernel=(4,4), channels=4*first_channels, stride=(2,2)) ->
		BatchNorm() ->
		LeakyRelu(alpha=0.2) ->
		Convolution(kernel=(4,4), channels=8*first_channels, stride=(2,2)) ->
		BatchNorm() ->
		LeakyRelu(alpha=0.2) ->
		Convolution(kernel=(4,4), channels=1, stride(4,4)) ->
		Sigmoid() ->
		GlobalPooling("avg")->
        discriminated;
    }
}
