/* generated by template visitor.InheritanceVisitor*/



package weather._visitor;

import weather._ast.ASTWeatherNode;

import de.monticore.ast.ASTNode;

/**
 * Visitor for the {@code Weather} language that visits super
 * types of the AST nodes as well.
 *
 * @see WeatherVisitor
 * @see ASTWeatherNode#accept(WeatherVisitor visitor)
 */
 public interface WeatherInheritanceVisitor extends WeatherVisitor , numberunit._visitor.NumberUnitInheritanceVisitor {


      default public void handle(weather._ast.ASTTemperature node) {
        getRealThis().visit((ASTNode) node);
        WeatherVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(weather._ast.ASTHumidity node) {
        getRealThis().visit((ASTNode) node);
        WeatherVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(weather._ast.ASTPressure node) {
        getRealThis().visit((ASTNode) node);
        WeatherVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(weather._ast.ASTWindstrength node) {
        getRealThis().visit((ASTNode) node);
        WeatherVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(weather._ast.ASTWinddirection node) {
        getRealThis().visit((ASTNode) node);
        WeatherVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(weather._ast.ASTPrecipitationtype node) {
        getRealThis().visit((ASTNode) node);
        WeatherVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(weather._ast.ASTPrecipitationamount node) {
        getRealThis().visit((ASTNode) node);
        WeatherVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(weather._ast.ASTClouding node) {
        getRealThis().visit((ASTNode) node);
        WeatherVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(weather._ast.ASTSight node) {
        getRealThis().visit((ASTNode) node);
        WeatherVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(weather._ast.ASTWeatherPhenomena node) {
        getRealThis().visit((ASTNode) node);
        WeatherVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(weather._ast.ASTOpticalPhenomena node) {
        getRealThis().visit((ASTNode) node);
        WeatherVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(weather._ast.ASTArtificialPhenomena node) {
        getRealThis().visit((ASTNode) node);
        WeatherVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

      default public void handle(weather._ast.ASTWeatherNode node) {
        getRealThis().visit((ASTNode) node);
        WeatherVisitor.super.handle(node);
        getRealThis().endVisit((ASTNode) node);
      }

}
