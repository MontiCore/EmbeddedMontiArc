/* generated from model Weather*/
/* generated by template ast.Class*/
// Class declaration
/* generated by template ast_emf.EPackageImpl*/




package weather._ast;

import java.util.*;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EOperation;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.impl.EPackageImpl;
import de.monticore.emf._ast.*;

public class WeatherPackageImpl extends EPackageImpl implements WeatherPackage {

  private EClass temperatureEClass = null;
  private EClass humidityEClass = null;
  private EClass pressureEClass = null;
  private EClass windstrengthEClass = null;
  private EClass winddirectionEClass = null;
  private EClass precipitationtypeEClass = null;
  private EClass precipitationamountEClass = null;
  private EClass cloudingEClass = null;
  private EClass sightEClass = null;
  private EClass weatherPhenomenaEClass = null;
  private EClass opticalPhenomenaEClass = null;
  private EClass artificialPhenomenaEClass = null;
  private EEnum constantsWeatherEEnum = null;
  
  private boolean isCreated = false;
    
  private boolean isInitialized = false;
    
  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
  */
  private WeatherPackageImpl() {
    super(eNS_URI, WeatherNodeFactory.getFactory());
  }
    
  private static boolean isInited = false;
    
  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   * 
   * This method is used to initialize eInstance when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
  */
  public static WeatherPackage init() {
    if (isInited) {
      return (WeatherPackage)EPackage.Registry.INSTANCE.getEPackage(WeatherPackage.eNS_URI);
    }
        
    // Obtain or create and register package
    WeatherPackageImpl theWeatherPackage = (WeatherPackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof WeatherPackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new WeatherPackageImpl());

    isInited = true;
       
    // Obtain or create and register interdependencies
    ASTENodePackageImpl theASTENodePackage = (ASTENodePackageImpl) (EPackage.Registry.INSTANCE.getEPackage(ASTENodePackage.eNS_URI)  instanceof ASTENodePackage ? 
                                                                    EPackage.Registry.INSTANCE.getEPackage(ASTENodePackage.eNS_URI) : ASTENodePackage.eINSTANCE);
        
      numberunit._ast.NumberUnitPackageImpl theNumberunit_Package = 
      (numberunit._ast.NumberUnitPackageImpl)(EPackage.Registry.INSTANCE.getEPackage(
      numberunit._ast.NumberUnitPackage.eNS_URI) instanceof numberunit._ast.NumberUnitPackage? 
      EPackage.Registry.INSTANCE.getEPackage(numberunit._ast.NumberUnitPackage.eNS_URI) :
      numberunit._ast.NumberUnitPackage.eINSTANCE);
    
    // Create package meta-data objects
    theWeatherPackage.createPackageContents();
    theASTENodePackage.createPackageContents();
    theNumberunit_Package.createPackageContents();
        
    // Initialize created meta-data
    theWeatherPackage.initializePackageContents();
    theASTENodePackage.initializePackageContents();
    theNumberunit_Package.initializePackageContents();
        
    // Mark meta-data to indicate it can't be changed
  //  theWeatherPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(WeatherPackage.eNS_URI, theWeatherPackage);
    return theWeatherPackage;
  }
    
  public WeatherNodeFactory getWeatherFactory() {
    return (WeatherNodeFactory)getEFactoryInstance();
  }
  
  public EEnum getConstantsWeather(){
    return constantsWeatherEEnum;
  }
  
  public String getPackageName() {
    return "weather";
  }
  
  public List<ASTEPackage> getASTESuperPackages() {
    List<ASTEPackage> eSuperPackages = new ArrayList<>();
    eSuperPackages.add((ASTEPackage)numberunit._ast.NumberUnitPackage.eINSTANCE);
    return eSuperPackages;
  }
    
  public EClass getTemperature() {
    return temperatureEClass;
  }
  public EClass getHumidity() {
    return humidityEClass;
  }
  public EClass getPressure() {
    return pressureEClass;
  }
  public EClass getWindstrength() {
    return windstrengthEClass;
  }
  public EClass getWinddirection() {
    return winddirectionEClass;
  }
  public EClass getPrecipitationtype() {
    return precipitationtypeEClass;
  }
  public EClass getPrecipitationamount() {
    return precipitationamountEClass;
  }
  public EClass getClouding() {
    return cloudingEClass;
  }
  public EClass getSight() {
    return sightEClass;
  }
  public EClass getWeatherPhenomena() {
    return weatherPhenomenaEClass;
  }
  public EClass getOpticalPhenomena() {
    return opticalPhenomenaEClass;
  }
  public EClass getArtificialPhenomena() {
    return artificialPhenomenaEClass;
  }
   
  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTTemperature_WeatherTemperature()   { 
     
     return (EAttribute)temperatureEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTHumidity_PERCENT()   { 
     
     return (EAttribute)humidityEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTHumidity_WeatherHumidity()   { 
     
     return (EAttribute)humidityEClass.getEStructuralFeatures().get(1);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTPressure_WeatherPressure()   { 
     
     return (EAttribute)pressureEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTWindstrength_WeatherWindstrength()   { 
     
     return (EAttribute)windstrengthEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTWinddirection_WeatherWinddirection()   { 
     
     return (EAttribute)winddirectionEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTPrecipitationtype_PrecipitationType()   { 
     
     return (EAttribute)precipitationtypeEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTPrecipitationamount_WeatherPrecipitationamount()   { 
     
     return (EAttribute)precipitationamountEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTClouding_CloudingType()   { 
     
     return (EAttribute)cloudingEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTSight_Unlimited()   { 
     
     return (EAttribute)sightEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTSight_WeatherSight()   { 
     
     return (EAttribute)sightEClass.getEStructuralFeatures().get(1);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTWeatherPhenomena_PhenomenaType()   { 
     
     return (EAttribute)weatherPhenomenaEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTWeatherPhenomena_PosX()   { 
     
     return (EAttribute)weatherPhenomenaEClass.getEStructuralFeatures().get(1);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTWeatherPhenomena_PosY()   { 
     
     return (EAttribute)weatherPhenomenaEClass.getEStructuralFeatures().get(2);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTOpticalPhenomena_PhenomenaType()   { 
     
     return (EAttribute)opticalPhenomenaEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTArtificialPhenomena_PhenomenaType()   { 
     
     return (EAttribute)artificialPhenomenaEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  void createPackageContents()   { 
     
     /* generated by template ast_emf.epackagemethods.CreatePackageContents*/
  
/**
 * Creates the meta-model objects for the package.  This method is
 * guarded to have no affect on any invocation but its first.
*/
    if (isCreated) {
      return;
    }
    isCreated = true;
    
    // Create classes and their features
    constantsWeatherEEnum = createEEnum(ConstantsWeather);
  
    temperatureEClass = createEClass(ASTTemperature);
    humidityEClass = createEClass(ASTHumidity);
    pressureEClass = createEClass(ASTPressure);
    windstrengthEClass = createEClass(ASTWindstrength);
    winddirectionEClass = createEClass(ASTWinddirection);
    precipitationtypeEClass = createEClass(ASTPrecipitationtype);
    precipitationamountEClass = createEClass(ASTPrecipitationamount);
    cloudingEClass = createEClass(ASTClouding);
    sightEClass = createEClass(ASTSight);
    weatherPhenomenaEClass = createEClass(ASTWeatherPhenomena);
    opticalPhenomenaEClass = createEClass(ASTOpticalPhenomena);
    artificialPhenomenaEClass = createEClass(ASTArtificialPhenomena);
  
    createEAttribute(temperatureEClass, ASTTemperature_WeatherTemperature);
    createEAttribute(humidityEClass, ASTHumidity_PERCENT);
    createEAttribute(humidityEClass, ASTHumidity_WeatherHumidity);
    createEAttribute(pressureEClass, ASTPressure_WeatherPressure);
    createEAttribute(windstrengthEClass, ASTWindstrength_WeatherWindstrength);
    createEAttribute(winddirectionEClass, ASTWinddirection_WeatherWinddirection);
    createEAttribute(precipitationtypeEClass, ASTPrecipitationtype_PrecipitationType);
    createEAttribute(precipitationamountEClass, ASTPrecipitationamount_WeatherPrecipitationamount);
    createEAttribute(cloudingEClass, ASTClouding_CloudingType);
    createEAttribute(sightEClass, ASTSight_Unlimited);
    createEAttribute(sightEClass, ASTSight_WeatherSight);
    createEAttribute(weatherPhenomenaEClass, ASTWeatherPhenomena_PhenomenaType);
    createEAttribute(weatherPhenomenaEClass, ASTWeatherPhenomena_PosX);
    createEAttribute(weatherPhenomenaEClass, ASTWeatherPhenomena_PosY);
    createEAttribute(opticalPhenomenaEClass, ASTOpticalPhenomena_PhenomenaType);
    createEAttribute(artificialPhenomenaEClass, ASTArtificialPhenomena_PhenomenaType);
  
   
  } 

  /* generated by template ast.ClassMethod*/
  
   public  void initializePackageContents()   { 
     
     /* generated by template ast_emf.epackagemethods.InitializePackageContents*/
  
/**
 * Complete the initialization of the package and its meta-model.  This
 * method is guarded to have no affect on any invocation but its first.
*/
    if (isInitialized) {
      return;
    }
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);
    
       
    EOperation op;
     // Obtain other dependent packages
    ASTENodePackage theASTENodePackage = (ASTENodePackage)EPackage.Registry.INSTANCE.getEPackage(ASTENodePackage.eNS_URI);      
    numberunit._ast.NumberUnitPackage theNumberunit_Package = 
      (numberunit._ast.NumberUnitPackage)EPackage.Registry.INSTANCE.getEPackage(
      numberunit._ast.NumberUnitPackage.eNS_URI); 
  
    temperatureEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    humidityEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    pressureEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    windstrengthEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    winddirectionEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    precipitationtypeEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    precipitationamountEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    cloudingEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    sightEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    weatherPhenomenaEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    opticalPhenomenaEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    artificialPhenomenaEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
  
    // Initialize classes and features; add operations and parameters
  
    // Initialize enums and add enum literals
    initEEnum(constantsWeatherEEnum, WeatherLiterals.class, "WeatherLiterals");
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.ALTOCUMULUS);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.ALTOSTRATUS);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CIRROCUMULUS);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CIRROSTRATUS);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CIRRUS);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONSTANT0);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONSTANT1);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONSTANT10);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONSTANT11);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONSTANT12);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONSTANT13);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONSTANT14);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONSTANT15);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONSTANT16);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONSTANT17);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONSTANT18);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONSTANT19);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONSTANT2);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONSTANT20);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONSTANT21);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONSTANT22);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONSTANT3);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONSTANT4);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONSTANT5);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONSTANT6);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONSTANT7);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONSTANT8);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONSTANT9);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CONTRAILS);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.CUMULONIMBUS);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.DRIZZLE);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.FOG);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.GRAUPEL);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.GUSTNADO);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.HAIL);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.LANDSPOUT);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.MIRAGE);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.NIMBOSTRATUS);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.NOCTILUCENT);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.NONE);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.PERCENT);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.RAIN);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.RAINBOW);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.SLEET);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.SMOG);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.SNAIN);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.SNOW);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.STRATOCUMULUS);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.STRATUS);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.THUNDERSTORM);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.UNLIMITED);
    addEEnumLiteral(constantsWeatherEEnum, WeatherLiterals.WATERSPOUT);
    
    initEClass(temperatureEClass, ASTTemperature.class, "ASTTemperature", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(humidityEClass, ASTHumidity.class, "ASTHumidity", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(pressureEClass, ASTPressure.class, "ASTPressure", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(windstrengthEClass, ASTWindstrength.class, "ASTWindstrength", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(winddirectionEClass, ASTWinddirection.class, "ASTWinddirection", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(precipitationtypeEClass, ASTPrecipitationtype.class, "ASTPrecipitationtype", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(precipitationamountEClass, ASTPrecipitationamount.class, "ASTPrecipitationamount", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(cloudingEClass, ASTClouding.class, "ASTClouding", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(sightEClass, ASTSight.class, "ASTSight", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(weatherPhenomenaEClass, ASTWeatherPhenomena.class, "ASTWeatherPhenomena", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(opticalPhenomenaEClass, ASTOpticalPhenomena.class, "ASTOpticalPhenomena", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(artificialPhenomenaEClass, ASTArtificialPhenomena.class, "ASTArtificialPhenomena", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getASTTemperature_WeatherTemperature(), ecorePackage.getEString(), "WeatherTemperature", null, 
      0, 1, ASTTemperature.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTHumidity_PERCENT(), ecorePackage.getEBoolean(), "PERCENT", null, 
      0, 1, ASTHumidity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTHumidity_WeatherHumidity(), ecorePackage.getEString(), "WeatherHumidity", null, 
      0, 1, ASTHumidity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTPressure_WeatherPressure(), ecorePackage.getEString(), "WeatherPressure", null, 
      0, 1, ASTPressure.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTWindstrength_WeatherWindstrength(), ecorePackage.getEString(), "WeatherWindstrength", null, 
      0, 1, ASTWindstrength.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTWinddirection_WeatherWinddirection(), ecorePackage.getEString(), "WeatherWinddirection", null, 
      0, 1, ASTWinddirection.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTPrecipitationtype_PrecipitationType(), ecorePackage.getEInt(), "PrecipitationType", null, 
      0, 1, ASTPrecipitationtype.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTPrecipitationamount_WeatherPrecipitationamount(), ecorePackage.getEString(), "WeatherPrecipitationamount", null, 
      0, 1, ASTPrecipitationamount.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTClouding_CloudingType(), ecorePackage.getEInt(), "CloudingType", null, 
      0, 1, ASTClouding.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTSight_Unlimited(), ecorePackage.getEBoolean(), "Unlimited", null, 
      0, 1, ASTSight.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTSight_WeatherSight(), ecorePackage.getEString(), "WeatherSight", null, 
      0, 1, ASTSight.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTWeatherPhenomena_PhenomenaType(), ecorePackage.getEInt(), "PhenomenaType", null, 
      0, 1, ASTWeatherPhenomena.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTWeatherPhenomena_PosX(), ecorePackage.getEString(), "PosX", null, 
      0, 1, ASTWeatherPhenomena.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTWeatherPhenomena_PosY(), ecorePackage.getEString(), "PosY", null, 
      0, 1, ASTWeatherPhenomena.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTOpticalPhenomena_PhenomenaType(), ecorePackage.getEInt(), "PhenomenaType", null, 
      0, 1, ASTOpticalPhenomena.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTArtificialPhenomena_PhenomenaType(), ecorePackage.getEInt(), "PhenomenaType", null, 
      0, 1, ASTArtificialPhenomena.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
  
   
  
    // Create resource
    createResource(eNS_URI);
    

  } 

   
}
