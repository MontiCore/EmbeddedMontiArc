/* (c) https://github.com/MontiCore/monticore */
package de.monticore.lang.monticar.sol.grammars;

/**
 * Language is the language description language which holds information on the language to be integrated into
 * the IDE.
 */
grammar Language extends de.monticore.MCBasics, de.monticore.MCLiterals, de.monticore.types.Types,
                         de.monticore.lang.monticar.sol.grammars.Options {
    // =========================================
    // INTERFACE DEFINITIONS
    // =========================================

    /**
     * ASTLanguageElement is an interface which represents the elements supported by the "language" section.
     */
    interface LanguageElement;

    /**
     * ASTTemplateElement is an interface which represents the elements supported in a template declaration.
     */
    interface TemplateElement;

    // =========================================
    // PARSER RULES
    // =========================================

    /**
     * LanguageCompilationUnit is the root parser rule which acts as container for the language elements.
     */
    LanguageCompilationUnit =
        "package" package:(Name || ".")+ ";"
        import:ImportStatement*
        Language
    ;

    start LanguageCompilationUnit;

    /**
     * Language represents the declaration of a language.
     */
    symbol scope Language =
        "language" Name ( "extends" parent:(Name || ",")+ )?  "{" element:LanguageElement* "}"
    ;

    /**
     * TemplateDeclaration represents the declaration of a template.
     */
    symbol scope TemplateDeclaration implements LanguageElement =
        "declare" "template" Name "for" path:StringLiteral "{" element:TemplateElement* "}"
    ;

    /**
     * TemplateAttribute represents an attribute of the template.
     */
    symbol TemplateAttribute implements TemplateElement =
        "attribute" Name "=" literal:SignedLiteral ";"
    ;

    /**
     * TemplateOption represents an option to be filled out when creating a file from the template.
     */
    TemplateOption implements TemplateElement =
        Option
    ;

    /**
     * TemplateUndeclaration represents the undeclaration of a template.
     */
    symbol TemplateUndeclaration implements LanguageElement =
        "undeclare" "template" Name@TemplateDeclaration ";"
    ;

    // =========================================
    // LEXER RULES
    // =========================================

    // =========================================
    // AST DEFINITIONS
    // =========================================
}
