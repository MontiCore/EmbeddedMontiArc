{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/backend-mock.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<modules-root [selectedProject]=\\\"selectedProject\\\" [selectedOd]=\\\"selectedOd\\\" [odAsJson]=\\\"odAsJson\\\" ></modules-root>\"","import {Component, OnInit} from '@angular/core';\nimport {Objectdiagram, Project} from 'art-viz-shared';\nimport {HttpClient} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n    protected selectedProject: Project = new Project('MvW-Analysis', 'assets/MvW-Analysis');\n    protected selectedOd: Objectdiagram = new Objectdiagram('', '', false);\n    protected odAsJson: JSON;\n\n    ngOnInit(): void {\n        this.getMergedJSON().subscribe(\n            od => {\n                this.httpClient.get<JSON>(od.jsonPath).subscribe(\n                    json => {\n                        setTimeout(() => {\n                            this.selectedOd = od;\n                            this.odAsJson = json;\n                        }, 0);\n                    }\n                );\n            }\n        );\n    }\n\n    constructor(private httpClient: HttpClient) {\n\n    }\n\n    private getMergedJSON(): Observable<Objectdiagram> {\n        return this.httpClient.get<JSON>('assets/analysedOD.json')\n            .pipe(\n                map(res => {\n                    return new Objectdiagram('02.merged/Merged.od', res['path'], true, res['jsonPath']);\n                })\n            );\n    }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\n\nimport { AppComponent } from './app.component';\nimport {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\nimport {NgbModule} from '@ng-bootstrap/ng-bootstrap';\nimport {BackendMockService} from './backend-mock.service';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {ModulesModule} from 'modules';\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    ModulesModule,\n    HttpClientModule,\n    NgbModule.forRoot()\n  ],\n  providers: [\n      {\n        provide: HTTP_INTERCEPTORS,\n        useClass: BackendMockService,\n        multi: true\n      }\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport {HttpClient, HttpEvent, HttpHandler, HttpInterceptor, HttpRequest, HttpResponse} from '@angular/common/http';\nimport {from, Observable} from 'rxjs';\nimport {finalize} from 'rxjs/internal/operators';\n\n@Injectable()\nexport class BackendMockService implements HttpInterceptor {\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n        if (req.url.includes('api/getModuleAnalysis')) {\n\n            return new Observable<HttpEvent<any>>(observer => {\n                    this.mapFunction(null).then(\n                        resp => {\n                            observer.next(resp);\n                            observer.complete();\n                        });\n                }\n            );\n        }\n\n        if (req.url.includes('api/createForest')) {\n\n            return new Observable<HttpEvent<any>>(observer => {\n                this.httpClient.get<JSON>('assets/analysedOD.json').subscribe(\n                    res => {\n                        const newRequest =\n                            this.httpClient.get<JSON>(res['forestPath']).subscribe(\n                                forest => {\n                                    const resp = new HttpResponse();\n                                    observer.next(resp.clone({body: JSON.stringify(forest)}));\n                                    observer.complete();\n                                }\n                            );\n                    }\n                );\n                }\n            );\n        }\n\n        // Default\n        return next.handle(req);\n    }\n\n    constructor(private httpClient: HttpClient) { }\n\n    private mapFunction(resp: HttpEvent<any>): Promise<HttpResponse<any>> {\n        return new Promise<HttpResponse<any>>(resolve => {\n            this.getModuleAnalysis().then(\n                analysis => {\n                    const res = new HttpResponse();\n                    resolve(res.clone({body: analysis}));\n                }\n            );\n        });\n    }\n\n    private getModuleAnalysis(): Promise<JSON[]> {\n        return new Promise((resolve, reject) => {\n            this.httpClient.get<string[]>('assets/moduleAnalyses.json').subscribe(\n                analyses => {\n                    const files = [];\n                    const obser = [];\n                    for (const file of analyses) {\n                        obser.push(this.httpClient.get((file)));\n                    }\n\n                    from(obser)\n                        .pipe(finalize(\n                            () => {\n                                resolve(files);\n                            }))\n                        .subscribe(\n                            data => {\n                                files.push(JSON.stringify(data));\n                            },\n                            error => {\n                                reject(error);\n                            }\n                        );\n                }\n            );\n        });\n    }\n\n}\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}