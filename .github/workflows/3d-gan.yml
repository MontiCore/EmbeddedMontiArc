name: 3d-gan
on:
  push:
    paths:
      - 'applications/gans/3d-gan/**'
  workflow_dispatch:
  pull_request:
env:
  CI_PROJECT_ID : 59285
  CI_API_V4_URL : https://git.rwth-aachen.de/api/v4
  GITLABTOKEN : ${{ secrets.GITLABTOKEN }}
  cibuild : ${{ secrets.SE_NEXUS_PASSWORD }}
jobs:
  FileChanges:
    runs-on: ubuntu-latest
    outputs:
      runbuildDockerMxNet180: ${{steps.buildDockerMxNet180.outputs.run}}
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Check for file changes
        run: |
          CHANGES=$(git diff --name-only HEAD^ HEAD)
          echo "$CHANGES"
          echo "$CHANGES" > diff.txt
      - name: Check buildDockerMxNet180
        id: buildDockerMxNet180
        run: |
          only=false
          for path in $(cat diff.txt); do
            if [[ $path == *Gluon/.test/docker/** ]]; then
              echo "Matching path found: $path"
              echo "RUN"
              only=true
              break
            fi
          done
          echo "Final file status only check: $only"
          echo "run=$only" >> $GITHUB_OUTPUT
  docker_phase:
    needs: [buildDockerMxNet180]
    if: ${{ !cancelled()}}
    runs-on: ubuntu-latest
    steps:
        - run: |
            echo "Finished stage docker"
          if: ${{!contains(needs.*.result, 'failure')}}
        - run: |
            echo "Failed stage docker"
            exit 1
          if: ${{contains(needs.*.result, 'failure')}}
  jar_phase:
    needs: [docker_phase, TestWithJar]
    if: ${{ !cancelled()}}
    runs-on: ubuntu-latest
    steps:
        - run: |
            echo "Finished stage jar"
          if: ${{!contains(needs.*.result, 'failure')}}
        - run: |
            echo "Failed stage jar"
            exit 1
          if: ${{contains(needs.*.result, 'failure')}}

  buildDockerMxNet180:
    needs: FileChanges
    if: ${{ !cancelled() && needs.FileChanges.outputs.runbuildDockerMxNet180 == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Script
        shell: bash
        run: |
            cd applications/gans/3d-gan
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
            cd Gluon/.test/docker
            LOWERCASE_OWNER=$(echo "${{ github.repository_owner }}" | tr "[:upper:]" "[:lower:]")
            docker build -t ghcr.io/$LOWERCASE_OWNER/emam2mqtt/:latest .
            docker push ghcr.io/$LOWERCASE_OWNER/emam2mqtt/:latest

  Train3D-GAN:
    needs: jar_phase
    if: ${{ !cancelled() && needs.jar_phase.result == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    continue-on-error: true
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start Docker Container
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker pull ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_PROJECT_ID=$CI_PROJECT_ID -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} -e cibuild=$cibuild ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1 tail -f /dev/null
      - name: Script
        continue-on-error: true
        env:
          SCRIPT: |
            cd /workspace
            cd applications/gans/3d-gan
            mv /mxnet/build/libmxnet.so /mxnet/build/libmxnet.a /usr/lib/
            cd Training
            export PYTHONPATH="/builds/monticore/EmbeddedMontiArc/applications/gans/3d-gan/Training/target/tmp/cpp/threedgan.Connector/gan/"
            mvn dependency:resolve emadl:train -s settings.xml
        run: docker exec build-container bash -c "$SCRIPT"

  deploy-pretrained:
    needs: jar_phase
    if: ${{ !cancelled() && needs.jar_phase.result == 'success' &&  github.ref_name == 'master' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start Docker Container
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker pull ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_PROJECT_ID=$CI_PROJECT_ID -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} -e cibuild=$cibuild ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1 tail -f /dev/null
      - name: Script
        env:
          SCRIPT: |
            cd /workspace
            cd applications/gans/3d-gan
            cd Pre-Trained
            mvn dependency:resolve emadl:deploy-pretrained -s ./settings.xml
        run: docker exec build-container bash -c "$SCRIPT"

  install-pretrained:
    needs: jar_phase
    if: ${{ !cancelled() && needs.jar_phase.result == 'success'      && github.ref_name != 'master' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start Docker Container
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker pull ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_PROJECT_ID=$CI_PROJECT_ID -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} -e cibuild=$cibuild ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1 tail -f /dev/null
      - name: Script
        env:
          SCRIPT: |
            cd /workspace
            cd applications/gans/3d-gan
            cd Pre-Trained
            mvn dependency:resolve emadl:install-pretrained -s ./settings.xml
        run: docker exec build-container bash -c "$SCRIPT"

  TestWithJar:
    needs: docker_phase
    if: ${{ !cancelled() && needs.docker_phase.result == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    continue-on-error: true
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start Docker Container
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker pull ghcr.io/monticore/3d-gan/mxnet180:latest
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_PROJECT_ID=$CI_PROJECT_ID -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} -e cibuild=$cibuild ghcr.io/monticore/3d-gan/mxnet180:latest tail -f /dev/null
      - name: Script
        continue-on-error: true
        env:
          SCRIPT: |
            cd /workspace
            cd applications/gans/3d-gan
            cd Gluon/.test
            chmod +x build.sh
            ./build.sh
        run: docker exec build-container bash -c "$SCRIPT"

