name: mnist-vae
on:
  push:
    paths:
      - 'applications/vaes/mnist-vae/**'
  workflow_dispatch:
  pull_request:
env:
  CI_PROJECT_ID : 59549
  CI_API_V4_URL : https://git.rwth-aachen.de/api/v4
  GITLABTOKEN : ${{ secrets.GITLABTOKEN }}
  cibuild : ${{ secrets.SE_NEXUS_PASSWORD }}
jobs:
  build_phase:
    needs: [BuildBetaVAE, BuildVAE, BuildCVAE, BuildVQVAE]
    if: ${{ !cancelled()}}
    runs-on: ubuntu-latest
    steps:
        - run: |
            echo "Finished stage build"
          if: ${{!contains(needs.*.result, 'failure')}}
        - run: |
            echo "Failed stage build"
            exit 1
          if: ${{contains(needs.*.result, 'failure')}}
  test_phase:
    needs: [build_phase, TestPythonPretrainedVQVAE, TestPretrainedBetaVAE, TestPretrainedVAE, TestPretrainedCVAE, TestCPPPretrainedVQVAE]
    if: ${{ !cancelled()}}
    runs-on: ubuntu-latest
    steps:
        - run: |
            echo "Finished stage test"
          if: ${{!contains(needs.*.result, 'failure')}}
        - run: |
            echo "Failed stage test"
            exit 1
          if: ${{contains(needs.*.result, 'failure')}}

  BuildVAE:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start Docker Container
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker pull ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_PROJECT_ID=$CI_PROJECT_ID -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} -e cibuild=$cibuild ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1 tail -f /dev/null
      - name: Script
        env:
          SCRIPT: |
            cd /workspace
            cd applications/vaes/mnist-vae
            mv /mxnet/build/libmxnet.so /mxnet/build/libmxnet.a /usr/lib/
            cd standard-vae/src/test/test_training
            mvn dependency:resolve emadl:train -s settings.xml -U
        run: docker exec build-container bash -c "$SCRIPT"

  BuildBetaVAE:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start Docker Container
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker pull ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_PROJECT_ID=$CI_PROJECT_ID -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} -e cibuild=$cibuild ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1 tail -f /dev/null
      - name: Script
        env:
          SCRIPT: |
            cd /workspace
            cd applications/vaes/mnist-vae
            mv /mxnet/build/libmxnet.so /mxnet/build/libmxnet.a /usr/lib/
            cd beta-vae/src/test/test_training
            mvn dependency:resolve emadl:train -s settings.xml -U
        run: docker exec build-container bash -c "$SCRIPT"

  BuildCVAE:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start Docker Container
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker pull ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_PROJECT_ID=$CI_PROJECT_ID -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} -e cibuild=$cibuild ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1 tail -f /dev/null
      - name: Script
        env:
          SCRIPT: |
            cd /workspace
            cd applications/vaes/mnist-vae
            mv /mxnet/build/libmxnet.so /mxnet/build/libmxnet.a /usr/lib/
            cd conditional-vae/src/test/test_training
            mvn dependency:resolve emadl:train -s settings.xml -U
        run: docker exec build-container bash -c "$SCRIPT"

  BuildVQVAE:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start Docker Container
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker pull ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_PROJECT_ID=$CI_PROJECT_ID -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} -e cibuild=$cibuild ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1 tail -f /dev/null
      - name: Script
        env:
          SCRIPT: |
            cd /workspace
            cd applications/vaes/mnist-vae
            mv /mxnet/build/libmxnet.so /mxnet/build/libmxnet.a /usr/lib/
            cd vq-vae/src/test/test_training
            mvn dependency:resolve emadl:train -s settings.xml -U
        run: docker exec build-container bash -c "$SCRIPT"

  TestPretrainedVAE:
    needs: build_phase
    if: ${{ !cancelled() && needs.build_phase.result == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start Docker Container
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker pull ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_PROJECT_ID=$CI_PROJECT_ID -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} -e cibuild=$cibuild ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1 tail -f /dev/null
      - name: Script
        env:
          SCRIPT: |
            cd /workspace
            cd applications/vaes/mnist-vae
            mv /mxnet/build/libmxnet.so /mxnet/build/libmxnet.a /usr/lib/
            cd standard-vae
            cp -a pre-trained/model/vae.Encoder/. src/test/test_pre-trained/model/mnist.Encoder/
            cp -a pre-trained/model/vae.Decoder/. src/test/test_pre-trained/model/mnist.Decoder/
            cd src/test/test_pre-trained
            bash cpp_compile.sh
            bash test_digit_generation.sh
        run: docker exec build-container bash -c "$SCRIPT"

  TestPretrainedBetaVAE:
    needs: build_phase
    if: ${{ !cancelled() && needs.build_phase.result == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start Docker Container
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker pull ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_PROJECT_ID=$CI_PROJECT_ID -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} -e cibuild=$cibuild ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1 tail -f /dev/null
      - name: Script
        env:
          SCRIPT: |
            cd /workspace
            cd applications/vaes/mnist-vae
            mv /mxnet/build/libmxnet.so /mxnet/build/libmxnet.a /usr/lib/
            cd beta-vae
            cp -a pre-trained/model/bvae.Encoder/. src/test/test_pre-trained/model/mnist.Encoder/
            cp -a pre-trained/model/bvae.Decoder/. src/test/test_pre-trained/model/mnist.Decoder/
            cd src/test/test_pre-trained
            bash cpp_compile.sh
            bash test_digit_generation.sh
        run: docker exec build-container bash -c "$SCRIPT"

  TestPretrainedCVAE:
    needs: build_phase
    if: ${{ !cancelled() && needs.build_phase.result == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start Docker Container
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker pull ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_PROJECT_ID=$CI_PROJECT_ID -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} -e cibuild=$cibuild ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1 tail -f /dev/null
      - name: Script
        env:
          SCRIPT: |
            cd /workspace
            cd applications/vaes/mnist-vae
            mv /mxnet/build/libmxnet.so /mxnet/build/libmxnet.a /usr/lib/
            cd conditional-vae
            cp -a pre-trained/model/cvae.Encoder/. src/test/test_pre-trained/model/mnist.Encoder/
            cp -a pre-trained/model/cvae.Decoder/. src/test/test_pre-trained/model/mnist.Decoder/
            cd src/test/test_pre-trained
            bash cpp_compile.sh
            bash test_digit_generation.sh
        run: docker exec build-container bash -c "$SCRIPT"

  TestPythonPretrainedVQVAE:
    needs: build_phase
    if: ${{ !cancelled() && needs.build_phase.result == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start Docker Container
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker pull ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_PROJECT_ID=$CI_PROJECT_ID -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} -e cibuild=$cibuild ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1 tail -f /dev/null
      - name: Script
        env:
          SCRIPT: |
            cd /workspace
            cd applications/vaes/mnist-vae
            mv /mxnet/build/libmxnet.so /mxnet/build/libmxnet.a /usr/lib/
            cd vq-vae
            cp -a pre-trained/model/vqvae.Encoder/. src/test/test_pre-trained/model/mnist.Encoder/
            cp -a pre-trained/model/vqvae.Decoder/. src/test/test_pre-trained/model/mnist.Decoder/
            cd src/test/test_pre-trained
            bash py_test_reconstruction.sh
        run: docker exec build-container bash -c "$SCRIPT"

  TestCPPPretrainedVQVAE:
    needs: build_phase
    if: ${{ !cancelled() && needs.build_phase.result == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start Docker Container
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
          docker pull ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_PROJECT_ID=$CI_PROJECT_ID -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} -e cibuild=$cibuild ghcr.io/monticore/emadl2cpp/dockerimages/mxnet170:v0.0.1 tail -f /dev/null
      - name: Script
        continue-on-error: true
        env:
          SCRIPT: |
            cd /workspace
            cd applications/vaes/mnist-vae
            mv /mxnet/build/libmxnet.so /mxnet/build/libmxnet.a /usr/lib/
            cd vq-vae
            cp -a pre-trained/model/vqvae.Encoder/. src/test/test_pre-trained/model/mnist.Encoder/
            cp -a pre-trained/model/vqvae.Decoder/. src/test/test_pre-trained/model/mnist.Decoder/
            cd src/test/test_pre-trained
            bash cpp_compile.sh
            bash cpp_test_reconstruction.sh
        run: docker exec build-container bash -c "$SCRIPT"

  InstallVAE:
    needs: [TestPretrainedVAE, test_phase]
    if: ${{ !cancelled() && needs.test_phase.result == 'success'      && github.ref_name != 'master' && needs.TestPretrainedVAE.result == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start Docker Container
        run: |
          docker pull maven:3.6-jdk-8
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_PROJECT_ID=$CI_PROJECT_ID -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} -e cibuild=$cibuild maven:3.6-jdk-8 tail -f /dev/null
      - name: Script
        env:
          SCRIPT: |
            cd /workspace
            cd applications/vaes/mnist-vae
            cd standard-vae/pre-trained/model/vae.Encoder
            mvn emadl:install-pretrained -s ../settings.xml
            cd ../vae.Decoder
            mvn emadl:install-pretrained -s ../settings.xml
        run: docker exec build-container bash -c "$SCRIPT"

  InstallBetaVAE:
    needs: [TestPretrainedBetaVAE, test_phase]
    if: ${{ !cancelled() && needs.test_phase.result == 'success'      && github.ref_name != 'master' && needs.TestPretrainedBetaVAE.result == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start Docker Container
        run: |
          docker pull maven:3.6-jdk-8
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_PROJECT_ID=$CI_PROJECT_ID -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} -e cibuild=$cibuild maven:3.6-jdk-8 tail -f /dev/null
      - name: Script
        env:
          SCRIPT: |
            cd /workspace
            cd applications/vaes/mnist-vae
            cd beta-vae/pre-trained/model/bvae.Encoder
            mvn emadl:install-pretrained -s ../settings.xml
            cd ../bvae.Decoder
            mvn emadl:install-pretrained -s ../settings.xml
        run: docker exec build-container bash -c "$SCRIPT"

  InstallCVAE:
    needs: [TestPretrainedCVAE, test_phase]
    if: ${{ !cancelled() && needs.test_phase.result == 'success'      && github.ref_name != 'master' && needs.TestPretrainedCVAE.result == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start Docker Container
        run: |
          docker pull maven:3.6-jdk-8
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_PROJECT_ID=$CI_PROJECT_ID -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} -e cibuild=$cibuild maven:3.6-jdk-8 tail -f /dev/null
      - name: Script
        env:
          SCRIPT: |
            cd /workspace
            cd applications/vaes/mnist-vae
            cd conditional-vae/pre-trained/model/cvae.Encoder
            mvn emadl:install-pretrained -s ../settings.xml
            cd ../cvae.Decoder
            mvn emadl:install-pretrained -s ../settings.xml
        run: docker exec build-container bash -c "$SCRIPT"

  InstallVQVAE:
    needs: [TestPythonPretrainedVQVAE , TestCPPPretrainedVQVAE, test_phase]
    if: ${{ !cancelled() && needs.test_phase.result == 'success'      && github.ref_name != 'master' && needs.TestPythonPretrainedVQVAE.result == 'success' && needs.TestCPPPretrainedVQVAE.result == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start Docker Container
        run: |
          docker pull maven:3.6-jdk-8
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_PROJECT_ID=$CI_PROJECT_ID -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} -e cibuild=$cibuild maven:3.6-jdk-8 tail -f /dev/null
      - name: Script
        env:
          SCRIPT: |
            cd /workspace
            cd applications/vaes/mnist-vae
            cd vq-vae/pre-trained/model/vqvae.Encoder
            mvn emadl:install-pretrained -s ../settings.xml
            cd ../vqvae.Decoder
            mvn emadl:install-pretrained -s ../settings.xml
        run: docker exec build-container bash -c "$SCRIPT"

  DeployPretrainedVAE:
    needs: [TestPretrainedVAE, test_phase]
    if: ${{ !cancelled() && needs.test_phase.result == 'success' &&  github.ref_name == 'master' && needs.TestPretrainedVAE.result == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start Docker Container
        run: |
          docker pull maven:3.6-jdk-8
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_PROJECT_ID=$CI_PROJECT_ID -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} -e cibuild=$cibuild maven:3.6-jdk-8 tail -f /dev/null
      - name: Script
        env:
          SCRIPT: |
            cd /workspace
            cd applications/vaes/mnist-vae
            cd standard-vae/pre-trained/model/vae.Encoder
            mvn emadl:deploy-pretrained -s ../settings.xml
            cd ../vae.Decoder
            mvn emadl:deploy-pretrained -s ../settings.xml
        run: docker exec build-container bash -c "$SCRIPT"

  DeployPretrainedBetaVAE:
    needs: [TestPretrainedBetaVAE, test_phase]
    if: ${{ !cancelled() && needs.test_phase.result == 'success' &&  github.ref_name == 'master' && needs.TestPretrainedBetaVAE.result == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start Docker Container
        run: |
          docker pull maven:3.6-jdk-8
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_PROJECT_ID=$CI_PROJECT_ID -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} -e cibuild=$cibuild maven:3.6-jdk-8 tail -f /dev/null
      - name: Script
        env:
          SCRIPT: |
            cd /workspace
            cd applications/vaes/mnist-vae
            cd beta-vae/pre-trained/model/bvae.Encoder
            mvn emadl:deploy-pretrained -s ../settings.xml
            cd ../bvae.Decoder
            mvn emadl:deploy-pretrained -s ../settings.xml
        run: docker exec build-container bash -c "$SCRIPT"

  DeployPretrainedCVAE:
    needs: [TestPretrainedCVAE, test_phase]
    if: ${{ !cancelled() && needs.test_phase.result == 'success' &&  github.ref_name == 'master' && needs.TestPretrainedCVAE.result == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start Docker Container
        run: |
          docker pull maven:3.6-jdk-8
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_PROJECT_ID=$CI_PROJECT_ID -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} -e cibuild=$cibuild maven:3.6-jdk-8 tail -f /dev/null
      - name: Script
        env:
          SCRIPT: |
            cd /workspace
            cd applications/vaes/mnist-vae
            cd conditional-vae/pre-trained/model/cvae.Encoder
            mvn emadl:deploy-pretrained -s ../settings.xml
            cd ../cvae.Decoder
            mvn emadl:deploy-pretrained -s ../settings.xml
        run: docker exec build-container bash -c "$SCRIPT"

  DeployPretrainedVQVAE:
    needs: [TestPythonPretrainedVQVAE , TestCPPPretrainedVQVAE, test_phase]
    if: ${{ !cancelled() && needs.test_phase.result == 'success' &&  github.ref_name == 'master' && needs.TestPythonPretrainedVQVAE.result == 'success' && needs.TestCPPPretrainedVQVAE.result == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout latest commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      - name: Start Docker Container
        run: |
          docker pull maven:3.6-jdk-8
          docker run --name build-container -d -v $(pwd):/workspace --network=host  -e CI_PROJECT_ID=$CI_PROJECT_ID -e CI_API_V4_URL=$CI_API_V4_URL -e GITLABTOKEN=${{ secrets.GITLABTOKEN }} -e cibuild=$cibuild maven:3.6-jdk-8 tail -f /dev/null
      - name: Script
        env:
          SCRIPT: |
            cd /workspace
            cd applications/vaes/mnist-vae
            cd vq-vae/pre-trained/model/vqvae.Encoder
            mvn emadl:deploy-pretrained -s ../settings.xml
            cd ../vqvae.Decoder
            mvn emadl:deploy-pretrained -s ../settings.xml
        run: docker exec build-container bash -c "$SCRIPT"

