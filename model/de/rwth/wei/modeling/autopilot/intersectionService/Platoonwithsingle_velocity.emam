package de.rwth.wei.modeling.autopilot.intersectionService;
import  de.rwth.wei.modeling.autopilot.messagestruct.*;
import  de.rwth.wei.modeling.autopilot.messagematch.*;

// platoon with single vehicle
dynamic component Platoonwithsingle_velocity{
  ports
    dynamic in  Statusmessage           status_msg[0:32],
    dynamic in  Trajectorymessage       traj_msg[0:32],


    in  Z ^ 32          vehicle_atintersection,
    in  Z               vehicle_num,
    // current information
    in  Z               trajectory_length,
    in  Q^{1,100}       trajectory_x,
    in  Q^{1,100}       trajectory_y,
    in  Q               length,
    in  Q               width,
    in  Q               velocity,
    // use for collisionmessage
    in  Z               timestamp,
    in  Z               vehicleid,
    in  Q               nextintersection_x,
    in  Q               nextintersection_y,
    in  Q               dis2intersection,
    in  Z               if_frontvehicleexists,
    in  Z               ifcurrentsplit,

    dynamic out Collisionmessage coll_message[0:32],
    out Q               maximalallowedvelocity;


    instance  Beaconmessage2vehicle         b2v2;
    instance  Intersectioncollisiontype3    inter_type3;
    instance  Distance2max_allowedvelocity  dis2v3;

    // beacon message to the single vehicle
    @ status_msg::connect{
      connect status_msg[?] -> b2v2.status_msg[?];
    }
    @ traj_msg::connect{
      connect traj_msg[?] -> b2v2.traj_msg[?];
    }

    connect vehicle_atintersection -> b2v2.vehiclelist;
    connect vehicle_num -> b2v2.list_num;

    @ b2v2.newstatus_msg::connect{
      connect b2v2.newstatus_msg[?] -> inter_type3.single_status_msg[?];
    }
    @ b2v2.newtraj_msg::connect{
      connect b2v2.newtraj_msg[?] -> inter_type3.single_traj_msg[?];
    }

    connect vehicle_atintersection -> inter_type3.vehicle_atintersection;
    connect vehicle_num -> inter_type3.vehicle_num;
    connect trajectory_length -> inter_type3.trajectory_length;
    connect trajectory_x -> inter_type3.trajectory_x;
    connect trajectory_y -> inter_type3.trajectory_y;
    connect length -> inter_type3.length;
    connect width -> inter_type3.width;
    connect velocity -> inter_type3.velocity;
    connect dis2intersection -> inter_type3.dis2intersection;
    connect if_frontvehicleexists -> inter_type3.if_frontvehicleexists;
    connect ifcurrentsplit -> inter_type3.ifcurrentsplit;
    connect timestamp -> inter_type3.timestamp;
    connect vehicleid -> inter_type3.vehicleid;
    connect nextintersection_x -> inter_type3.nextintersection_x;
    connect nextintersection_y -> inter_type3.nextintersection_y;


    // get the current collision message
    @ inter_type3.coll_message::connect{
      connect inter_type3.coll_message[?] -> coll_message[?];
    }

    connect inter_type3.is_highestpriority -> dis2v3.is_highestpriority;
    connect length -> dis2v3.length;
    connect dis2intersection -> dis2v3.dis2intersection;

    connect dis2v3.maximalallowedvelocity -> maximalallowedvelocity;
}
