package de.rwth.armin.modeling.autopilot.platoonService;

component Path_similarity{
  // Fréchet distance algorithm to measure the similarity of path
  ports
     in Z           if_check,
     //current vehicle
     in Q^{1,100}   trajectory_x,
     in Q^{1,100}   trajectory_y,
     in Z           trajectory_length,
     in Z           if_enoughlong,
     in Q           distance,
     //other vehicle
     in Q^{1,100}   trajectory_x_car1,
     in Q^{1,100}   trajectory_y_car1,
     in Z           trajectory_length_car1,
     in Z           if_enoughlong_car1,
     in Q           distance_car1,

     out Q          similarity,
     out Z          hasmeasure;

     implementation Math{
       hasmeasure = 0;
       similarity = 0.0;
       if if_enoughlong == 1 && if_enoughlong_car1 == 1 && if_check == 1
         hasmeasure = 1;
       // minimal distance of the point on current trajectory to the path of other vehicle
         if distance <= distance_car1
             Q max_distance = 0.0;
             for i = 1 : trajectory_length
                // point P
                Q Px = trajectory_x(1,i);
                Q Py = trajectory_y(1,i);
                Q min_distance = 999999.0;
                for j = 1 : (trajectory_length_car1 - 1)
                  // Line segment AB
                  Q Ax = trajectory_x_car1(1,j);
                  Q Ay = trajectory_y_car1(1,j);
                  Q Bx = trajectory_x_car1(1,j+1);
                  Q By = trajectory_y_car1(1,j+1);
                  // AP·AB
                  Q cross = (Bx - Ax)*(Px - Ax)+(By - Ay)*(Py - Ay);
                  // sqrt of mode of AB
                  Q d2 = (Bx - Ax)*(Bx - Ax)+(By - Ay)*(By - Ay);
                  Q r = cross/d2;
                  Q dis_pab = 0.0;
                  if r <= 0.0
                    // short distance is AP
                    Q sqrt_dis = (Px - Ax)*(Px - Ax)+(Py - Ay)*(Py - Ay);
                    dis_pab = sqrt(sqrt_dis);
                  elseif r >= 1.0
                    // short distance is BP
                    Q sqrt_dis1 = (Px - Bx)*(Px - Bx)+(Py - By)*(Py - By);
                    dis_pab = sqrt(sqrt_dis1);
                  else
                    // short distance is CP , C on AB
                    Q dx = Ax + (Bx - Ax) * r;
                    Q dy = Ay + (By - Ay) * r;
                    Q sqrt_dis2 = (Px - dx)*(Px - dx)+(Py - dy)*(Py - dy);
                    dis_pab = sqrt(sqrt_dis2);
                  end
                  if dis_pab <= min_distance
                     min_distance = dis_pab;
                  end
                end
                // Fréchet distance
                if min_distance >= max_distance
                  max_distance = min_distance;
                end
             end
             similarity = max_distance;
         end
         if distance > distance_car1
             Q max_distance = 0.0;
             for i = 1 : trajectory_length_car1
                // point P
                Q Px = trajectory_x_car1(1,i);
                Q Py = trajectory_y_car1(1,i);
                Q min_distance = 999999.0;
                for j = 1 : (trajectory_length - 1)
                    // Line segment AB
                    Q Ax = trajectory_x(1,j);
                    Q Ay = trajectory_y(1,j);
                    Q Bx = trajectory_x(1,j+1);
                    Q By = trajectory_y(1,j+1);
                    // AP·AB
                    Q cross = (Bx - Ax)*(Px - Ax)+(By - Ay)*(Py - Ay);
                    // sqrt of mode of AB
                    Q d2 = (Bx - Ax)*(Bx - Ax)+(By - Ay)*(By - Ay);
                    Q r = cross/d2;
                    Q dis_pab = 0.0;
                    if r <= 0.0
                      // short distance is AP
                      Q sqrt_dis = (Px - Ax)*(Px - Ax)+(Py - Ay)*(Py - Ay);
                      dis_pab = sqrt(sqrt_dis);
                    elseif r >= 1.0
                      // short distance is BP
                      Q sqrt_dis1 = (Px - Ax)*(Px - Ax)+(Py - Ay)*(Py - Ay);
                      dis_pab = sqrt(sqrt_dis1);
                    else
                      // short distance is CP , C on AB
                      Q dx = Ax + (Bx - Ax) * r;
                      Q dy = Ay + (By - Ay) * r;
                      Q sqrt_dis2 = (Px - dx)*(Px - dx)+(Py - dy)*(Py - dy);
                      dis_pab = sqrt(sqrt_dis2);
                    end
                    if dis_pab <= min_distance
                       min_distance = dis_pab;
                    end
                end //for j = 1 : trajectory_length - 1
                // Fréchet distance
                if min_distance >= max_distance
                  max_distance = min_distance;
                end
             end//for i = 1 : trajectory_length_car1
             similarity = max_distance;
         end //if distance > distance_car1
      end
    }
}
