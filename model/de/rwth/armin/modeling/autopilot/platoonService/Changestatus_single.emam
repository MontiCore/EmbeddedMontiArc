package de.rwth.armin.modeling.autopilot.platoonService;
import package de.rwth.armin.modeling.autopilot.messagestruct.*;

dynamic component Changestatus_single{
 ports
 dynamic in Platoonmessage  plat_msg[0:32],

 in   Z                 vehicleid,
 in   Z                 timestamp,
 in   Q                 position_x,
 in   Q                 position_y,
 in   Q                 compass,
 in   Q                 length,
 in   Q                 width,
 in   Q                 engine,
 in   Q                 brake,
 in   Q                 steering,
 in   Q                 velocity,

 out  Z                 current_status,
 out  Z                 currentplatoonheadid,
 out  Z                 current_platnum,
 out  Z^{1,100}         currentplatoonlist,
 out  Z^{1,100}         platoonlist1,
 out  Z                 if_currentsinglebemerged,
 out  Platoonmessage    pmsg,
 out  Statusmessage     smsg,
 out  Statusmessage     smsg1,

 dynamic out Statusmessage  status_msg[0:32];

@ plat_msg::connect{}

 implementation Math{
  static Z timestamp_store = 0;
  Z num = 0;
  Z vehicleid1 = 0;
  Z tag = 0;
   for i  = 1:32
      if is_connected(plat_msg,i)
         pmsg = plat_msg(i);
         platoonlist1 = pmsg.platoon_member;
         num = pmsg.member_num;
         if platoonlist1(1,num) == vehicleid
            tag = 1;
            vehicleid1 = pmsg.vehicleid;
         end
      end
   end
   if tag == 1
    // change the status
      // smsg.vehicleid = vehicleid;
      // smsg.timestamp = timestamp;
      // smsg.position_x = position_x;
      // smsg.position_y = position_y;
      // smsg.compass = compass;
      // smsg.platoon_headid = vehicleid1;
      // smsg.length = length;
      // smsg.width = width;
      // smsg.engine = engine;
      // smsg.brakes = brake;
      // smsg.steering = steering;
      // smsg.velocity = velocity;
      // Z a = 1;
      // if ports_connect(status_msg,a,smsg)
      //    status_msg(a) = smsg;
      // end
      // Z r = ports_free(status_msg,a);
      timestamp_store = timestamp;
      current_status = 1;
      currentplatoonheadid = vehicleid1;
      current_platnum = num;
      currentplatoonlist = platoonlist1;
      if_currentsinglebemerged = 1;
   else
    // keep the current status
      if timestamp - timestamp_store >= 5
          smsg1.vehicleid = vehicleid;
          smsg1.timestamp = timestamp;
          smsg1.position_x = position_x;
          smsg1.position_y = position_y;
          smsg1.compass = compass;
          smsg1.platoon_headid = 0;
          smsg1.length = length;
          smsg1.width = width;
          smsg1.engine = engine;
          smsg1.brakes = brake;
          smsg1.steering = steering;
          smsg1.velocity = velocity;
          Z a1 = 1;
          if ports_connect(status_msg,a1,smsg1)
             status_msg(a1) = smsg1;
          end
          Z r1 = ports_free(status_msg,a1);
          timestamp_store = timestamp;
      end
      current_status = 0;
      currentplatoonheadid = vehicleid;
      current_platnum = 0;
      currentplatoonlist = platoonlist1;
      if_currentsinglebemerged = 0;
   end
 }
}
