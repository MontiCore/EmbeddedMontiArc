/* (c) https://github.com/MontiCore/monticore */

package de.monticore.lang.monticar;

grammar Resolution extends de.monticore.NumberUnit, de.monticore.literals.Literals, de.monticore.CommonExpressions, de.monticore.lang.monticar.PrintType {
    ast ResolutionDeclaration = method public String getName(){
        return "implement Name!";
    }
    method public String getTypeName(){
        return "implement TypeName!";
    };
   interface ResolutionDeclaration;
   ast Resolution= method public Optional<String> getNameOpt(){
    return Optional.empty();
   };
   interface Resolution;
   NameArgument implements TypeArgument=Name;

   //Just here because an interface has to be implemented by at least one nonterminal in a grammar
   ast NameResolution=
   method public Optional<String> getName(){
        return Optional.of(this.name);
   };
   ast NameResolutionDeclaration = method public String getTypeName(){
    return null;
   };
   NameResolution implements Resolution = Name;
   NameResolutionDeclaration implements ResolutionDeclaration = Name ("=" Resolution);
   ast NamingResolution= method public String getTypeName(){
     return null;
   };
   NamingResolution implements ResolutionDeclaration = Name;

   ast TypeNameResolutionDeclaration = method public String getTypeName(){
       return getType().toString();
   };
   TypeNameResolutionDeclaration implements ResolutionDeclaration = Type Name ("=" Resolution);//TODO investigate issues related to this

    ast UnitNumberTypeArgument= method public String printType(){return "UnitNumberTypeArgument";};
      UnitNumberTypeArgument implements PrintType, TypeArgument<100>  = NumberWithUnit;

   ast UnitNumberResolution= method public String printType(){return "UnitNumberResolution";};
   UnitNumberResolution implements PrintType, Resolution = (Name | NumberWithUnit);

    // TODO: Same as UnitNumberExpression implements Expression = NumberWithUnit;
    UnitNumberExpression implements Expression = NumberWithUnit;
    UnitNumberResolutionExpression implements Expression = UnitNumberResolution;

    // TODO: Is redundant to TypeNameResolutionDeclaration think about removing this
   ast UnitNumberResolutionDeclaration = method public String getTypeName(){
               return getType().toString();
   };
   UnitNumberResolutionDeclaration implements ResolutionDeclaration = Type name:Name ("=" NumberWithUnit)?;

    /*   ast MultiplicationResolution= method public String getTypeName(){
                       return "MultiplicationResolution";
           }
           method public String getName(){return null;};
       MultiplicationResolution implements ResolutionDeclaration, TypeArgument = ResolutionDeclaration "*" ResolutionDeclaration;
       ast AdditionResolution = method public String getTypeName(){
                        return "AdditionResolution";
       }method public String getName(){return null;};
       AdditionResolution implements ResolutionDeclaration, TypeArgument = ResolutionDeclaration "+" ResolutionDeclaration;
   */
}
