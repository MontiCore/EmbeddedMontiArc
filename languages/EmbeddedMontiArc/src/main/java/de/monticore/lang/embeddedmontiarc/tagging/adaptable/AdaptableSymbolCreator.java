/* (c) https://github.com/MontiCore/monticore */
/* generated by template templates.de.monticore.lang.tagschema.SimpleTagTypeCreator*/


package de.monticore.lang.embeddedmontiarc.tagging.adaptable;

import de.monticore.lang.embeddedmontiarc.embeddedmontiarc._symboltable.cncModel.EMAPortSymbol;
import de.monticore.lang.tagging._ast.ASTNameScope;
import de.monticore.lang.tagging._ast.ASTScope;
import de.monticore.lang.tagging._ast.ASTTag;
import de.monticore.lang.tagging._ast.ASTTaggingUnit;
import de.monticore.lang.tagging._symboltable.TagSymbolCreator;
import de.monticore.lang.tagging._symboltable.TaggingResolver;
import de.monticore.symboltable.Scope;
import de.monticore.symboltable.Symbol;
import de.se_rwth.commons.Joiners;
import de.se_rwth.commons.logging.Log;

import java.util.Collection;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * created by SimpleTagTypeCreator.ftl
 */
public class AdaptableSymbolCreator implements TagSymbolCreator {

  public void create(ASTTaggingUnit unit, TaggingResolver tagging) {
    if (unit.getQualifiedNameList().stream()
            .map(q -> q.toString())
            .filter(n -> n.endsWith("AdaptableTagSchema"))
            .count() == 0) {
      return; // the tagging model is not conform to the traceability tagging schema
    }
    final String packageName = Joiners.DOT.join(unit.getPackageList());
    final String rootCmp = // if-else does not work b/c of final (required by streams)
            (unit.getTagBody().getTargetModelOpt().isPresent()) ?
                    Joiners.DOT.join(packageName, ((ASTNameScope) unit.getTagBody().getTargetModelOpt().get())
                            .getQualifiedNameString().toString()) :
                    packageName;

    for (ASTTag element : unit.getTagBody().getTagList()) {
      element.getTagElementList().stream()
              .filter(t -> t.getName().equals("Adaptable")) // after that point we can throw error messages
              .forEachOrdered(b ->
                      element.getScopeList().stream()
                              .filter(this::checkScope)
                              .map(s -> (ASTNameScope) s)
                              .map(s -> tagging.resolve(Joiners.DOT.join(rootCmp, // resolve down does not try to reload symbol
                                      s.getQualifiedNameString()), EMAPortSymbol.KIND))
                              .filter(Optional::isPresent) // if the symbol is not present, does not mean that the symbol
                              .map(Optional::get)          // is not available at all, maybe it will be loaded later
                              .forEachOrdered(s -> {
                                tagging.addTag(s, new AdaptableSymbol());
                                if(s.isKindOf(EMAPortSymbol.KIND)){
                                  ((EMAPortSymbol)s).setConfig(true);
                                }
                              }));
    }
  }

  public static Scope getGlobalScope(final Scope scope) {
    Scope s = scope;
    while (s.getEnclosingScope().isPresent()) {
      s = s.getEnclosingScope().get();
    }
    return s;
  }

  public void create(ASTTaggingUnit unit, Scope gs) {

    }

  protected EMAPortSymbol checkKind(Collection<Symbol> symbols) {
    EMAPortSymbol ret = null;
    for (Symbol symbol : symbols) {
      if (symbol.getKind().isSame(EMAPortSymbol.KIND)) {
        if (ret != null) {
          Log.error(String.format("0xA4095 Found more than one symbol: '%s' and '%s'",
              ret, symbol));
          return null;
        }
        ret = (EMAPortSymbol)symbol;
      }
    }
    if (ret == null) {
      Log.error(String.format("0xT0001 Invalid symbol kinds: %s. tagTypeName expects as symbol kind 'EMAPortSymbol.KIND'.",
          symbols.stream().map(s -> "'" + s.getKind().toString() + "'").collect(Collectors.joining(", "))));
      return null;
    }
    return ret;
  }

  protected boolean checkScope(ASTScope scope) {
    if (scope.getScopeKind().equals("NameScope")) {
      return true;
    }
    Log.error(String.format("0xT0005 Invalid scope kind: '%s'. Adaptable expects as scope kind 'NameScope'.",
        scope.getScopeKind()), scope.get_SourcePositionStart());
    return false;
  }
}
