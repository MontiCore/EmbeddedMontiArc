// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 1024;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

if (!Module['reallocBuffer']) Module['reallocBuffer'] = function(size) {
  var ret;
  try {
    if (ArrayBuffer.transfer) {
      ret = ArrayBuffer.transfer(buffer, size);
    } else {
      var oldHEAP8 = HEAP8;
      ret = new ArrayBuffer(size);
      var temp = new Int8Array(ret);
      temp.set(oldHEAP8);
    }
  } catch(e) {
    return false;
  }
  var success = _emscripten_replace_memory(ret);
  if (!success) return false;
  return ret;
};

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(HEAP32[DYNAMICTOP_PTR>>2] > TOTAL_MEMORY); // This function should only ever be called after the ceiling of the dynamic heap has already been bumped to exceed the current total size of the asm.js heap.


  var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.
  var LIMIT = 2147483648 - PAGE_MULTIPLE; // We can do one page short of 2GB as theoretical maximum.

  if (HEAP32[DYNAMICTOP_PTR>>2] > LIMIT) {
    Module.printErr('Cannot enlarge memory, asked to go up to ' + HEAP32[DYNAMICTOP_PTR>>2] + ' bytes, but the limit is ' + LIMIT + ' bytes!');
    return false;
  }

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;
  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, MIN_TOTAL_MEMORY); // So the loop below will not be infinite, and minimum asm.js memory size is 16MB.

  while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR>>2]) { // Keep incrementing the heap size as long as it's less than what is requested.
    if (TOTAL_MEMORY <= 536870912) {
      TOTAL_MEMORY = alignUp(2 * TOTAL_MEMORY, PAGE_MULTIPLE); // Simple heuristic: double until 1GB...
    } else {
      TOTAL_MEMORY = Math.min(alignUp((3 * TOTAL_MEMORY + 2147483648) / 4, PAGE_MULTIPLE), LIMIT); // ..., but after that, add smaller increments towards 2GB, which we cannot reach
    }
  }

  var start = Date.now();

  var replacement = Module['reallocBuffer'](TOTAL_MEMORY);
  if (!replacement || replacement.byteLength != TOTAL_MEMORY) {
    Module.printErr('Failed to grow the heap from ' + OLD_TOTAL_MEMORY + ' bytes to ' + TOTAL_MEMORY + ' bytes, not enough memory!');
    if (replacement) {
      Module.printErr('Expected to get back a buffer of size ' + TOTAL_MEMORY + ' bytes, but instead got back a buffer of size ' + replacement.byteLength);
    }
    // restore the state to before this call, we failed
    TOTAL_MEMORY = OLD_TOTAL_MEMORY;
    return false;
  }

  // everything worked

  updateGlobalBuffer(replacement);
  updateGlobalBufferViews();

  Module.printErr('enlarged memory arrays from ' + OLD_TOTAL_MEMORY + ' to ' + TOTAL_MEMORY + ', took ' + (Date.now() - start) + ' ms (has ArrayBuffer.transfer? ' + (!!ArrayBuffer.transfer) + ')');

  if (!Module["usingWasm"]) {
    Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);
  }


  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  if (typeof WebAssembly === 'object' && typeof WebAssembly.Memory === 'function') {
    assert(TOTAL_MEMORY % WASM_PAGE_SIZE === 0);
    Module['wasmMemory'] = new WebAssembly.Memory({ 'initial': TOTAL_MEMORY / WASM_PAGE_SIZE });
    buffer = Module['wasmMemory'].buffer;
  } else
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}




function integrateWasmJS() {
  // wasm.js has several methods for creating the compiled code module here:
  //  * 'native-wasm' : use native WebAssembly support in the browser
  //  * 'interpret-s-expr': load s-expression code from a .wast and interpret
  //  * 'interpret-binary': load binary wasm and interpret
  //  * 'interpret-asm2wasm': load asm.js code, translate to wasm, and interpret
  //  * 'asmjs': no wasm, just load the asm.js code and use that (good for testing)
  // The method is set at compile time (BINARYEN_METHOD)
  // The method can be a comma-separated list, in which case, we will try the
  // options one by one. Some of them can fail gracefully, and then we can try
  // the next.

  // inputs

  var method = 'native-wasm';

  var wasmTextFile = 'objectDetector1.wast';
  var wasmBinaryFile = 'objectDetector1.wasm';
  var asmjsCodeFile = 'objectDetector1.temp.asm.js';

  if (typeof Module['locateFile'] === 'function') {
    if (!isDataURI(wasmTextFile)) {
      wasmTextFile = Module['locateFile'](wasmTextFile);
    }
    if (!isDataURI(wasmBinaryFile)) {
      wasmBinaryFile = Module['locateFile'](wasmBinaryFile);
    }
    if (!isDataURI(asmjsCodeFile)) {
      asmjsCodeFile = Module['locateFile'](asmjsCodeFile);
    }
  }

  // utilities

  var wasmPageSize = 64*1024;

  var info = {
    'global': null,
    'env': null,
    'asm2wasm': { // special asm2wasm imports
      "f64-rem": function(x, y) {
        return x % y;
      },
      "debugger": function() {
        debugger;
      }
    },
    'parent': Module // Module inside wasm-js.cpp refers to wasm-js.cpp; this allows access to the outside program.
  };

  var exports = null;


  function mergeMemory(newBuffer) {
    // The wasm instance creates its memory. But static init code might have written to
    // buffer already, including the mem init file, and we must copy it over in a proper merge.
    // TODO: avoid this copy, by avoiding such static init writes
    // TODO: in shorter term, just copy up to the last static init write
    var oldBuffer = Module['buffer'];
    if (newBuffer.byteLength < oldBuffer.byteLength) {
      Module['printErr']('the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here');
    }
    var oldView = new Int8Array(oldBuffer);
    var newView = new Int8Array(newBuffer);


    newView.set(oldView);
    updateGlobalBuffer(newBuffer);
    updateGlobalBufferViews();
  }

  function fixImports(imports) {
    return imports;
  }

  function getBinary() {
    try {
      if (Module['wasmBinary']) {
        return new Uint8Array(Module['wasmBinary']);
      }
      if (Module['readBinary']) {
        return Module['readBinary'](wasmBinaryFile);
      } else {
        throw "on the web, we need the wasm binary to be preloaded and set on Module['wasmBinary']. emcc.py will do that for you when generating HTML (but not JS)";
      }
    }
    catch (err) {
      abort(err);
    }
  }

  function getBinaryPromise() {
    // if we don't have the binary yet, and have the Fetch api, use that
    // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web
    if (!Module['wasmBinary'] && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
        return getBinary();
      });
    }
    // Otherwise, getBinary should be able to get it synchronously
    return new Promise(function(resolve, reject) {
      resolve(getBinary());
    });
  }

  // do-method functions


  function doNativeWasm(global, env, providedBuffer) {
    if (typeof WebAssembly !== 'object') {
      Module['printErr']('no native wasm support detected');
      return false;
    }
    // prepare memory import
    if (!(Module['wasmMemory'] instanceof WebAssembly.Memory)) {
      Module['printErr']('no native wasm Memory in use');
      return false;
    }
    env['memory'] = Module['wasmMemory'];
    // Load the wasm module and create an instance of using native support in the JS engine.
    info['global'] = {
      'NaN': NaN,
      'Infinity': Infinity
    };
    info['global.Math'] = Math;
    info['env'] = env;
    // handle a generated wasm instance, receiving its exports and
    // performing other necessary setup
    function receiveInstance(instance, module) {
      exports = instance.exports;
      if (exports.memory) mergeMemory(exports.memory);
      Module['asm'] = exports;
      Module["usingWasm"] = true;
      removeRunDependency('wasm-instantiate');
    }
    addRunDependency('wasm-instantiate');

    // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
    // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
    // to any other async startup actions they are performing.
    if (Module['instantiateWasm']) {
      try {
        return Module['instantiateWasm'](info, receiveInstance);
      } catch(e) {
        Module['printErr']('Module.instantiateWasm callback failed with error: ' + e);
        return false;
      }
    }

    // Async compilation can be confusing when an error on the page overwrites Module
    // (for example, if the order of elements is wrong, and the one defining Module is
    // later), so we save Module and check it later.
    var trueModule = Module;
    function receiveInstantiatedSource(output) {
      // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.
      // receiveInstance() will swap in the exports (to Module.asm) so they can be called
      assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');
      trueModule = null;
      receiveInstance(output['instance'], output['module']);
    }
    function instantiateArrayBuffer(receiver) {
      getBinaryPromise().then(function(binary) {
        return WebAssembly.instantiate(binary, info);
      }).then(receiver).catch(function(reason) {
        Module['printErr']('failed to asynchronously prepare wasm: ' + reason);
        abort(reason);
      });
    }
    // Prefer streaming instantiation if available.
    if (!Module['wasmBinary'] &&
        typeof WebAssembly.instantiateStreaming === 'function' &&
        !isDataURI(wasmBinaryFile) &&
        typeof fetch === 'function') {
      WebAssembly.instantiateStreaming(fetch(wasmBinaryFile, { credentials: 'same-origin' }), info)
        .then(receiveInstantiatedSource)
        .catch(function(reason) {
          // We expect the most common failure cause to be a bad MIME type for the binary,
          // in which case falling back to ArrayBuffer instantiation should work.
          Module['printErr']('wasm streaming compile failed: ' + reason);
          Module['printErr']('falling back to ArrayBuffer instantiation');
          instantiateArrayBuffer(receiveInstantiatedSource);
        });
    } else {
      instantiateArrayBuffer(receiveInstantiatedSource);
    }
    return {}; // no exports yet; we'll fill them in later
  }


  // We may have a preloaded value in Module.asm, save it
  Module['asmPreload'] = Module['asm'];

  // Memory growth integration code

  var asmjsReallocBuffer = Module['reallocBuffer'];

  var wasmReallocBuffer = function(size) {
    var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.
    size = alignUp(size, PAGE_MULTIPLE); // round up to wasm page size
    var old = Module['buffer'];
    var oldSize = old.byteLength;
    if (Module["usingWasm"]) {
      // native wasm support
      try {
        var result = Module['wasmMemory'].grow((size - oldSize) / wasmPageSize); // .grow() takes a delta compared to the previous size
        if (result !== (-1 | 0)) {
          // success in native wasm memory growth, get the buffer from the memory
          return Module['buffer'] = Module['wasmMemory'].buffer;
        } else {
          return null;
        }
      } catch(e) {
        console.error('Module.reallocBuffer: Attempted to grow from ' + oldSize  + ' bytes to ' + size + ' bytes, but got error: ' + e);
        return null;
      }
    }
  };

  Module['reallocBuffer'] = function(size) {
    if (finalMethod === 'asmjs') {
      return asmjsReallocBuffer(size);
    } else {
      return wasmReallocBuffer(size);
    }
  };

  // we may try more than one; this is the final one, that worked and we are using
  var finalMethod = '';

  // Provide an "asm.js function" for the application, called to "link" the asm.js module. We instantiate
  // the wasm module at that time, and it receives imports and provides exports and so forth, the app
  // doesn't need to care that it is wasm or olyfilled wasm or asm.js.

  Module['asm'] = function(global, env, providedBuffer) {
    env = fixImports(env);

    // import table
    if (!env['table']) {
      var TABLE_SIZE = Module['wasmTableSize'];
      if (TABLE_SIZE === undefined) TABLE_SIZE = 1024; // works in binaryen interpreter at least
      var MAX_TABLE_SIZE = Module['wasmMaxTableSize'];
      if (typeof WebAssembly === 'object' && typeof WebAssembly.Table === 'function') {
        if (MAX_TABLE_SIZE !== undefined) {
          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, 'maximum': MAX_TABLE_SIZE, 'element': 'anyfunc' });
        } else {
          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, element: 'anyfunc' });
        }
      } else {
        env['table'] = new Array(TABLE_SIZE); // works in binaryen interpreter at least
      }
      Module['wasmTable'] = env['table'];
    }

    if (!env['memoryBase']) {
      env['memoryBase'] = Module['STATIC_BASE']; // tell the memory segments where to place themselves
    }
    if (!env['tableBase']) {
      env['tableBase'] = 0; // table starts at 0 by default, in dynamic linking this will change
    }

    // try the methods. each should return the exports if it succeeded

    var exports;
    exports = doNativeWasm(global, env, providedBuffer);

    if (!exports) abort('no binaryen method succeeded. consider enabling more options, like interpreting, if you want that: https://github.com/kripken/emscripten/wiki/WebAssembly#binaryen-methods');


    return exports;
  };

  var methodHandler = Module['asm']; // note our method handler, as we may modify Module['asm'] later
}

integrateWasmJS();

// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 44496;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__I_000101() } }, { func: function() { ___cxx_global_var_init_26() } }, { func: function() { ___cxx_global_var_init_27() } }, { func: function() { ___cxx_global_var_init_28() } }, { func: function() { ___cxx_global_var_init_29() } }, { func: function() { __GLOBAL__sub_I_objectDetector1_cpp() } }, { func: function() { __GLOBAL__sub_I_bind_cpp() } }, { func: function() { __GLOBAL__sub_I_iostream_cpp() } });







var STATIC_BUMP = 44496;
Module["STATIC_BASE"] = STATIC_BASE;
Module["STATIC_BUMP"] = STATIC_BUMP;

/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  function _MAIN__() {
  Module['printErr']('missing function: MAIN__'); abort(-1);
  }
  Module["_MAIN__"] = _MAIN__;

  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  Module["__ZSt18uncaught_exceptionv"] = __ZSt18uncaught_exceptionv;

  function ___assert_fail(condition, filename, line, func) {
      abort('Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function']);
    }
  Module["___assert_fail"] = ___assert_fail;

  
  
  function _emscripten_get_now() { abort() }
  Module["_emscripten_get_now"] = _emscripten_get_now;
  
  function _emscripten_get_now_is_monotonic() {
      // return whether emscripten_get_now is guaranteed monotonic; the Date.now
      // implementation is not :(
      return ENVIRONMENT_IS_NODE || (typeof dateNow !== 'undefined') ||
          ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']);
    }
  Module["_emscripten_get_now_is_monotonic"] = _emscripten_get_now_is_monotonic;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  Module["ERRNO_CODES"] = ERRNO_CODES;
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  Module["___setErrNo"] = ___setErrNo;function _clock_gettime(clk_id, tp) {
      // int clock_gettime(clockid_t clk_id, struct timespec *tp);
      var now;
      if (clk_id === 0) {
        now = Date.now();
      } else if (clk_id === 1 && _emscripten_get_now_is_monotonic()) {
        now = _emscripten_get_now();
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      HEAP32[((tp)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((tp)+(4))>>2)]=((now % 1000)*1000*1000)|0; // nanoseconds
      return 0;
    }
  Module["_clock_gettime"] = _clock_gettime;function ___clock_gettime() {
  return _clock_gettime.apply(null, arguments)
  }
  Module["___clock_gettime"] = ___clock_gettime;

  function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }
  Module["___cxa_allocate_exception"] = ___cxa_allocate_exception;

  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  Module["EXCEPTIONS"] = EXCEPTIONS;function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }
  Module["___cxa_begin_catch"] = ___cxa_begin_catch;

  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }
  Module["___cxa_free_exception"] = ___cxa_free_exception;function ___cxa_end_catch() {
      // Clear state flag.
      Module['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }
  Module["___cxa_end_catch"] = ___cxa_end_catch;

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }
  Module["___cxa_find_matching_catch_2"] = ___cxa_find_matching_catch_2;

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }
  Module["___cxa_find_matching_catch_3"] = ___cxa_find_matching_catch_3;


  function ___cxa_rethrow() {
      var ptr = EXCEPTIONS.caught.pop();
      if (!EXCEPTIONS.infos[ptr].rethrown) {
        // Only pop if the corresponding push was through rethrow_primary_exception
        EXCEPTIONS.caught.push(ptr)
        EXCEPTIONS.infos[ptr].rethrown = true;
      }
      EXCEPTIONS.last = ptr;
      throw ptr;
    }
  Module["___cxa_rethrow"] = ___cxa_rethrow;

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr;
    }
  Module["___resumeException"] = ___resumeException;function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }
  Module["___cxa_find_matching_catch"] = ___cxa_find_matching_catch;function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0,
        caught: false,
        rethrown: false
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }
  Module["___cxa_throw"] = ___cxa_throw;

  function ___gxx_personality_v0() {
    }
  Module["___gxx_personality_v0"] = ___gxx_personality_v0;

  function ___lock() {}
  Module["___lock"] = ___lock;

  function ___map_file(pathname, size) {
      ___setErrNo(ERRNO_CODES.EPERM);
      return -1;
    }
  Module["___map_file"] = ___map_file;


  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  Module["ERRNO_MESSAGES"] = ERRNO_MESSAGES;
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  Module["PATH"] = PATH;
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  Module["TTY"] = TTY;
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  Module["MEMFS"] = MEMFS;
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  Module["IDBFS"] = IDBFS;
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  Module["NODEFS"] = NODEFS;
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  Module["WORKERFS"] = WORKERFS;
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  Module["_stdin"] = _stdin;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  Module["_stdout"] = _stdout;
  
  var _stderr=STATICTOP; STATICTOP += 16;;
  Module["_stderr"] = _stderr;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  Module["FS"] = FS;var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};
  Module["SYSCALLS"] = SYSCALLS;function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlink
      var path = SYSCALLS.getStr();
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall10"] = ___syscall10;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall140"] = ___syscall140;

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall145"] = ___syscall145;

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall146"] = ___syscall146;

  function ___syscall194(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ftruncate64
      var fd = SYSCALLS.get(), zero = SYSCALLS.getZero(), length = SYSCALLS.get64();
      FS.ftruncate(fd, length);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall194"] = ___syscall194;

  function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall195"] = ___syscall195;

  function ___syscall197(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_fstat64
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, stream.path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall197"] = ___syscall197;

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall221"] = ___syscall221;

  function ___syscall33(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // access
      var path = SYSCALLS.getStr(), amode = SYSCALLS.get();
      return SYSCALLS.doAccess(path, amode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall33"] = ___syscall33;

  function ___syscall330(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup3
      var old = SYSCALLS.getStreamFromFD(), suggestFD = SYSCALLS.get(), flags = SYSCALLS.get();
      assert(!flags);
      if (old.fd === suggestFD) return -ERRNO_CODES.EINVAL;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall330"] = ___syscall330;

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall5"] = ___syscall5;

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall54"] = ___syscall54;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall6"] = ___syscall6;

  function ___syscall63(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // dup2
      var old = SYSCALLS.getStreamFromFD(), suggestFD = SYSCALLS.get();
      if (old.fd === suggestFD) return suggestFD;
      return SYSCALLS.doDup(old.path, old.flags, suggestFD);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall63"] = ___syscall63;

  function ___syscall91(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // munmap
      var addr = SYSCALLS.get(), len = SYSCALLS.get();
      // TODO: support unmmap'ing parts of allocations
      var info = SYSCALLS.mappings[addr];
      if (!info) return 0;
      if (len === info.len) {
        var stream = FS.getStream(info.fd);
        SYSCALLS.doMsync(addr, stream, len, info.flags)
        FS.munmap(stream);
        SYSCALLS.mappings[addr] = null;
        if (info.allocated) {
          _free(info.malloc);
        }
      }
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
  Module["___syscall91"] = ___syscall91;

  function ___unlock() {}
  Module["___unlock"] = ___unlock;

  
  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  Module["getShiftFromSize"] = getShiftFromSize;
  
  
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }
  Module["embind_init_charCodes"] = embind_init_charCodes;var embind_charCodes=undefined;
  Module["embind_charCodes"] = embind_charCodes;function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  Module["readLatin1String"] = readLatin1String;
  
  
  var awaitingDependencies={};
  Module["awaitingDependencies"] = awaitingDependencies;
  
  var registeredTypes={};
  Module["registeredTypes"] = registeredTypes;
  
  var typeDependencies={};
  Module["typeDependencies"] = typeDependencies;
  
  
  
  
  
  
  var char_0=48;
  Module["char_0"] = char_0;
  
  var char_9=57;
  Module["char_9"] = char_9;function makeLegalFunctionName(name) {
      if (undefined === name) {
          return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
          return '_' + name;
      } else {
          return name;
      }
    }
  Module["makeLegalFunctionName"] = makeLegalFunctionName;function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      /*jshint evil:true*/
      return new Function(
          "body",
          "return function " + name + "() {\n" +
          "    \"use strict\";" +
          "    return body.apply(this, arguments);\n" +
          "};\n"
      )(body);
    }
  Module["createNamedFunction"] = createNamedFunction;function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
          this.name = errorName;
          this.message = message;
  
          var stack = (new Error(message)).stack;
          if (stack !== undefined) {
              this.stack = this.toString() + '\n' +
                  stack.replace(/^Error(:[^\n]*)?\n/, '');
          }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
          if (this.message === undefined) {
              return this.name;
          } else {
              return this.name + ': ' + this.message;
          }
      };
  
      return errorClass;
    }
  Module["extendError"] = extendError;var BindingError=undefined;
  Module["BindingError"] = BindingError;function throwBindingError(message) {
      throw new BindingError(message);
    }
  Module["throwBindingError"] = throwBindingError;
  
  
  
  var InternalError=undefined;
  Module["InternalError"] = InternalError;function throwInternalError(message) {
      throw new InternalError(message);
    }
  Module["throwInternalError"] = throwInternalError;function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach(function(dt, i) {
          if (registeredTypes.hasOwnProperty(dt)) {
              typeConverters[i] = registeredTypes[dt];
          } else {
              unregisteredTypes.push(dt);
              if (!awaitingDependencies.hasOwnProperty(dt)) {
                  awaitingDependencies[dt] = [];
              }
              awaitingDependencies[dt].push(function() {
                  typeConverters[i] = registeredTypes[dt];
                  ++registered;
                  if (registered === unregisteredTypes.length) {
                      onComplete(typeConverters);
                  }
              });
          }
      });
      if (0 === unregisteredTypes.length) {
          onComplete(typeConverters);
      }
    }
  Module["whenDependentTypesAreResolved"] = whenDependentTypesAreResolved;function registerType(rawType, registeredInstance, options) {
      options = options || {};
  
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
          var callbacks = awaitingDependencies[rawType];
          delete awaitingDependencies[rawType];
          callbacks.forEach(function(cb) {
              cb();
          });
      }
    }
  Module["registerType"] = registerType;function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }
  Module["__embind_register_bool"] = __embind_register_bool;

  
  
  var emval_free_list=[];
  Module["emval_free_list"] = emval_free_list;
  
  var emval_handle_array=[{},{value:undefined},{value:null},{value:true},{value:false}];
  Module["emval_handle_array"] = emval_handle_array;function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
          emval_handle_array[handle] = undefined;
          emval_free_list.push(handle);
      }
    }
  Module["__emval_decref"] = __emval_decref;
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              ++count;
          }
      }
      return count;
    }
  Module["count_emval_handles"] = count_emval_handles;
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
          if (emval_handle_array[i] !== undefined) {
              return emval_handle_array[i];
          }
      }
      return null;
    }
  Module["get_first_emval"] = get_first_emval;function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }
  Module["init_emval"] = init_emval;function __emval_register(value) {
  
      switch(value){
        case undefined :{ return 1; }
        case null :{ return 2; }
        case true :{ return 3; }
        case false :{ return 4; }
        default:{
          var handle = emval_free_list.length ?
              emval_free_list.pop() :
              emval_handle_array.length;
  
          emval_handle_array[handle] = {refcount: 1, value: value};
          return handle;
          }
        }
    }
  Module["__emval_register"] = __emval_register;
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAPU32[pointer >> 2]);
    }
  Module["simpleReadValueFromPointer"] = simpleReadValueFromPointer;function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(handle) {
              var rv = emval_handle_array[handle].value;
              __emval_decref(handle);
              return rv;
          },
          'toWireType': function(destructors, value) {
              return __emval_register(value);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: null, // This type does not need a destructor
  
          // TODO: do we need a deleteObject here?  write a test where
          // emval is passed into JS via an interface
      });
    }
  Module["__embind_register_emval"] = __embind_register_emval;

  
  function _embind_repr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  Module["_embind_repr"] = _embind_repr;
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }
  Module["floatReadValueFromPointer"] = floatReadValueFromPointer;function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              return value;
          },
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following if() and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              return value;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': floatReadValueFromPointer(name, shift),
          destructorFunction: null, // This type does not need a destructor
      });
    }
  Module["__embind_register_float"] = __embind_register_float;

  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
          throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
  
      /*
       * Previously, the following line was just:
  
       function dummy() {};
  
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
       * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
       * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
       * to write a test for this behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  Module["new_"] = new_;
  
  function runDestructors(destructors) {
      while (destructors.length) {
          var ptr = destructors.pop();
          var del = destructors.pop();
          del(ptr);
      }
    }
  Module["runDestructors"] = runDestructors;function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
          throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
          if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
              needsDestructorStack = true;
              break;
          }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for(var i = 0; i < argCount - 2; ++i) {
          argsList += (i!==0?", ":"")+"arg"+i;
          argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
  
      if (needsDestructorStack) {
          invokerFnBody +=
              "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
  
      if (isClassMethodFunc) {
          invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for(var i = 0; i < argCount - 2; ++i) {
          invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
          args1.push("argType"+i);
          args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
          argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
          invokerFnBody += "runDestructors(destructors);\n";
      } else {
          for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
              var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
              if (argTypes[i].destructorFunction !== null) {
                  invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                  args1.push(paramName+"_dtor");
                  args2.push(argTypes[i].destructorFunction);
              }
          }
      }
  
      if (returns) {
          invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                           "return ret;\n";
      } else {
      }
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  Module["craftInvokerFunction"] = craftInvokerFunction;
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
          var prevFunc = proto[methodName];
          // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
          proto[methodName] = function() {
              // TODO This check can be removed in -O3 level "unsafe" optimizations.
              if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                  throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
              }
              return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
          };
          // Move the previous function into the overload table.
          proto[methodName].overloadTable = [];
          proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }
  Module["ensureOverloadTable"] = ensureOverloadTable;function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
          if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
              throwBindingError("Cannot register public name '" + name + "' twice");
          }
  
          // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
          // that routes between the two.
          ensureOverloadTable(Module, name, name);
          if (Module.hasOwnProperty(numArguments)) {
              throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
          }
          // Add the new function into the overload table.
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          if (undefined !== numArguments) {
              Module[name].numArguments = numArguments;
          }
      }
    }
  Module["exposePublicSymbol"] = exposePublicSymbol;
  
  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          array.push(HEAP32[(firstElement >> 2) + i]);
      }
      return array;
    }
  Module["heap32VectorToArray"] = heap32VectorToArray;
  
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
          throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
          Module[name].overloadTable[numArguments] = value;
      }
      else {
          Module[name] = value;
          Module[name].argCount = numArguments;
      }
    }
  Module["replacePublicSymbol"] = replacePublicSymbol;
  
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller(dynCall) {
          var args = [];
          for (var i = 1; i < signature.length; ++i) {
              args.push('a' + i);
          }
  
          var name = 'dynCall_' + signature + '_' + rawFunction;
          var body = 'return function ' + name + '(' + args.join(', ') + ') {\n';
          body    += '    return dynCall(rawFunction' + (args.length ? ', ' : '') + args.join(', ') + ');\n';
          body    += '};\n';
  
          return (new Function('dynCall', 'rawFunction', body))(dynCall, rawFunction);
      }
  
      var fp;
      if (Module['FUNCTION_TABLE_' + signature] !== undefined) {
          fp = Module['FUNCTION_TABLE_' + signature][rawFunction];
      } else if (typeof FUNCTION_TABLE !== "undefined") {
          fp = FUNCTION_TABLE[rawFunction];
      } else {
          // asm.js does not give direct access to the function tables,
          // and thus we must go through the dynCall interface which allows
          // calling into a signature's function table by pointer value.
          //
          // https://github.com/dherman/asm.js/issues/83
          //
          // This has three main penalties:
          // - dynCall is another function call in the path from JavaScript to C++.
          // - JITs may not predict through the function table indirection at runtime.
          var dc = Module["asm"]['dynCall_' + signature];
          if (dc === undefined) {
              // We will always enter this branch if the signature
              // contains 'f' and PRECISE_F32 is not enabled.
              //
              // Try again, replacing 'f' with 'd'.
              dc = Module["asm"]['dynCall_' + signature.replace(/f/g, 'd')];
              if (dc === undefined) {
                  throwBindingError("No dynCall invoker for signature: " + signature);
              }
          }
          fp = makeDynCaller(dc);
      }
  
      if (typeof fp !== "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  Module["embind__requireFunction"] = embind__requireFunction;
  
  
  var UnboundTypeError=undefined;
  Module["UnboundTypeError"] = UnboundTypeError;
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }
  Module["getTypeName"] = getTypeName;function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
          if (seen[type]) {
              return;
          }
          if (registeredTypes[type]) {
              return;
          }
          if (typeDependencies[type]) {
              typeDependencies[type].forEach(visit);
              return;
          }
          unboundTypes.push(type);
          seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }
  Module["throwUnboundTypeError"] = throwUnboundTypeError;function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
  
      rawInvoker = embind__requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
          throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
          var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
          replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
          return [];
      });
    }
  Module["__embind_register_function"] = __embind_register_function;

  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }
  Module["integerReadValueFromPointer"] = integerReadValueFromPointer;function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = function(value) {
          return value;
      };
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = function(value) {
              return (value << bitshift) >>> bitshift;
          };
      }
  
      var isUnsignedType = (name.indexOf('unsigned') != -1);
  
      registerType(primitiveType, {
          name: name,
          'fromWireType': fromWireType,
          'toWireType': function(destructors, value) {
              // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
              // avoid the following two if()s and assume value is of proper type.
              if (typeof value !== "number" && typeof value !== "boolean") {
                  throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
              }
              if (value < minRange || value > maxRange) {
                  throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
              }
              return isUnsignedType ? (value >>> 0) : (value | 0);
          },
          'argPackAdvance': 8,
          'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
          destructorFunction: null, // This type does not need a destructor
      });
    }
  Module["__embind_register_integer"] = __embind_register_integer;

  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
          Int8Array,
          Uint8Array,
          Int16Array,
          Uint16Array,
          Int32Array,
          Uint32Array,
          Float32Array,
          Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
          handle = handle >> 2;
          var heap = HEAPU32;
          var size = heap[handle]; // in elements
          var data = heap[handle + 1]; // byte offset into emscripten heap
          return new TA(heap['buffer'], data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': decodeMemoryView,
          'argPackAdvance': 8,
          'readValueFromPointer': decodeMemoryView,
      }, {
          ignoreDuplicateRegistrations: true,
      });
    }
  Module["__embind_register_memory_view"] = __embind_register_memory_view;

  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              if (value instanceof ArrayBuffer) {
                  value = new Uint8Array(value);
              }
  
              function getTAElement(ta, index) {
                  return ta[index];
              }
              function getStringElement(string, index) {
                  return string.charCodeAt(index);
              }
              var getElement;
              if (value instanceof Uint8Array) {
                  getElement = getTAElement;
              } else if (value instanceof Uint8ClampedArray) {
                  getElement = getTAElement;
              } else if (value instanceof Int8Array) {
                  getElement = getTAElement;
              } else if (typeof value === 'string') {
                  getElement = getStringElement;
              } else {
                  throwBindingError('Cannot pass non-string to std::string');
              }
  
              // assumes 4-byte alignment
              var length = value.length;
              var ptr = _malloc(4 + length);
              HEAPU32[ptr >> 2] = length;
              for (var i = 0; i < length; ++i) {
                  var charCode = getElement(value, i);
                  if (charCode > 255) {
                      _free(ptr);
                      throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                  }
                  HEAPU8[ptr + 4 + i] = charCode;
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }
  Module["__embind_register_std_string"] = __embind_register_std_string;

  function __embind_register_std_wstring(rawType, charSize, name) {
      // nb. do not cache HEAPU16 and HEAPU32, they may be destroyed by enlargeMemory().
      name = readLatin1String(name);
      var getHeap, shift;
      if (charSize === 2) {
          getHeap = function() { return HEAPU16; };
          shift = 1;
      } else if (charSize === 4) {
          getHeap = function() { return HEAPU32; };
          shift = 2;
      }
      registerType(rawType, {
          name: name,
          'fromWireType': function(value) {
              var HEAP = getHeap();
              var length = HEAPU32[value >> 2];
              var a = new Array(length);
              var start = (value + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  a[i] = String.fromCharCode(HEAP[start + i]);
              }
              _free(value);
              return a.join('');
          },
          'toWireType': function(destructors, value) {
              // assumes 4-byte alignment
              var HEAP = getHeap();
              var length = value.length;
              var ptr = _malloc(4 + length * charSize);
              HEAPU32[ptr >> 2] = length;
              var start = (ptr + 4) >> shift;
              for (var i = 0; i < length; ++i) {
                  HEAP[start + i] = value.charCodeAt(i);
              }
              if (destructors !== null) {
                  destructors.push(_free, ptr);
              }
              return ptr;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': simpleReadValueFromPointer,
          destructorFunction: function(ptr) { _free(ptr); },
      });
    }
  Module["__embind_register_std_wstring"] = __embind_register_std_wstring;

  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }
  Module["__embind_register_void"] = __embind_register_void;

  
  function requireHandle(handle) {
      if (!handle) {
          throwBindingError('Cannot use deleted val. handle = ' + handle);
      }
      return emval_handle_array[handle].value;
    }
  Module["requireHandle"] = requireHandle;
  
  function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }
  Module["requireRegisteredType"] = requireRegisteredType;function __emval_as(handle, returnType, destructorsRef) {
      handle = requireHandle(handle);
      returnType = requireRegisteredType(returnType, 'emval::as');
      var destructors = [];
      var rd = __emval_register(destructors);
      HEAP32[destructorsRef >> 2] = rd;
      return returnType['toWireType'](destructors, handle);
    }
  Module["__emval_as"] = __emval_as;


  function __emval_get_property(handle, key) {
      handle = requireHandle(handle);
      key = requireHandle(key);
      return __emval_register(handle[key]);
    }
  Module["__emval_get_property"] = __emval_get_property;

  function __emval_incref(handle) {
      if (handle > 4) {
          emval_handle_array[handle].refcount += 1;
      }
    }
  Module["__emval_incref"] = __emval_incref;

  function __emval_new_array() {
      return __emval_register([]);
    }
  Module["__emval_new_array"] = __emval_new_array;

  
  
  var emval_symbols={};
  Module["emval_symbols"] = emval_symbols;function getStringOrSymbol(address) {
      var symbol = emval_symbols[address];
      if (symbol === undefined) {
          return readLatin1String(address);
      } else {
          return symbol;
      }
    }
  Module["getStringOrSymbol"] = getStringOrSymbol;function __emval_new_cstring(v) {
      return __emval_register(getStringOrSymbol(v));
    }
  Module["__emval_new_cstring"] = __emval_new_cstring;

  function __emval_run_destructors(handle) {
      var destructors = emval_handle_array[handle].value;
      runDestructors(destructors);
      __emval_decref(handle);
    }
  Module["__emval_run_destructors"] = __emval_run_destructors;

  function __emval_set_property(handle, key, value) {
      handle = requireHandle(handle);
      key = requireHandle(key);
      value = requireHandle(value);
      handle[key] = value;
    }
  Module["__emval_set_property"] = __emval_set_property;

  function __emval_take_value(type, argv) {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](argv);
      return __emval_register(v);
    }
  Module["__emval_take_value"] = __emval_take_value;

  function _abort() {
      Module['abort']();
    }
  Module["_abort"] = _abort;

  function _atexit(func, arg) {
      warnOnce('atexit() called, but NO_EXIT_RUNTIME is set, so atexits() will not be called. set NO_EXIT_RUNTIME to 0 (see the FAQ)');
      __ATEXIT__.unshift({ func: func, arg: arg });
    }
  Module["_atexit"] = _atexit;

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }
  Module["__exit"] = __exit;function _exit(status) {
      __exit(status);
    }
  Module["_exit"] = _exit;

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;
  Module["_environ"] = _environ;var ___environ=_environ;
  Module["___environ"] = ___environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C.UTF-8';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = staticAlloc(TOTAL_ENV_SIZE);
        envPtr = staticAlloc(MAX_ENV_VALUES * 4);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }
  Module["___buildEnvironment"] = ___buildEnvironment;var ENV={};
  Module["ENV"] = ENV;function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocateUTF8(ENV[name]);
      return _getenv.ret;
    }
  Module["_getenv"] = _getenv;

   

  var _llvm_fabs_f64=Math_abs;
  Module["_llvm_fabs_f64"] = _llvm_fabs_f64;

  var _llvm_floor_f64=Math_floor;
  Module["_llvm_floor_f64"] = _llvm_floor_f64;

  var _llvm_pow_f64=Math_pow;
  Module["_llvm_pow_f64"] = _llvm_pow_f64;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    }
  Module["_emscripten_memcpy_big"] = _emscripten_memcpy_big; 

   

   

   

  function _pthread_cond_wait() { return 0; }
  Module["_pthread_cond_wait"] = _pthread_cond_wait;

  
  var PTHREAD_SPECIFIC={};
  Module["PTHREAD_SPECIFIC"] = PTHREAD_SPECIFIC;function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }
  Module["_pthread_getspecific"] = _pthread_getspecific;

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  Module["PTHREAD_SPECIFIC_NEXT_KEY"] = PTHREAD_SPECIFIC_NEXT_KEY;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }
  Module["_pthread_key_create"] = _pthread_key_create;

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }
  Module["_pthread_once"] = _pthread_once;

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }
  Module["_pthread_setspecific"] = _pthread_setspecific;

   

  
  var __sigalrm_handler=0;
  Module["__sigalrm_handler"] = __sigalrm_handler;function _signal(sig, func) {
      if (sig == 14 /*SIGALRM*/) {
        __sigalrm_handler = func;
      } else {
        Module.printErr('Calling stub instead of signal()');
      }
      return 0;
    }
  Module["_signal"] = _signal;

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  Module["__isLeapYear"] = __isLeapYear;
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  Module["__arraySum"] = __arraySum;
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  Module["__MONTH_DAYS_LEAP"] = __MONTH_DAYS_LEAP;
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];
  Module["__MONTH_DAYS_REGULAR"] = __MONTH_DAYS_REGULAR;function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }
  Module["__addDays"] = __addDays;function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }
  Module["_strftime"] = _strftime;function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }
  Module["_strftime_l"] = _strftime_l;
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_emval();;
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
___buildEnvironment(ENV);;
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



function nullFunc_dd(x) { Module["printErr"]("Invalid function pointer called with signature 'dd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_diiii(x) { Module["printErr"]("Invalid function pointer called with signature 'diiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_fiii(x) { Module["printErr"]("Invalid function pointer called with signature 'fiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_id(x) { Module["printErr"]("Invalid function pointer called with signature 'id'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iid(x) { Module["printErr"]("Invalid function pointer called with signature 'iid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiij(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiij'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_jd(x) { Module["printErr"]("Invalid function pointer called with signature 'jd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_jiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'jiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viid(x) { Module["printErr"]("Invalid function pointer called with signature 'viid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viidd(x) { Module["printErr"]("Invalid function pointer called with signature 'viidd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viijii(x) { Module["printErr"]("Invalid function pointer called with signature 'viijii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

Module['wasmTableSize'] = 34432;

Module['wasmMaxTableSize'] = 34432;

function invoke_dd(index,a1) {
  try {
    return Module["dynCall_dd"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_diiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_diiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_fiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_fiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_id(index,a1) {
  try {
    return Module["dynCall_id"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iid(index,a1,a2) {
  try {
    return Module["dynCall_iid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiid(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    return Module["dynCall_iiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12) {
  try {
    return Module["dynCall_iiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiij(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiij"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_jd(index,a1) {
  try {
    return Module["dynCall_jd"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_jiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_jiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viidd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viidd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiid(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiid"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiid(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiid"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    Module["dynCall_viiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viijii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viijii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = {};

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_dd": nullFunc_dd, "nullFunc_di": nullFunc_di, "nullFunc_diii": nullFunc_diii, "nullFunc_diiii": nullFunc_diiii, "nullFunc_fiii": nullFunc_fiii, "nullFunc_i": nullFunc_i, "nullFunc_id": nullFunc_id, "nullFunc_ii": nullFunc_ii, "nullFunc_iid": nullFunc_iid, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiid": nullFunc_iiiiid, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiid": nullFunc_iiiiiid, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_iiiiiiiiiii": nullFunc_iiiiiiiiiii, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_iiiiiiiiiiiii": nullFunc_iiiiiiiiiiiii, "nullFunc_iiiiij": nullFunc_iiiiij, "nullFunc_jd": nullFunc_jd, "nullFunc_jiiii": nullFunc_jiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vid": nullFunc_vid, "nullFunc_vii": nullFunc_vii, "nullFunc_viid": nullFunc_viid, "nullFunc_viidd": nullFunc_viidd, "nullFunc_viii": nullFunc_viii, "nullFunc_viiid": nullFunc_viiid, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiid": nullFunc_viiiid, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_viiiiiiiiiii": nullFunc_viiiiiiiiiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viijii": nullFunc_viijii, "invoke_dd": invoke_dd, "invoke_di": invoke_di, "invoke_diii": invoke_diii, "invoke_diiii": invoke_diiii, "invoke_fiii": invoke_fiii, "invoke_i": invoke_i, "invoke_id": invoke_id, "invoke_ii": invoke_ii, "invoke_iid": invoke_iid, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiid": invoke_iiiiid, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiid": invoke_iiiiiid, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiiiiiiiii": invoke_iiiiiiiiiii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiiiiiiiiiiii": invoke_iiiiiiiiiiiii, "invoke_iiiiij": invoke_iiiiij, "invoke_jd": invoke_jd, "invoke_jiiii": invoke_jiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vid": invoke_vid, "invoke_vii": invoke_vii, "invoke_viid": invoke_viid, "invoke_viidd": invoke_viidd, "invoke_viii": invoke_viii, "invoke_viiid": invoke_viiid, "invoke_viiii": invoke_viiii, "invoke_viiiid": invoke_viiiid, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_viiiiiiiiiii": invoke_viiiiiiiiiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viijii": invoke_viijii, "_MAIN__": _MAIN__, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___assert_fail": ___assert_fail, "___buildEnvironment": ___buildEnvironment, "___clock_gettime": ___clock_gettime, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_end_catch": ___cxa_end_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "___cxa_free_exception": ___cxa_free_exception, "___cxa_rethrow": ___cxa_rethrow, "___cxa_throw": ___cxa_throw, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___map_file": ___map_file, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall10": ___syscall10, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall194": ___syscall194, "___syscall195": ___syscall195, "___syscall197": ___syscall197, "___syscall221": ___syscall221, "___syscall33": ___syscall33, "___syscall330": ___syscall330, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___syscall63": ___syscall63, "___syscall91": ___syscall91, "___unlock": ___unlock, "__addDays": __addDays, "__arraySum": __arraySum, "__embind_register_bool": __embind_register_bool, "__embind_register_emval": __embind_register_emval, "__embind_register_float": __embind_register_float, "__embind_register_function": __embind_register_function, "__embind_register_integer": __embind_register_integer, "__embind_register_memory_view": __embind_register_memory_view, "__embind_register_std_string": __embind_register_std_string, "__embind_register_std_wstring": __embind_register_std_wstring, "__embind_register_void": __embind_register_void, "__emval_as": __emval_as, "__emval_decref": __emval_decref, "__emval_get_property": __emval_get_property, "__emval_incref": __emval_incref, "__emval_new_array": __emval_new_array, "__emval_new_cstring": __emval_new_cstring, "__emval_register": __emval_register, "__emval_run_destructors": __emval_run_destructors, "__emval_set_property": __emval_set_property, "__emval_take_value": __emval_take_value, "__exit": __exit, "__isLeapYear": __isLeapYear, "_abort": _abort, "_atexit": _atexit, "_clock_gettime": _clock_gettime, "_embind_repr": _embind_repr, "_emscripten_get_now": _emscripten_get_now, "_emscripten_get_now_is_monotonic": _emscripten_get_now_is_monotonic, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_exit": _exit, "_getenv": _getenv, "_llvm_fabs_f64": _llvm_fabs_f64, "_llvm_floor_f64": _llvm_floor_f64, "_llvm_pow_f64": _llvm_pow_f64, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "_signal": _signal, "_strftime": _strftime, "_strftime_l": _strftime_l, "count_emval_handles": count_emval_handles, "craftInvokerFunction": craftInvokerFunction, "createNamedFunction": createNamedFunction, "embind__requireFunction": embind__requireFunction, "embind_init_charCodes": embind_init_charCodes, "ensureOverloadTable": ensureOverloadTable, "exposePublicSymbol": exposePublicSymbol, "extendError": extendError, "floatReadValueFromPointer": floatReadValueFromPointer, "getShiftFromSize": getShiftFromSize, "getStringOrSymbol": getStringOrSymbol, "getTypeName": getTypeName, "get_first_emval": get_first_emval, "heap32VectorToArray": heap32VectorToArray, "init_emval": init_emval, "integerReadValueFromPointer": integerReadValueFromPointer, "makeLegalFunctionName": makeLegalFunctionName, "new_": new_, "readLatin1String": readLatin1String, "registerType": registerType, "replacePublicSymbol": replacePublicSymbol, "requireHandle": requireHandle, "requireRegisteredType": requireRegisteredType, "runDestructors": runDestructors, "simpleReadValueFromPointer": simpleReadValueFromPointer, "throwBindingError": throwBindingError, "throwInternalError": throwInternalError, "throwUnboundTypeError": throwUnboundTypeError, "whenDependentTypesAreResolved": whenDependentTypesAreResolved, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX };
// EMSCRIPTEN_START_ASM
var asm =Module["asm"]// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__F77_aloc = asm["_F77_aloc"]; asm["_F77_aloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__F77_aloc.apply(null, arguments);
};

var real___GLOBAL__I_000101 = asm["__GLOBAL__I_000101"]; asm["__GLOBAL__I_000101"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__I_000101.apply(null, arguments);
};

var real___GLOBAL__sub_I_bind_cpp = asm["__GLOBAL__sub_I_bind_cpp"]; asm["__GLOBAL__sub_I_bind_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_bind_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_iostream_cpp = asm["__GLOBAL__sub_I_iostream_cpp"]; asm["__GLOBAL__sub_I_iostream_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_iostream_cpp.apply(null, arguments);
};

var real___GLOBAL__sub_I_objectDetector1_cpp = asm["__GLOBAL__sub_I_objectDetector1_cpp"]; asm["__GLOBAL__sub_I_objectDetector1_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_objectDetector1_cpp.apply(null, arguments);
};

var real___Z11getClustersv = asm["__Z11getClustersv"]; asm["__Z11getClustersv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Z11getClustersv.apply(null, arguments);
};

var real___Z11setImgFrontN10emscripten3valE = asm["__Z11setImgFrontN10emscripten3valE"]; asm["__Z11setImgFrontN10emscripten3valE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Z11setImgFrontN10emscripten3valE.apply(null, arguments);
};

var real___Z13matrixToArrayN4arma3MatIdEE = asm["__Z13matrixToArrayN4arma3MatIdEE"]; asm["__Z13matrixToArrayN4arma3MatIdEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Z13matrixToArrayN4arma3MatIdEE.apply(null, arguments);
};

var real___Z17copyArrayInMatrixRN4arma3MatIdEEN10emscripten3valE = asm["__Z17copyArrayInMatrixRN4arma3MatIdEEN10emscripten3valE"]; asm["__Z17copyArrayInMatrixRN4arma3MatIdEEN10emscripten3valE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Z17copyArrayInMatrixRN4arma3MatIdEEN10emscripten3valE.apply(null, arguments);
};

var real___Z4initv = asm["__Z4initv"]; asm["__Z4initv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Z4initv.apply(null, arguments);
};

var real___Z7executev = asm["__Z7executev"]; asm["__Z7executev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Z7executev.apply(null, arguments);
};

var real___ZL13__DOUBLE_BITSd = asm["__ZL13__DOUBLE_BITSd"]; asm["__ZL13__DOUBLE_BITSd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZL13__DOUBLE_BITSd.apply(null, arguments);
};

var real___ZL25default_terminate_handlerv = asm["__ZL25default_terminate_handlerv"]; asm["__ZL25default_terminate_handlerv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZL25default_terminate_handlerv.apply(null, arguments);
};

var real___ZN10__cxxabiv112_GLOBAL__N_110construct_Ev = asm["__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev"]; asm["__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10__cxxabiv112_GLOBAL__N_110construct_Ev.apply(null, arguments);
};

var real___ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv = asm["__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv"]; asm["__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv.apply(null, arguments);
};

var real___ZN10__cxxabiv116__shim_type_infoD2Ev = asm["__ZN10__cxxabiv116__shim_type_infoD2Ev"]; asm["__ZN10__cxxabiv116__shim_type_infoD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10__cxxabiv116__shim_type_infoD2Ev.apply(null, arguments);
};

var real___ZN10__cxxabiv117__class_type_infoD0Ev = asm["__ZN10__cxxabiv117__class_type_infoD0Ev"]; asm["__ZN10__cxxabiv117__class_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10__cxxabiv117__class_type_infoD0Ev.apply(null, arguments);
};

var real___ZN10__cxxabiv120__si_class_type_infoD0Ev = asm["__ZN10__cxxabiv120__si_class_type_infoD0Ev"]; asm["__ZN10__cxxabiv120__si_class_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10__cxxabiv120__si_class_type_infoD0Ev.apply(null, arguments);
};

var real___ZN10__cxxabiv121__vmi_class_type_infoD0Ev = asm["__ZN10__cxxabiv121__vmi_class_type_infoD0Ev"]; asm["__ZN10__cxxabiv121__vmi_class_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10__cxxabiv121__vmi_class_type_infoD0Ev.apply(null, arguments);
};

var real___ZN10__cxxabiv123__fundamental_type_infoD0Ev = asm["__ZN10__cxxabiv123__fundamental_type_infoD0Ev"]; asm["__ZN10__cxxabiv123__fundamental_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10__cxxabiv123__fundamental_type_infoD0Ev.apply(null, arguments);
};

var real___ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b = asm["__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b"]; asm["__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b.apply(null, arguments);
};

var real___ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE = asm["__ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE"]; asm["__ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE.apply(null, arguments);
};

var real___ZN10emscripten3val3setIiEEvRKT_RKS0_ = asm["__ZN10emscripten3val3setIiEEvRKT_RKS0_"]; asm["__ZN10emscripten3val3setIiEEvRKT_RKS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten3val3setIiEEvRKT_RKS0_.apply(null, arguments);
};

var real___ZN10emscripten3val3setIidEEvRKT_RKT0_ = asm["__ZN10emscripten3val3setIidEEvRKT_RKT0_"]; asm["__ZN10emscripten3val3setIidEEvRKT_RKT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten3val3setIidEEvRKT_RKT0_.apply(null, arguments);
};

var real___ZN10emscripten3val5arrayEv = asm["__ZN10emscripten3val5arrayEv"]; asm["__ZN10emscripten3val5arrayEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten3val5arrayEv.apply(null, arguments);
};

var real___ZN10emscripten3valC2EPKc = asm["__ZN10emscripten3valC2EPKc"]; asm["__ZN10emscripten3valC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten3valC2EPKc.apply(null, arguments);
};

var real___ZN10emscripten3valC2EPNS_8internal7_EM_VALE = asm["__ZN10emscripten3valC2EPNS_8internal7_EM_VALE"]; asm["__ZN10emscripten3valC2EPNS_8internal7_EM_VALE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten3valC2EPNS_8internal7_EM_VALE.apply(null, arguments);
};

var real___ZN10emscripten3valC2ERKS0_ = asm["__ZN10emscripten3valC2ERKS0_"]; asm["__ZN10emscripten3valC2ERKS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten3valC2ERKS0_.apply(null, arguments);
};

var real___ZN10emscripten3valC2IRKdEEOT_ = asm["__ZN10emscripten3valC2IRKdEEOT_"]; asm["__ZN10emscripten3valC2IRKdEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten3valC2IRKdEEOT_.apply(null, arguments);
};

var real___ZN10emscripten3valC2IRKiEEOT_ = asm["__ZN10emscripten3valC2IRKiEEOT_"]; asm["__ZN10emscripten3valC2IRKiEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten3valC2IRKiEEOT_.apply(null, arguments);
};

var real___ZN10emscripten3valD2Ev = asm["__ZN10emscripten3valD2Ev"]; asm["__ZN10emscripten3valD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten3valD2Ev.apply(null, arguments);
};

var real___ZN10emscripten8functionINS_3valEJEJEEEvPKcPFT_DpT0_EDpT1_ = asm["__ZN10emscripten8functionINS_3valEJEJEEEvPKcPFT_DpT0_EDpT1_"]; asm["__ZN10emscripten8functionINS_3valEJEJEEEvPKcPFT_DpT0_EDpT1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8functionINS_3valEJEJEEEvPKcPFT_DpT0_EDpT1_.apply(null, arguments);
};

var real___ZN10emscripten8functionIvJEJEEEvPKcPFT_DpT0_EDpT1_ = asm["__ZN10emscripten8functionIvJEJEEEvPKcPFT_DpT0_EDpT1_"]; asm["__ZN10emscripten8functionIvJEJEEEvPKcPFT_DpT0_EDpT1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8functionIvJEJEEEvPKcPFT_DpT0_EDpT1_.apply(null, arguments);
};

var real___ZN10emscripten8functionIvJNS_3valEEJEEEvPKcPFT_DpT0_EDpT1_ = asm["__ZN10emscripten8functionIvJNS_3valEEJEEEvPKcPFT_DpT0_EDpT1_"]; asm["__ZN10emscripten8functionIvJNS_3valEEJEEEvPKcPFT_DpT0_EDpT1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8functionIvJNS_3valEEJEEEvPKcPFT_DpT0_EDpT1_.apply(null, arguments);
};

var real___ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_ = asm["__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_"]; asm["__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_.apply(null, arguments);
};

var real___ZN10emscripten8internal11BindingTypeINS_3valEE12fromWireTypeEPNS0_7_EM_VALE = asm["__ZN10emscripten8internal11BindingTypeINS_3valEE12fromWireTypeEPNS0_7_EM_VALE"]; asm["__ZN10emscripten8internal11BindingTypeINS_3valEE12fromWireTypeEPNS0_7_EM_VALE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11BindingTypeINS_3valEE12fromWireTypeEPNS0_7_EM_VALE.apply(null, arguments);
};

var real___ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd = asm["__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd"]; asm["__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd.apply(null, arguments);
};

var real___ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd = asm["__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd"]; asm["__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd.apply(null, arguments);
};

var real___ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi = asm["__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi"]; asm["__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi.apply(null, arguments);
};

var real___ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi = asm["__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi"]; asm["__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv = asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv = asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv = asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv = asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv = asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv = asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv = asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv = asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv = asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv = asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv = asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv = asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv = asm["__ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv = asm["__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv = asm["__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv = asm["__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDIRKdE3getEv = asm["__ZN10emscripten8internal11LightTypeIDIRKdE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDIRKdE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDIRKdE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDIRKiE3getEv = asm["__ZN10emscripten8internal11LightTypeIDIRKiE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDIRKiE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDIRKiE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDIaE3getEv = asm["__ZN10emscripten8internal11LightTypeIDIaE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDIaE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDIaE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDIbE3getEv = asm["__ZN10emscripten8internal11LightTypeIDIbE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDIbE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDIbE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDIcE3getEv = asm["__ZN10emscripten8internal11LightTypeIDIcE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDIcE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDIcE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDIdE3getEv = asm["__ZN10emscripten8internal11LightTypeIDIdE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDIdE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDIdE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDIfE3getEv = asm["__ZN10emscripten8internal11LightTypeIDIfE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDIfE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDIfE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDIhE3getEv = asm["__ZN10emscripten8internal11LightTypeIDIhE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDIhE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDIhE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDIiE3getEv = asm["__ZN10emscripten8internal11LightTypeIDIiE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDIiE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDIiE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDIjE3getEv = asm["__ZN10emscripten8internal11LightTypeIDIjE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDIjE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDIjE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDIlE3getEv = asm["__ZN10emscripten8internal11LightTypeIDIlE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDIlE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDIlE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDImE3getEv = asm["__ZN10emscripten8internal11LightTypeIDImE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDImE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDImE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDIsE3getEv = asm["__ZN10emscripten8internal11LightTypeIDIsE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDIsE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDIsE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDItE3getEv = asm["__ZN10emscripten8internal11LightTypeIDItE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDItE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDItE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal11LightTypeIDIvE3getEv = asm["__ZN10emscripten8internal11LightTypeIDIvE3getEv"]; asm["__ZN10emscripten8internal11LightTypeIDIvE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal11LightTypeIDIvE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal12WireTypePackIJRKdEEC2ES3_ = asm["__ZN10emscripten8internal12WireTypePackIJRKdEEC2ES3_"]; asm["__ZN10emscripten8internal12WireTypePackIJRKdEEC2ES3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal12WireTypePackIJRKdEEC2ES3_.apply(null, arguments);
};

var real___ZN10emscripten8internal12WireTypePackIJRKiEEC2ES3_ = asm["__ZN10emscripten8internal12WireTypePackIJRKiEEC2ES3_"]; asm["__ZN10emscripten8internal12WireTypePackIJRKiEEC2ES3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal12WireTypePackIJRKiEEC2ES3_.apply(null, arguments);
};

var real___ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valEEEEE3getEv = asm["__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valEEEEE3getEv"]; asm["__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valEEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valEEEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdEEEE3getEv = asm["__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdEEEE3getEv"]; asm["__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdEEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiEEEE3getEv = asm["__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiEEEE3getEv"]; asm["__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiEEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvEEEE3getEv = asm["__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvEEEE3getEv"]; asm["__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvEEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS_3valEEEEE3getEv = asm["__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS_3valEEEEE3getEv"]; asm["__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS_3valEEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS_3valEEEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal17DestructorsRunnerC2EPNS0_15_EM_DESTRUCTORSE = asm["__ZN10emscripten8internal17DestructorsRunnerC2EPNS0_15_EM_DESTRUCTORSE"]; asm["__ZN10emscripten8internal17DestructorsRunnerC2EPNS0_15_EM_DESTRUCTORSE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal17DestructorsRunnerC2EPNS0_15_EM_DESTRUCTORSE.apply(null, arguments);
};

var real___ZN10emscripten8internal17DestructorsRunnerD2Ev = asm["__ZN10emscripten8internal17DestructorsRunnerD2Ev"]; asm["__ZN10emscripten8internal17DestructorsRunnerD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal17DestructorsRunnerD2Ev.apply(null, arguments);
};

var real___ZN10emscripten8internal19fromGenericWireTypeIdEET_d = asm["__ZN10emscripten8internal19fromGenericWireTypeIdEET_d"]; asm["__ZN10emscripten8internal19fromGenericWireTypeIdEET_d"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal19fromGenericWireTypeIdEET_d.apply(null, arguments);
};

var real___ZN10emscripten8internal19fromGenericWireTypeIiEET_d = asm["__ZN10emscripten8internal19fromGenericWireTypeIiEET_d"]; asm["__ZN10emscripten8internal19fromGenericWireTypeIiEET_d"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal19fromGenericWireTypeIiEET_d.apply(null, arguments);
};

var real___ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv = asm["__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv"]; asm["__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv.apply(null, arguments);
};

var real___ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv = asm["__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv"]; asm["__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv.apply(null, arguments);
};

var real___ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv = asm["__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv"]; asm["__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv.apply(null, arguments);
};

var real___ZN10emscripten8internal20writeGenericWireTypeERPNS0_15GenericWireTypeEd = asm["__ZN10emscripten8internal20writeGenericWireTypeERPNS0_15GenericWireTypeEd"]; asm["__ZN10emscripten8internal20writeGenericWireTypeERPNS0_15GenericWireTypeEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal20writeGenericWireTypeERPNS0_15GenericWireTypeEd.apply(null, arguments);
};

var real___ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_ = asm["__ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_"]; asm["__ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_.apply(null, arguments);
};

var real___ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE = asm["__ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE"]; asm["__ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE.apply(null, arguments);
};

var real___ZN10emscripten8internal24GenericWireTypeConverterIdE4fromEd = asm["__ZN10emscripten8internal24GenericWireTypeConverterIdE4fromEd"]; asm["__ZN10emscripten8internal24GenericWireTypeConverterIdE4fromEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal24GenericWireTypeConverterIdE4fromEd.apply(null, arguments);
};

var real___ZN10emscripten8internal24GenericWireTypeConverterIiE4fromEd = asm["__ZN10emscripten8internal24GenericWireTypeConverterIiE4fromEd"]; asm["__ZN10emscripten8internal24GenericWireTypeConverterIiE4fromEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal24GenericWireTypeConverterIiE4fromEd.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv = asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv"]; asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv = asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv"]; asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv = asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv"]; asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv = asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv"]; asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv = asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv"]; asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv = asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv"]; asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv = asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv"]; asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv = asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv"]; asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv = asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv"]; asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv = asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv"]; asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv = asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv"]; asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv = asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv"]; asm["__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDINS_3valEE3getEv = asm["__ZN10emscripten8internal6TypeIDINS_3valEE3getEv"]; asm["__ZN10emscripten8internal6TypeIDINS_3valEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDINS_3valEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv = asm["__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv"]; asm["__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv = asm["__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv"]; asm["__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv = asm["__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv"]; asm["__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDIRKdE3getEv = asm["__ZN10emscripten8internal6TypeIDIRKdE3getEv"]; asm["__ZN10emscripten8internal6TypeIDIRKdE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDIRKdE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDIRKiE3getEv = asm["__ZN10emscripten8internal6TypeIDIRKiE3getEv"]; asm["__ZN10emscripten8internal6TypeIDIRKiE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDIRKiE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDIaE3getEv = asm["__ZN10emscripten8internal6TypeIDIaE3getEv"]; asm["__ZN10emscripten8internal6TypeIDIaE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDIaE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDIbE3getEv = asm["__ZN10emscripten8internal6TypeIDIbE3getEv"]; asm["__ZN10emscripten8internal6TypeIDIbE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDIbE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDIcE3getEv = asm["__ZN10emscripten8internal6TypeIDIcE3getEv"]; asm["__ZN10emscripten8internal6TypeIDIcE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDIcE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDIdE3getEv = asm["__ZN10emscripten8internal6TypeIDIdE3getEv"]; asm["__ZN10emscripten8internal6TypeIDIdE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDIdE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDIfE3getEv = asm["__ZN10emscripten8internal6TypeIDIfE3getEv"]; asm["__ZN10emscripten8internal6TypeIDIfE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDIfE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDIhE3getEv = asm["__ZN10emscripten8internal6TypeIDIhE3getEv"]; asm["__ZN10emscripten8internal6TypeIDIhE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDIhE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDIiE3getEv = asm["__ZN10emscripten8internal6TypeIDIiE3getEv"]; asm["__ZN10emscripten8internal6TypeIDIiE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDIiE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDIjE3getEv = asm["__ZN10emscripten8internal6TypeIDIjE3getEv"]; asm["__ZN10emscripten8internal6TypeIDIjE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDIjE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDIlE3getEv = asm["__ZN10emscripten8internal6TypeIDIlE3getEv"]; asm["__ZN10emscripten8internal6TypeIDIlE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDIlE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDImE3getEv = asm["__ZN10emscripten8internal6TypeIDImE3getEv"]; asm["__ZN10emscripten8internal6TypeIDImE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDImE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDIsE3getEv = asm["__ZN10emscripten8internal6TypeIDIsE3getEv"]; asm["__ZN10emscripten8internal6TypeIDIsE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDIsE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDItE3getEv = asm["__ZN10emscripten8internal6TypeIDItE3getEv"]; asm["__ZN10emscripten8internal6TypeIDItE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDItE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal6TypeIDIvE3getEv = asm["__ZN10emscripten8internal6TypeIDIvE3getEv"]; asm["__ZN10emscripten8internal6TypeIDIvE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal6TypeIDIvE3getEv.apply(null, arguments);
};

var real___ZN10emscripten8internal7InvokerINS_3valEJEE6invokeEPFS2_vE = asm["__ZN10emscripten8internal7InvokerINS_3valEJEE6invokeEPFS2_vE"]; asm["__ZN10emscripten8internal7InvokerINS_3valEJEE6invokeEPFS2_vE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal7InvokerINS_3valEJEE6invokeEPFS2_vE.apply(null, arguments);
};

var real___ZN10emscripten8internal7InvokerIvJEE6invokeEPFvvE = asm["__ZN10emscripten8internal7InvokerIvJEE6invokeEPFvvE"]; asm["__ZN10emscripten8internal7InvokerIvJEE6invokeEPFvvE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal7InvokerIvJEE6invokeEPFvvE.apply(null, arguments);
};

var real___ZN10emscripten8internal7InvokerIvJNS_3valEEE6invokeEPFvS2_EPNS0_7_EM_VALE = asm["__ZN10emscripten8internal7InvokerIvJNS_3valEEE6invokeEPFvS2_EPNS0_7_EM_VALE"]; asm["__ZN10emscripten8internal7InvokerIvJNS_3valEEE6invokeEPFvS2_EPNS0_7_EM_VALE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN10emscripten8internal7InvokerIvJNS_3valEEE6invokeEPFvS2_EPNS0_7_EM_VALE.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv = asm["__ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv"]; asm["__ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv = asm["__ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv"]; asm["__ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv = asm["__ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv"]; asm["__ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv = asm["__ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv"]; asm["__ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv = asm["__ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv"]; asm["__ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv = asm["__ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv"]; asm["__ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv = asm["__ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv"]; asm["__ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv = asm["__ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv"]; asm["__ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv = asm["__ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv"]; asm["__ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv = asm["__ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv"]; asm["__ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv = asm["__ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv"]; asm["__ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv = asm["__ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv"]; asm["__ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_1L14register_floatIdEEvPKc = asm["__ZN12_GLOBAL__N_1L14register_floatIdEEvPKc"]; asm["__ZN12_GLOBAL__N_1L14register_floatIdEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_1L14register_floatIdEEvPKc.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_1L14register_floatIfEEvPKc = asm["__ZN12_GLOBAL__N_1L14register_floatIfEEvPKc"]; asm["__ZN12_GLOBAL__N_1L14register_floatIfEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_1L14register_floatIfEEvPKc.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_1L16register_integerIaEEvPKc = asm["__ZN12_GLOBAL__N_1L16register_integerIaEEvPKc"]; asm["__ZN12_GLOBAL__N_1L16register_integerIaEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_1L16register_integerIaEEvPKc.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_1L16register_integerIcEEvPKc = asm["__ZN12_GLOBAL__N_1L16register_integerIcEEvPKc"]; asm["__ZN12_GLOBAL__N_1L16register_integerIcEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_1L16register_integerIcEEvPKc.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_1L16register_integerIhEEvPKc = asm["__ZN12_GLOBAL__N_1L16register_integerIhEEvPKc"]; asm["__ZN12_GLOBAL__N_1L16register_integerIhEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_1L16register_integerIhEEvPKc.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_1L16register_integerIiEEvPKc = asm["__ZN12_GLOBAL__N_1L16register_integerIiEEvPKc"]; asm["__ZN12_GLOBAL__N_1L16register_integerIiEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_1L16register_integerIiEEvPKc.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_1L16register_integerIjEEvPKc = asm["__ZN12_GLOBAL__N_1L16register_integerIjEEvPKc"]; asm["__ZN12_GLOBAL__N_1L16register_integerIjEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_1L16register_integerIjEEvPKc.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_1L16register_integerIlEEvPKc = asm["__ZN12_GLOBAL__N_1L16register_integerIlEEvPKc"]; asm["__ZN12_GLOBAL__N_1L16register_integerIlEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_1L16register_integerIlEEvPKc.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_1L16register_integerImEEvPKc = asm["__ZN12_GLOBAL__N_1L16register_integerImEEvPKc"]; asm["__ZN12_GLOBAL__N_1L16register_integerImEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_1L16register_integerImEEvPKc.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_1L16register_integerIsEEvPKc = asm["__ZN12_GLOBAL__N_1L16register_integerIsEEvPKc"]; asm["__ZN12_GLOBAL__N_1L16register_integerIsEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_1L16register_integerIsEEvPKc.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_1L16register_integerItEEvPKc = asm["__ZN12_GLOBAL__N_1L16register_integerItEEvPKc"]; asm["__ZN12_GLOBAL__N_1L16register_integerItEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_1L16register_integerItEEvPKc.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc = asm["__ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc"]; asm["__ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc = asm["__ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc"]; asm["__ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc = asm["__ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc"]; asm["__ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc = asm["__ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc"]; asm["__ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc = asm["__ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc"]; asm["__ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc = asm["__ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc"]; asm["__ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc = asm["__ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc"]; asm["__ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc = asm["__ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc"]; asm["__ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc = asm["__ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc"]; asm["__ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc = asm["__ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc"]; asm["__ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc = asm["__ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc"]; asm["__ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc.apply(null, arguments);
};

var real___ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc = asm["__ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc"]; asm["__ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc.apply(null, arguments);
};

var real___ZN25detection_objectDetector14initEv = asm["__ZN25detection_objectDetector14initEv"]; asm["__ZN25detection_objectDetector14initEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN25detection_objectDetector14initEv.apply(null, arguments);
};

var real___ZN25detection_objectDetector17executeEv = asm["__ZN25detection_objectDetector17executeEv"]; asm["__ZN25detection_objectDetector17executeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN25detection_objectDetector17executeEv.apply(null, arguments);
};

var real___ZN25detection_objectDetector1C2Ev = asm["__ZN25detection_objectDetector1C2Ev"]; asm["__ZN25detection_objectDetector1C2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN25detection_objectDetector1C2Ev.apply(null, arguments);
};

var real___ZN38EmscriptenBindingInitializer_my_moduleC2Ev = asm["__ZN38EmscriptenBindingInitializer_my_moduleC2Ev"]; asm["__ZN38EmscriptenBindingInitializer_my_moduleC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN38EmscriptenBindingInitializer_my_moduleC2Ev.apply(null, arguments);
};

var real___ZN43detection_objectDetector1_spectralClusterer4initEv = asm["__ZN43detection_objectDetector1_spectralClusterer4initEv"]; asm["__ZN43detection_objectDetector1_spectralClusterer4initEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN43detection_objectDetector1_spectralClusterer4initEv.apply(null, arguments);
};

var real___ZN43detection_objectDetector1_spectralClusterer7executeEv = asm["__ZN43detection_objectDetector1_spectralClusterer7executeEv"]; asm["__ZN43detection_objectDetector1_spectralClusterer7executeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN43detection_objectDetector1_spectralClusterer7executeEv.apply(null, arguments);
};

var real___ZN43detection_objectDetector1_spectralClustererC2Ev = asm["__ZN43detection_objectDetector1_spectralClustererC2Ev"]; asm["__ZN43detection_objectDetector1_spectralClustererC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN43detection_objectDetector1_spectralClustererC2Ev.apply(null, arguments);
};

var real___ZN4arma10arma_checkIA21_cEEvbRKT_ = asm["__ZN4arma10arma_checkIA21_cEEvbRKT_"]; asm["__ZN4arma10arma_checkIA21_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10arma_checkIA21_cEEvbRKT_.apply(null, arguments);
};

var real___ZN4arma10arma_checkIA27_cEEvbRKT_ = asm["__ZN4arma10arma_checkIA27_cEEvbRKT_"]; asm["__ZN4arma10arma_checkIA27_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10arma_checkIA27_cEEvbRKT_.apply(null, arguments);
};

var real___ZN4arma10arma_checkIA28_cEEvbRKT_ = asm["__ZN4arma10arma_checkIA28_cEEvbRKT_"]; asm["__ZN4arma10arma_checkIA28_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10arma_checkIA28_cEEvbRKT_.apply(null, arguments);
};

var real___ZN4arma10arma_checkIA31_cEEvbRKT_ = asm["__ZN4arma10arma_checkIA31_cEEvbRKT_"]; asm["__ZN4arma10arma_checkIA31_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10arma_checkIA31_cEEvbRKT_.apply(null, arguments);
};

var real___ZN4arma10arma_checkIA32_cEEvbRKT_ = asm["__ZN4arma10arma_checkIA32_cEEvbRKT_"]; asm["__ZN4arma10arma_checkIA32_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10arma_checkIA32_cEEvbRKT_.apply(null, arguments);
};

var real___ZN4arma10arma_checkIA33_cEEvbRKT_ = asm["__ZN4arma10arma_checkIA33_cEEvbRKT_"]; asm["__ZN4arma10arma_checkIA33_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10arma_checkIA33_cEEvbRKT_.apply(null, arguments);
};

var real___ZN4arma10arma_checkIA36_cEEvbRKT_ = asm["__ZN4arma10arma_checkIA36_cEEvbRKT_"]; asm["__ZN4arma10arma_checkIA36_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10arma_checkIA36_cEEvbRKT_.apply(null, arguments);
};

var real___ZN4arma10arma_checkIA37_cEEvbRKT_ = asm["__ZN4arma10arma_checkIA37_cEEvbRKT_"]; asm["__ZN4arma10arma_checkIA37_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10arma_checkIA37_cEEvbRKT_.apply(null, arguments);
};

var real___ZN4arma10arma_checkIA39_cEEvbRKT_ = asm["__ZN4arma10arma_checkIA39_cEEvbRKT_"]; asm["__ZN4arma10arma_checkIA39_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10arma_checkIA39_cEEvbRKT_.apply(null, arguments);
};

var real___ZN4arma10arma_checkIA41_cEEvbRKT_ = asm["__ZN4arma10arma_checkIA41_cEEvbRKT_"]; asm["__ZN4arma10arma_checkIA41_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10arma_checkIA41_cEEvbRKT_.apply(null, arguments);
};

var real___ZN4arma10arma_checkIA42_cEEvbRKT_ = asm["__ZN4arma10arma_checkIA42_cEEvbRKT_"]; asm["__ZN4arma10arma_checkIA42_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10arma_checkIA42_cEEvbRKT_.apply(null, arguments);
};

var real___ZN4arma10arma_checkIA45_cEEvbRKT_ = asm["__ZN4arma10arma_checkIA45_cEEvbRKT_"]; asm["__ZN4arma10arma_checkIA45_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10arma_checkIA45_cEEvbRKT_.apply(null, arguments);
};

var real___ZN4arma10arma_checkIA53_cEEvbRKT_ = asm["__ZN4arma10arma_checkIA53_cEEvbRKT_"]; asm["__ZN4arma10arma_checkIA53_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10arma_checkIA53_cEEvbRKT_.apply(null, arguments);
};

var real___ZN4arma10arma_checkIA55_cEEvbRKT_ = asm["__ZN4arma10arma_checkIA55_cEEvbRKT_"]; asm["__ZN4arma10arma_checkIA55_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10arma_checkIA55_cEEvbRKT_.apply(null, arguments);
};

var real___ZN4arma10arma_checkIA64_cEEvbRKT_ = asm["__ZN4arma10arma_checkIA64_cEEvbRKT_"]; asm["__ZN4arma10arma_checkIA64_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10arma_checkIA64_cEEvbRKT_.apply(null, arguments);
};

var real___ZN4arma10arma_checkIA66_cEEvbRKT_ = asm["__ZN4arma10arma_checkIA66_cEEvbRKT_"]; asm["__ZN4arma10arma_checkIA66_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10arma_checkIA66_cEEvbRKT_.apply(null, arguments);
};

var real___ZN4arma10arma_checkIA74_cEEvbRKT_ = asm["__ZN4arma10arma_checkIA74_cEEvbRKT_"]; asm["__ZN4arma10arma_checkIA74_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10arma_checkIA74_cEEvbRKT_.apply(null, arguments);
};

var real___ZN4arma10arma_checkIPKcEEvbRKT_ = asm["__ZN4arma10arma_checkIPKcEEvbRKT_"]; asm["__ZN4arma10arma_checkIPKcEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10arma_checkIPKcEEvbRKT_.apply(null, arguments);
};

var real___ZN4arma10arma_checkIPcEEvbRKT_ = asm["__ZN4arma10arma_checkIPcEEvbRKT_"]; asm["__ZN4arma10arma_checkIPcEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10arma_checkIPcEEvbRKT_.apply(null, arguments);
};

var real___ZN4arma10glue_times5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS6_NS_9op_htransEEEEEvRNS2_INT_9elem_typeEEERKNS_4GlueISA_T0_S0_EE = asm["__ZN4arma10glue_times5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS6_NS_9op_htransEEEEEvRNS2_INT_9elem_typeEEERKNS_4GlueISA_T0_S0_EE"]; asm["__ZN4arma10glue_times5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS6_NS_9op_htransEEEEEvRNS2_INT_9elem_typeEEERKNS_4GlueISA_T0_S0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10glue_times5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS6_NS_9op_htransEEEEEvRNS2_INT_9elem_typeEEERKNS_4GlueISA_T0_S0_EE.apply(null, arguments);
};

var real___ZN4arma10glue_times5applyINS_3MatINSt3__27complexIdEEEES6_EEvRNS2_INT_9elem_typeEEERKNS_4GlueIS7_T0_S0_EE = asm["__ZN4arma10glue_times5applyINS_3MatINSt3__27complexIdEEEES6_EEvRNS2_INT_9elem_typeEEERKNS_4GlueIS7_T0_S0_EE"]; asm["__ZN4arma10glue_times5applyINS_3MatINSt3__27complexIdEEEES6_EEvRNS2_INT_9elem_typeEEERKNS_4GlueIS7_T0_S0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10glue_times5applyINS_3MatINSt3__27complexIdEEEES6_EEvRNS2_INT_9elem_typeEEERKNS_4GlueIS7_T0_S0_EE.apply(null, arguments);
};

var real___ZN4arma10glue_times5applyINS_4GlueINS_3MatIdEES4_S0_EES4_EEvRNS3_INT_9elem_typeEEERKNS2_IS6_T0_S0_EE = asm["__ZN4arma10glue_times5applyINS_4GlueINS_3MatIdEES4_S0_EES4_EEvRNS3_INT_9elem_typeEEERKNS2_IS6_T0_S0_EE"]; asm["__ZN4arma10glue_times5applyINS_4GlueINS_3MatIdEES4_S0_EES4_EEvRNS3_INT_9elem_typeEEERKNS2_IS6_T0_S0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10glue_times5applyINS_4GlueINS_3MatIdEES4_S0_EES4_EEvRNS3_INT_9elem_typeEEERKNS2_IS6_T0_S0_EE.apply(null, arguments);
};

var real___ZN4arma10glue_times5applyINSt3__27complexIdEELb0ELb0ELb0ENS_3MatIS4_EES6_EEvRNS5_IT_EERKT3_RKT4_S7_ = asm["__ZN4arma10glue_times5applyINSt3__27complexIdEELb0ELb0ELb0ENS_3MatIS4_EES6_EEvRNS5_IT_EERKT3_RKT4_S7_"]; asm["__ZN4arma10glue_times5applyINSt3__27complexIdEELb0ELb0ELb0ENS_3MatIS4_EES6_EEvRNS5_IT_EERKT3_RKT4_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10glue_times5applyINSt3__27complexIdEELb0ELb0ELb0ENS_3MatIS4_EES6_EEvRNS5_IT_EERKT3_RKT4_S7_.apply(null, arguments);
};

var real___ZN4arma10glue_times5applyINSt3__27complexIdEELb0ELb1ELb0ENS_3MatIS4_EES6_EEvRNS5_IT_EERKT3_RKT4_S7_ = asm["__ZN4arma10glue_times5applyINSt3__27complexIdEELb0ELb1ELb0ENS_3MatIS4_EES6_EEvRNS5_IT_EERKT3_RKT4_S7_"]; asm["__ZN4arma10glue_times5applyINSt3__27complexIdEELb0ELb1ELb0ENS_3MatIS4_EES6_EEvRNS5_IT_EERKT3_RKT4_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10glue_times5applyINSt3__27complexIdEELb0ELb1ELb0ENS_3MatIS4_EES6_EEvRNS5_IT_EERKT3_RKT4_S7_.apply(null, arguments);
};

var real___ZN4arma10glue_times5applyIdLb0ELb0ELb0ELb0ENS_3MatIdEES3_S3_EEvRNS2_IT_EERKT4_RKT5_RKT6_S4_ = asm["__ZN4arma10glue_times5applyIdLb0ELb0ELb0ELb0ENS_3MatIdEES3_S3_EEvRNS2_IT_EERKT4_RKT5_RKT6_S4_"]; asm["__ZN4arma10glue_times5applyIdLb0ELb0ELb0ELb0ENS_3MatIdEES3_S3_EEvRNS2_IT_EERKT4_RKT5_RKT6_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10glue_times5applyIdLb0ELb0ELb0ELb0ENS_3MatIdEES3_S3_EEvRNS2_IT_EERKT4_RKT5_RKT6_S4_.apply(null, arguments);
};

var real___ZN4arma10glue_times5applyIdLb0ELb0ELb0ENS_3MatIdEES3_EEvRNS2_IT_EERKT3_RKT4_S4_ = asm["__ZN4arma10glue_times5applyIdLb0ELb0ELb0ENS_3MatIdEES3_EEvRNS2_IT_EERKT3_RKT4_S4_"]; asm["__ZN4arma10glue_times5applyIdLb0ELb0ELb0ENS_3MatIdEES3_EEvRNS2_IT_EERKT3_RKT4_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10glue_times5applyIdLb0ELb0ELb0ENS_3MatIdEES3_EEvRNS2_IT_EERKT3_RKT4_S4_.apply(null, arguments);
};

var real___ZN4arma10op_sqrtmat12apply_directINS_3MatIdEEEEbRNS2_INSt3__27complexINT_9elem_typeEEEEERKNS_4BaseIS7_S6_EE = asm["__ZN4arma10op_sqrtmat12apply_directINS_3MatIdEEEEbRNS2_INSt3__27complexINT_9elem_typeEEEEERKNS_4BaseIS7_S6_EE"]; asm["__ZN4arma10op_sqrtmat12apply_directINS_3MatIdEEEEbRNS2_INSt3__27complexINT_9elem_typeEEEEERKNS_4BaseIS7_S6_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10op_sqrtmat12apply_directINS_3MatIdEEEEbRNS2_INSt3__27complexINT_9elem_typeEEEEERKNS_4BaseIS7_S6_EE.apply(null, arguments);
};

var real___ZN4arma10op_sqrtmat5applyINS_3MatIdEEEEvRNS2_INSt3__27complexINT_9elem_typeEEEEERKNS_4mtOpIS8_S6_S0_EE = asm["__ZN4arma10op_sqrtmat5applyINS_3MatIdEEEEvRNS2_INSt3__27complexINT_9elem_typeEEEEERKNS_4mtOpIS8_S6_S0_EE"]; asm["__ZN4arma10op_sqrtmat5applyINS_3MatIdEEEEvRNS2_INSt3__27complexINT_9elem_typeEEEEERKNS_4mtOpIS8_S6_S0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10op_sqrtmat5applyINS_3MatIdEEEEvRNS2_INSt3__27complexINT_9elem_typeEEEEERKNS_4mtOpIS8_S6_S0_EE.apply(null, arguments);
};

var real___ZN4arma10solve_opts14opts_no_approxC2Ev = asm["__ZN4arma10solve_opts14opts_no_approxC2Ev"]; asm["__ZN4arma10solve_opts14opts_no_approxC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10solve_opts14opts_no_approxC2Ev.apply(null, arguments);
};

var real___ZN4arma10solve_opts16opts_equilibrateC2Ev = asm["__ZN4arma10solve_opts16opts_equilibrateC2Ev"]; asm["__ZN4arma10solve_opts16opts_equilibrateC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10solve_opts16opts_equilibrateC2Ev.apply(null, arguments);
};

var real___ZN4arma10solve_opts4optsC2Ej = asm["__ZN4arma10solve_opts4optsC2Ej"]; asm["__ZN4arma10solve_opts4optsC2Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10solve_opts4optsC2Ej.apply(null, arguments);
};

var real___ZN4arma10solve_opts9opts_fastC2Ev = asm["__ZN4arma10solve_opts9opts_fastC2Ev"]; asm["__ZN4arma10solve_opts9opts_fastC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10solve_opts9opts_fastC2Ev.apply(null, arguments);
};

var real___ZN4arma10solve_opts9opts_noneC2Ev = asm["__ZN4arma10solve_opts9opts_noneC2Ev"]; asm["__ZN4arma10solve_opts9opts_noneC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10solve_opts9opts_noneC2Ev.apply(null, arguments);
};

var real___ZN4arma10solve_opts9opts_trilC2Ev = asm["__ZN4arma10solve_opts9opts_trilC2Ev"]; asm["__ZN4arma10solve_opts9opts_trilC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10solve_opts9opts_trilC2Ev.apply(null, arguments);
};

var real___ZN4arma10solve_opts9opts_triuC2Ev = asm["__ZN4arma10solve_opts9opts_triuC2Ev"]; asm["__ZN4arma10solve_opts9opts_triuC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma10solve_opts9opts_triuC2Ev.apply(null, arguments);
};

var real___ZN4arma11distr_paramC2Eii = asm["__ZN4arma11distr_paramC2Eii"]; asm["__ZN4arma11distr_paramC2Eii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma11distr_paramC2Eii.apply(null, arguments);
};

var real___ZN4arma11herk_helper40inplace_conj_copy_upper_tri_to_lower_triINSt3__27complexIdEEEEvRNS_3MatIT_EE = asm["__ZN4arma11herk_helper40inplace_conj_copy_upper_tri_to_lower_triINSt3__27complexIdEEEEvRNS_3MatIT_EE"]; asm["__ZN4arma11herk_helper40inplace_conj_copy_upper_tri_to_lower_triINSt3__27complexIdEEEEvRNS_3MatIT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma11herk_helper40inplace_conj_copy_upper_tri_to_lower_triINSt3__27complexIdEEEEvRNS_3MatIT_EE.apply(null, arguments);
};

var real___ZN4arma11subview_colIdEC2ERKNS_3MatIdEEj = asm["__ZN4arma11subview_colIdEC2ERKNS_3MatIdEEj"]; asm["__ZN4arma11subview_colIdEC2ERKNS_3MatIdEEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma11subview_colIdEC2ERKNS_3MatIdEEj.apply(null, arguments);
};

var real___ZN4arma11subview_colIdED2Ev = asm["__ZN4arma11subview_colIdED2Ev"]; asm["__ZN4arma11subview_colIdED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma11subview_colIdED2Ev.apply(null, arguments);
};

var real___ZN4arma11subview_colIdEaSERKS1_ = asm["__ZN4arma11subview_colIdEaSERKS1_"]; asm["__ZN4arma11subview_colIdEaSERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma11subview_colIdEaSERKS1_.apply(null, arguments);
};

var real___ZN4arma11subview_colIdEaSINS_3MatIdEEEEvRKNS_4BaseIdT_EE = asm["__ZN4arma11subview_colIdEaSINS_3MatIdEEEEvRKNS_4BaseIdT_EE"]; asm["__ZN4arma11subview_colIdEaSINS_3MatIdEEEEvRKNS_4BaseIdT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma11subview_colIdEaSINS_3MatIdEEEEvRKNS_4BaseIdT_EE.apply(null, arguments);
};

var real___ZN4arma11subview_colIjEC2ERKNS_3MatIjEEjjj = asm["__ZN4arma11subview_colIjEC2ERKNS_3MatIjEEjjj"]; asm["__ZN4arma11subview_colIjEC2ERKNS_3MatIjEEjjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma11subview_colIjEC2ERKNS_3MatIjEEjjj.apply(null, arguments);
};

var real___ZN4arma11subview_colIjED2Ev = asm["__ZN4arma11subview_colIjED2Ev"]; asm["__ZN4arma11subview_colIjED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma11subview_colIjED2Ev.apply(null, arguments);
};

var real___ZN4arma11subview_rowIdEC2ERKNS_3MatIdEEj = asm["__ZN4arma11subview_rowIdEC2ERKNS_3MatIdEEj"]; asm["__ZN4arma11subview_rowIdEC2ERKNS_3MatIdEEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma11subview_rowIdEC2ERKNS_3MatIdEEj.apply(null, arguments);
};

var real___ZN4arma11subview_rowIdED2Ev = asm["__ZN4arma11subview_rowIdED2Ev"]; asm["__ZN4arma11subview_rowIdED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma11subview_rowIdED2Ev.apply(null, arguments);
};

var real___ZN4arma11subview_rowIdEaSINS_3eOpIS1_NS_19eop_scalar_div_postEEEEEvRKNS_4BaseIdT_EE = asm["__ZN4arma11subview_rowIdEaSINS_3eOpIS1_NS_19eop_scalar_div_postEEEEEvRKNS_4BaseIdT_EE"]; asm["__ZN4arma11subview_rowIdEaSINS_3eOpIS1_NS_19eop_scalar_div_postEEEEEvRKNS_4BaseIdT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma11subview_rowIdEaSINS_3eOpIS1_NS_19eop_scalar_div_postEEEEEvRKNS_4BaseIdT_EE.apply(null, arguments);
};

var real___ZN4arma12arma_counterIdE5resetEv = asm["__ZN4arma12arma_counterIdE5resetEv"]; asm["__ZN4arma12arma_counterIdE5resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma12arma_counterIdE5resetEv.apply(null, arguments);
};

var real___ZN4arma12arma_counterIdEC2Ev = asm["__ZN4arma12arma_counterIdEC2Ev"]; asm["__ZN4arma12arma_counterIdEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma12arma_counterIdEC2Ev.apply(null, arguments);
};

var real___ZN4arma12arma_counterIdED2Ev = asm["__ZN4arma12arma_counterIdED2Ev"]; asm["__ZN4arma12arma_counterIdED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma12arma_counterIdED2Ev.apply(null, arguments);
};

var real___ZN4arma12arma_counterIdEppEi = asm["__ZN4arma12arma_counterIdEppEi"]; asm["__ZN4arma12arma_counterIdEppEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma12arma_counterIdEppEi.apply(null, arguments);
};

var real___ZN4arma12arma_counterIdEppEv = asm["__ZN4arma12arma_counterIdEppEv"]; asm["__ZN4arma12arma_counterIdEppEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma12arma_counterIdEppEv.apply(null, arguments);
};

var real___ZN4arma12arma_ostream13modify_streamIdEEiRNSt3__213basic_ostreamIcNS2_11char_traitsIcEEEEPKT_j = asm["__ZN4arma12arma_ostream13modify_streamIdEEiRNSt3__213basic_ostreamIcNS2_11char_traitsIcEEEEPKT_j"]; asm["__ZN4arma12arma_ostream13modify_streamIdEEiRNSt3__213basic_ostreamIcNS2_11char_traitsIcEEEEPKT_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma12arma_ostream13modify_streamIdEEiRNSt3__213basic_ostreamIcNS2_11char_traitsIcEEEEPKT_j.apply(null, arguments);
};

var real___ZN4arma12arma_ostream15print_elem_zeroIdEEvRNSt3__213basic_ostreamIcNS2_11char_traitsIcEEEEb = asm["__ZN4arma12arma_ostream15print_elem_zeroIdEEvRNSt3__213basic_ostreamIcNS2_11char_traitsIcEEEEb"]; asm["__ZN4arma12arma_ostream15print_elem_zeroIdEEvRNSt3__213basic_ostreamIcNS2_11char_traitsIcEEEEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma12arma_ostream15print_elem_zeroIdEEvRNSt3__213basic_ostreamIcNS2_11char_traitsIcEEEEb.apply(null, arguments);
};

var real___ZN4arma12arma_ostream5printIdEEvRNSt3__213basic_ostreamIcNS2_11char_traitsIcEEEERKNS_3MatIT_EEb = asm["__ZN4arma12arma_ostream5printIdEEvRNSt3__213basic_ostreamIcNS2_11char_traitsIcEEEERKNS_3MatIT_EEb"]; asm["__ZN4arma12arma_ostream5printIdEEvRNSt3__213basic_ostreamIcNS2_11char_traitsIcEEEERKNS_3MatIT_EEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma12arma_ostream5printIdEEvRNSt3__213basic_ostreamIcNS2_11char_traitsIcEEEERKNS_3MatIT_EEb.apply(null, arguments);
};

var real___ZN4arma12quasi_unwrapINS_3RowIdEEEC2ERKS2_ = asm["__ZN4arma12quasi_unwrapINS_3RowIdEEEC2ERKS2_"]; asm["__ZN4arma12quasi_unwrapINS_3RowIdEEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma12quasi_unwrapINS_3RowIdEEEC2ERKS2_.apply(null, arguments);
};

var real___ZN4arma12quasi_unwrapINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEEC2ERKS7_ = asm["__ZN4arma12quasi_unwrapINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEEC2ERKS7_"]; asm["__ZN4arma12quasi_unwrapINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEEC2ERKS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma12quasi_unwrapINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEEC2ERKS7_.apply(null, arguments);
};

var real___ZN4arma12quasi_unwrapINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEED2Ev = asm["__ZN4arma12quasi_unwrapINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEED2Ev"]; asm["__ZN4arma12quasi_unwrapINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma12quasi_unwrapINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEED2Ev.apply(null, arguments);
};

var real___ZN4arma12running_statIdE5resetEv = asm["__ZN4arma12running_statIdE5resetEv"]; asm["__ZN4arma12running_statIdE5resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma12running_statIdE5resetEv.apply(null, arguments);
};

var real___ZN4arma12running_statIdEC2Ev = asm["__ZN4arma12running_statIdEC2Ev"]; asm["__ZN4arma12running_statIdEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma12running_statIdEC2Ev.apply(null, arguments);
};

var real___ZN4arma12running_statIdED2Ev = asm["__ZN4arma12running_statIdED2Ev"]; asm["__ZN4arma12running_statIdED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma12running_statIdED2Ev.apply(null, arguments);
};

var real___ZN4arma12running_statIdEclEd = asm["__ZN4arma12running_statIdEclEd"]; asm["__ZN4arma12running_statIdEclEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma12running_statIdEclEd.apply(null, arguments);
};

var real___ZN4arma12unwrap_checkINS_3MatIdEEEC2ERKS2_b = asm["__ZN4arma12unwrap_checkINS_3MatIdEEEC2ERKS2_b"]; asm["__ZN4arma12unwrap_checkINS_3MatIdEEEC2ERKS2_b"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma12unwrap_checkINS_3MatIdEEEC2ERKS2_b.apply(null, arguments);
};

var real___ZN4arma12unwrap_checkINS_3MatIdEEED2Ev = asm["__ZN4arma12unwrap_checkINS_3MatIdEEED2Ev"]; asm["__ZN4arma12unwrap_checkINS_3MatIdEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma12unwrap_checkINS_3MatIdEEED2Ev.apply(null, arguments);
};

var real___ZN4arma12unwrap_checkINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEC2ERKS5_b = asm["__ZN4arma12unwrap_checkINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEC2ERKS5_b"]; asm["__ZN4arma12unwrap_checkINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEC2ERKS5_b"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma12unwrap_checkINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEC2ERKS5_b.apply(null, arguments);
};

var real___ZN4arma12unwrap_checkINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEED2Ev = asm["__ZN4arma12unwrap_checkINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEED2Ev"]; asm["__ZN4arma12unwrap_checkINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma12unwrap_checkINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEED2Ev.apply(null, arguments);
};

var real___ZN4arma13gmm_dist_euclC2Ev = asm["__ZN4arma13gmm_dist_euclC2Ev"]; asm["__ZN4arma13gmm_dist_euclC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma13gmm_dist_euclC2Ev.apply(null, arguments);
};

var real___ZN4arma13gmm_dist_mahaC2Ev = asm["__ZN4arma13gmm_dist_mahaC2Ev"]; asm["__ZN4arma13gmm_dist_mahaC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma13gmm_dist_mahaC2Ev.apply(null, arguments);
};

var real___ZN4arma13gmm_dist_modeC2Ej = asm["__ZN4arma13gmm_dist_modeC2Ej"]; asm["__ZN4arma13gmm_dist_modeC2Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma13gmm_dist_modeC2Ej.apply(null, arguments);
};

var real___ZN4arma13gmm_dist_probC2Ev = asm["__ZN4arma13gmm_dist_probC2Ev"]; asm["__ZN4arma13gmm_dist_probC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma13gmm_dist_probC2Ev.apply(null, arguments);
};

var real___ZN4arma13gmm_seed_modeC2Ej = asm["__ZN4arma13gmm_seed_modeC2Ej"]; asm["__ZN4arma13gmm_seed_modeC2Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma13gmm_seed_modeC2Ej.apply(null, arguments);
};

var real___ZN4arma13op_sort_index13apply_noaliasINS_3GenINS_3ColIdEENS_9gen_randuEEEEEbRNS_3MatIjEERKNS_5ProxyIT_EEj = asm["__ZN4arma13op_sort_index13apply_noaliasINS_3GenINS_3ColIdEENS_9gen_randuEEEEEbRNS_3MatIjEERKNS_5ProxyIT_EEj"]; asm["__ZN4arma13op_sort_index13apply_noaliasINS_3GenINS_3ColIdEENS_9gen_randuEEEEEbRNS_3MatIjEERKNS_5ProxyIT_EEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma13op_sort_index13apply_noaliasINS_3GenINS_3ColIdEENS_9gen_randuEEEEEbRNS_3MatIjEERKNS_5ProxyIT_EEj.apply(null, arguments);
};

var real___ZN4arma13op_sort_index5applyINS_3GenINS_3ColIdEENS_9gen_randuEEEEEvRNS_3MatIjEERKNS_4mtOpIjT_S0_EE = asm["__ZN4arma13op_sort_index5applyINS_3GenINS_3ColIdEENS_9gen_randuEEEEEvRNS_3MatIjEERKNS_4mtOpIjT_S0_EE"]; asm["__ZN4arma13op_sort_index5applyINS_3GenINS_3ColIdEENS_9gen_randuEEEEEvRNS_3MatIjEERKNS_4mtOpIjT_S0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma13op_sort_index5applyINS_3GenINS_3ColIdEENS_9gen_randuEEEEEvRNS_3MatIjEERKNS_4mtOpIjT_S0_EE.apply(null, arguments);
};

var real___ZN4arma13op_sqrtmat_cx6helperIdEEbRNS_3MatINSt3__27complexIT_EEEE = asm["__ZN4arma13op_sqrtmat_cx6helperIdEEbRNS_3MatINSt3__27complexIT_EEEE"]; asm["__ZN4arma13op_sqrtmat_cx6helperIdEEbRNS_3MatINSt3__27complexIT_EEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma13op_sqrtmat_cx6helperIdEEbRNS_3MatINSt3__27complexIT_EEEE.apply(null, arguments);
};

var real___ZN4arma13strip_diagmatINS_3MatIdEEEC2ERKS2_ = asm["__ZN4arma13strip_diagmatINS_3MatIdEEEC2ERKS2_"]; asm["__ZN4arma13strip_diagmatINS_3MatIdEEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma13strip_diagmatINS_3MatIdEEEC2ERKS2_.apply(null, arguments);
};

var real___ZN4arma13subview_elem2IdNS_3MatIjEES2_E7extractERNS1_IdEERKS3_ = asm["__ZN4arma13subview_elem2IdNS_3MatIjEES2_E7extractERNS1_IdEERKS3_"]; asm["__ZN4arma13subview_elem2IdNS_3MatIjEES2_E7extractERNS1_IdEERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma13subview_elem2IdNS_3MatIjEES2_E7extractERNS1_IdEERKS3_.apply(null, arguments);
};

var real___ZN4arma13subview_elem2IdNS_3MatIjEES2_ED2Ev = asm["__ZN4arma13subview_elem2IdNS_3MatIjEES2_ED2Ev"]; asm["__ZN4arma13subview_elem2IdNS_3MatIjEES2_ED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma13subview_elem2IdNS_3MatIjEES2_ED2Ev.apply(null, arguments);
};

var real___ZN4arma14arma_rng_cxx9810randi_fillIjEEvPT_jii = asm["__ZN4arma14arma_rng_cxx9810randi_fillIjEEvPT_jii"]; asm["__ZN4arma14arma_rng_cxx9810randi_fillIjEEvPT_jii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma14arma_rng_cxx9810randi_fillIjEEvPT_jii.apply(null, arguments);
};

var real___ZN4arma14arma_rng_cxx9813randi_max_valEv = asm["__ZN4arma14arma_rng_cxx9813randi_max_valEv"]; asm["__ZN4arma14arma_rng_cxx9813randi_max_valEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma14arma_rng_cxx9813randi_max_valEv.apply(null, arguments);
};

var real___ZN4arma14op_find_simple5applyINS_4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEEEEvRNS_3MatIjEERKNS2_IjT_S0_EE = asm["__ZN4arma14op_find_simple5applyINS_4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEEEEvRNS_3MatIjEERKNS2_IjT_S0_EE"]; asm["__ZN4arma14op_find_simple5applyINS_4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEEEEvRNS_3MatIjEERKNS2_IjT_S0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma14op_find_simple5applyINS_4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEEEEvRNS_3MatIjEERKNS2_IjT_S0_EE.apply(null, arguments);
};

var real___ZN4arma14op_find_simple5applyINS_4mtOpIjNS_3RowIjEENS_9op_rel_eqEEEEEvRNS_3MatIjEERKNS2_IjT_S0_EE = asm["__ZN4arma14op_find_simple5applyINS_4mtOpIjNS_3RowIjEENS_9op_rel_eqEEEEEvRNS_3MatIjEERKNS2_IjT_S0_EE"]; asm["__ZN4arma14op_find_simple5applyINS_4mtOpIjNS_3RowIjEENS_9op_rel_eqEEEEEvRNS_3MatIjEERKNS2_IjT_S0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma14op_find_simple5applyINS_4mtOpIjNS_3RowIjEENS_9op_rel_eqEEEEEvRNS_3MatIjEERKNS2_IjT_S0_EE.apply(null, arguments);
};

var real___ZN4arma14partial_unwrapINS_2OpINS_3MatINSt3__27complexIdEEEENS_9op_htransEEEEC2ERKS8_ = asm["__ZN4arma14partial_unwrapINS_2OpINS_3MatINSt3__27complexIdEEEENS_9op_htransEEEEC2ERKS8_"]; asm["__ZN4arma14partial_unwrapINS_2OpINS_3MatINSt3__27complexIdEEEENS_9op_htransEEEEC2ERKS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma14partial_unwrapINS_2OpINS_3MatINSt3__27complexIdEEEENS_9op_htransEEEEC2ERKS8_.apply(null, arguments);
};

var real___ZN4arma14partial_unwrapINS_3MatINSt3__27complexIdEEEEEC2ERKS5_ = asm["__ZN4arma14partial_unwrapINS_3MatINSt3__27complexIdEEEEEC2ERKS5_"]; asm["__ZN4arma14partial_unwrapINS_3MatINSt3__27complexIdEEEEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma14partial_unwrapINS_3MatINSt3__27complexIdEEEEEC2ERKS5_.apply(null, arguments);
};

var real___ZN4arma14partial_unwrapINS_3MatIdEEEC2ERKS2_ = asm["__ZN4arma14partial_unwrapINS_3MatIdEEEC2ERKS2_"]; asm["__ZN4arma14partial_unwrapINS_3MatIdEEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma14partial_unwrapINS_3MatIdEEEC2ERKS2_.apply(null, arguments);
};

var real___ZN4arma14unwrap_defaultINS_2OpINS_3MatIdEENS_9op_htransEEEEC2ERKS5_ = asm["__ZN4arma14unwrap_defaultINS_2OpINS_3MatIdEENS_9op_htransEEEEC2ERKS5_"]; asm["__ZN4arma14unwrap_defaultINS_2OpINS_3MatIdEENS_9op_htransEEEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma14unwrap_defaultINS_2OpINS_3MatIdEENS_9op_htransEEEEC2ERKS5_.apply(null, arguments);
};

var real___ZN4arma14unwrap_defaultINS_2OpINS_3MatIdEENS_9op_htransEEEED2Ev = asm["__ZN4arma14unwrap_defaultINS_2OpINS_3MatIdEENS_9op_htransEEEED2Ev"]; asm["__ZN4arma14unwrap_defaultINS_2OpINS_3MatIdEENS_9op_htransEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma14unwrap_defaultINS_2OpINS_3MatIdEENS_9op_htransEEEED2Ev.apply(null, arguments);
};

var real___ZN4arma15get_cerr_streamEv = asm["__ZN4arma15get_cerr_streamEv"]; asm["__ZN4arma15get_cerr_streamEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma15get_cerr_streamEv.apply(null, arguments);
};

var real___ZN4arma15get_cout_streamEv = asm["__ZN4arma15get_cout_streamEv"]; asm["__ZN4arma15get_cout_streamEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma15get_cout_streamEv.apply(null, arguments);
};

var real___ZN4arma15op_sort_default5applyINS_4mtOpIjNS2_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEEEvRNS_3MatINT_9elem_typeEEERKNS_2OpISA_S0_EE = asm["__ZN4arma15op_sort_default5applyINS_4mtOpIjNS2_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEEEvRNS_3MatINT_9elem_typeEEERKNS_2OpISA_S0_EE"]; asm["__ZN4arma15op_sort_default5applyINS_4mtOpIjNS2_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEEEvRNS_3MatINT_9elem_typeEEERKNS_2OpISA_S0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma15op_sort_default5applyINS_4mtOpIjNS2_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEEEvRNS_3MatINT_9elem_typeEEERKNS_2OpISA_S0_EE.apply(null, arguments);
};

var real___ZN4arma16arma_cerr_streamIcEERNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEEPS5_ = asm["__ZN4arma16arma_cerr_streamIcEERNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEEPS5_"]; asm["__ZN4arma16arma_cerr_streamIcEERNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEEPS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma16arma_cerr_streamIcEERNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEEPS5_.apply(null, arguments);
};

var real___ZN4arma16arma_cout_streamIcEERNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEEPS5_ = asm["__ZN4arma16arma_cout_streamIcEERNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEEPS5_"]; asm["__ZN4arma16arma_cout_streamIcEERNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEEPS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma16arma_cout_streamIcEERNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEEPS5_.apply(null, arguments);
};

var real___ZN4arma16gemm_emul_tinysqILb0ELb0ELb0EE5applyINSt3__27complexIdEENS_3MatIS5_EES7_EEvRNS6_IT_EERKT0_RKT1_S8_S8_ = asm["__ZN4arma16gemm_emul_tinysqILb0ELb0ELb0EE5applyINSt3__27complexIdEENS_3MatIS5_EES7_EEvRNS6_IT_EERKT0_RKT1_S8_S8_"]; asm["__ZN4arma16gemm_emul_tinysqILb0ELb0ELb0EE5applyINSt3__27complexIdEENS_3MatIS5_EES7_EEvRNS6_IT_EERKT0_RKT1_S8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma16gemm_emul_tinysqILb0ELb0ELb0EE5applyINSt3__27complexIdEENS_3MatIS5_EES7_EEvRNS6_IT_EERKT0_RKT1_S8_S8_.apply(null, arguments);
};

var real___ZN4arma16gemm_emul_tinysqILb0ELb0ELb0EE5applyIdNS_3MatIdEES4_EEvRNS3_IT_EERKT0_RKT1_S5_S5_ = asm["__ZN4arma16gemm_emul_tinysqILb0ELb0ELb0EE5applyIdNS_3MatIdEES4_EEvRNS3_IT_EERKT0_RKT1_S5_S5_"]; asm["__ZN4arma16gemm_emul_tinysqILb0ELb0ELb0EE5applyIdNS_3MatIdEES4_EEvRNS3_IT_EERKT0_RKT1_S5_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma16gemm_emul_tinysqILb0ELb0ELb0EE5applyIdNS_3MatIdEES4_EEvRNS3_IT_EERKT0_RKT1_S5_S5_.apply(null, arguments);
};

var real___ZN4arma16gemv_emul_tinysqILb0ELb0ELb0EE5applyINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_ = asm["__ZN4arma16gemv_emul_tinysqILb0ELb0ELb0EE5applyINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_"]; asm["__ZN4arma16gemv_emul_tinysqILb0ELb0ELb0EE5applyINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma16gemv_emul_tinysqILb0ELb0ELb0EE5applyINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_.apply(null, arguments);
};

var real___ZN4arma16gemv_emul_tinysqILb0ELb0ELb0EE5applyIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_ = asm["__ZN4arma16gemv_emul_tinysqILb0ELb0ELb0EE5applyIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_"]; asm["__ZN4arma16gemv_emul_tinysqILb0ELb0ELb0EE5applyIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma16gemv_emul_tinysqILb0ELb0ELb0EE5applyIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_.apply(null, arguments);
};

var real___ZN4arma16gemv_emul_tinysqILb1ELb0ELb0EE5applyINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_ = asm["__ZN4arma16gemv_emul_tinysqILb1ELb0ELb0EE5applyINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_"]; asm["__ZN4arma16gemv_emul_tinysqILb1ELb0ELb0EE5applyINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma16gemv_emul_tinysqILb1ELb0ELb0EE5applyINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_.apply(null, arguments);
};

var real___ZN4arma16gemv_emul_tinysqILb1ELb0ELb0EE5applyIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_ = asm["__ZN4arma16gemv_emul_tinysqILb1ELb0ELb0EE5applyIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_"]; asm["__ZN4arma16gemv_emul_tinysqILb1ELb0ELb0EE5applyIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma16gemv_emul_tinysqILb1ELb0ELb0EE5applyIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_.apply(null, arguments);
};

var real___ZN4arma16running_stat_aux12update_statsIdEEvRNS_12running_statIT_EES3_PKNS_11arma_not_cxIS3_E6resultE = asm["__ZN4arma16running_stat_aux12update_statsIdEEvRNS_12running_statIT_EES3_PKNS_11arma_not_cxIS3_E6resultE"]; asm["__ZN4arma16running_stat_aux12update_statsIdEEvRNS_12running_statIT_EES3_PKNS_11arma_not_cxIS3_E6resultE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma16running_stat_aux12update_statsIdEEvRNS_12running_statIT_EES3_PKNS_11arma_not_cxIS3_E6resultE.apply(null, arguments);
};

var real___ZN4arma17accu_proxy_linearINS_11subview_rowIdEEEENT_9elem_typeERKNS_5ProxyIS3_EE = asm["__ZN4arma17accu_proxy_linearINS_11subview_rowIdEEEENT_9elem_typeERKNS_5ProxyIS3_EE"]; asm["__ZN4arma17accu_proxy_linearINS_11subview_rowIdEEEENT_9elem_typeERKNS_5ProxyIS3_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma17accu_proxy_linearINS_11subview_rowIdEEEENT_9elem_typeERKNS_5ProxyIS3_EE.apply(null, arguments);
};

var real___ZN4arma18arma_ostream_stateC2ERKNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEE = asm["__ZN4arma18arma_ostream_stateC2ERKNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEE"]; asm["__ZN4arma18arma_ostream_stateC2ERKNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma18arma_ostream_stateC2ERKNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEE.apply(null, arguments);
};

var real___ZN4arma18unwrap_check_mixedINS_3MatIjEEEC2IdEERKS2_RKNS1_IT_EE = asm["__ZN4arma18unwrap_check_mixedINS_3MatIjEEEC2IdEERKS2_RKNS1_IT_EE"]; asm["__ZN4arma18unwrap_check_mixedINS_3MatIjEEEC2IdEERKS2_RKNS1_IT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma18unwrap_check_mixedINS_3MatIjEEEC2IdEERKS2_RKNS1_IT_EE.apply(null, arguments);
};

var real___ZN4arma18unwrap_check_mixedINS_3MatIjEEED2Ev = asm["__ZN4arma18unwrap_check_mixedINS_3MatIjEEED2Ev"]; asm["__ZN4arma18unwrap_check_mixedINS_3MatIjEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma18unwrap_check_mixedINS_3MatIjEEED2Ev.apply(null, arguments);
};

var real___ZN4arma19glue_times_redirectILj2EE5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS7_NS_9op_htransEEEEEvRNS3_INT_9elem_typeEEERKNS_4GlueISB_T0_NS_10glue_timesEEE = asm["__ZN4arma19glue_times_redirectILj2EE5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS7_NS_9op_htransEEEEEvRNS3_INT_9elem_typeEEERKNS_4GlueISB_T0_NS_10glue_timesEEE"]; asm["__ZN4arma19glue_times_redirectILj2EE5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS7_NS_9op_htransEEEEEvRNS3_INT_9elem_typeEEERKNS_4GlueISB_T0_NS_10glue_timesEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma19glue_times_redirectILj2EE5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS7_NS_9op_htransEEEEEvRNS3_INT_9elem_typeEEERKNS_4GlueISB_T0_NS_10glue_timesEEE.apply(null, arguments);
};

var real___ZN4arma19glue_times_redirectILj2EE5applyINS_3MatINSt3__27complexIdEEEES7_EEvRNS3_INT_9elem_typeEEERKNS_4GlueIS8_T0_NS_10glue_timesEEE = asm["__ZN4arma19glue_times_redirectILj2EE5applyINS_3MatINSt3__27complexIdEEEES7_EEvRNS3_INT_9elem_typeEEERKNS_4GlueIS8_T0_NS_10glue_timesEEE"]; asm["__ZN4arma19glue_times_redirectILj2EE5applyINS_3MatINSt3__27complexIdEEEES7_EEvRNS3_INT_9elem_typeEEERKNS_4GlueIS8_T0_NS_10glue_timesEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma19glue_times_redirectILj2EE5applyINS_3MatINSt3__27complexIdEEEES7_EEvRNS3_INT_9elem_typeEEERKNS_4GlueIS8_T0_NS_10glue_timesEEE.apply(null, arguments);
};

var real___ZN4arma19glue_times_redirectILj3EE5applyINS_3MatIdEES4_S4_EEvRNS3_INT_9elem_typeEEERKNS_4GlueINS9_IS5_T0_NS_10glue_timesEEET1_SB_EE = asm["__ZN4arma19glue_times_redirectILj3EE5applyINS_3MatIdEES4_S4_EEvRNS3_INT_9elem_typeEEERKNS_4GlueINS9_IS5_T0_NS_10glue_timesEEET1_SB_EE"]; asm["__ZN4arma19glue_times_redirectILj3EE5applyINS_3MatIdEES4_S4_EEvRNS3_INT_9elem_typeEEERKNS_4GlueINS9_IS5_T0_NS_10glue_timesEEET1_SB_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma19glue_times_redirectILj3EE5applyINS_3MatIdEES4_S4_EEvRNS3_INT_9elem_typeEEERKNS_4GlueINS9_IS5_T0_NS_10glue_timesEEET1_SB_EE.apply(null, arguments);
};

var real___ZN4arma20arma_check_bad_allocIA39_cEEvbRKT_ = asm["__ZN4arma20arma_check_bad_allocIA39_cEEvbRKT_"]; asm["__ZN4arma20arma_check_bad_allocIA39_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma20arma_check_bad_allocIA39_cEEvbRKT_.apply(null, arguments);
};

var real___ZN4arma20unwrap_check_defaultINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEC2ERKS5_b = asm["__ZN4arma20unwrap_check_defaultINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEC2ERKS5_b"]; asm["__ZN4arma20unwrap_check_defaultINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEC2ERKS5_b"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma20unwrap_check_defaultINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEC2ERKS5_b.apply(null, arguments);
};

var real___ZN4arma20unwrap_check_defaultINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEED2Ev = asm["__ZN4arma20unwrap_check_defaultINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEED2Ev"]; asm["__ZN4arma20unwrap_check_defaultINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma20unwrap_check_defaultINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEED2Ev.apply(null, arguments);
};

var real___ZN4arma21arma_assert_blas_sizeINS_3MatINSt3__27complexIdEEEEEEvRKT_ = asm["__ZN4arma21arma_assert_blas_sizeINS_3MatINSt3__27complexIdEEEEEEvRKT_"]; asm["__ZN4arma21arma_assert_blas_sizeINS_3MatINSt3__27complexIdEEEEEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma21arma_assert_blas_sizeINS_3MatINSt3__27complexIdEEEEEEvRKT_.apply(null, arguments);
};

var real___ZN4arma21arma_assert_blas_sizeINS_3MatINSt3__27complexIdEEEES5_EEvRKT_RKT0_ = asm["__ZN4arma21arma_assert_blas_sizeINS_3MatINSt3__27complexIdEEEES5_EEvRKT_RKT0_"]; asm["__ZN4arma21arma_assert_blas_sizeINS_3MatINSt3__27complexIdEEEES5_EEvRKT_RKT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma21arma_assert_blas_sizeINS_3MatINSt3__27complexIdEEEES5_EEvRKT_RKT0_.apply(null, arguments);
};

var real___ZN4arma21arma_assert_blas_sizeINS_3MatIdEEEEvRKT_ = asm["__ZN4arma21arma_assert_blas_sizeINS_3MatIdEEEEvRKT_"]; asm["__ZN4arma21arma_assert_blas_sizeINS_3MatIdEEEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma21arma_assert_blas_sizeINS_3MatIdEEEEvRKT_.apply(null, arguments);
};

var real___ZN4arma21arma_assert_blas_sizeINS_3MatIdEES2_EEvRKT_RKT0_ = asm["__ZN4arma21arma_assert_blas_sizeINS_3MatIdEES2_EEvRKT_RKT0_"]; asm["__ZN4arma21arma_assert_blas_sizeINS_3MatIdEES2_EEvRKT_RKT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma21arma_assert_blas_sizeINS_3MatIdEES2_EEvRKT_RKT0_.apply(null, arguments);
};

var real___ZN4arma21arma_assert_same_sizeIdNS_3MatIdEEEEvRKNS_7subviewIT_EERKNS_5ProxyIT0_EEPKc = asm["__ZN4arma21arma_assert_same_sizeIdNS_3MatIdEEEEvRKNS_7subviewIT_EERKNS_5ProxyIT0_EEPKc"]; asm["__ZN4arma21arma_assert_same_sizeIdNS_3MatIdEEEEvRKNS_7subviewIT_EERKNS_5ProxyIT0_EEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma21arma_assert_same_sizeIdNS_3MatIdEEEEvRKNS_7subviewIT_EERKNS_5ProxyIT0_EEPKc.apply(null, arguments);
};

var real___ZN4arma21arma_assert_same_sizeIdNS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEEvRKNS_7subviewIT_EERKNS_5ProxyIT0_EEPKc = asm["__ZN4arma21arma_assert_same_sizeIdNS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEEvRKNS_7subviewIT_EERKNS_5ProxyIT0_EEPKc"]; asm["__ZN4arma21arma_assert_same_sizeIdNS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEEvRKNS_7subviewIT_EERKNS_5ProxyIT0_EEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma21arma_assert_same_sizeIdNS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEEvRKNS_7subviewIT_EERKNS_5ProxyIT0_EEPKc.apply(null, arguments);
};

var real___ZN4arma21arma_assert_same_sizeIddEEvRKNS_7subviewIT_EERKNS1_IT0_EEPKc = asm["__ZN4arma21arma_assert_same_sizeIddEEvRKNS_7subviewIT_EERKNS1_IT0_EEPKc"]; asm["__ZN4arma21arma_assert_same_sizeIddEEvRKNS_7subviewIT_EERKNS1_IT0_EEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma21arma_assert_same_sizeIddEEvRKNS_7subviewIT_EERKNS1_IT0_EEPKc.apply(null, arguments);
};

var real___ZN4arma22arma_sort_index_helperINS_3GenINS_3ColIdEENS_9gen_randuEEELb0EEEbRNS_3MatIjEERKNS_5ProxyIT_EEj = asm["__ZN4arma22arma_sort_index_helperINS_3GenINS_3ColIdEENS_9gen_randuEEELb0EEEbRNS_3MatIjEERKNS_5ProxyIT_EEj"]; asm["__ZN4arma22arma_sort_index_helperINS_3GenINS_3ColIdEENS_9gen_randuEEELb0EEEbRNS_3MatIjEERKNS_5ProxyIT_EEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma22arma_sort_index_helperINS_3GenINS_3ColIdEENS_9gen_randuEEELb0EEEbRNS_3MatIjEERKNS_5ProxyIT_EEj.apply(null, arguments);
};

var real___ZN4arma22gmm_seed_keep_existingC2Ev = asm["__ZN4arma22gmm_seed_keep_existingC2Ev"]; asm["__ZN4arma22gmm_seed_keep_existingC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma22gmm_seed_keep_existingC2Ev.apply(null, arguments);
};

var real___ZN4arma22gmm_seed_random_spreadC2Ev = asm["__ZN4arma22gmm_seed_random_spreadC2Ev"]; asm["__ZN4arma22gmm_seed_random_spreadC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma22gmm_seed_random_spreadC2Ev.apply(null, arguments);
};

var real___ZN4arma22gmm_seed_random_subsetC2Ev = asm["__ZN4arma22gmm_seed_random_subsetC2Ev"]; asm["__ZN4arma22gmm_seed_random_subsetC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma22gmm_seed_random_subsetC2Ev.apply(null, arguments);
};

var real___ZN4arma22gmm_seed_static_spreadC2Ev = asm["__ZN4arma22gmm_seed_static_spreadC2Ev"]; asm["__ZN4arma22gmm_seed_static_spreadC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma22gmm_seed_static_spreadC2Ev.apply(null, arguments);
};

var real___ZN4arma22gmm_seed_static_subsetC2Ev = asm["__ZN4arma22gmm_seed_static_subsetC2Ev"]; asm["__ZN4arma22gmm_seed_static_subsetC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma22gmm_seed_static_subsetC2Ev.apply(null, arguments);
};

var real___ZN4arma26arma_assert_trans_mul_sizeILb0ELb0EEEvjjjjPKc = asm["__ZN4arma26arma_assert_trans_mul_sizeILb0ELb0EEEvjjjjPKc"]; asm["__ZN4arma26arma_assert_trans_mul_sizeILb0ELb0EEEvjjjjPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma26arma_assert_trans_mul_sizeILb0ELb0EEEvjjjjPKc.apply(null, arguments);
};

var real___ZN4arma26arma_assert_trans_mul_sizeILb0ELb1EEEvjjjjPKc = asm["__ZN4arma26arma_assert_trans_mul_sizeILb0ELb1EEEvjjjjPKc"]; asm["__ZN4arma26arma_assert_trans_mul_sizeILb0ELb1EEEvjjjjPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma26arma_assert_trans_mul_sizeILb0ELb1EEEvjjjjPKc.apply(null, arguments);
};

var real___ZN4arma27glue_times_redirect2_helperILb0EE5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS7_NS_9op_htransEEEEEvRNS3_INT_9elem_typeEEERKNS_4GlueISB_T0_NS_10glue_timesEEE = asm["__ZN4arma27glue_times_redirect2_helperILb0EE5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS7_NS_9op_htransEEEEEvRNS3_INT_9elem_typeEEERKNS_4GlueISB_T0_NS_10glue_timesEEE"]; asm["__ZN4arma27glue_times_redirect2_helperILb0EE5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS7_NS_9op_htransEEEEEvRNS3_INT_9elem_typeEEERKNS_4GlueISB_T0_NS_10glue_timesEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma27glue_times_redirect2_helperILb0EE5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS7_NS_9op_htransEEEEEvRNS3_INT_9elem_typeEEERKNS_4GlueISB_T0_NS_10glue_timesEEE.apply(null, arguments);
};

var real___ZN4arma27glue_times_redirect2_helperILb0EE5applyINS_3MatINSt3__27complexIdEEEES7_EEvRNS3_INT_9elem_typeEEERKNS_4GlueIS8_T0_NS_10glue_timesEEE = asm["__ZN4arma27glue_times_redirect2_helperILb0EE5applyINS_3MatINSt3__27complexIdEEEES7_EEvRNS3_INT_9elem_typeEEERKNS_4GlueIS8_T0_NS_10glue_timesEEE"]; asm["__ZN4arma27glue_times_redirect2_helperILb0EE5applyINS_3MatINSt3__27complexIdEEEES7_EEvRNS3_INT_9elem_typeEEERKNS_4GlueIS8_T0_NS_10glue_timesEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma27glue_times_redirect2_helperILb0EE5applyINS_3MatINSt3__27complexIdEEEES7_EEvRNS3_INT_9elem_typeEEERKNS_4GlueIS8_T0_NS_10glue_timesEEE.apply(null, arguments);
};

var real___ZN4arma27glue_times_redirect2_helperILb1EE5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS7_NS_9op_htransEEEEEvRNS3_INT_9elem_typeEEERKNS_4GlueISB_T0_NS_10glue_timesEEE = asm["__ZN4arma27glue_times_redirect2_helperILb1EE5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS7_NS_9op_htransEEEEEvRNS3_INT_9elem_typeEEERKNS_4GlueISB_T0_NS_10glue_timesEEE"]; asm["__ZN4arma27glue_times_redirect2_helperILb1EE5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS7_NS_9op_htransEEEEEvRNS3_INT_9elem_typeEEERKNS_4GlueISB_T0_NS_10glue_timesEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma27glue_times_redirect2_helperILb1EE5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS7_NS_9op_htransEEEEEvRNS3_INT_9elem_typeEEERKNS_4GlueISB_T0_NS_10glue_timesEEE.apply(null, arguments);
};

var real___ZN4arma27glue_times_redirect2_helperILb1EE5applyINS_3MatINSt3__27complexIdEEEES7_EEvRNS3_INT_9elem_typeEEERKNS_4GlueIS8_T0_NS_10glue_timesEEE = asm["__ZN4arma27glue_times_redirect2_helperILb1EE5applyINS_3MatINSt3__27complexIdEEEES7_EEvRNS3_INT_9elem_typeEEERKNS_4GlueIS8_T0_NS_10glue_timesEEE"]; asm["__ZN4arma27glue_times_redirect2_helperILb1EE5applyINS_3MatINSt3__27complexIdEEEES7_EEvRNS3_INT_9elem_typeEEERKNS_4GlueIS8_T0_NS_10glue_timesEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma27glue_times_redirect2_helperILb1EE5applyINS_3MatINSt3__27complexIdEEEES7_EEvRNS3_INT_9elem_typeEEERKNS_4GlueIS8_T0_NS_10glue_timesEEE.apply(null, arguments);
};

var real___ZN4arma27glue_times_redirect3_helperILb0EE5applyINS_3MatIdEES4_S4_EEvRNS3_INT_9elem_typeEEERKNS_4GlueINS9_IS5_T0_NS_10glue_timesEEET1_SB_EE = asm["__ZN4arma27glue_times_redirect3_helperILb0EE5applyINS_3MatIdEES4_S4_EEvRNS3_INT_9elem_typeEEERKNS_4GlueINS9_IS5_T0_NS_10glue_timesEEET1_SB_EE"]; asm["__ZN4arma27glue_times_redirect3_helperILb0EE5applyINS_3MatIdEES4_S4_EEvRNS3_INT_9elem_typeEEERKNS_4GlueINS9_IS5_T0_NS_10glue_timesEEET1_SB_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma27glue_times_redirect3_helperILb0EE5applyINS_3MatIdEES4_S4_EEvRNS3_INT_9elem_typeEEERKNS_4GlueINS9_IS5_T0_NS_10glue_timesEEET1_SB_EE.apply(null, arguments);
};

var real___ZN4arma27glue_times_redirect3_helperILb1EE5applyINS_3MatIdEES4_S4_EEvRNS3_INT_9elem_typeEEERKNS_4GlueINS9_IS5_T0_NS_10glue_timesEEET1_SB_EE = asm["__ZN4arma27glue_times_redirect3_helperILb1EE5applyINS_3MatIdEES4_S4_EEvRNS3_INT_9elem_typeEEERKNS_4GlueINS9_IS5_T0_NS_10glue_timesEEET1_SB_EE"]; asm["__ZN4arma27glue_times_redirect3_helperILb1EE5applyINS_3MatIdEES4_S4_EEvRNS3_INT_9elem_typeEEERKNS_4GlueINS9_IS5_T0_NS_10glue_timesEEET1_SB_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma27glue_times_redirect3_helperILb1EE5applyINS_3MatIdEES4_S4_EEvRNS3_INT_9elem_typeEEERKNS_4GlueINS9_IS5_T0_NS_10glue_timesEEET1_SB_EE.apply(null, arguments);
};

var real___ZN4arma2OpINS_3MatINSt3__27complexIdEEEENS_9op_htransEEC2ERKS5_ = asm["__ZN4arma2OpINS_3MatINSt3__27complexIdEEEENS_9op_htransEEC2ERKS5_"]; asm["__ZN4arma2OpINS_3MatINSt3__27complexIdEEEENS_9op_htransEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma2OpINS_3MatINSt3__27complexIdEEEENS_9op_htransEEC2ERKS5_.apply(null, arguments);
};

var real___ZN4arma2OpINS_3MatINSt3__27complexIdEEEENS_9op_htransEED2Ev = asm["__ZN4arma2OpINS_3MatINSt3__27complexIdEEEENS_9op_htransEED2Ev"]; asm["__ZN4arma2OpINS_3MatINSt3__27complexIdEEEENS_9op_htransEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma2OpINS_3MatINSt3__27complexIdEEEENS_9op_htransEED2Ev.apply(null, arguments);
};

var real___ZN4arma2OpINS_3MatIdEENS_6op_invEEC2ERKS2_ = asm["__ZN4arma2OpINS_3MatIdEENS_6op_invEEC2ERKS2_"]; asm["__ZN4arma2OpINS_3MatIdEENS_6op_invEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma2OpINS_3MatIdEENS_6op_invEEC2ERKS2_.apply(null, arguments);
};

var real___ZN4arma2OpINS_3MatIdEENS_6op_invEED2Ev = asm["__ZN4arma2OpINS_3MatIdEENS_6op_invEED2Ev"]; asm["__ZN4arma2OpINS_3MatIdEENS_6op_invEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma2OpINS_3MatIdEENS_6op_invEED2Ev.apply(null, arguments);
};

var real___ZN4arma2OpINS_3MatIdEENS_9op_htransEEC2ERKS2_ = asm["__ZN4arma2OpINS_3MatIdEENS_9op_htransEEC2ERKS2_"]; asm["__ZN4arma2OpINS_3MatIdEENS_9op_htransEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma2OpINS_3MatIdEENS_9op_htransEEC2ERKS2_.apply(null, arguments);
};

var real___ZN4arma2OpINS_3MatIdEENS_9op_htransEED2Ev = asm["__ZN4arma2OpINS_3MatIdEENS_9op_htransEED2Ev"]; asm["__ZN4arma2OpINS_3MatIdEENS_9op_htransEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma2OpINS_3MatIdEENS_9op_htransEED2Ev.apply(null, arguments);
};

var real___ZN4arma2OpINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEEC2ERKS7_jj = asm["__ZN4arma2OpINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEEC2ERKS7_jj"]; asm["__ZN4arma2OpINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEEC2ERKS7_jj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma2OpINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEEC2ERKS7_jj.apply(null, arguments);
};

var real___ZN4arma2OpINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEED2Ev = asm["__ZN4arma2OpINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEED2Ev"]; asm["__ZN4arma2OpINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma2OpINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEED2Ev.apply(null, arguments);
};

var real___ZN4arma3ColIdEC2EPdjbb = asm["__ZN4arma3ColIdEC2EPdjbb"]; asm["__ZN4arma3ColIdEC2EPdjbb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3ColIdEC2EPdjbb.apply(null, arguments);
};

var real___ZN4arma3ColIdEC2Ev = asm["__ZN4arma3ColIdEC2Ev"]; asm["__ZN4arma3ColIdEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3ColIdEC2Ev.apply(null, arguments);
};

var real___ZN4arma3ColIdED2Ev = asm["__ZN4arma3ColIdED2Ev"]; asm["__ZN4arma3ColIdED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3ColIdED2Ev.apply(null, arguments);
};

var real___ZN4arma3ColIjEC2Ejj = asm["__ZN4arma3ColIjEC2Ejj"]; asm["__ZN4arma3ColIjEC2Ejj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3ColIjEC2Ejj.apply(null, arguments);
};

var real___ZN4arma3ColIjEC2Ev = asm["__ZN4arma3ColIjEC2Ev"]; asm["__ZN4arma3ColIjEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3ColIjEC2Ev.apply(null, arguments);
};

var real___ZN4arma3ColIjEC2INS_2OpINS_4mtOpIjNS4_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEEEEERKNS_4BaseIjT_EE = asm["__ZN4arma3ColIjEC2INS_2OpINS_4mtOpIjNS4_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEEEEERKNS_4BaseIjT_EE"]; asm["__ZN4arma3ColIjEC2INS_2OpINS_4mtOpIjNS4_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEEEEERKNS_4BaseIjT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3ColIjEC2INS_2OpINS_4mtOpIjNS4_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEEEEERKNS_4BaseIjT_EE.apply(null, arguments);
};

var real___ZN4arma3ColIjEC2INS_4mtOpIjNS3_IjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEEEEERKNS_4BaseIjT_EE = asm["__ZN4arma3ColIjEC2INS_4mtOpIjNS3_IjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEEEEERKNS_4BaseIjT_EE"]; asm["__ZN4arma3ColIjEC2INS_4mtOpIjNS3_IjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEEEEERKNS_4BaseIjT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3ColIjEC2INS_4mtOpIjNS3_IjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEEEEERKNS_4BaseIjT_EE.apply(null, arguments);
};

var real___ZN4arma3ColIjEC2INS_4mtOpIjNS_3GenINS0_IdEENS_9gen_randuEEENS_13op_sort_indexEEEEERKNS_4BaseIjT_EE = asm["__ZN4arma3ColIjEC2INS_4mtOpIjNS_3GenINS0_IdEENS_9gen_randuEEENS_13op_sort_indexEEEEERKNS_4BaseIjT_EE"]; asm["__ZN4arma3ColIjEC2INS_4mtOpIjNS_3GenINS0_IdEENS_9gen_randuEEENS_13op_sort_indexEEEEERKNS_4BaseIjT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3ColIjEC2INS_4mtOpIjNS_3GenINS0_IdEENS_9gen_randuEEENS_13op_sort_indexEEEEERKNS_4BaseIjT_EE.apply(null, arguments);
};

var real___ZN4arma3ColIjED2Ev = asm["__ZN4arma3ColIjED2Ev"]; asm["__ZN4arma3ColIjED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3ColIjED2Ev.apply(null, arguments);
};

var real___ZN4arma3ColIjEaSEOS1_ = asm["__ZN4arma3ColIjEaSEOS1_"]; asm["__ZN4arma3ColIjEaSEOS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3ColIjEaSEOS1_.apply(null, arguments);
};

var real___ZN4arma3ColIjEaSINS_7subviewIjEEEERS1_RKNS_4BaseIjT_EE = asm["__ZN4arma3ColIjEaSINS_7subviewIjEEEERS1_RKNS_4BaseIjT_EE"]; asm["__ZN4arma3ColIjEaSINS_7subviewIjEEEERS1_RKNS_4BaseIjT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3ColIjEaSINS_7subviewIjEEEERS1_RKNS_4BaseIjT_EE.apply(null, arguments);
};

var real___ZN4arma3MatINSt3__27complexIdEEE10soft_resetEv = asm["__ZN4arma3MatINSt3__27complexIdEEE10soft_resetEv"]; asm["__ZN4arma3MatINSt3__27complexIdEEE10soft_resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatINSt3__27complexIdEEE10soft_resetEv.apply(null, arguments);
};

var real___ZN4arma3MatINSt3__27complexIdEEE4fillES3_ = asm["__ZN4arma3MatINSt3__27complexIdEEE4fillES3_"]; asm["__ZN4arma3MatINSt3__27complexIdEEE4fillES3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatINSt3__27complexIdEEE4fillES3_.apply(null, arguments);
};

var real___ZN4arma3MatINSt3__27complexIdEEE5resetEv = asm["__ZN4arma3MatINSt3__27complexIdEEE5resetEv"]; asm["__ZN4arma3MatINSt3__27complexIdEEE5resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatINSt3__27complexIdEEE5resetEv.apply(null, arguments);
};

var real___ZN4arma3MatINSt3__27complexIdEEE5zerosEv = asm["__ZN4arma3MatINSt3__27complexIdEEE5zerosEv"]; asm["__ZN4arma3MatINSt3__27complexIdEEE5zerosEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatINSt3__27complexIdEEE5zerosEv.apply(null, arguments);
};

var real___ZN4arma3MatINSt3__27complexIdEEE8set_sizeEjj = asm["__ZN4arma3MatINSt3__27complexIdEEE8set_sizeEjj"]; asm["__ZN4arma3MatINSt3__27complexIdEEE8set_sizeEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatINSt3__27complexIdEEE8set_sizeEjj.apply(null, arguments);
};

var real___ZN4arma3MatINSt3__27complexIdEEE9init_coldEv = asm["__ZN4arma3MatINSt3__27complexIdEEE9init_coldEv"]; asm["__ZN4arma3MatINSt3__27complexIdEEE9init_coldEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatINSt3__27complexIdEEE9init_coldEv.apply(null, arguments);
};

var real___ZN4arma3MatINSt3__27complexIdEEE9init_warmEjj = asm["__ZN4arma3MatINSt3__27complexIdEEE9init_warmEjj"]; asm["__ZN4arma3MatINSt3__27complexIdEEE9init_warmEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatINSt3__27complexIdEEE9init_warmEjj.apply(null, arguments);
};

var real___ZN4arma3MatINSt3__27complexIdEEE9steal_memERS4_ = asm["__ZN4arma3MatINSt3__27complexIdEEE9steal_memERS4_"]; asm["__ZN4arma3MatINSt3__27complexIdEEE9steal_memERS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatINSt3__27complexIdEEE9steal_memERS4_.apply(null, arguments);
};

var real___ZN4arma3MatINSt3__27complexIdEEEC2Ejj = asm["__ZN4arma3MatINSt3__27complexIdEEEC2Ejj"]; asm["__ZN4arma3MatINSt3__27complexIdEEEC2Ejj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatINSt3__27complexIdEEEC2Ejj.apply(null, arguments);
};

var real___ZN4arma3MatINSt3__27complexIdEEEC2Ev = asm["__ZN4arma3MatINSt3__27complexIdEEEC2Ev"]; asm["__ZN4arma3MatINSt3__27complexIdEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatINSt3__27complexIdEEEC2Ev.apply(null, arguments);
};

var real___ZN4arma3MatINSt3__27complexIdEEEC2INS0_IdEENS_10op_sqrtmatEEERKNS_4mtOpIS3_T_T0_EE = asm["__ZN4arma3MatINSt3__27complexIdEEEC2INS0_IdEENS_10op_sqrtmatEEERKNS_4mtOpIS3_T_T0_EE"]; asm["__ZN4arma3MatINSt3__27complexIdEEEC2INS0_IdEENS_10op_sqrtmatEEERKNS_4mtOpIS3_T_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatINSt3__27complexIdEEEC2INS0_IdEENS_10op_sqrtmatEEERKNS_4mtOpIS3_T_T0_EE.apply(null, arguments);
};

var real___ZN4arma3MatINSt3__27complexIdEEEC2IS4_S4_NS_10glue_timesEEERKNS_4GlueIT_T0_T1_EE = asm["__ZN4arma3MatINSt3__27complexIdEEEC2IS4_S4_NS_10glue_timesEEERKNS_4GlueIT_T0_T1_EE"]; asm["__ZN4arma3MatINSt3__27complexIdEEEC2IS4_S4_NS_10glue_timesEEERKNS_4GlueIT_T0_T1_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatINSt3__27complexIdEEEC2IS4_S4_NS_10glue_timesEEERKNS_4GlueIT_T0_T1_EE.apply(null, arguments);
};

var real___ZN4arma3MatINSt3__27complexIdEEED2Ev = asm["__ZN4arma3MatINSt3__27complexIdEEED2Ev"]; asm["__ZN4arma3MatINSt3__27complexIdEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatINSt3__27complexIdEEED2Ev.apply(null, arguments);
};

var real___ZN4arma3MatINSt3__27complexIdEEEaSERKS4_ = asm["__ZN4arma3MatINSt3__27complexIdEEEaSERKS4_"]; asm["__ZN4arma3MatINSt3__27complexIdEEEaSERKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatINSt3__27complexIdEEEaSERKS4_.apply(null, arguments);
};

var real___ZN4arma3MatINSt3__27complexIdEEEaSIS4_NS_2OpIS4_NS_9op_htransEEENS_10glue_timesEEERS4_RKNS_4GlueIT_T0_T1_EE = asm["__ZN4arma3MatINSt3__27complexIdEEEaSIS4_NS_2OpIS4_NS_9op_htransEEENS_10glue_timesEEERS4_RKNS_4GlueIT_T0_T1_EE"]; asm["__ZN4arma3MatINSt3__27complexIdEEEaSIS4_NS_2OpIS4_NS_9op_htransEEENS_10glue_timesEEERS4_RKNS_4GlueIT_T0_T1_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatINSt3__27complexIdEEEaSIS4_NS_2OpIS4_NS_9op_htransEEENS_10glue_timesEEERS4_RKNS_4GlueIT_T0_T1_EE.apply(null, arguments);
};

var real___ZN4arma3MatIdE10soft_resetEv = asm["__ZN4arma3MatIdE10soft_resetEv"]; asm["__ZN4arma3MatIdE10soft_resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdE10soft_resetEv.apply(null, arguments);
};

var real___ZN4arma3MatIdE4fillEd = asm["__ZN4arma3MatIdE4fillEd"]; asm["__ZN4arma3MatIdE4fillEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdE4fillEd.apply(null, arguments);
};

var real___ZN4arma3MatIdE4fillINS_4fill10fill_zerosEEERKS1_RKNS3_10fill_classIT_EE = asm["__ZN4arma3MatIdE4fillINS_4fill10fill_zerosEEERKS1_RKNS3_10fill_classIT_EE"]; asm["__ZN4arma3MatIdE4fillINS_4fill10fill_zerosEEERKS1_RKNS3_10fill_classIT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdE4fillINS_4fill10fill_zerosEEERKS1_RKNS3_10fill_classIT_EE.apply(null, arguments);
};

var real___ZN4arma3MatIdE4onesEjj = asm["__ZN4arma3MatIdE4onesEjj"]; asm["__ZN4arma3MatIdE4onesEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdE4onesEjj.apply(null, arguments);
};

var real___ZN4arma3MatIdE4swapERS1_ = asm["__ZN4arma3MatIdE4swapERS1_"]; asm["__ZN4arma3MatIdE4swapERS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdE4swapERS1_.apply(null, arguments);
};

var real___ZN4arma3MatIdE5randuEv = asm["__ZN4arma3MatIdE5randuEv"]; asm["__ZN4arma3MatIdE5randuEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdE5randuEv.apply(null, arguments);
};

var real___ZN4arma3MatIdE5resetEv = asm["__ZN4arma3MatIdE5resetEv"]; asm["__ZN4arma3MatIdE5resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdE5resetEv.apply(null, arguments);
};

var real___ZN4arma3MatIdE5zerosEjj = asm["__ZN4arma3MatIdE5zerosEjj"]; asm["__ZN4arma3MatIdE5zerosEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdE5zerosEjj.apply(null, arguments);
};

var real___ZN4arma3MatIdE5zerosEv = asm["__ZN4arma3MatIdE5zerosEv"]; asm["__ZN4arma3MatIdE5zerosEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdE5zerosEv.apply(null, arguments);
};

var real___ZN4arma3MatIdE8set_sizeEj = asm["__ZN4arma3MatIdE8set_sizeEj"]; asm["__ZN4arma3MatIdE8set_sizeEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdE8set_sizeEj.apply(null, arguments);
};

var real___ZN4arma3MatIdE8set_sizeEjj = asm["__ZN4arma3MatIdE8set_sizeEjj"]; asm["__ZN4arma3MatIdE8set_sizeEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdE8set_sizeEjj.apply(null, arguments);
};

var real___ZN4arma3MatIdE9copy_sizeIdS1_EEvRKNS_4BaseIT_T0_EE = asm["__ZN4arma3MatIdE9copy_sizeIdS1_EEvRKNS_4BaseIT_T0_EE"]; asm["__ZN4arma3MatIdE9copy_sizeIdS1_EEvRKNS_4BaseIT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdE9copy_sizeIdS1_EEvRKNS_4BaseIT_T0_EE.apply(null, arguments);
};

var real___ZN4arma3MatIdE9init_coldEv = asm["__ZN4arma3MatIdE9init_coldEv"]; asm["__ZN4arma3MatIdE9init_coldEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdE9init_coldEv.apply(null, arguments);
};

var real___ZN4arma3MatIdE9init_warmEjj = asm["__ZN4arma3MatIdE9init_warmEjj"]; asm["__ZN4arma3MatIdE9init_warmEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdE9init_warmEjj.apply(null, arguments);
};

var real___ZN4arma3MatIdE9steal_memERS1_ = asm["__ZN4arma3MatIdE9steal_memERS1_"]; asm["__ZN4arma3MatIdE9steal_memERS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdE9steal_memERS1_.apply(null, arguments);
};

var real___ZN4arma3MatIdEC2EPdjjbb = asm["__ZN4arma3MatIdEC2EPdjjbb"]; asm["__ZN4arma3MatIdEC2EPdjjbb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdEC2EPdjjbb.apply(null, arguments);
};

var real___ZN4arma3MatIdEC2ERKNS_18arma_vec_indicatorEt = asm["__ZN4arma3MatIdEC2ERKNS_18arma_vec_indicatorEt"]; asm["__ZN4arma3MatIdEC2ERKNS_18arma_vec_indicatorEt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdEC2ERKNS_18arma_vec_indicatorEt.apply(null, arguments);
};

var real___ZN4arma3MatIdEC2ERKNS_7subviewIdEE = asm["__ZN4arma3MatIdEC2ERKNS_7subviewIdEE"]; asm["__ZN4arma3MatIdEC2ERKNS_7subviewIdEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdEC2ERKNS_7subviewIdEE.apply(null, arguments);
};

var real___ZN4arma3MatIdEC2ERKS1_ = asm["__ZN4arma3MatIdEC2ERKS1_"]; asm["__ZN4arma3MatIdEC2ERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdEC2ERKS1_.apply(null, arguments);
};

var real___ZN4arma3MatIdEC2Ejj = asm["__ZN4arma3MatIdEC2Ejj"]; asm["__ZN4arma3MatIdEC2Ejj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdEC2Ejj.apply(null, arguments);
};

var real___ZN4arma3MatIdEC2Ev = asm["__ZN4arma3MatIdEC2Ev"]; asm["__ZN4arma3MatIdEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdEC2Ev.apply(null, arguments);
};

var real___ZN4arma3MatIdEC2INS0_INSt3__27complexIdEEEENS_7op_realEEERKNS_4mtOpIdT_T0_EE = asm["__ZN4arma3MatIdEC2INS0_INSt3__27complexIdEEEENS_7op_realEEERKNS_4mtOpIdT_T0_EE"]; asm["__ZN4arma3MatIdEC2INS0_INSt3__27complexIdEEEENS_7op_realEEERKNS_4mtOpIdT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdEC2INS0_INSt3__27complexIdEEEENS_7op_realEEERKNS_4mtOpIdT_T0_EE.apply(null, arguments);
};

var real___ZN4arma3MatIdEC2INS_11subview_rowIdEENS_19eop_scalar_div_postEEERKNS_3eOpIT_T0_EE = asm["__ZN4arma3MatIdEC2INS_11subview_rowIdEENS_19eop_scalar_div_postEEERKNS_3eOpIT_T0_EE"]; asm["__ZN4arma3MatIdEC2INS_11subview_rowIdEENS_19eop_scalar_div_postEEERKNS_3eOpIT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdEC2INS_11subview_rowIdEENS_19eop_scalar_div_postEEERKNS_3eOpIT_T0_EE.apply(null, arguments);
};

var real___ZN4arma3MatIdEC2INS_3ColIdEENS_9gen_randuEEERKNS_3GenIT_T0_EE = asm["__ZN4arma3MatIdEC2INS_3ColIdEENS_9gen_randuEEERKNS_3GenIT_T0_EE"]; asm["__ZN4arma3MatIdEC2INS_3ColIdEENS_9gen_randuEEERKNS_3GenIT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdEC2INS_3ColIdEENS_9gen_randuEEERKNS_3GenIT_T0_EE.apply(null, arguments);
};

var real___ZN4arma3MatIdEC2INS_4fill10fill_zerosEEEjjRKNS3_10fill_classIT_EE = asm["__ZN4arma3MatIdEC2INS_4fill10fill_zerosEEEjjRKNS3_10fill_classIT_EE"]; asm["__ZN4arma3MatIdEC2INS_4fill10fill_zerosEEEjjRKNS3_10fill_classIT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdEC2INS_4fill10fill_zerosEEEjjRKNS3_10fill_classIT_EE.apply(null, arguments);
};

var real___ZN4arma3MatIdEC2INS_7subviewIdEENS_7eop_powEEERKNS_3eOpIT_T0_EE = asm["__ZN4arma3MatIdEC2INS_7subviewIdEENS_7eop_powEEERKNS_3eOpIT_T0_EE"]; asm["__ZN4arma3MatIdEC2INS_7subviewIdEENS_7eop_powEEERKNS_3eOpIT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdEC2INS_7subviewIdEENS_7eop_powEEERKNS_3eOpIT_T0_EE.apply(null, arguments);
};

var real___ZN4arma3MatIdEC2IS1_NS_6op_invEEERKNS_2OpIT_T0_EE = asm["__ZN4arma3MatIdEC2IS1_NS_6op_invEEERKNS_2OpIT_T0_EE"]; asm["__ZN4arma3MatIdEC2IS1_NS_6op_invEEERKNS_2OpIT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdEC2IS1_NS_6op_invEEERKNS_2OpIT_T0_EE.apply(null, arguments);
};

var real___ZN4arma3MatIdEC2IS1_NS_9op_htransEEERKNS_2OpIT_T0_EE = asm["__ZN4arma3MatIdEC2IS1_NS_9op_htransEEERKNS_2OpIT_T0_EE"]; asm["__ZN4arma3MatIdEC2IS1_NS_9op_htransEEERKNS_2OpIT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdEC2IS1_NS_9op_htransEEERKNS_2OpIT_T0_EE.apply(null, arguments);
};

var real___ZN4arma3MatIdED2Ev = asm["__ZN4arma3MatIdED2Ev"]; asm["__ZN4arma3MatIdED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdED2Ev.apply(null, arguments);
};

var real___ZN4arma3MatIdEaSEOS1_ = asm["__ZN4arma3MatIdEaSEOS1_"]; asm["__ZN4arma3MatIdEaSEOS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdEaSEOS1_.apply(null, arguments);
};

var real___ZN4arma3MatIdEaSERKS1_ = asm["__ZN4arma3MatIdEaSERKS1_"]; asm["__ZN4arma3MatIdEaSERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdEaSERKS1_.apply(null, arguments);
};

var real___ZN4arma3MatIdEaSINS0_IjEES3_EERS1_RKNS_13subview_elem2IdT_T0_EE = asm["__ZN4arma3MatIdEaSINS0_IjEES3_EERS1_RKNS_13subview_elem2IdT_T0_EE"]; asm["__ZN4arma3MatIdEaSINS0_IjEES3_EERS1_RKNS_13subview_elem2IdT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdEaSINS0_IjEES3_EERS1_RKNS_13subview_elem2IdT_T0_EE.apply(null, arguments);
};

var real___ZN4arma3MatIdEaSINS_3RowIdEENS_7eop_logEEERS1_RKNS_3eOpIT_T0_EE = asm["__ZN4arma3MatIdEaSINS_3RowIdEENS_7eop_logEEERS1_RKNS_3eOpIT_T0_EE"]; asm["__ZN4arma3MatIdEaSINS_3RowIdEENS_7eop_logEEERS1_RKNS_3eOpIT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdEaSINS_3RowIdEENS_7eop_logEEERS1_RKNS_3eOpIT_T0_EE.apply(null, arguments);
};

var real___ZN4arma3MatIdEaSINS_4GlueIS1_S1_NS_10glue_timesEEES1_S4_EERS1_RKNS3_IT_T0_T1_EE = asm["__ZN4arma3MatIdEaSINS_4GlueIS1_S1_NS_10glue_timesEEES1_S4_EERS1_RKNS3_IT_T0_T1_EE"]; asm["__ZN4arma3MatIdEaSINS_4GlueIS1_S1_NS_10glue_timesEEES1_S4_EERS1_RKNS3_IT_T0_T1_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdEaSINS_4GlueIS1_S1_NS_10glue_timesEEES1_S4_EERS1_RKNS3_IT_T0_T1_EE.apply(null, arguments);
};

var real___ZN4arma3MatIdEaSINS_7subviewIdEENS_7eop_powEEERS1_RKNS_3eOpIT_T0_EE = asm["__ZN4arma3MatIdEaSINS_7subviewIdEENS_7eop_powEEERS1_RKNS_3eOpIT_T0_EE"]; asm["__ZN4arma3MatIdEaSINS_7subviewIdEENS_7eop_powEEERS1_RKNS_3eOpIT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIdEaSINS_7subviewIdEENS_7eop_powEEERS1_RKNS_3eOpIT_T0_EE.apply(null, arguments);
};

var real___ZN4arma3MatIjE10soft_resetEv = asm["__ZN4arma3MatIjE10soft_resetEv"]; asm["__ZN4arma3MatIjE10soft_resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjE10soft_resetEv.apply(null, arguments);
};

var real___ZN4arma3MatIjE13steal_mem_colERS1_j = asm["__ZN4arma3MatIjE13steal_mem_colERS1_j"]; asm["__ZN4arma3MatIjE13steal_mem_colERS1_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjE13steal_mem_colERS1_j.apply(null, arguments);
};

var real___ZN4arma3MatIjE4fillEj = asm["__ZN4arma3MatIjE4fillEj"]; asm["__ZN4arma3MatIjE4fillEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjE4fillEj.apply(null, arguments);
};

var real___ZN4arma3MatIjE4fillINS_4fill10fill_zerosEEERKS1_RKNS3_10fill_classIT_EE = asm["__ZN4arma3MatIjE4fillINS_4fill10fill_zerosEEERKS1_RKNS3_10fill_classIT_EE"]; asm["__ZN4arma3MatIjE4fillINS_4fill10fill_zerosEEERKS1_RKNS3_10fill_classIT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjE4fillINS_4fill10fill_zerosEEERKS1_RKNS3_10fill_classIT_EE.apply(null, arguments);
};

var real___ZN4arma3MatIjE5resetEv = asm["__ZN4arma3MatIjE5resetEv"]; asm["__ZN4arma3MatIjE5resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjE5resetEv.apply(null, arguments);
};

var real___ZN4arma3MatIjE5zerosEv = asm["__ZN4arma3MatIjE5zerosEv"]; asm["__ZN4arma3MatIjE5zerosEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjE5zerosEv.apply(null, arguments);
};

var real___ZN4arma3MatIjE8set_sizeEj = asm["__ZN4arma3MatIjE8set_sizeEj"]; asm["__ZN4arma3MatIjE8set_sizeEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjE8set_sizeEj.apply(null, arguments);
};

var real___ZN4arma3MatIjE8set_sizeEjj = asm["__ZN4arma3MatIjE8set_sizeEjj"]; asm["__ZN4arma3MatIjE8set_sizeEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjE8set_sizeEjj.apply(null, arguments);
};

var real___ZN4arma3MatIjE9copy_sizeIjS1_EEvRKNS_4BaseIT_T0_EE = asm["__ZN4arma3MatIjE9copy_sizeIjS1_EEvRKNS_4BaseIT_T0_EE"]; asm["__ZN4arma3MatIjE9copy_sizeIjS1_EEvRKNS_4BaseIT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjE9copy_sizeIjS1_EEvRKNS_4BaseIT_T0_EE.apply(null, arguments);
};

var real___ZN4arma3MatIjE9init_coldEv = asm["__ZN4arma3MatIjE9init_coldEv"]; asm["__ZN4arma3MatIjE9init_coldEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjE9init_coldEv.apply(null, arguments);
};

var real___ZN4arma3MatIjE9init_warmEjj = asm["__ZN4arma3MatIjE9init_warmEjj"]; asm["__ZN4arma3MatIjE9init_warmEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjE9init_warmEjj.apply(null, arguments);
};

var real___ZN4arma3MatIjE9steal_memERS1_ = asm["__ZN4arma3MatIjE9steal_memERS1_"]; asm["__ZN4arma3MatIjE9steal_memERS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjE9steal_memERS1_.apply(null, arguments);
};

var real___ZN4arma3MatIjEC2ERKNS_18arma_vec_indicatorEjjt = asm["__ZN4arma3MatIjEC2ERKNS_18arma_vec_indicatorEjjt"]; asm["__ZN4arma3MatIjEC2ERKNS_18arma_vec_indicatorEjjt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjEC2ERKNS_18arma_vec_indicatorEjjt.apply(null, arguments);
};

var real___ZN4arma3MatIjEC2ERKNS_18arma_vec_indicatorEt = asm["__ZN4arma3MatIjEC2ERKNS_18arma_vec_indicatorEt"]; asm["__ZN4arma3MatIjEC2ERKNS_18arma_vec_indicatorEt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjEC2ERKNS_18arma_vec_indicatorEt.apply(null, arguments);
};

var real___ZN4arma3MatIjEC2ERKNS_7subviewIjEE = asm["__ZN4arma3MatIjEC2ERKNS_7subviewIjEE"]; asm["__ZN4arma3MatIjEC2ERKNS_7subviewIjEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjEC2ERKNS_7subviewIjEE.apply(null, arguments);
};

var real___ZN4arma3MatIjEC2ERKS1_ = asm["__ZN4arma3MatIjEC2ERKS1_"]; asm["__ZN4arma3MatIjEC2ERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjEC2ERKS1_.apply(null, arguments);
};

var real___ZN4arma3MatIjEC2Ejj = asm["__ZN4arma3MatIjEC2Ejj"]; asm["__ZN4arma3MatIjEC2Ejj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjEC2Ejj.apply(null, arguments);
};

var real___ZN4arma3MatIjEC2Ev = asm["__ZN4arma3MatIjEC2Ev"]; asm["__ZN4arma3MatIjEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjEC2Ev.apply(null, arguments);
};

var real___ZN4arma3MatIjEC2INS_4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEERKNS3_IjT_T0_EE = asm["__ZN4arma3MatIjEC2INS_4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEERKNS3_IjT_T0_EE"]; asm["__ZN4arma3MatIjEC2INS_4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEERKNS3_IjT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjEC2INS_4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEERKNS3_IjT_T0_EE.apply(null, arguments);
};

var real___ZN4arma3MatIjED2Ev = asm["__ZN4arma3MatIjED2Ev"]; asm["__ZN4arma3MatIjED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjED2Ev.apply(null, arguments);
};

var real___ZN4arma3MatIjEaSERKNS_7subviewIjEE = asm["__ZN4arma3MatIjEaSERKNS_7subviewIjEE"]; asm["__ZN4arma3MatIjEaSERKNS_7subviewIjEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjEaSERKNS_7subviewIjEE.apply(null, arguments);
};

var real___ZN4arma3MatIjEaSERKS1_ = asm["__ZN4arma3MatIjEaSERKS1_"]; asm["__ZN4arma3MatIjEaSERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjEaSERKS1_.apply(null, arguments);
};

var real___ZN4arma3MatIjEaSINS_3GenINS_3ColIdEENS_9gen_randuEEENS_13op_sort_indexEEERS1_RKNS_4mtOpIjT_T0_EE = asm["__ZN4arma3MatIjEaSINS_3GenINS_3ColIdEENS_9gen_randuEEENS_13op_sort_indexEEERS1_RKNS_4mtOpIjT_T0_EE"]; asm["__ZN4arma3MatIjEaSINS_3GenINS_3ColIdEENS_9gen_randuEEENS_13op_sort_indexEEERS1_RKNS_4mtOpIjT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjEaSINS_3GenINS_3ColIdEENS_9gen_randuEEENS_13op_sort_indexEEERS1_RKNS_4mtOpIjT_T0_EE.apply(null, arguments);
};

var real___ZN4arma3MatIjEaSINS_4mtOpIjNS3_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEEERS1_RKNS_2OpIT_T0_EE = asm["__ZN4arma3MatIjEaSINS_4mtOpIjNS3_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEEERS1_RKNS_2OpIT_T0_EE"]; asm["__ZN4arma3MatIjEaSINS_4mtOpIjNS3_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEEERS1_RKNS_2OpIT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjEaSINS_4mtOpIjNS3_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEEERS1_RKNS_2OpIT_T0_EE.apply(null, arguments);
};

var real___ZN4arma3MatIjEaSINS_4mtOpIjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEEERS1_RKNS3_IjT_T0_EE = asm["__ZN4arma3MatIjEaSINS_4mtOpIjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEEERS1_RKNS3_IjT_T0_EE"]; asm["__ZN4arma3MatIjEaSINS_4mtOpIjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEEERS1_RKNS3_IjT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3MatIjEaSINS_4mtOpIjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEEERS1_RKNS3_IjT_T0_EE.apply(null, arguments);
};

var real___ZN4arma3RowIdEC2Ev = asm["__ZN4arma3RowIdEC2Ev"]; asm["__ZN4arma3RowIdEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3RowIdEC2Ev.apply(null, arguments);
};

var real___ZN4arma3RowIdEC2INS_3eOpINS_7subviewIdEENS_7eop_powEEEEERKNS_4BaseIdT_EE = asm["__ZN4arma3RowIdEC2INS_3eOpINS_7subviewIdEENS_7eop_powEEEEERKNS_4BaseIdT_EE"]; asm["__ZN4arma3RowIdEC2INS_3eOpINS_7subviewIdEENS_7eop_powEEEEERKNS_4BaseIdT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3RowIdEC2INS_3eOpINS_7subviewIdEENS_7eop_powEEEEERKNS_4BaseIdT_EE.apply(null, arguments);
};

var real___ZN4arma3RowIdED2Ev = asm["__ZN4arma3RowIdED2Ev"]; asm["__ZN4arma3RowIdED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3RowIdED2Ev.apply(null, arguments);
};

var real___ZN4arma3RowIdEaSINS_3eOpIS1_NS_7eop_logEEEEERS1_RKNS_4BaseIdT_EE = asm["__ZN4arma3RowIdEaSINS_3eOpIS1_NS_7eop_logEEEEERS1_RKNS_4BaseIdT_EE"]; asm["__ZN4arma3RowIdEaSINS_3eOpIS1_NS_7eop_logEEEEERS1_RKNS_4BaseIdT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3RowIdEaSINS_3eOpIS1_NS_7eop_logEEEEERS1_RKNS_4BaseIdT_EE.apply(null, arguments);
};

var real___ZN4arma3RowIjEC2INS_4fill10fill_zerosEEEjRKNS3_10fill_classIT_EE = asm["__ZN4arma3RowIjEC2INS_4fill10fill_zerosEEEjRKNS3_10fill_classIT_EE"]; asm["__ZN4arma3RowIjEC2INS_4fill10fill_zerosEEEjRKNS3_10fill_classIT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3RowIjEC2INS_4fill10fill_zerosEEEjRKNS3_10fill_classIT_EE.apply(null, arguments);
};

var real___ZN4arma3RowIjED2Ev = asm["__ZN4arma3RowIjED2Ev"]; asm["__ZN4arma3RowIjED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3RowIjED2Ev.apply(null, arguments);
};

var real___ZN4arma3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEC2ERKS2_d = asm["__ZN4arma3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEC2ERKS2_d"]; asm["__ZN4arma3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEC2ERKS2_d"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEC2ERKS2_d.apply(null, arguments);
};

var real___ZN4arma3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEED2Ev = asm["__ZN4arma3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEED2Ev"]; asm["__ZN4arma3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEED2Ev.apply(null, arguments);
};

var real___ZN4arma3eOpINS_3RowIdEENS_7eop_logEEC2ERKS2_ = asm["__ZN4arma3eOpINS_3RowIdEENS_7eop_logEEC2ERKS2_"]; asm["__ZN4arma3eOpINS_3RowIdEENS_7eop_logEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3eOpINS_3RowIdEENS_7eop_logEEC2ERKS2_.apply(null, arguments);
};

var real___ZN4arma3eOpINS_3RowIdEENS_7eop_logEED2Ev = asm["__ZN4arma3eOpINS_3RowIdEENS_7eop_logEED2Ev"]; asm["__ZN4arma3eOpINS_3RowIdEENS_7eop_logEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3eOpINS_3RowIdEENS_7eop_logEED2Ev.apply(null, arguments);
};

var real___ZN4arma3eOpINS_7subviewIdEENS_7eop_powEEC2ERKS2_d = asm["__ZN4arma3eOpINS_7subviewIdEENS_7eop_powEEC2ERKS2_d"]; asm["__ZN4arma3eOpINS_7subviewIdEENS_7eop_powEEC2ERKS2_d"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3eOpINS_7subviewIdEENS_7eop_powEEC2ERKS2_d.apply(null, arguments);
};

var real___ZN4arma3eOpINS_7subviewIdEENS_7eop_powEED2Ev = asm["__ZN4arma3eOpINS_7subviewIdEENS_7eop_powEED2Ev"]; asm["__ZN4arma3eOpINS_7subviewIdEENS_7eop_powEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma3eOpINS_7subviewIdEENS_7eop_powEED2Ev.apply(null, arguments);
};

var real___ZN4arma4accuINS_11subview_rowIdEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueENS4_9elem_typeEE6resultERKS4_ = asm["__ZN4arma4accuINS_11subview_rowIdEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueENS4_9elem_typeEE6resultERKS4_"]; asm["__ZN4arma4accuINS_11subview_rowIdEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueENS4_9elem_typeEE6resultERKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4accuINS_11subview_rowIdEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueENS4_9elem_typeEE6resultERKS4_.apply(null, arguments);
};

var real___ZN4arma4accuINS_3RowIdEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueENS4_9elem_typeEE6resultERKS4_ = asm["__ZN4arma4accuINS_3RowIdEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueENS4_9elem_typeEE6resultERKS4_"]; asm["__ZN4arma4accuINS_3RowIdEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueENS4_9elem_typeEE6resultERKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4accuINS_3RowIdEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueENS4_9elem_typeEE6resultERKS4_.apply(null, arguments);
};

var real___ZN4arma4blas4gemmINSt3__27complexIdEEEEvPKcS6_PKiS8_S8_PKT_SB_S8_SB_S8_SB_PS9_S8_ = asm["__ZN4arma4blas4gemmINSt3__27complexIdEEEEvPKcS6_PKiS8_S8_PKT_SB_S8_SB_S8_SB_PS9_S8_"]; asm["__ZN4arma4blas4gemmINSt3__27complexIdEEEEvPKcS6_PKiS8_S8_PKT_SB_S8_SB_S8_SB_PS9_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4blas4gemmINSt3__27complexIdEEEEvPKcS6_PKiS8_S8_PKT_SB_S8_SB_S8_SB_PS9_S8_.apply(null, arguments);
};

var real___ZN4arma4blas4gemmIdEEvPKcS3_PKiS5_S5_PKT_S8_S5_S8_S5_S8_PS6_S5_ = asm["__ZN4arma4blas4gemmIdEEvPKcS3_PKiS5_S5_PKT_S8_S5_S8_S5_S8_PS6_S5_"]; asm["__ZN4arma4blas4gemmIdEEvPKcS3_PKiS5_S5_PKT_S8_S5_S8_S5_S8_PS6_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4blas4gemmIdEEvPKcS3_PKiS5_S5_PKT_S8_S5_S8_S5_S8_PS6_S5_.apply(null, arguments);
};

var real___ZN4arma4blas4gemvINSt3__27complexIdEEEEvPKcPKiS8_PKT_SB_S8_SB_S8_SB_PS9_S8_ = asm["__ZN4arma4blas4gemvINSt3__27complexIdEEEEvPKcPKiS8_PKT_SB_S8_SB_S8_SB_PS9_S8_"]; asm["__ZN4arma4blas4gemvINSt3__27complexIdEEEEvPKcPKiS8_PKT_SB_S8_SB_S8_SB_PS9_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4blas4gemvINSt3__27complexIdEEEEvPKcPKiS8_PKT_SB_S8_SB_S8_SB_PS9_S8_.apply(null, arguments);
};

var real___ZN4arma4blas4gemvIdEEvPKcPKiS5_PKT_S8_S5_S8_S5_S8_PS6_S5_ = asm["__ZN4arma4blas4gemvIdEEvPKcPKiS5_PKT_S8_S5_S8_S5_S8_PS6_S5_"]; asm["__ZN4arma4blas4gemvIdEEvPKcPKiS5_PKT_S8_S5_S8_S5_S8_PS6_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4blas4gemvIdEEvPKcPKiS5_PKT_S8_S5_S8_S5_S8_PS6_S5_.apply(null, arguments);
};

var real___ZN4arma4blas4herkIdEEvPKcS3_PKiS5_PKT_PKNSt3__27complexIS6_EES5_S8_PSB_S5_ = asm["__ZN4arma4blas4herkIdEEvPKcS3_PKiS5_PKT_PKNSt3__27complexIS6_EES5_S8_PSB_S5_"]; asm["__ZN4arma4blas4herkIdEEvPKcS3_PKiS5_PKT_PKNSt3__27complexIS6_EES5_S8_PSB_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4blas4herkIdEEvPKcS3_PKiS5_PKT_PKNSt3__27complexIS6_EES5_S8_PSB_S5_.apply(null, arguments);
};

var real___ZN4arma4fill10fill_classINS0_10fill_randnEEC2Ev = asm["__ZN4arma4fill10fill_classINS0_10fill_randnEEC2Ev"]; asm["__ZN4arma4fill10fill_classINS0_10fill_randnEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4fill10fill_classINS0_10fill_randnEEC2Ev.apply(null, arguments);
};

var real___ZN4arma4fill10fill_classINS0_10fill_randuEEC2Ev = asm["__ZN4arma4fill10fill_classINS0_10fill_randuEEC2Ev"]; asm["__ZN4arma4fill10fill_classINS0_10fill_randuEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4fill10fill_classINS0_10fill_randuEEC2Ev.apply(null, arguments);
};

var real___ZN4arma4fill10fill_classINS0_10fill_zerosEEC2Ev = asm["__ZN4arma4fill10fill_classINS0_10fill_zerosEEC2Ev"]; asm["__ZN4arma4fill10fill_classINS0_10fill_zerosEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4fill10fill_classINS0_10fill_zerosEEC2Ev.apply(null, arguments);
};

var real___ZN4arma4fill10fill_classINS0_8fill_eyeEEC2Ev = asm["__ZN4arma4fill10fill_classINS0_8fill_eyeEEC2Ev"]; asm["__ZN4arma4fill10fill_classINS0_8fill_eyeEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4fill10fill_classINS0_8fill_eyeEEC2Ev.apply(null, arguments);
};

var real___ZN4arma4fill10fill_classINS0_9fill_noneEEC2Ev = asm["__ZN4arma4fill10fill_classINS0_9fill_noneEEC2Ev"]; asm["__ZN4arma4fill10fill_classINS0_9fill_noneEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4fill10fill_classINS0_9fill_noneEEC2Ev.apply(null, arguments);
};

var real___ZN4arma4fill10fill_classINS0_9fill_onesEEC2Ev = asm["__ZN4arma4fill10fill_classINS0_9fill_onesEEC2Ev"]; asm["__ZN4arma4fill10fill_classINS0_9fill_onesEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4fill10fill_classINS0_9fill_onesEEC2Ev.apply(null, arguments);
};

var real___ZN4arma4findINS_4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueEKNS1_IjS7_NS_14op_find_simpleEEEE6resultERKS7_ = asm["__ZN4arma4findINS_4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueEKNS1_IjS7_NS_14op_find_simpleEEEE6resultERKS7_"]; asm["__ZN4arma4findINS_4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueEKNS1_IjS7_NS_14op_find_simpleEEEE6resultERKS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4findINS_4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueEKNS1_IjS7_NS_14op_find_simpleEEEE6resultERKS7_.apply(null, arguments);
};

var real___ZN4arma4findINS_4mtOpIjNS_3RowIjEENS_9op_rel_eqEEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueEKNS1_IjS7_NS_14op_find_simpleEEEE6resultERKS7_ = asm["__ZN4arma4findINS_4mtOpIjNS_3RowIjEENS_9op_rel_eqEEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueEKNS1_IjS7_NS_14op_find_simpleEEEE6resultERKS7_"]; asm["__ZN4arma4findINS_4mtOpIjNS_3RowIjEENS_9op_rel_eqEEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueEKNS1_IjS7_NS_14op_find_simpleEEEE6resultERKS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4findINS_4mtOpIjNS_3RowIjEENS_9op_rel_eqEEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueEKNS1_IjS7_NS_14op_find_simpleEEEE6resultERKS7_.apply(null, arguments);
};

var real___ZN4arma4gemmILb0ELb0ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EES7_EEvRNS6_IT_EERKT0_RKT1_S8_S8_ = asm["__ZN4arma4gemmILb0ELb0ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EES7_EEvRNS6_IT_EERKT0_RKT1_S8_S8_"]; asm["__ZN4arma4gemmILb0ELb0ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EES7_EEvRNS6_IT_EERKT0_RKT1_S8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4gemmILb0ELb0ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EES7_EEvRNS6_IT_EERKT0_RKT1_S8_S8_.apply(null, arguments);
};

var real___ZN4arma4gemmILb0ELb0ELb0ELb0EE15apply_blas_typeIdNS_3MatIdEES4_EEvRNS3_IT_EERKT0_RKT1_S5_S5_ = asm["__ZN4arma4gemmILb0ELb0ELb0ELb0EE15apply_blas_typeIdNS_3MatIdEES4_EEvRNS3_IT_EERKT0_RKT1_S5_S5_"]; asm["__ZN4arma4gemmILb0ELb0ELb0ELb0EE15apply_blas_typeIdNS_3MatIdEES4_EEvRNS3_IT_EERKT0_RKT1_S5_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4gemmILb0ELb0ELb0ELb0EE15apply_blas_typeIdNS_3MatIdEES4_EEvRNS3_IT_EERKT0_RKT1_S5_S5_.apply(null, arguments);
};

var real___ZN4arma4gemmILb0ELb1ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EES7_EEvRNS6_IT_EERKT0_RKT1_S8_S8_ = asm["__ZN4arma4gemmILb0ELb1ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EES7_EEvRNS6_IT_EERKT0_RKT1_S8_S8_"]; asm["__ZN4arma4gemmILb0ELb1ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EES7_EEvRNS6_IT_EERKT0_RKT1_S8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4gemmILb0ELb1ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EES7_EEvRNS6_IT_EERKT0_RKT1_S8_S8_.apply(null, arguments);
};

var real___ZN4arma4gemvILb0ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_ = asm["__ZN4arma4gemvILb0ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_"]; asm["__ZN4arma4gemvILb0ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4gemvILb0ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_.apply(null, arguments);
};

var real___ZN4arma4gemvILb0ELb0ELb0EE15apply_blas_typeIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_ = asm["__ZN4arma4gemvILb0ELb0ELb0EE15apply_blas_typeIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_"]; asm["__ZN4arma4gemvILb0ELb0ELb0EE15apply_blas_typeIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4gemvILb0ELb0ELb0EE15apply_blas_typeIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_.apply(null, arguments);
};

var real___ZN4arma4gemvILb1ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_ = asm["__ZN4arma4gemvILb1ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_"]; asm["__ZN4arma4gemvILb1ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4gemvILb1ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_.apply(null, arguments);
};

var real___ZN4arma4gemvILb1ELb0ELb0EE15apply_blas_typeIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_ = asm["__ZN4arma4gemvILb1ELb0ELb0EE15apply_blas_typeIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_"]; asm["__ZN4arma4gemvILb1ELb0ELb0EE15apply_blas_typeIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4gemvILb1ELb0ELb0EE15apply_blas_typeIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_.apply(null, arguments);
};

var real___ZN4arma4herkILb0ELb0ELb0EE15apply_blas_typeIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_ = asm["__ZN4arma4herkILb0ELb0ELb0EE15apply_blas_typeIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_"]; asm["__ZN4arma4herkILb0ELb0ELb0EE15apply_blas_typeIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4herkILb0ELb0ELb0EE15apply_blas_typeIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_.apply(null, arguments);
};

var real___ZN4arma4mtOpINSt3__27complexIdEENS_3MatIdEENS_10op_sqrtmatEEC2ERKS5_ = asm["__ZN4arma4mtOpINSt3__27complexIdEENS_3MatIdEENS_10op_sqrtmatEEC2ERKS5_"]; asm["__ZN4arma4mtOpINSt3__27complexIdEENS_3MatIdEENS_10op_sqrtmatEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4mtOpINSt3__27complexIdEENS_3MatIdEENS_10op_sqrtmatEEC2ERKS5_.apply(null, arguments);
};

var real___ZN4arma4mtOpINSt3__27complexIdEENS_3MatIdEENS_10op_sqrtmatEED2Ev = asm["__ZN4arma4mtOpINSt3__27complexIdEENS_3MatIdEENS_10op_sqrtmatEED2Ev"]; asm["__ZN4arma4mtOpINSt3__27complexIdEENS_3MatIdEENS_10op_sqrtmatEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4mtOpINSt3__27complexIdEENS_3MatIdEENS_10op_sqrtmatEED2Ev.apply(null, arguments);
};

var real___ZN4arma4mtOpIdNS_3MatINSt3__27complexIdEEEENS_7op_realEEC2ERKS5_ = asm["__ZN4arma4mtOpIdNS_3MatINSt3__27complexIdEEEENS_7op_realEEC2ERKS5_"]; asm["__ZN4arma4mtOpIdNS_3MatINSt3__27complexIdEEEENS_7op_realEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4mtOpIdNS_3MatINSt3__27complexIdEEEENS_7op_realEEC2ERKS5_.apply(null, arguments);
};

var real___ZN4arma4mtOpIdNS_3MatINSt3__27complexIdEEEENS_7op_realEED2Ev = asm["__ZN4arma4mtOpIdNS_3MatINSt3__27complexIdEEEENS_7op_realEED2Ev"]; asm["__ZN4arma4mtOpIdNS_3MatINSt3__27complexIdEEEENS_7op_realEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4mtOpIdNS_3MatINSt3__27complexIdEEEENS_7op_realEED2Ev.apply(null, arguments);
};

var real___ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEC2ERKS4_ = asm["__ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEC2ERKS4_"]; asm["__ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEC2ERKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEC2ERKS4_.apply(null, arguments);
};

var real___ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEED2Ev = asm["__ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEED2Ev"]; asm["__ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEED2Ev.apply(null, arguments);
};

var real___ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEEC2ERKS4_ = asm["__ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEEC2ERKS4_"]; asm["__ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEEC2ERKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEEC2ERKS4_.apply(null, arguments);
};

var real___ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEED2Ev = asm["__ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEED2Ev"]; asm["__ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEED2Ev.apply(null, arguments);
};

var real___ZN4arma4mtOpIjNS_3GenINS_3ColIdEENS_9gen_randuEEENS_13op_sort_indexEEC2ERKS5_jj = asm["__ZN4arma4mtOpIjNS_3GenINS_3ColIdEENS_9gen_randuEEENS_13op_sort_indexEEC2ERKS5_jj"]; asm["__ZN4arma4mtOpIjNS_3GenINS_3ColIdEENS_9gen_randuEEENS_13op_sort_indexEEC2ERKS5_jj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4mtOpIjNS_3GenINS_3ColIdEENS_9gen_randuEEENS_13op_sort_indexEEC2ERKS5_jj.apply(null, arguments);
};

var real___ZN4arma4mtOpIjNS_3GenINS_3ColIdEENS_9gen_randuEEENS_13op_sort_indexEED2Ev = asm["__ZN4arma4mtOpIjNS_3GenINS_3ColIdEENS_9gen_randuEEENS_13op_sort_indexEED2Ev"]; asm["__ZN4arma4mtOpIjNS_3GenINS_3ColIdEENS_9gen_randuEEENS_13op_sort_indexEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4mtOpIjNS_3GenINS_3ColIdEENS_9gen_randuEEENS_13op_sort_indexEED2Ev.apply(null, arguments);
};

var real___ZN4arma4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEC2ERKS2_j = asm["__ZN4arma4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEC2ERKS2_j"]; asm["__ZN4arma4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEC2ERKS2_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEC2ERKS2_j.apply(null, arguments);
};

var real___ZN4arma4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEED2Ev = asm["__ZN4arma4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEED2Ev"]; asm["__ZN4arma4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEED2Ev.apply(null, arguments);
};

var real___ZN4arma4mtOpIjNS_3RowIjEENS_9op_rel_eqEEC2ERKS2_j = asm["__ZN4arma4mtOpIjNS_3RowIjEENS_9op_rel_eqEEC2ERKS2_j"]; asm["__ZN4arma4mtOpIjNS_3RowIjEENS_9op_rel_eqEEC2ERKS2_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4mtOpIjNS_3RowIjEENS_9op_rel_eqEEC2ERKS2_j.apply(null, arguments);
};

var real___ZN4arma4mtOpIjNS_3RowIjEENS_9op_rel_eqEED2Ev = asm["__ZN4arma4mtOpIjNS_3RowIjEENS_9op_rel_eqEED2Ev"]; asm["__ZN4arma4mtOpIjNS_3RowIjEENS_9op_rel_eqEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4mtOpIjNS_3RowIjEENS_9op_rel_eqEED2Ev.apply(null, arguments);
};

var real___ZN4arma4priv12Datum_helper3infIdEENS_14arma_real_onlyIT_E6resultEPS6_ = asm["__ZN4arma4priv12Datum_helper3infIdEENS_14arma_real_onlyIT_E6resultEPS6_"]; asm["__ZN4arma4priv12Datum_helper3infIdEENS_14arma_real_onlyIT_E6resultEPS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4priv12Datum_helper3infIdEENS_14arma_real_onlyIT_E6resultEPS6_.apply(null, arguments);
};

var real___ZN4arma4priv12Datum_helper3nanINSt3__27complexIdEEEENS_12arma_cx_onlyIT_E6resultEPS9_ = asm["__ZN4arma4priv12Datum_helper3nanINSt3__27complexIdEEEENS_12arma_cx_onlyIT_E6resultEPS9_"]; asm["__ZN4arma4priv12Datum_helper3nanINSt3__27complexIdEEEENS_12arma_cx_onlyIT_E6resultEPS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4priv12Datum_helper3nanINSt3__27complexIdEEEENS_12arma_cx_onlyIT_E6resultEPS9_.apply(null, arguments);
};

var real___ZN4arma4priv12Datum_helper3nanIdEENS_14arma_real_onlyIT_E6resultEPS6_ = asm["__ZN4arma4priv12Datum_helper3nanIdEENS_14arma_real_onlyIT_E6resultEPS6_"]; asm["__ZN4arma4priv12Datum_helper3nanIdEENS_14arma_real_onlyIT_E6resultEPS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4priv12Datum_helper3nanIdEENS_14arma_real_onlyIT_E6resultEPS6_.apply(null, arguments);
};

var real___ZN4arma4priv12Datum_helper3nanIjEENS_18arma_integral_onlyIT_E6resultEPS6_ = asm["__ZN4arma4priv12Datum_helper3nanIjEENS_18arma_integral_onlyIT_E6resultEPS6_"]; asm["__ZN4arma4priv12Datum_helper3nanIjEENS_18arma_integral_onlyIT_E6resultEPS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4priv12Datum_helper3nanIjEENS_18arma_integral_onlyIT_E6resultEPS6_.apply(null, arguments);
};

var real___ZN4arma4realINS_3MatINSt3__27complexIdEEEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr5is_cxINS7_9elem_typeEEE3yesEKNS_4mtOpINS7_8pod_typeES7_NS_7op_realEEEE6resultERKS7_ = asm["__ZN4arma4realINS_3MatINSt3__27complexIdEEEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr5is_cxINS7_9elem_typeEEE3yesEKNS_4mtOpINS7_8pod_typeES7_NS_7op_realEEEE6resultERKS7_"]; asm["__ZN4arma4realINS_3MatINSt3__27complexIdEEEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr5is_cxINS7_9elem_typeEEE3yesEKNS_4mtOpINS7_8pod_typeES7_NS_7op_realEEEE6resultERKS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4realINS_3MatINSt3__27complexIdEEEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr5is_cxINS7_9elem_typeEEE3yesEKNS_4mtOpINS7_8pod_typeES7_NS_7op_realEEEE6resultERKS7_.apply(null, arguments);
};

var real___ZN4arma4sortINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEcEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr12is_same_typeIT0_cEE5valueEKNS_2OpIS9_NS_15op_sort_defaultEEEE6resultERKS9_PKSA_ = asm["__ZN4arma4sortINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEcEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr12is_same_typeIT0_cEE5valueEKNS_2OpIS9_NS_15op_sort_defaultEEEE6resultERKS9_PKSA_"]; asm["__ZN4arma4sortINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEcEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr12is_same_typeIT0_cEE5valueEKNS_2OpIS9_NS_15op_sort_defaultEEEE6resultERKS9_PKSA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4sortINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEcEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr12is_same_typeIT0_cEE5valueEKNS_2OpIS9_NS_15op_sort_defaultEEEE6resultERKS9_PKSA_.apply(null, arguments);
};

var real___ZN4arma4swapIdEEvRNS_3MatIT_EES4_ = asm["__ZN4arma4swapIdEEvRNS_3MatIT_EES4_"]; asm["__ZN4arma4swapIdEEvRNS_3MatIT_EES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma4swapIdEEvRNS_3MatIT_EES4_.apply(null, arguments);
};

var real___ZN4arma5ProxyINS_11subview_rowIdEEEC2ERKS2_ = asm["__ZN4arma5ProxyINS_11subview_rowIdEEEC2ERKS2_"]; asm["__ZN4arma5ProxyINS_11subview_rowIdEEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma5ProxyINS_11subview_rowIdEEEC2ERKS2_.apply(null, arguments);
};

var real___ZN4arma5ProxyINS_3GenINS_3ColIdEENS_9gen_randuEEEEC2ERKS5_ = asm["__ZN4arma5ProxyINS_3GenINS_3ColIdEENS_9gen_randuEEEEC2ERKS5_"]; asm["__ZN4arma5ProxyINS_3GenINS_3ColIdEENS_9gen_randuEEEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma5ProxyINS_3GenINS_3ColIdEENS_9gen_randuEEEEC2ERKS5_.apply(null, arguments);
};

var real___ZN4arma5ProxyINS_3GenINS_3ColIdEENS_9gen_randuEEEED2Ev = asm["__ZN4arma5ProxyINS_3GenINS_3ColIdEENS_9gen_randuEEEED2Ev"]; asm["__ZN4arma5ProxyINS_3GenINS_3ColIdEENS_9gen_randuEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma5ProxyINS_3GenINS_3ColIdEENS_9gen_randuEEEED2Ev.apply(null, arguments);
};

var real___ZN4arma5ProxyINS_3MatINSt3__27complexIdEEEEEC2ERKS5_ = asm["__ZN4arma5ProxyINS_3MatINSt3__27complexIdEEEEEC2ERKS5_"]; asm["__ZN4arma5ProxyINS_3MatINSt3__27complexIdEEEEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma5ProxyINS_3MatINSt3__27complexIdEEEEEC2ERKS5_.apply(null, arguments);
};

var real___ZN4arma5ProxyINS_3MatIdEEEC2ERKS2_ = asm["__ZN4arma5ProxyINS_3MatIdEEEC2ERKS2_"]; asm["__ZN4arma5ProxyINS_3MatIdEEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma5ProxyINS_3MatIdEEEC2ERKS2_.apply(null, arguments);
};

var real___ZN4arma5ProxyINS_3MatIjEEEC2ERKS2_ = asm["__ZN4arma5ProxyINS_3MatIjEEEC2ERKS2_"]; asm["__ZN4arma5ProxyINS_3MatIjEEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma5ProxyINS_3MatIjEEEC2ERKS2_.apply(null, arguments);
};

var real___ZN4arma5ProxyINS_3RowIdEEEC2ERKS2_ = asm["__ZN4arma5ProxyINS_3RowIdEEEC2ERKS2_"]; asm["__ZN4arma5ProxyINS_3RowIdEEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma5ProxyINS_3RowIdEEEC2ERKS2_.apply(null, arguments);
};

var real___ZN4arma5ProxyINS_3RowIjEEEC2ERKS2_ = asm["__ZN4arma5ProxyINS_3RowIjEEEC2ERKS2_"]; asm["__ZN4arma5ProxyINS_3RowIjEEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma5ProxyINS_3RowIjEEEC2ERKS2_.apply(null, arguments);
};

var real___ZN4arma5ProxyINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEC2ERKS5_ = asm["__ZN4arma5ProxyINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEC2ERKS5_"]; asm["__ZN4arma5ProxyINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma5ProxyINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEC2ERKS5_.apply(null, arguments);
};

var real___ZN4arma5ProxyINS_7subviewIdEEEC2ERKS2_ = asm["__ZN4arma5ProxyINS_7subviewIdEEEC2ERKS2_"]; asm["__ZN4arma5ProxyINS_7subviewIdEEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma5ProxyINS_7subviewIdEEEC2ERKS2_.apply(null, arguments);
};

var real___ZN4arma5randiINS_3ColIjEEEET_jRKNS_11distr_paramENS_16arma_empty_classEPKNS_21arma_Mat_Col_Row_onlyIS3_E6resultE = asm["__ZN4arma5randiINS_3ColIjEEEET_jRKNS_11distr_paramENS_16arma_empty_classEPKNS_21arma_Mat_Col_Row_onlyIS3_E6resultE"]; asm["__ZN4arma5randiINS_3ColIjEEEET_jRKNS_11distr_paramENS_16arma_empty_classEPKNS_21arma_Mat_Col_Row_onlyIS3_E6resultE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma5randiINS_3ColIjEEEET_jRKNS_11distr_paramENS_16arma_empty_classEPKNS_21arma_Mat_Col_Row_onlyIS3_E6resultE.apply(null, arguments);
};

var real___ZN4arma5randiINS_3ColIjEEEET_jjRKNS_11distr_paramEPKNS_21arma_Mat_Col_Row_onlyIS3_E6resultE = asm["__ZN4arma5randiINS_3ColIjEEEET_jjRKNS_11distr_paramEPKNS_21arma_Mat_Col_Row_onlyIS3_E6resultE"]; asm["__ZN4arma5randiINS_3ColIjEEEET_jjRKNS_11distr_paramEPKNS_21arma_Mat_Col_Row_onlyIS3_E6resultE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma5randiINS_3ColIjEEEET_jjRKNS_11distr_paramEPKNS_21arma_Mat_Col_Row_onlyIS3_E6resultE.apply(null, arguments);
};

var real___ZN4arma6auxlib10eig_sym_dcIdNS_3MatIdEEEEbRNS_3ColIT_EERNS2_IS5_EERKNS_4BaseIS5_T0_EE = asm["__ZN4arma6auxlib10eig_sym_dcIdNS_3MatIdEEEEbRNS_3ColIT_EERNS2_IS5_EERKNS_4BaseIS5_T0_EE"]; asm["__ZN4arma6auxlib10eig_sym_dcIdNS_3MatIdEEEEbRNS_3ColIT_EERNS2_IS5_EERKNS_4BaseIS5_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma6auxlib10eig_sym_dcIdNS_3MatIdEEEEbRNS_3ColIT_EERNS2_IS5_EERKNS_4BaseIS5_T0_EE.apply(null, arguments);
};

var real___ZN4arma6auxlib11det_tinymatIdEET_RKNS_3MatIS2_EEj = asm["__ZN4arma6auxlib11det_tinymatIdEET_RKNS_3MatIS2_EEj"]; asm["__ZN4arma6auxlib11det_tinymatIdEET_RKNS_3MatIS2_EEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma6auxlib11det_tinymatIdEET_RKNS_3MatIS2_EEj.apply(null, arguments);
};

var real___ZN4arma6auxlib18inv_inplace_lapackIdEEbRNS_3MatIT_EE = asm["__ZN4arma6auxlib18inv_inplace_lapackIdEEbRNS_3MatIT_EE"]; asm["__ZN4arma6auxlib18inv_inplace_lapackIdEEbRNS_3MatIT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma6auxlib18inv_inplace_lapackIdEEbRNS_3MatIT_EE.apply(null, arguments);
};

var real___ZN4arma6auxlib19inv_noalias_tinymatIdEEbRNS_3MatIT_EERKS4_j = asm["__ZN4arma6auxlib19inv_noalias_tinymatIdEEbRNS_3MatIT_EERKS4_j"]; asm["__ZN4arma6auxlib19inv_noalias_tinymatIdEEbRNS_3MatIT_EERKS4_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma6auxlib19inv_noalias_tinymatIdEEbRNS_3MatIT_EERKS4_j.apply(null, arguments);
};

var real___ZN4arma6auxlib3invIdEEbRNS_3MatIT_EERKS4_ = asm["__ZN4arma6auxlib3invIdEEbRNS_3MatIT_EERKS4_"]; asm["__ZN4arma6auxlib3invIdEEbRNS_3MatIT_EERKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma6auxlib3invIdEEbRNS_3MatIT_EERKS4_.apply(null, arguments);
};

var real___ZN4arma6auxlib5schurIdEEbRNS_3MatINSt3__27complexIT_EEEES8_b = asm["__ZN4arma6auxlib5schurIdEEbRNS_3MatINSt3__27complexIT_EEEES8_b"]; asm["__ZN4arma6auxlib5schurIdEEbRNS_3MatINSt3__27complexIT_EEEES8_b"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma6auxlib5schurIdEEbRNS_3MatINSt3__27complexIT_EEEES8_b.apply(null, arguments);
};

var real___ZN4arma6auxlib7eig_symIdNS_3MatIdEEEEbRNS_3ColIT_EERNS2_IS5_EERKNS_4BaseIS5_T0_EE = asm["__ZN4arma6auxlib7eig_symIdNS_3MatIdEEEEbRNS_3ColIT_EERNS2_IS5_EERKNS_4BaseIS5_T0_EE"]; asm["__ZN4arma6auxlib7eig_symIdNS_3MatIdEEEEbRNS_3ColIT_EERNS2_IS5_EERKNS_4BaseIS5_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma6auxlib7eig_symIdNS_3MatIdEEEEbRNS_3ColIT_EERNS2_IS5_EERKNS_4BaseIS5_T0_EE.apply(null, arguments);
};

var real___ZN4arma6kmeansINS_2OpINS_3MatIdEENS_9op_htransEEEEENS_10enable_if2IXsr7is_realINT_9elem_typeEEE5valueEbE6resultERNS2_IS8_EERKNS_4BaseIS8_S7_EEjRKNS_13gmm_seed_modeEjb = asm["__ZN4arma6kmeansINS_2OpINS_3MatIdEENS_9op_htransEEEEENS_10enable_if2IXsr7is_realINT_9elem_typeEEE5valueEbE6resultERNS2_IS8_EERKNS_4BaseIS8_S7_EEjRKNS_13gmm_seed_modeEjb"]; asm["__ZN4arma6kmeansINS_2OpINS_3MatIdEENS_9op_htransEEEEENS_10enable_if2IXsr7is_realINT_9elem_typeEEE5valueEbE6resultERNS2_IS8_EERKNS_4BaseIS8_S7_EEjRKNS_13gmm_seed_modeEjb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma6kmeansINS_2OpINS_3MatIdEENS_9op_htransEEEEENS_10enable_if2IXsr7is_realINT_9elem_typeEEE5valueEbE6resultERNS2_IS8_EERKNS_4BaseIS8_S7_EEjRKNS_13gmm_seed_modeEjb.apply(null, arguments);
};

var real___ZN4arma6lapack4syevIdEEvPcS2_PiPT_S3_S5_S5_S3_S3_ = asm["__ZN4arma6lapack4syevIdEEvPcS2_PiPT_S3_S5_S5_S3_S3_"]; asm["__ZN4arma6lapack4syevIdEEvPcS2_PiPT_S3_S5_S5_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma6lapack4syevIdEEvPcS2_PiPT_S3_S5_S5_S3_S3_.apply(null, arguments);
};

var real___ZN4arma6lapack5getrfIdEEvPiS2_PT_S2_S2_S2_ = asm["__ZN4arma6lapack5getrfIdEEvPiS2_PT_S2_S2_S2_"]; asm["__ZN4arma6lapack5getrfIdEEvPiS2_PT_S2_S2_S2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma6lapack5getrfIdEEvPiS2_PT_S2_S2_S2_.apply(null, arguments);
};

var real___ZN4arma6lapack5getriIdEEvPiPT_S2_S2_S4_S2_S2_ = asm["__ZN4arma6lapack5getriIdEEvPiPT_S2_S2_S4_S2_S2_"]; asm["__ZN4arma6lapack5getriIdEEvPiPT_S2_S2_S4_S2_S2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma6lapack5getriIdEEvPiPT_S2_S2_S4_S2_S2_.apply(null, arguments);
};

var real___ZN4arma6lapack5syevdIdEEvPcS2_PiPT_S3_S5_S5_S3_S3_S3_S3_ = asm["__ZN4arma6lapack5syevdIdEEvPcS2_PiPT_S3_S5_S5_S3_S3_S3_S3_"]; asm["__ZN4arma6lapack5syevdIdEEvPcS2_PiPT_S3_S5_S5_S3_S3_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma6lapack5syevdIdEEvPcS2_PiPT_S3_S5_S5_S3_S3_S3_S3_.apply(null, arguments);
};

var real___ZN4arma6lapack7cx_geesIdEEvPcS2_PvPiPNSt3__27complexIT_EES4_S4_S9_S9_S4_S9_S4_PS7_S4_S4_ = asm["__ZN4arma6lapack7cx_geesIdEEvPcS2_PvPiPNSt3__27complexIT_EES4_S4_S9_S9_S4_S9_S4_PS7_S4_S4_"]; asm["__ZN4arma6lapack7cx_geesIdEEvPcS2_PvPiPNSt3__27complexIT_EES4_S4_S9_S9_S4_S9_S4_PS7_S4_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma6lapack7cx_geesIdEEvPcS2_PvPiPNSt3__27complexIT_EES4_S4_S9_S9_S4_S9_S4_PS7_S4_S4_.apply(null, arguments);
};

var real___ZN4arma6memory7acquireINSt3__27complexIdEEEEPT_j = asm["__ZN4arma6memory7acquireINSt3__27complexIdEEEEPT_j"]; asm["__ZN4arma6memory7acquireINSt3__27complexIdEEEEPT_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma6memory7acquireINSt3__27complexIdEEEEPT_j.apply(null, arguments);
};

var real___ZN4arma6memory7acquireIdEEPT_j = asm["__ZN4arma6memory7acquireIdEEPT_j"]; asm["__ZN4arma6memory7acquireIdEEPT_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma6memory7acquireIdEEPT_j.apply(null, arguments);
};

var real___ZN4arma6memory7acquireIiEEPT_j = asm["__ZN4arma6memory7acquireIiEEPT_j"]; asm["__ZN4arma6memory7acquireIiEEPT_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma6memory7acquireIiEEPT_j.apply(null, arguments);
};

var real___ZN4arma6memory7acquireIjEEPT_j = asm["__ZN4arma6memory7acquireIjEEPT_j"]; asm["__ZN4arma6memory7acquireIjEEPT_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma6memory7acquireIjEEPT_j.apply(null, arguments);
};

var real___ZN4arma6op_inv5applyINS_3MatIdEEEEvRNS2_INT_9elem_typeEEERKNS_2OpIS4_S0_EE = asm["__ZN4arma6op_inv5applyINS_3MatIdEEEEvRNS2_INT_9elem_typeEEERKNS_2OpIS4_S0_EE"]; asm["__ZN4arma6op_inv5applyINS_3MatIdEEEEvRNS2_INT_9elem_typeEEERKNS_2OpIS4_S0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma6op_inv5applyINS_3MatIdEEEEvRNS2_INT_9elem_typeEEERKNS_2OpIS4_S0_EE.apply(null, arguments);
};

var real___ZN4arma6unwrapINS_2OpINS_3MatIdEENS_9op_htransEEEEC2ERKS5_ = asm["__ZN4arma6unwrapINS_2OpINS_3MatIdEENS_9op_htransEEEEC2ERKS5_"]; asm["__ZN4arma6unwrapINS_2OpINS_3MatIdEENS_9op_htransEEEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma6unwrapINS_2OpINS_3MatIdEENS_9op_htransEEEEC2ERKS5_.apply(null, arguments);
};

var real___ZN4arma6unwrapINS_2OpINS_3MatIdEENS_9op_htransEEEED2Ev = asm["__ZN4arma6unwrapINS_2OpINS_3MatIdEENS_9op_htransEEEED2Ev"]; asm["__ZN4arma6unwrapINS_2OpINS_3MatIdEENS_9op_htransEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma6unwrapINS_2OpINS_3MatIdEENS_9op_htransEEEED2Ev.apply(null, arguments);
};

var real___ZN4arma6unwrapINS_3MatIdEEEC2ERKS2_ = asm["__ZN4arma6unwrapINS_3MatIdEEEC2ERKS2_"]; asm["__ZN4arma6unwrapINS_3MatIdEEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma6unwrapINS_3MatIdEEEC2ERKS2_.apply(null, arguments);
};

var real___ZN4arma7eig_symINS_3MatIdEEEEbRNS_3ColINT_8pod_typeEEERNS1_INS4_9elem_typeEEERKNS_4BaseIS8_S4_EEPKcPKNS_19arma_blas_type_onlyIS8_E6resultE = asm["__ZN4arma7eig_symINS_3MatIdEEEEbRNS_3ColINT_8pod_typeEEERNS1_INS4_9elem_typeEEERKNS_4BaseIS8_S4_EEPKcPKNS_19arma_blas_type_onlyIS8_E6resultE"]; asm["__ZN4arma7eig_symINS_3MatIdEEEEbRNS_3ColINT_8pod_typeEEERNS1_INS4_9elem_typeEEERKNS_4BaseIS8_S4_EEPKcPKNS_19arma_blas_type_onlyIS8_E6resultE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma7eig_symINS_3MatIdEEEEbRNS_3ColINT_8pod_typeEEERNS1_INS4_9elem_typeEEERKNS_4BaseIS8_S4_EEPKcPKNS_19arma_blas_type_onlyIS8_E6resultE.apply(null, arguments);
};

var real___ZN4arma7op_cdot11direct_cdotINSt3__27complexIdEEEET_jPKS5_S7_ = asm["__ZN4arma7op_cdot11direct_cdotINSt3__27complexIdEEEET_jPKS5_S7_"]; asm["__ZN4arma7op_cdot11direct_cdotINSt3__27complexIdEEEET_jPKS5_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma7op_cdot11direct_cdotINSt3__27complexIdEEEET_jPKS5_S7_.apply(null, arguments);
};

var real___ZN4arma7op_cdot16direct_cdot_armaINSt3__27complexIdEEEET_jPKS5_S7_ = asm["__ZN4arma7op_cdot16direct_cdot_armaINSt3__27complexIdEEEET_jPKS5_S7_"]; asm["__ZN4arma7op_cdot16direct_cdot_armaINSt3__27complexIdEEEET_jPKS5_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma7op_cdot16direct_cdot_armaINSt3__27complexIdEEEET_jPKS5_S7_.apply(null, arguments);
};

var real___ZN4arma7op_find6helperINS_3RowIjEENS_16op_rel_gteq_postEEEjRNS_3MatIjEERKNS_4mtOpIjT_T0_EENS_16arma_op_rel_onlyISA_E6resultENS_11arma_not_cxINS9_9elem_typeEE6resultE = asm["__ZN4arma7op_find6helperINS_3RowIjEENS_16op_rel_gteq_postEEEjRNS_3MatIjEERKNS_4mtOpIjT_T0_EENS_16arma_op_rel_onlyISA_E6resultENS_11arma_not_cxINS9_9elem_typeEE6resultE"]; asm["__ZN4arma7op_find6helperINS_3RowIjEENS_16op_rel_gteq_postEEEjRNS_3MatIjEERKNS_4mtOpIjT_T0_EENS_16arma_op_rel_onlyISA_E6resultENS_11arma_not_cxINS9_9elem_typeEE6resultE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma7op_find6helperINS_3RowIjEENS_16op_rel_gteq_postEEEjRNS_3MatIjEERKNS_4mtOpIjT_T0_EENS_16arma_op_rel_onlyISA_E6resultENS_11arma_not_cxINS9_9elem_typeEE6resultE.apply(null, arguments);
};

var real___ZN4arma7op_find6helperINS_3RowIjEENS_9op_rel_eqEEEjRNS_3MatIjEERKNS_4mtOpIjT_T0_EENS_16arma_op_rel_onlyISA_E6resultENS_11arma_not_cxINS9_9elem_typeEE6resultE = asm["__ZN4arma7op_find6helperINS_3RowIjEENS_9op_rel_eqEEEjRNS_3MatIjEERKNS_4mtOpIjT_T0_EENS_16arma_op_rel_onlyISA_E6resultENS_11arma_not_cxINS9_9elem_typeEE6resultE"]; asm["__ZN4arma7op_find6helperINS_3RowIjEENS_9op_rel_eqEEEjRNS_3MatIjEERKNS_4mtOpIjT_T0_EENS_16arma_op_rel_onlyISA_E6resultENS_11arma_not_cxINS9_9elem_typeEE6resultE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma7op_find6helperINS_3RowIjEENS_9op_rel_eqEEEjRNS_3MatIjEERKNS_4mtOpIjT_T0_EENS_16arma_op_rel_onlyISA_E6resultENS_11arma_not_cxINS9_9elem_typeEE6resultE.apply(null, arguments);
};

var real___ZN4arma7op_real5applyINS_3MatINSt3__27complexIdEEEEEEvRNS2_INT_8pod_typeEEERKNS_4mtOpIS8_S7_S0_EE = asm["__ZN4arma7op_real5applyINS_3MatINSt3__27complexIdEEEEEEvRNS2_INT_8pod_typeEEERKNS_4mtOpIS8_S7_S0_EE"]; asm["__ZN4arma7op_real5applyINS_3MatINSt3__27complexIdEEEEEEvRNS2_INT_8pod_typeEEERKNS_4mtOpIS8_S7_S0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma7op_real5applyINS_3MatINSt3__27complexIdEEEEEEvRNS2_INT_8pod_typeEEERKNS_4mtOpIS8_S7_S0_EE.apply(null, arguments);
};

var real___ZN4arma7op_sort11direct_sortIjEEvPT_jj = asm["__ZN4arma7op_sort11direct_sortIjEEvPT_jj"]; asm["__ZN4arma7op_sort11direct_sortIjEEvPT_jj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma7op_sort11direct_sortIjEEvPT_jj.apply(null, arguments);
};

var real___ZN4arma7op_sort13apply_noaliasIjEEvRNS_3MatIT_EERKS4_jj = asm["__ZN4arma7op_sort13apply_noaliasIjEEvRNS_3MatIT_EERKS4_jj"]; asm["__ZN4arma7op_sort13apply_noaliasIjEEvRNS_3MatIT_EERKS4_jj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma7op_sort13apply_noaliasIjEEvRNS_3MatIT_EERKS4_jj.apply(null, arguments);
};

var real___ZN4arma7op_sort8copy_rowIjEEvPT_RKNS_3MatIS2_EEj = asm["__ZN4arma7op_sort8copy_rowIjEEvPT_RKNS_3MatIS2_EEj"]; asm["__ZN4arma7op_sort8copy_rowIjEEvPT_RKNS_3MatIS2_EEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma7op_sort8copy_rowIjEEvPT_RKNS_3MatIS2_EEj.apply(null, arguments);
};

var real___ZN4arma7op_sort8copy_rowIjEEvRNS_3MatIT_EEPKS3_j = asm["__ZN4arma7op_sort8copy_rowIjEEvRNS_3MatIT_EEPKS3_j"]; asm["__ZN4arma7op_sort8copy_rowIjEEvRNS_3MatIT_EEPKS3_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma7op_sort8copy_rowIjEEvRNS_3MatIT_EEPKS3_j.apply(null, arguments);
};

var real___ZN4arma7subviewIdE10inplace_opINS_15op_internal_equEEEvRKS1_PKc = asm["__ZN4arma7subviewIdE10inplace_opINS_15op_internal_equEEEvRKS1_PKc"]; asm["__ZN4arma7subviewIdE10inplace_opINS_15op_internal_equEEEvRKS1_PKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma7subviewIdE10inplace_opINS_15op_internal_equEEEvRKS1_PKc.apply(null, arguments);
};

var real___ZN4arma7subviewIdE10inplace_opINS_15op_internal_equENS_3MatIdEEEEvRKNS_4BaseIdT0_EEPKc = asm["__ZN4arma7subviewIdE10inplace_opINS_15op_internal_equENS_3MatIdEEEEvRKNS_4BaseIdT0_EEPKc"]; asm["__ZN4arma7subviewIdE10inplace_opINS_15op_internal_equENS_3MatIdEEEEvRKNS_4BaseIdT0_EEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma7subviewIdE10inplace_opINS_15op_internal_equENS_3MatIdEEEEvRKNS_4BaseIdT0_EEPKc.apply(null, arguments);
};

var real___ZN4arma7subviewIdE10inplace_opINS_15op_internal_equENS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEEvRKNS_4BaseIdT0_EEPKc = asm["__ZN4arma7subviewIdE10inplace_opINS_15op_internal_equENS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEEvRKNS_4BaseIdT0_EEPKc"]; asm["__ZN4arma7subviewIdE10inplace_opINS_15op_internal_equENS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEEvRKNS_4BaseIdT0_EEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma7subviewIdE10inplace_opINS_15op_internal_equENS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEEvRKNS_4BaseIdT0_EEPKc.apply(null, arguments);
};

var real___ZN4arma7subviewIdE7extractERNS_3MatIdEERKS1_ = asm["__ZN4arma7subviewIdE7extractERNS_3MatIdEERKS1_"]; asm["__ZN4arma7subviewIdE7extractERNS_3MatIdEERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma7subviewIdE7extractERNS_3MatIdEERKS1_.apply(null, arguments);
};

var real___ZN4arma7subviewIdED2Ev = asm["__ZN4arma7subviewIdED2Ev"]; asm["__ZN4arma7subviewIdED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma7subviewIdED2Ev.apply(null, arguments);
};

var real___ZN4arma7subviewIdEaSERKS1_ = asm["__ZN4arma7subviewIdEaSERKS1_"]; asm["__ZN4arma7subviewIdEaSERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma7subviewIdEaSERKS1_.apply(null, arguments);
};

var real___ZN4arma7subviewIdEaSINS_3MatIdEEEEvRKNS_4BaseIdT_EE = asm["__ZN4arma7subviewIdEaSINS_3MatIdEEEEvRKNS_4BaseIdT_EE"]; asm["__ZN4arma7subviewIdEaSINS_3MatIdEEEEvRKNS_4BaseIdT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma7subviewIdEaSINS_3MatIdEEEEvRKNS_4BaseIdT_EE.apply(null, arguments);
};

var real___ZN4arma7subviewIdEaSINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEEvRKNS_4BaseIdT_EE = asm["__ZN4arma7subviewIdEaSINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEEvRKNS_4BaseIdT_EE"]; asm["__ZN4arma7subviewIdEaSINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEEvRKNS_4BaseIdT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma7subviewIdEaSINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEEvRKNS_4BaseIdT_EE.apply(null, arguments);
};

var real___ZN4arma7subviewIjE7extractERNS_3MatIjEERKS1_ = asm["__ZN4arma7subviewIjE7extractERNS_3MatIjEERKS1_"]; asm["__ZN4arma7subviewIjE7extractERNS_3MatIjEERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma7subviewIjE7extractERNS_3MatIjEERKS1_.apply(null, arguments);
};

var real___ZN4arma7subviewIjED2Ev = asm["__ZN4arma7subviewIjED2Ev"]; asm["__ZN4arma7subviewIjED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma7subviewIjED2Ev.apply(null, arguments);
};

var real___ZN4arma8arma_rng5randiIjE4fillEPjjii = asm["__ZN4arma8arma_rng5randiIjE4fillEPjjii"]; asm["__ZN4arma8arma_rng5randiIjE4fillEPjjii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8arma_rng5randiIjE4fillEPjjii.apply(null, arguments);
};

var real___ZN4arma8arma_rng5randiIjE7max_valEv = asm["__ZN4arma8arma_rng5randiIjE7max_valEv"]; asm["__ZN4arma8arma_rng5randiIjE7max_valEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8arma_rng5randiIjE7max_valEv.apply(null, arguments);
};

var real___ZN4arma8arma_rng5randuIdE4fillEPdj = asm["__ZN4arma8arma_rng5randuIdE4fillEPdj"]; asm["__ZN4arma8arma_rng5randuIdE4fillEPdj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8arma_rng5randuIdE4fillEPdj.apply(null, arguments);
};

var real___ZN4arma8arma_strL11str_wrapperIcEEPKT_S4_PKNS0_9char_onlyIS2_E6resultE = asm["__ZN4arma8arma_strL11str_wrapperIcEEPKT_S4_PKNS0_9char_onlyIS2_E6resultE"]; asm["__ZN4arma8arma_strL11str_wrapperIcEEPKT_S4_PKNS0_9char_onlyIS2_E6resultE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8arma_strL11str_wrapperIcEEPKT_S4_PKNS0_9char_onlyIS2_E6resultE.apply(null, arguments);
};

var real___ZN4arma8arrayops10accumulateIdEET_PKS2_j = asm["__ZN4arma8arrayops10accumulateIdEET_PKS2_j"]; asm["__ZN4arma8arrayops10accumulateIdEET_PKS2_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8arrayops10accumulateIdEET_PKS2_j.apply(null, arguments);
};

var real___ZN4arma8arrayops10copy_smallIdEEvPT_PKS2_j = asm["__ZN4arma8arrayops10copy_smallIdEEvPT_PKS2_j"]; asm["__ZN4arma8arrayops10copy_smallIdEEvPT_PKS2_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8arrayops10copy_smallIdEEvPT_PKS2_j.apply(null, arguments);
};

var real___ZN4arma8arrayops10copy_smallIjEEvPT_PKS2_j = asm["__ZN4arma8arrayops10copy_smallIjEEvPT_PKS2_j"]; asm["__ZN4arma8arrayops10copy_smallIjEEvPT_PKS2_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8arrayops10copy_smallIjEEvPT_PKS2_j.apply(null, arguments);
};

var real___ZN4arma8arrayops10fill_zerosINSt3__27complexIdEEEEvPT_j = asm["__ZN4arma8arrayops10fill_zerosINSt3__27complexIdEEEEvPT_j"]; asm["__ZN4arma8arrayops10fill_zerosINSt3__27complexIdEEEEvPT_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8arrayops10fill_zerosINSt3__27complexIdEEEEvPT_j.apply(null, arguments);
};

var real___ZN4arma8arrayops10fill_zerosIdEEvPT_j = asm["__ZN4arma8arrayops10fill_zerosIdEEvPT_j"]; asm["__ZN4arma8arrayops10fill_zerosIdEEvPT_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8arrayops10fill_zerosIdEEvPT_j.apply(null, arguments);
};

var real___ZN4arma8arrayops10fill_zerosIjEEvPT_j = asm["__ZN4arma8arrayops10fill_zerosIjEEvPT_j"]; asm["__ZN4arma8arrayops10fill_zerosIjEEvPT_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8arrayops10fill_zerosIjEEvPT_j.apply(null, arguments);
};

var real___ZN4arma8arrayops11inplace_setINSt3__27complexIdEEEEvPT_S5_j = asm["__ZN4arma8arrayops11inplace_setINSt3__27complexIdEEEEvPT_S5_j"]; asm["__ZN4arma8arrayops11inplace_setINSt3__27complexIdEEEEvPT_S5_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8arrayops11inplace_setINSt3__27complexIdEEEEvPT_S5_j.apply(null, arguments);
};

var real___ZN4arma8arrayops11inplace_setIdEEvPT_S2_j = asm["__ZN4arma8arrayops11inplace_setIdEEvPT_S2_j"]; asm["__ZN4arma8arrayops11inplace_setIdEEvPT_S2_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8arrayops11inplace_setIdEEvPT_S2_j.apply(null, arguments);
};

var real___ZN4arma8arrayops11inplace_setIjEEvPT_S2_j = asm["__ZN4arma8arrayops11inplace_setIjEEvPT_S2_j"]; asm["__ZN4arma8arrayops11inplace_setIjEEvPT_S2_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8arrayops11inplace_setIjEEvPT_S2_j.apply(null, arguments);
};

var real___ZN4arma8arrayops16inplace_set_baseINSt3__27complexIdEEEEvPT_S5_j = asm["__ZN4arma8arrayops16inplace_set_baseINSt3__27complexIdEEEEvPT_S5_j"]; asm["__ZN4arma8arrayops16inplace_set_baseINSt3__27complexIdEEEEvPT_S5_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8arrayops16inplace_set_baseINSt3__27complexIdEEEEvPT_S5_j.apply(null, arguments);
};

var real___ZN4arma8arrayops16inplace_set_baseIdEEvPT_S2_j = asm["__ZN4arma8arrayops16inplace_set_baseIdEEvPT_S2_j"]; asm["__ZN4arma8arrayops16inplace_set_baseIdEEvPT_S2_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8arrayops16inplace_set_baseIdEEvPT_S2_j.apply(null, arguments);
};

var real___ZN4arma8arrayops16inplace_set_baseIjEEvPT_S2_j = asm["__ZN4arma8arrayops16inplace_set_baseIjEEvPT_S2_j"]; asm["__ZN4arma8arrayops16inplace_set_baseIjEEvPT_S2_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8arrayops16inplace_set_baseIjEEvPT_S2_j.apply(null, arguments);
};

var real___ZN4arma8arrayops17inplace_set_smallINSt3__27complexIdEEEEvPT_S5_j = asm["__ZN4arma8arrayops17inplace_set_smallINSt3__27complexIdEEEEvPT_S5_j"]; asm["__ZN4arma8arrayops17inplace_set_smallINSt3__27complexIdEEEEvPT_S5_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8arrayops17inplace_set_smallINSt3__27complexIdEEEEvPT_S5_j.apply(null, arguments);
};

var real___ZN4arma8arrayops17inplace_set_smallIdEEvPT_S2_j = asm["__ZN4arma8arrayops17inplace_set_smallIdEEvPT_S2_j"]; asm["__ZN4arma8arrayops17inplace_set_smallIdEEvPT_S2_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8arrayops17inplace_set_smallIdEEvPT_S2_j.apply(null, arguments);
};

var real___ZN4arma8arrayops17inplace_set_smallIjEEvPT_S2_j = asm["__ZN4arma8arrayops17inplace_set_smallIjEEvPT_S2_j"]; asm["__ZN4arma8arrayops17inplace_set_smallIjEEvPT_S2_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8arrayops17inplace_set_smallIjEEvPT_S2_j.apply(null, arguments);
};

var real___ZN4arma8arrayops7has_nanIjEEbPKT_j = asm["__ZN4arma8arrayops7has_nanIjEEbPKT_j"]; asm["__ZN4arma8arrayops7has_nanIjEEbPKT_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8arrayops7has_nanIjEEbPKT_j.apply(null, arguments);
};

var real___ZN4arma8arrayops9is_finiteIdEEbPKT_j = asm["__ZN4arma8arrayops9is_finiteIdEEbPKT_j"]; asm["__ZN4arma8arrayops9is_finiteIdEEbPKT_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8arrayops9is_finiteIdEEbPKT_j.apply(null, arguments);
};

var real___ZN4arma8eop_coreINS_19eop_scalar_div_postEE5applyINS_3MatIdEENS_11subview_rowIdEEEEvRT_RKNS_3eOpIT0_S1_EE = asm["__ZN4arma8eop_coreINS_19eop_scalar_div_postEE5applyINS_3MatIdEENS_11subview_rowIdEEEEvRT_RKNS_3eOpIT0_S1_EE"]; asm["__ZN4arma8eop_coreINS_19eop_scalar_div_postEE5applyINS_3MatIdEENS_11subview_rowIdEEEEvRT_RKNS_3eOpIT0_S1_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8eop_coreINS_19eop_scalar_div_postEE5applyINS_3MatIdEENS_11subview_rowIdEEEEvRT_RKNS_3eOpIT0_S1_EE.apply(null, arguments);
};

var real___ZN4arma8eop_coreINS_7eop_logEE5applyINS_3MatIdEENS_3RowIdEEEEvRT_RKNS_3eOpIT0_S1_EE = asm["__ZN4arma8eop_coreINS_7eop_logEE5applyINS_3MatIdEENS_3RowIdEEEEvRT_RKNS_3eOpIT0_S1_EE"]; asm["__ZN4arma8eop_coreINS_7eop_logEE5applyINS_3MatIdEENS_3RowIdEEEEvRT_RKNS_3eOpIT0_S1_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8eop_coreINS_7eop_logEE5applyINS_3MatIdEENS_3RowIdEEEEvRT_RKNS_3eOpIT0_S1_EE.apply(null, arguments);
};

var real___ZN4arma8eop_coreINS_7eop_powEE5applyINS_3MatIdEENS_7subviewIdEEEEvRT_RKNS_3eOpIT0_S1_EE = asm["__ZN4arma8eop_coreINS_7eop_powEE5applyINS_3MatIdEENS_7subviewIdEEEEvRT_RKNS_3eOpIT0_S1_EE"]; asm["__ZN4arma8eop_coreINS_7eop_powEE5applyINS_3MatIdEENS_7subviewIdEEEEvRT_RKNS_3eOpIT0_S1_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8eop_coreINS_7eop_powEE5applyINS_3MatIdEENS_7subviewIdEEEEvRT_RKNS_3eOpIT0_S1_EE.apply(null, arguments);
};

var real___ZN4arma8gmm_priv19running_mean_scalarIdE5resetEv = asm["__ZN4arma8gmm_priv19running_mean_scalarIdE5resetEv"]; asm["__ZN4arma8gmm_priv19running_mean_scalarIdE5resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8gmm_priv19running_mean_scalarIdE5resetEv.apply(null, arguments);
};

var real___ZN4arma8gmm_priv19running_mean_scalarIdEC2Ev = asm["__ZN4arma8gmm_priv19running_mean_scalarIdEC2Ev"]; asm["__ZN4arma8gmm_priv19running_mean_scalarIdEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8gmm_priv19running_mean_scalarIdEC2Ev.apply(null, arguments);
};

var real___ZN4arma8gmm_priv19running_mean_scalarIdEclEd = asm["__ZN4arma8gmm_priv19running_mean_scalarIdEclEd"]; asm["__ZN4arma8gmm_priv19running_mean_scalarIdEclEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8gmm_priv19running_mean_scalarIdEclEd.apply(null, arguments);
};

var real___ZN4arma8gmm_priv8gmm_diagIdE10km_iterateILj1EEEbRKNS_3MatIdEEjbPKc = asm["__ZN4arma8gmm_priv8gmm_diagIdE10km_iterateILj1EEEbRKNS_3MatIdEEjbPKc"]; asm["__ZN4arma8gmm_priv8gmm_diagIdE10km_iterateILj1EEEbRKNS_3MatIdEEjbPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8gmm_priv8gmm_diagIdE10km_iterateILj1EEEbRKNS_3MatIdEEjbPKc.apply(null, arguments);
};

var real___ZN4arma8gmm_priv8gmm_diagIdE14init_constantsEv = asm["__ZN4arma8gmm_priv8gmm_diagIdE14init_constantsEv"]; asm["__ZN4arma8gmm_priv8gmm_diagIdE14init_constantsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8gmm_priv8gmm_diagIdE14init_constantsEv.apply(null, arguments);
};

var real___ZN4arma8gmm_priv8gmm_diagIdE14kmeans_wrapperINS_2OpINS_3MatIdEENS_9op_htransEEEEEbRS6_RKNS_4BaseIdT_EEjRKNS_13gmm_seed_modeEjb = asm["__ZN4arma8gmm_priv8gmm_diagIdE14kmeans_wrapperINS_2OpINS_3MatIdEENS_9op_htransEEEEEbRS6_RKNS_4BaseIdT_EEjRKNS_13gmm_seed_modeEjb"]; asm["__ZN4arma8gmm_priv8gmm_diagIdE14kmeans_wrapperINS_2OpINS_3MatIdEENS_9op_htransEEEEEbRS6_RKNS_4BaseIdT_EEjRKNS_13gmm_seed_modeEjb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8gmm_priv8gmm_diagIdE14kmeans_wrapperINS_2OpINS_3MatIdEENS_9op_htransEEEEEbRS6_RKNS_4BaseIdT_EEjRKNS_13gmm_seed_modeEjb.apply(null, arguments);
};

var real___ZN4arma8gmm_priv8gmm_diagIdE22generate_initial_meansILj1EEEvRKNS_3MatIdEERKNS_13gmm_seed_modeE = asm["__ZN4arma8gmm_priv8gmm_diagIdE22generate_initial_meansILj1EEEvRKNS_3MatIdEERKNS_13gmm_seed_modeE"]; asm["__ZN4arma8gmm_priv8gmm_diagIdE22generate_initial_meansILj1EEEvRKNS_3MatIdEERKNS_13gmm_seed_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8gmm_priv8gmm_diagIdE22generate_initial_meansILj1EEEvRKNS_3MatIdEERKNS_13gmm_seed_modeE.apply(null, arguments);
};

var real___ZN4arma8gmm_priv8gmm_diagIdE4initEjj = asm["__ZN4arma8gmm_priv8gmm_diagIdE4initEjj"]; asm["__ZN4arma8gmm_priv8gmm_diagIdE4initEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8gmm_priv8gmm_diagIdE4initEjj.apply(null, arguments);
};

var real___ZN4arma8gmm_priv8gmm_diagIdE5resetEv = asm["__ZN4arma8gmm_priv8gmm_diagIdE5resetEv"]; asm["__ZN4arma8gmm_priv8gmm_diagIdE5resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8gmm_priv8gmm_diagIdE5resetEv.apply(null, arguments);
};

var real___ZN4arma8gmm_priv8gmm_diagIdEC2Ev = asm["__ZN4arma8gmm_priv8gmm_diagIdEC2Ev"]; asm["__ZN4arma8gmm_priv8gmm_diagIdEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8gmm_priv8gmm_diagIdEC2Ev.apply(null, arguments);
};

var real___ZN4arma8gmm_priv8gmm_diagIdED2Ev = asm["__ZN4arma8gmm_priv8gmm_diagIdED2Ev"]; asm["__ZN4arma8gmm_priv8gmm_diagIdED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8gmm_priv8gmm_diagIdED2Ev.apply(null, arguments);
};

var real___ZN4arma8herk_vecILb0ELb0ELb0EE5applyIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_ = asm["__ZN4arma8herk_vecILb0ELb0ELb0EE5applyIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_"]; asm["__ZN4arma8herk_vecILb0ELb0ELb0EE5applyIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8herk_vecILb0ELb0ELb0EE5applyIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_.apply(null, arguments);
};

var real___ZN4arma8linspaceINS_3ColIjEEEENS_10enable_if2IXsr6is_MatIT_EE5valueES4_E6resultENS4_8pod_typeES7_j = asm["__ZN4arma8linspaceINS_3ColIjEEEENS_10enable_if2IXsr6is_MatIT_EE5valueES4_E6resultENS4_8pod_typeES7_j"]; asm["__ZN4arma8linspaceINS_3ColIjEEEENS_10enable_if2IXsr6is_MatIT_EE5valueES4_E6resultENS4_8pod_typeES7_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8linspaceINS_3ColIjEEEENS_10enable_if2IXsr6is_MatIT_EE5valueES4_E6resultENS4_8pod_typeES7_j.apply(null, arguments);
};

var real___ZN4arma8podarrayINSt3__27complexIdEEE9init_coldEj = asm["__ZN4arma8podarrayINSt3__27complexIdEEE9init_coldEj"]; asm["__ZN4arma8podarrayINSt3__27complexIdEEE9init_coldEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8podarrayINSt3__27complexIdEEE9init_coldEj.apply(null, arguments);
};

var real___ZN4arma8podarrayINSt3__27complexIdEEED2Ev = asm["__ZN4arma8podarrayINSt3__27complexIdEEED2Ev"]; asm["__ZN4arma8podarrayINSt3__27complexIdEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8podarrayINSt3__27complexIdEEED2Ev.apply(null, arguments);
};

var real___ZN4arma8podarrayIdE9init_coldEj = asm["__ZN4arma8podarrayIdE9init_coldEj"]; asm["__ZN4arma8podarrayIdE9init_coldEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8podarrayIdE9init_coldEj.apply(null, arguments);
};

var real___ZN4arma8podarrayIdED2Ev = asm["__ZN4arma8podarrayIdED2Ev"]; asm["__ZN4arma8podarrayIdED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8podarrayIdED2Ev.apply(null, arguments);
};

var real___ZN4arma8podarrayIiE9init_coldEj = asm["__ZN4arma8podarrayIiE9init_coldEj"]; asm["__ZN4arma8podarrayIiE9init_coldEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8podarrayIiE9init_coldEj.apply(null, arguments);
};

var real___ZN4arma8podarrayIiED2Ev = asm["__ZN4arma8podarrayIiED2Ev"]; asm["__ZN4arma8podarrayIiED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8podarrayIiED2Ev.apply(null, arguments);
};

var real___ZN4arma8podarrayIjE9init_coldEj = asm["__ZN4arma8podarrayIjE9init_coldEj"]; asm["__ZN4arma8podarrayIjE9init_coldEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8podarrayIjE9init_coldEj.apply(null, arguments);
};

var real___ZN4arma8podarrayIjED2Ev = asm["__ZN4arma8podarrayIjED2Ev"]; asm["__ZN4arma8podarrayIjED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma8podarrayIjED2Ev.apply(null, arguments);
};

var real___ZN4arma9as_scalarINS_3MatIjEEEENT_9elem_typeERKNS_4BaseIS4_S3_EE = asm["__ZN4arma9as_scalarINS_3MatIjEEEENT_9elem_typeERKNS_4BaseIS4_S3_EE"]; asm["__ZN4arma9as_scalarINS_3MatIjEEEENT_9elem_typeERKNS_4BaseIS4_S3_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma9as_scalarINS_3MatIjEEEENT_9elem_typeERKNS_4BaseIS4_S3_EE.apply(null, arguments);
};

var real___ZN4arma9herk_emulILb0ELb0ELb0EE5applyIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_ = asm["__ZN4arma9herk_emulILb0ELb0ELb0EE5applyIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_"]; asm["__ZN4arma9herk_emulILb0ELb0ELb0EE5applyIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma9herk_emulILb0ELb0ELb0EE5applyIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_.apply(null, arguments);
};

var real___ZN4arma9herk_emulILb1ELb0ELb0EE5applyIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_ = asm["__ZN4arma9herk_emulILb1ELb0ELb0EE5applyIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_"]; asm["__ZN4arma9herk_emulILb1ELb0ELb0EE5applyIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma9herk_emulILb1ELb0ELb0EE5applyIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_.apply(null, arguments);
};

var real___ZN4arma9op_htrans17apply_mat_noaliasINSt3__27complexIdEEEEvRNS_3MatIT_EERKS7_PKNS_12arma_cx_onlyIS6_E6resultE = asm["__ZN4arma9op_htrans17apply_mat_noaliasINSt3__27complexIdEEEEvRNS_3MatIT_EERKS7_PKNS_12arma_cx_onlyIS6_E6resultE"]; asm["__ZN4arma9op_htrans17apply_mat_noaliasINSt3__27complexIdEEEEvRNS_3MatIT_EERKS7_PKNS_12arma_cx_onlyIS6_E6resultE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma9op_htrans17apply_mat_noaliasINSt3__27complexIdEEEEvRNS_3MatIT_EERKS7_PKNS_12arma_cx_onlyIS6_E6resultE.apply(null, arguments);
};

var real___ZN4arma9op_htrans5applyINS_3MatIdEEEEvRNS2_INT_9elem_typeEEERKNS_2OpIS4_S0_EEPKNS_11arma_not_cxIS5_E6resultE = asm["__ZN4arma9op_htrans5applyINS_3MatIdEEEEvRNS2_INT_9elem_typeEEERKNS_2OpIS4_S0_EEPKNS_11arma_not_cxIS5_E6resultE"]; asm["__ZN4arma9op_htrans5applyINS_3MatIdEEEEvRNS2_INT_9elem_typeEEERKNS_2OpIS4_S0_EEPKNS_11arma_not_cxIS5_E6resultE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma9op_htrans5applyINS_3MatIdEEEEvRNS2_INT_9elem_typeEEERKNS_2OpIS4_S0_EEPKNS_11arma_not_cxIS5_E6resultE.apply(null, arguments);
};

var real___ZN4arma9op_strans11apply_proxyINS_3MatIdEEEEvRNS2_INT_9elem_typeEEERKS4_ = asm["__ZN4arma9op_strans11apply_proxyINS_3MatIdEEEEvRNS2_INT_9elem_typeEEERKS4_"]; asm["__ZN4arma9op_strans11apply_proxyINS_3MatIdEEEEvRNS2_INT_9elem_typeEEERKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma9op_strans11apply_proxyINS_3MatIdEEEEvRNS2_INT_9elem_typeEEERKS4_.apply(null, arguments);
};

var real___ZN4arma9op_strans17apply_mat_inplaceIdEEvRNS_3MatIT_EE = asm["__ZN4arma9op_strans17apply_mat_inplaceIdEEvRNS_3MatIT_EE"]; asm["__ZN4arma9op_strans17apply_mat_inplaceIdEEvRNS_3MatIT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma9op_strans17apply_mat_inplaceIdEEvRNS_3MatIT_EE.apply(null, arguments);
};

var real___ZN4arma9op_strans17apply_mat_noaliasIdNS_3MatIdEEEEvRNS2_IT_EERKT0_ = asm["__ZN4arma9op_strans17apply_mat_noaliasIdNS_3MatIdEEEEvRNS2_IT_EERKT0_"]; asm["__ZN4arma9op_strans17apply_mat_noaliasIdNS_3MatIdEEEEvRNS2_IT_EERKT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma9op_strans17apply_mat_noaliasIdNS_3MatIdEEEEvRNS2_IT_EERKT0_.apply(null, arguments);
};

var real___ZN4arma9op_strans24apply_mat_noalias_tinysqINSt3__27complexIdEENS_3MatIS4_EEEEvRNS5_IT_EERKT0_ = asm["__ZN4arma9op_strans24apply_mat_noalias_tinysqINSt3__27complexIdEENS_3MatIS4_EEEEvRNS5_IT_EERKT0_"]; asm["__ZN4arma9op_strans24apply_mat_noalias_tinysqINSt3__27complexIdEENS_3MatIS4_EEEEvRNS5_IT_EERKT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma9op_strans24apply_mat_noalias_tinysqINSt3__27complexIdEENS_3MatIS4_EEEEvRNS5_IT_EERKT0_.apply(null, arguments);
};

var real___ZN4arma9op_strans24apply_mat_noalias_tinysqIdNS_3MatIdEEEEvRNS2_IT_EERKT0_ = asm["__ZN4arma9op_strans24apply_mat_noalias_tinysqIdNS_3MatIdEEEEvRNS2_IT_EERKT0_"]; asm["__ZN4arma9op_strans24apply_mat_noalias_tinysqIdNS_3MatIdEEEEvRNS2_IT_EERKT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma9op_strans24apply_mat_noalias_tinysqIdNS_3MatIdEEEEvRNS2_IT_EERKT0_.apply(null, arguments);
};

var real___ZN4arma9op_strans9apply_matIdNS_3MatIdEEEEvRNS2_IT_EERKT0_ = asm["__ZN4arma9op_strans9apply_matIdNS_3MatIdEEEEvRNS2_IT_EERKT0_"]; asm["__ZN4arma9op_strans9apply_matIdNS_3MatIdEEEEvRNS2_IT_EERKT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4arma9op_strans9apply_matIdNS_3MatIdEEEEvRNS2_IT_EERKT0_.apply(null, arguments);
};

var real___ZN4armaL19arma_stop_bad_allocIA39_cEEvRKT_ = asm["__ZN4armaL19arma_stop_bad_allocIA39_cEEvRKT_"]; asm["__ZN4armaL19arma_stop_bad_allocIA39_cEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4armaL19arma_stop_bad_allocIA39_cEEvRKT_.apply(null, arguments);
};

var real___ZN4armaL21arma_stop_logic_errorINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEvRKT_ = asm["__ZN4armaL21arma_stop_logic_errorINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEvRKT_"]; asm["__ZN4armaL21arma_stop_logic_errorINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4armaL21arma_stop_logic_errorINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEvRKT_.apply(null, arguments);
};

var real___ZN4armaL21arma_stop_logic_errorIPKcEEvRKT_ = asm["__ZN4armaL21arma_stop_logic_errorIPKcEEvRKT_"]; asm["__ZN4armaL21arma_stop_logic_errorIPKcEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4armaL21arma_stop_logic_errorIPKcEEvRKT_.apply(null, arguments);
};

var real___ZN4armaL23arma_stop_runtime_errorIA29_cEEvRKT_ = asm["__ZN4armaL23arma_stop_runtime_errorIA29_cEEvRKT_"]; asm["__ZN4armaL23arma_stop_runtime_errorIA29_cEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4armaL23arma_stop_runtime_errorIA29_cEEvRKT_.apply(null, arguments);
};

var real___ZN4armaL23arma_stop_runtime_errorIA91_cEEvRKT_ = asm["__ZN4armaL23arma_stop_runtime_errorIA91_cEEvRKT_"]; asm["__ZN4armaL23arma_stop_runtime_errorIA91_cEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4armaL23arma_stop_runtime_errorIA91_cEEvRKT_.apply(null, arguments);
};

var real___ZN4armaL25arma_incompat_size_stringEjjjjPKc = asm["__ZN4armaL25arma_incompat_size_stringEjjjjPKc"]; asm["__ZN4armaL25arma_incompat_size_stringEjjjjPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4armaL25arma_incompat_size_stringEjjjjPKc.apply(null, arguments);
};

var real___ZN4armaL9arma_warnIA28_cEEvRKT_ = asm["__ZN4armaL9arma_warnIA28_cEEvRKT_"]; asm["__ZN4armaL9arma_warnIA28_cEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4armaL9arma_warnIA28_cEEvRKT_.apply(null, arguments);
};

var real___ZN4armaL9arma_warnIA32_cEEvRKT_ = asm["__ZN4armaL9arma_warnIA32_cEEvRKT_"]; asm["__ZN4armaL9arma_warnIA32_cEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4armaL9arma_warnIA32_cEEvRKT_.apply(null, arguments);
};

var real___ZN4armaL9arma_warnIA34_cEEvRKT_ = asm["__ZN4armaL9arma_warnIA34_cEEvRKT_"]; asm["__ZN4armaL9arma_warnIA34_cEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4armaL9arma_warnIA34_cEEvRKT_.apply(null, arguments);
};

var real___ZN4armaL9arma_warnIA45_cEEvRKT_ = asm["__ZN4armaL9arma_warnIA45_cEEvRKT_"]; asm["__ZN4armaL9arma_warnIA45_cEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4armaL9arma_warnIA45_cEEvRKT_.apply(null, arguments);
};

var real___ZN4armaL9arma_warnIA49_cEEvRKT_ = asm["__ZN4armaL9arma_warnIA49_cEEvRKT_"]; asm["__ZN4armaL9arma_warnIA49_cEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4armaL9arma_warnIA49_cEEvRKT_.apply(null, arguments);
};

var real___ZN4armaL9arma_warnIA57_cEEvRKT_ = asm["__ZN4armaL9arma_warnIA57_cEEvRKT_"]; asm["__ZN4armaL9arma_warnIA57_cEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4armaL9arma_warnIA57_cEEvRKT_.apply(null, arguments);
};

var real___ZN4armaL9arma_warnIA67_cEEvRKT_ = asm["__ZN4armaL9arma_warnIA67_cEEvRKT_"]; asm["__ZN4armaL9arma_warnIA67_cEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4armaL9arma_warnIA67_cEEvRKT_.apply(null, arguments);
};

var real___ZN4armaL9arma_warnIA74_cEEvRKT_ = asm["__ZN4armaL9arma_warnIA74_cEEvRKT_"]; asm["__ZN4armaL9arma_warnIA74_cEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4armaL9arma_warnIA74_cEEvRKT_.apply(null, arguments);
};

var real___ZN4armaeqERKNS_13gmm_seed_modeES2_ = asm["__ZN4armaeqERKNS_13gmm_seed_modeES2_"]; asm["__ZN4armaeqERKNS_13gmm_seed_modeES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4armaeqERKNS_13gmm_seed_modeES2_.apply(null, arguments);
};

var real___ZN4armaeqINS_3RowIjEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueEKNS_4mtOpIjS4_NS_9op_rel_eqEEEE6resultERKS4_NS4_9elem_typeE = asm["__ZN4armaeqINS_3RowIjEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueEKNS_4mtOpIjS4_NS_9op_rel_eqEEEE6resultERKS4_NS4_9elem_typeE"]; asm["__ZN4armaeqINS_3RowIjEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueEKNS_4mtOpIjS4_NS_9op_rel_eqEEEE6resultERKS4_NS4_9elem_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4armaeqINS_3RowIjEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueEKNS_4mtOpIjS4_NS_9op_rel_eqEEEE6resultERKS4_NS4_9elem_typeE.apply(null, arguments);
};

var real___ZN4armageINS_3RowIjEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr5is_cxINS4_9elem_typeEEE2noEKNS_4mtOpIjS4_NS_16op_rel_gteq_postEEEE6resultERKS4_S5_ = asm["__ZN4armageINS_3RowIjEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr5is_cxINS4_9elem_typeEEE2noEKNS_4mtOpIjS4_NS_16op_rel_gteq_postEEEE6resultERKS4_S5_"]; asm["__ZN4armageINS_3RowIjEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr5is_cxINS4_9elem_typeEEE2noEKNS_4mtOpIjS4_NS_16op_rel_gteq_postEEEE6resultERKS4_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4armageINS_3RowIjEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr5is_cxINS4_9elem_typeEEE2noEKNS_4mtOpIjS4_NS_16op_rel_gteq_postEEEE6resultERKS4_S5_.apply(null, arguments);
};

var real___ZN4armalsIdNS_3MatIdEEEERNSt3__213basic_ostreamIcNS3_11char_traitsIcEEEES8_RKNS_4BaseIT_T0_EE = asm["__ZN4armalsIdNS_3MatIdEEEERNSt3__213basic_ostreamIcNS3_11char_traitsIcEEEES8_RKNS_4BaseIT_T0_EE"]; asm["__ZN4armalsIdNS_3MatIdEEEERNSt3__213basic_ostreamIcNS3_11char_traitsIcEEEES8_RKNS_4BaseIT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN4armalsIdNS_3MatIdEEEERNSt3__213basic_ostreamIcNS3_11char_traitsIcEEEES8_RKNS_4BaseIT_T0_EE.apply(null, arguments);
};

var real___ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev = asm["__ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev"]; asm["__ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev.apply(null, arguments);
};

var real___ZN54detection_objectDetector1_spectralClusterer_similarity4initEv = asm["__ZN54detection_objectDetector1_spectralClusterer_similarity4initEv"]; asm["__ZN54detection_objectDetector1_spectralClusterer_similarity4initEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN54detection_objectDetector1_spectralClusterer_similarity4initEv.apply(null, arguments);
};

var real___ZN54detection_objectDetector1_spectralClusterer_similarity7executeEv = asm["__ZN54detection_objectDetector1_spectralClusterer_similarity7executeEv"]; asm["__ZN54detection_objectDetector1_spectralClusterer_similarity7executeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN54detection_objectDetector1_spectralClusterer_similarity7executeEv.apply(null, arguments);
};

var real___ZN54detection_objectDetector1_spectralClusterer_similarityC2Ev = asm["__ZN54detection_objectDetector1_spectralClusterer_similarityC2Ev"]; asm["__ZN54detection_objectDetector1_spectralClusterer_similarityC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN54detection_objectDetector1_spectralClusterer_similarityC2Ev.apply(null, arguments);
};

var real___ZN54detection_objectDetector1_spectralClusterer_similarityD2Ev = asm["__ZN54detection_objectDetector1_spectralClusterer_similarityD2Ev"]; asm["__ZN54detection_objectDetector1_spectralClusterer_similarityD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN54detection_objectDetector1_spectralClusterer_similarityD2Ev.apply(null, arguments);
};

var real___ZN55detection_objectDetector1_spectralClusterer_eigenSolver4initEv = asm["__ZN55detection_objectDetector1_spectralClusterer_eigenSolver4initEv"]; asm["__ZN55detection_objectDetector1_spectralClusterer_eigenSolver4initEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN55detection_objectDetector1_spectralClusterer_eigenSolver4initEv.apply(null, arguments);
};

var real___ZN55detection_objectDetector1_spectralClusterer_eigenSolver7executeEv = asm["__ZN55detection_objectDetector1_spectralClusterer_eigenSolver7executeEv"]; asm["__ZN55detection_objectDetector1_spectralClusterer_eigenSolver7executeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN55detection_objectDetector1_spectralClusterer_eigenSolver7executeEv.apply(null, arguments);
};

var real___ZN55detection_objectDetector1_spectralClusterer_eigenSolverC2Ev = asm["__ZN55detection_objectDetector1_spectralClusterer_eigenSolverC2Ev"]; asm["__ZN55detection_objectDetector1_spectralClusterer_eigenSolverC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN55detection_objectDetector1_spectralClusterer_eigenSolverC2Ev.apply(null, arguments);
};

var real___ZN55detection_objectDetector1_spectralClusterer_eigenSolverD2Ev = asm["__ZN55detection_objectDetector1_spectralClusterer_eigenSolverD2Ev"]; asm["__ZN55detection_objectDetector1_spectralClusterer_eigenSolverD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN55detection_objectDetector1_spectralClusterer_eigenSolverD2Ev.apply(null, arguments);
};

var real___ZN60detection_objectDetector1_spectralClusterer_kMeansClustering4initEv = asm["__ZN60detection_objectDetector1_spectralClusterer_kMeansClustering4initEv"]; asm["__ZN60detection_objectDetector1_spectralClusterer_kMeansClustering4initEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN60detection_objectDetector1_spectralClusterer_kMeansClustering4initEv.apply(null, arguments);
};

var real___ZN60detection_objectDetector1_spectralClusterer_kMeansClustering7executeEv = asm["__ZN60detection_objectDetector1_spectralClusterer_kMeansClustering7executeEv"]; asm["__ZN60detection_objectDetector1_spectralClusterer_kMeansClustering7executeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN60detection_objectDetector1_spectralClusterer_kMeansClustering7executeEv.apply(null, arguments);
};

var real___ZN60detection_objectDetector1_spectralClusterer_kMeansClusteringC2Ev = asm["__ZN60detection_objectDetector1_spectralClusterer_kMeansClusteringC2Ev"]; asm["__ZN60detection_objectDetector1_spectralClusterer_kMeansClusteringC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN60detection_objectDetector1_spectralClusterer_kMeansClusteringC2Ev.apply(null, arguments);
};

var real___ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacian4initEv = asm["__ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacian4initEv"]; asm["__ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacian4initEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacian4initEv.apply(null, arguments);
};

var real___ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacian7executeEv = asm["__ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacian7executeEv"]; asm["__ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacian7executeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacian7executeEv.apply(null, arguments);
};

var real___ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacianC2Ev = asm["__ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacianC2Ev"]; asm["__ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacianC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacianC2Ev.apply(null, arguments);
};

var real___ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacianD2Ev = asm["__ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacianD2Ev"]; asm["__ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacianD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacianD2Ev.apply(null, arguments);
};

var real___ZN7HelperA10getSqrtMatEN4arma3MatIdEE = asm["__ZN7HelperA10getSqrtMatEN4arma3MatIdEE"]; asm["__ZN7HelperA10getSqrtMatEN4arma3MatIdEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN7HelperA10getSqrtMatEN4arma3MatIdEE.apply(null, arguments);
};

var real___ZN7HelperA15getEigenVectorsEN4arma3MatIdEE = asm["__ZN7HelperA15getEigenVectorsEN4arma3MatIdEE"]; asm["__ZN7HelperA15getEigenVectorsEN4arma3MatIdEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN7HelperA15getEigenVectorsEN4arma3MatIdEE.apply(null, arguments);
};

var real___ZN7HelperA17getKMeansClustersEN4arma3MatIdEEi = asm["__ZN7HelperA17getKMeansClustersEN4arma3MatIdEEi"]; asm["__ZN7HelperA17getKMeansClustersEN4arma3MatIdEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN7HelperA17getKMeansClustersEN4arma3MatIdEEi.apply(null, arguments);
};

var real___ZN7HelperA20getEuclideanDistanceEN4arma3MatIdEEiS2_i = asm["__ZN7HelperA20getEuclideanDistanceEN4arma3MatIdEEiS2_i"]; asm["__ZN7HelperA20getEuclideanDistanceEN4arma3MatIdEEiS2_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN7HelperA20getEuclideanDistanceEN4arma3MatIdEEiS2_i.apply(null, arguments);
};

var real___ZN7HelperA26getKMeansClustersIndexDataEN4arma3MatIdEES2_ = asm["__ZN7HelperA26getKMeansClustersIndexDataEN4arma3MatIdEES2_"]; asm["__ZN7HelperA26getKMeansClustersIndexDataEN4arma3MatIdEES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN7HelperA26getKMeansClustersIndexDataEN4arma3MatIdEES2_.apply(null, arguments);
};

var real___ZN7HelperA27getIndexForClusterCentroidsEN4arma3MatIdEEiS2_ = asm["__ZN7HelperA27getIndexForClusterCentroidsEN4arma3MatIdEEiS2_"]; asm["__ZN7HelperA27getIndexForClusterCentroidsEN4arma3MatIdEEiS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZN7HelperA27getIndexForClusterCentroidsEN4arma3MatIdEEiS2_.apply(null, arguments);
};

var real___ZNK10__cxxabiv116__shim_type_info5noop1Ev = asm["__ZNK10__cxxabiv116__shim_type_info5noop1Ev"]; asm["__ZNK10__cxxabiv116__shim_type_info5noop1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv116__shim_type_info5noop1Ev.apply(null, arguments);
};

var real___ZNK10__cxxabiv116__shim_type_info5noop2Ev = asm["__ZNK10__cxxabiv116__shim_type_info5noop2Ev"]; asm["__ZNK10__cxxabiv116__shim_type_info5noop2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv116__shim_type_info5noop2Ev.apply(null, arguments);
};

var real___ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = asm["__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"]; asm["__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib.apply(null, arguments);
};

var real___ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = asm["__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"]; asm["__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib.apply(null, arguments);
};

var real___ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi = asm["__ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi"]; asm["__ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi.apply(null, arguments);
};

var real___ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = asm["__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"]; asm["__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi.apply(null, arguments);
};

var real___ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i = asm["__ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i"]; asm["__ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i.apply(null, arguments);
};

var real___ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi = asm["__ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi"]; asm["__ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi.apply(null, arguments);
};

var real___ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv = asm["__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv"]; asm["__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv.apply(null, arguments);
};

var real___ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = asm["__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"]; asm["__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib.apply(null, arguments);
};

var real___ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = asm["__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"]; asm["__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib.apply(null, arguments);
};

var real___ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = asm["__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"]; asm["__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi.apply(null, arguments);
};

var real___ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = asm["__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"]; asm["__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib.apply(null, arguments);
};

var real___ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = asm["__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"]; asm["__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib.apply(null, arguments);
};

var real___ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = asm["__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"]; asm["__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi.apply(null, arguments);
};

var real___ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = asm["__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"]; asm["__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib.apply(null, arguments);
};

var real___ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = asm["__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"]; asm["__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib.apply(null, arguments);
};

var real___ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = asm["__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"]; asm["__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi.apply(null, arguments);
};

var real___ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv = asm["__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv"]; asm["__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv.apply(null, arguments);
};

var real___ZNK10emscripten3val2asIdJEEET_DpT0_ = asm["__ZNK10emscripten3val2asIdJEEET_DpT0_"]; asm["__ZNK10emscripten3val2asIdJEEET_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10emscripten3val2asIdJEEET_DpT0_.apply(null, arguments);
};

var real___ZNK10emscripten3val2asIiJEEET_DpT0_ = asm["__ZNK10emscripten3val2asIiJEEET_DpT0_"]; asm["__ZNK10emscripten3val2asIiJEEET_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10emscripten3val2asIiJEEET_DpT0_.apply(null, arguments);
};

var real___ZNK10emscripten3valixIA7_cEES0_RKT_ = asm["__ZNK10emscripten3valixIA7_cEES0_RKT_"]; asm["__ZNK10emscripten3valixIA7_cEES0_RKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10emscripten3valixIA7_cEES0_RKT_.apply(null, arguments);
};

var real___ZNK10emscripten3valixIiEES0_RKT_ = asm["__ZNK10emscripten3valixIiEES0_RKT_"]; asm["__ZNK10emscripten3valixIiEES0_RKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10emscripten3valixIiEES0_RKT_.apply(null, arguments);
};

var real___ZNK10emscripten8internal12WireTypePackIJRKdEEcvPKvEv = asm["__ZNK10emscripten8internal12WireTypePackIJRKdEEcvPKvEv"]; asm["__ZNK10emscripten8internal12WireTypePackIJRKdEEcvPKvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10emscripten8internal12WireTypePackIJRKdEEcvPKvEv.apply(null, arguments);
};

var real___ZNK10emscripten8internal12WireTypePackIJRKiEEcvPKvEv = asm["__ZNK10emscripten8internal12WireTypePackIJRKiEEcvPKvEv"]; asm["__ZNK10emscripten8internal12WireTypePackIJRKiEEcvPKvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10emscripten8internal12WireTypePackIJRKiEEcvPKvEv.apply(null, arguments);
};

var real___ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valEEE8getCountEv = asm["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valEEE8getCountEv"]; asm["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valEEE8getCountEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valEEE8getCountEv.apply(null, arguments);
};

var real___ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valEEE8getTypesEv = asm["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valEEE8getTypesEv"]; asm["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valEEE8getTypesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valEEE8getTypesEv.apply(null, arguments);
};

var real___ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdEE8getTypesEv = asm["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdEE8getTypesEv"]; asm["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdEE8getTypesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdEE8getTypesEv.apply(null, arguments);
};

var real___ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getTypesEv = asm["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getTypesEv"]; asm["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getTypesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getTypesEv.apply(null, arguments);
};

var real___ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getCountEv = asm["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getCountEv"]; asm["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getCountEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getCountEv.apply(null, arguments);
};

var real___ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getTypesEv = asm["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getTypesEv"]; asm["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getTypesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getTypesEv.apply(null, arguments);
};

var real___ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS_3valEEE8getCountEv = asm["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS_3valEEE8getCountEv"]; asm["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS_3valEEE8getCountEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS_3valEEE8getCountEv.apply(null, arguments);
};

var real___ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS_3valEEE8getTypesEv = asm["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS_3valEEE8getTypesEv"]; asm["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS_3valEEE8getTypesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS_3valEEE8getTypesEv.apply(null, arguments);
};

var real___ZNK4arma11subview_rowIdE6at_altEj = asm["__ZNK4arma11subview_rowIdE6at_altEj"]; asm["__ZNK4arma11subview_rowIdE6at_altEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK4arma11subview_rowIdE6at_altEj.apply(null, arguments);
};

var real___ZNK4arma11subview_rowIdEixEj = asm["__ZNK4arma11subview_rowIdEixEj"]; asm["__ZNK4arma11subview_rowIdEixEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK4arma11subview_rowIdEixEj.apply(null, arguments);
};

var real___ZNK4arma12arma_counterIdE12value_plus_1Ev = asm["__ZNK4arma12arma_counterIdE12value_plus_1Ev"]; asm["__ZNK4arma12arma_counterIdE12value_plus_1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK4arma12arma_counterIdE12value_plus_1Ev.apply(null, arguments);
};

var real___ZNK4arma12arma_counterIdE13value_minus_1Ev = asm["__ZNK4arma12arma_counterIdE13value_minus_1Ev"]; asm["__ZNK4arma12arma_counterIdE13value_minus_1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK4arma12arma_counterIdE13value_minus_1Ev.apply(null, arguments);
};

var real___ZNK4arma12arma_counterIdE5valueEv = asm["__ZNK4arma12arma_counterIdE5valueEv"]; asm["__ZNK4arma12arma_counterIdE5valueEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK4arma12arma_counterIdE5valueEv.apply(null, arguments);
};

var real___ZNK4arma12running_statIdE4meanEv = asm["__ZNK4arma12running_statIdE4meanEv"]; asm["__ZNK4arma12running_statIdE4meanEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK4arma12running_statIdE4meanEv.apply(null, arguments);
};

var real___ZNK4arma18arma_ostream_state7restoreERNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEE = asm["__ZNK4arma18arma_ostream_state7restoreERNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEE"]; asm["__ZNK4arma18arma_ostream_state7restoreERNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK4arma18arma_ostream_state7restoreERNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEE.apply(null, arguments);
};

var real___ZNK4arma3GenINS_3ColIdEENS_9gen_randuEE5applyERNS_3MatIdEE = asm["__ZNK4arma3GenINS_3ColIdEENS_9gen_randuEE5applyERNS_3MatIdEE"]; asm["__ZNK4arma3GenINS_3ColIdEENS_9gen_randuEE5applyERNS_3MatIdEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK4arma3GenINS_3ColIdEENS_9gen_randuEE5applyERNS_3MatIdEE.apply(null, arguments);
};

var real___ZNK4arma3MatIdE10unsafe_colEj = asm["__ZNK4arma3MatIdE10unsafe_colEj"]; asm["__ZNK4arma3MatIdE10unsafe_colEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK4arma3MatIdE10unsafe_colEj.apply(null, arguments);
};

var real___ZNK4arma3MatIdE9is_finiteEv = asm["__ZNK4arma3MatIdE9is_finiteEv"]; asm["__ZNK4arma3MatIdE9is_finiteEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK4arma3MatIdE9is_finiteEv.apply(null, arguments);
};

var real___ZNK4arma3MatIjE7has_nanEv = asm["__ZNK4arma3MatIjE7has_nanEv"]; asm["__ZNK4arma3MatIjE7has_nanEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK4arma3MatIjE7has_nanEv.apply(null, arguments);
};

var real___ZNK4arma7subviewIdE13check_overlapERKS1_ = asm["__ZNK4arma7subviewIdE13check_overlapERKS1_"]; asm["__ZNK4arma7subviewIdE13check_overlapERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK4arma7subviewIdE13check_overlapERKS1_.apply(null, arguments);
};

var real___ZNK4arma7subviewIdE2atEjj = asm["__ZNK4arma7subviewIdE2atEjj"]; asm["__ZNK4arma7subviewIdE2atEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK4arma7subviewIdE2atEjj.apply(null, arguments);
};

var real___ZNK4arma7subviewIdE6is_vecEv = asm["__ZNK4arma7subviewIdE6is_vecEv"]; asm["__ZNK4arma7subviewIdE6is_vecEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK4arma7subviewIdE6is_vecEv.apply(null, arguments);
};

var real___ZNK4arma7subviewIjE6is_vecEv = asm["__ZNK4arma7subviewIjE6is_vecEv"]; asm["__ZNK4arma7subviewIjE6is_vecEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK4arma7subviewIjE6is_vecEv.apply(null, arguments);
};

var real___ZNK4arma8gmm_priv19running_mean_scalarIdE4meanEv = asm["__ZNK4arma8gmm_priv19running_mean_scalarIdE4meanEv"]; asm["__ZNK4arma8gmm_priv19running_mean_scalarIdE4meanEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNK4arma8gmm_priv19running_mean_scalarIdE4meanEv.apply(null, arguments);
};

var real___ZNKSt11logic_error4whatEv = asm["__ZNKSt11logic_error4whatEv"]; asm["__ZNKSt11logic_error4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt11logic_error4whatEv.apply(null, arguments);
};

var real___ZNKSt13runtime_error4whatEv = asm["__ZNKSt13runtime_error4whatEv"]; asm["__ZNKSt13runtime_error4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt13runtime_error4whatEv.apply(null, arguments);
};

var real___ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc = asm["__ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc"]; asm["__ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc.apply(null, arguments);
};

var real___ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc = asm["__ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc"]; asm["__ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc.apply(null, arguments);
};

var real___ZNKSt3__210error_code7messageEv = asm["__ZNKSt3__210error_code7messageEv"]; asm["__ZNKSt3__210error_code7messageEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210error_code7messageEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb0EE11do_groupingEv = asm["__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv"]; asm["__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb0EE11do_groupingEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv = asm["__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv"]; asm["__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv = asm["__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv"]; asm["__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv = asm["__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv"]; asm["__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv = asm["__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv"]; asm["__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv = asm["__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv"]; asm["__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv = asm["__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv"]; asm["__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv = asm["__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv"]; asm["__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv = asm["__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv"]; asm["__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb1EE11do_groupingEv = asm["__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv"]; asm["__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb1EE11do_groupingEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv = asm["__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv"]; asm["__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv = asm["__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv"]; asm["__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv = asm["__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv"]; asm["__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv = asm["__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv"]; asm["__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv = asm["__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv"]; asm["__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv = asm["__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv"]; asm["__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv = asm["__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv"]; asm["__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv = asm["__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv"]; asm["__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb0EE11do_groupingEv = asm["__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv"]; asm["__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb0EE11do_groupingEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv = asm["__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv"]; asm["__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv = asm["__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv"]; asm["__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv = asm["__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv"]; asm["__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv = asm["__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv"]; asm["__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv = asm["__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv"]; asm["__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv = asm["__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv"]; asm["__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv = asm["__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv"]; asm["__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv = asm["__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv"]; asm["__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb1EE11do_groupingEv = asm["__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv"]; asm["__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb1EE11do_groupingEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv = asm["__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv"]; asm["__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv = asm["__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv"]; asm["__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv = asm["__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv"]; asm["__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv = asm["__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv"]; asm["__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv = asm["__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv"]; asm["__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv = asm["__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv"]; asm["__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv = asm["__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv"]; asm["__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv.apply(null, arguments);
};

var real___ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv = asm["__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv"]; asm["__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv.apply(null, arguments);
};

var real___ZNKSt3__212_GLOBAL__N_111__fake_bindclEv = asm["__ZNKSt3__212_GLOBAL__N_111__fake_bindclEv"]; asm["__ZNKSt3__212_GLOBAL__N_111__fake_bindclEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__212_GLOBAL__N_111__fake_bindclEv.apply(null, arguments);
};

var real___ZNKSt3__212__do_message7messageEi = asm["__ZNKSt3__212__do_message7messageEi"]; asm["__ZNKSt3__212__do_message7messageEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__212__do_message7messageEi.apply(null, arguments);
};

var real___ZNKSt3__214error_category10equivalentERKNS_10error_codeEi = asm["__ZNKSt3__214error_category10equivalentERKNS_10error_codeEi"]; asm["__ZNKSt3__214error_category10equivalentERKNS_10error_codeEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__214error_category10equivalentERKNS_10error_codeEi.apply(null, arguments);
};

var real___ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE = asm["__ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE"]; asm["__ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE.apply(null, arguments);
};

var real___ZNKSt3__214error_category23default_error_conditionEi = asm["__ZNKSt3__214error_category23default_error_conditionEi"]; asm["__ZNKSt3__214error_category23default_error_conditionEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__214error_category23default_error_conditionEi.apply(null, arguments);
};

var real___ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv = asm["__ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv"]; asm["__ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv.apply(null, arguments);
};

var real___ZNKSt3__218__libcpp_refstring15__uses_refcountEv = asm["__ZNKSt3__218__libcpp_refstring15__uses_refcountEv"]; asm["__ZNKSt3__218__libcpp_refstring15__uses_refcountEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__218__libcpp_refstring15__uses_refcountEv.apply(null, arguments);
};

var real___ZNKSt3__218__libcpp_refstring5c_strEv = asm["__ZNKSt3__218__libcpp_refstring5c_strEv"]; asm["__ZNKSt3__218__libcpp_refstring5c_strEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__218__libcpp_refstring5c_strEv.apply(null, arguments);
};

var real___ZNKSt3__219__iostream_category4nameEv = asm["__ZNKSt3__219__iostream_category4nameEv"]; asm["__ZNKSt3__219__iostream_category4nameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__219__iostream_category4nameEv.apply(null, arguments);
};

var real___ZNKSt3__219__iostream_category7messageEi = asm["__ZNKSt3__219__iostream_category7messageEi"]; asm["__ZNKSt3__219__iostream_category7messageEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__219__iostream_category7messageEi.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIcE3__XEv = asm["__ZNKSt3__220__time_get_c_storageIcE3__XEv"]; asm["__ZNKSt3__220__time_get_c_storageIcE3__XEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIcE3__XEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIcE3__cEv = asm["__ZNKSt3__220__time_get_c_storageIcE3__cEv"]; asm["__ZNKSt3__220__time_get_c_storageIcE3__cEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIcE3__cEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIcE3__rEv = asm["__ZNKSt3__220__time_get_c_storageIcE3__rEv"]; asm["__ZNKSt3__220__time_get_c_storageIcE3__rEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIcE3__rEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIcE3__xEv = asm["__ZNKSt3__220__time_get_c_storageIcE3__xEv"]; asm["__ZNKSt3__220__time_get_c_storageIcE3__xEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIcE3__xEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIcE7__am_pmEv = asm["__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv"]; asm["__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIcE7__am_pmEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIcE7__weeksEv = asm["__ZNKSt3__220__time_get_c_storageIcE7__weeksEv"]; asm["__ZNKSt3__220__time_get_c_storageIcE7__weeksEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIcE7__weeksEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIcE8__monthsEv = asm["__ZNKSt3__220__time_get_c_storageIcE8__monthsEv"]; asm["__ZNKSt3__220__time_get_c_storageIcE8__monthsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIcE8__monthsEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIwE3__XEv = asm["__ZNKSt3__220__time_get_c_storageIwE3__XEv"]; asm["__ZNKSt3__220__time_get_c_storageIwE3__XEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIwE3__XEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIwE3__cEv = asm["__ZNKSt3__220__time_get_c_storageIwE3__cEv"]; asm["__ZNKSt3__220__time_get_c_storageIwE3__cEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIwE3__cEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIwE3__rEv = asm["__ZNKSt3__220__time_get_c_storageIwE3__rEv"]; asm["__ZNKSt3__220__time_get_c_storageIwE3__rEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIwE3__rEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIwE3__xEv = asm["__ZNKSt3__220__time_get_c_storageIwE3__xEv"]; asm["__ZNKSt3__220__time_get_c_storageIwE3__xEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIwE3__xEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIwE7__am_pmEv = asm["__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv"]; asm["__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIwE7__am_pmEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIwE7__weeksEv = asm["__ZNKSt3__220__time_get_c_storageIwE7__weeksEv"]; asm["__ZNKSt3__220__time_get_c_storageIwE7__weeksEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIwE7__weeksEv.apply(null, arguments);
};

var real___ZNKSt3__220__time_get_c_storageIwE8__monthsEv = asm["__ZNKSt3__220__time_get_c_storageIwE8__monthsEv"]; asm["__ZNKSt3__220__time_get_c_storageIwE8__monthsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__time_get_c_storageIwE8__monthsEv.apply(null, arguments);
};

var real___ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv = asm["__ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv"]; asm["__ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv.apply(null, arguments);
};

var real___ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv = asm["__ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv"]; asm["__ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIcE10do_tolowerEPcPKc = asm["__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc"]; asm["__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIcE10do_tolowerEPcPKc.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIcE10do_tolowerEc = asm["__ZNKSt3__25ctypeIcE10do_tolowerEc"]; asm["__ZNKSt3__25ctypeIcE10do_tolowerEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIcE10do_tolowerEc.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIcE10do_toupperEPcPKc = asm["__ZNKSt3__25ctypeIcE10do_toupperEPcPKc"]; asm["__ZNKSt3__25ctypeIcE10do_toupperEPcPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIcE10do_toupperEPcPKc.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIcE10do_toupperEc = asm["__ZNKSt3__25ctypeIcE10do_toupperEc"]; asm["__ZNKSt3__25ctypeIcE10do_toupperEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIcE10do_toupperEc.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc = asm["__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc"]; asm["__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIcE8do_widenEc = asm["__ZNKSt3__25ctypeIcE8do_widenEc"]; asm["__ZNKSt3__25ctypeIcE8do_widenEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIcE8do_widenEc.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc = asm["__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc"]; asm["__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIcE9do_narrowEcc = asm["__ZNKSt3__25ctypeIcE9do_narrowEcc"]; asm["__ZNKSt3__25ctypeIcE9do_narrowEcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIcE9do_narrowEcc.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_ = asm["__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_"]; asm["__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE10do_tolowerEPwPKw = asm["__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw"]; asm["__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE10do_tolowerEPwPKw.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE10do_tolowerEw = asm["__ZNKSt3__25ctypeIwE10do_tolowerEw"]; asm["__ZNKSt3__25ctypeIwE10do_tolowerEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE10do_tolowerEw.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE10do_toupperEPwPKw = asm["__ZNKSt3__25ctypeIwE10do_toupperEPwPKw"]; asm["__ZNKSt3__25ctypeIwE10do_toupperEPwPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE10do_toupperEPwPKw.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE10do_toupperEw = asm["__ZNKSt3__25ctypeIwE10do_toupperEw"]; asm["__ZNKSt3__25ctypeIwE10do_toupperEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE10do_toupperEw.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_ = asm["__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_"]; asm["__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt = asm["__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt"]; asm["__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE5do_isEtw = asm["__ZNKSt3__25ctypeIwE5do_isEtw"]; asm["__ZNKSt3__25ctypeIwE5do_isEtw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE5do_isEtw.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw = asm["__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw"]; asm["__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE8do_widenEc = asm["__ZNKSt3__25ctypeIwE8do_widenEc"]; asm["__ZNKSt3__25ctypeIwE8do_widenEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE8do_widenEc.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc = asm["__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc"]; asm["__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc.apply(null, arguments);
};

var real___ZNKSt3__25ctypeIwE9do_narrowEwc = asm["__ZNKSt3__25ctypeIwE9do_narrowEwc"]; asm["__ZNKSt3__25ctypeIwE9do_narrowEwc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__25ctypeIwE9do_narrowEwc.apply(null, arguments);
};

var real___ZNKSt3__26locale5__imp9has_facetEl = asm["__ZNKSt3__26locale5__imp9has_facetEl"]; asm["__ZNKSt3__26locale5__imp9has_facetEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26locale5__imp9has_facetEl.apply(null, arguments);
};

var real___ZNKSt3__26locale5__imp9use_facetEl = asm["__ZNKSt3__26locale5__imp9use_facetEl"]; asm["__ZNKSt3__26locale5__imp9use_facetEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26locale5__imp9use_facetEl.apply(null, arguments);
};

var real___ZNKSt3__26locale9has_facetERNS0_2idE = asm["__ZNKSt3__26locale9has_facetERNS0_2idE"]; asm["__ZNKSt3__26locale9has_facetERNS0_2idE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26locale9has_facetERNS0_2idE.apply(null, arguments);
};

var real___ZNKSt3__26locale9use_facetERNS0_2idE = asm["__ZNKSt3__26locale9use_facetERNS0_2idE"]; asm["__ZNKSt3__26locale9use_facetERNS0_2idE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26locale9use_facetERNS0_2idE.apply(null, arguments);
};

var real___ZNKSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEE8max_sizeEv = asm["__ZNKSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEE8max_sizeEv"]; asm["__ZNKSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEE8max_sizeEv.apply(null, arguments);
};

var real___ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv = asm["__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv"]; asm["__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = asm["__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"]; asm["__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv = asm["__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv"]; asm["__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv = asm["__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv"]; asm["__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv = asm["__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv"]; asm["__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_ = asm["__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_"]; asm["__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_ = asm["__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_"]; asm["__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j = asm["__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j"]; asm["__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"]; asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv = asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv"]; asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv = asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv"]; asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv = asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv"]; asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_ = asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_"]; asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_ = asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_"]; asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j = asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j"]; asm["__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = asm["__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"]; asm["__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv = asm["__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv"]; asm["__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv = asm["__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv"]; asm["__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv = asm["__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv"]; asm["__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_ = asm["__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_"]; asm["__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_ = asm["__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_"]; asm["__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j = asm["__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j"]; asm["__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = asm["__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"]; asm["__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv = asm["__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv"]; asm["__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv = asm["__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv"]; asm["__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv = asm["__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv"]; asm["__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_ = asm["__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_"]; asm["__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_ = asm["__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_"]; asm["__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_.apply(null, arguments);
};

var real___ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j = asm["__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j"]; asm["__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j.apply(null, arguments);
};

var real___ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_ = asm["__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_"]; asm["__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_.apply(null, arguments);
};

var real___ZNKSt3__27collateIcE12do_transformEPKcS3_ = asm["__ZNKSt3__27collateIcE12do_transformEPKcS3_"]; asm["__ZNKSt3__27collateIcE12do_transformEPKcS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27collateIcE12do_transformEPKcS3_.apply(null, arguments);
};

var real___ZNKSt3__27collateIcE7do_hashEPKcS3_ = asm["__ZNKSt3__27collateIcE7do_hashEPKcS3_"]; asm["__ZNKSt3__27collateIcE7do_hashEPKcS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27collateIcE7do_hashEPKcS3_.apply(null, arguments);
};

var real___ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_ = asm["__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_"]; asm["__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_.apply(null, arguments);
};

var real___ZNKSt3__27collateIwE12do_transformEPKwS3_ = asm["__ZNKSt3__27collateIwE12do_transformEPKwS3_"]; asm["__ZNKSt3__27collateIwE12do_transformEPKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27collateIwE12do_transformEPKwS3_.apply(null, arguments);
};

var real___ZNKSt3__27collateIwE7do_hashEPKwS3_ = asm["__ZNKSt3__27collateIwE7do_hashEPKwS3_"]; asm["__ZNKSt3__27collateIwE7do_hashEPKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27collateIwE7do_hashEPKwS3_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"]; asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"]; asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"]; asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"]; asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"]; asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"]; asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"]; asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"]; asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"]; asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"]; asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"]; asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"]; asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"]; asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"]; asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"]; asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"]; asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"]; asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"]; asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"]; asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy.apply(null, arguments);
};

var real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_ = asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"]; asm["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"]; asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"]; asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"]; asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"]; asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"]; asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"]; asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"]; asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"]; asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_ = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"]; asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"]; asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"]; asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"]; asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"]; asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"]; asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"]; asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"]; asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"]; asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"]; asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"]; asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy.apply(null, arguments);
};

var real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_ = asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"]; asm["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_.apply(null, arguments);
};

var real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv"]; asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv.apply(null, arguments);
};

var real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb"]; asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb.apply(null, arguments);
};

var real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd"]; asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd.apply(null, arguments);
};

var real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce"]; asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce.apply(null, arguments);
};

var real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl"]; asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl.apply(null, arguments);
};

var real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm"]; asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm.apply(null, arguments);
};

var real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx"]; asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx.apply(null, arguments);
};

var real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy = asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy"]; asm["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy.apply(null, arguments);
};

var real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv"]; asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv.apply(null, arguments);
};

var real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb"]; asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb.apply(null, arguments);
};

var real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd"]; asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd.apply(null, arguments);
};

var real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe"]; asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe.apply(null, arguments);
};

var real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl"]; asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl.apply(null, arguments);
};

var real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm"]; asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm.apply(null, arguments);
};

var real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx"]; asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx.apply(null, arguments);
};

var real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy = asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy"]; asm["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy.apply(null, arguments);
};

var real___ZNKSt3__28ios_base6getlocEv = asm["__ZNKSt3__28ios_base6getlocEv"]; asm["__ZNKSt3__28ios_base6getlocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28ios_base6getlocEv.apply(null, arguments);
};

var real___ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = asm["__ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"]; asm["__ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE.apply(null, arguments);
};

var real___ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE = asm["__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"]; asm["__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE.apply(null, arguments);
};

var real___ZNKSt3__28messagesIcE8do_closeEi = asm["__ZNKSt3__28messagesIcE8do_closeEi"]; asm["__ZNKSt3__28messagesIcE8do_closeEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28messagesIcE8do_closeEi.apply(null, arguments);
};

var real___ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE = asm["__ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE"]; asm["__ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE.apply(null, arguments);
};

var real___ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE = asm["__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"]; asm["__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE.apply(null, arguments);
};

var real___ZNKSt3__28messagesIwE8do_closeEi = asm["__ZNKSt3__28messagesIwE8do_closeEi"]; asm["__ZNKSt3__28messagesIwE8do_closeEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28messagesIwE8do_closeEi.apply(null, arguments);
};

var real___ZNKSt3__28numpunctIcE11do_groupingEv = asm["__ZNKSt3__28numpunctIcE11do_groupingEv"]; asm["__ZNKSt3__28numpunctIcE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28numpunctIcE11do_groupingEv.apply(null, arguments);
};

var real___ZNKSt3__28numpunctIcE11do_truenameEv = asm["__ZNKSt3__28numpunctIcE11do_truenameEv"]; asm["__ZNKSt3__28numpunctIcE11do_truenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28numpunctIcE11do_truenameEv.apply(null, arguments);
};

var real___ZNKSt3__28numpunctIcE12do_falsenameEv = asm["__ZNKSt3__28numpunctIcE12do_falsenameEv"]; asm["__ZNKSt3__28numpunctIcE12do_falsenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28numpunctIcE12do_falsenameEv.apply(null, arguments);
};

var real___ZNKSt3__28numpunctIcE16do_decimal_pointEv = asm["__ZNKSt3__28numpunctIcE16do_decimal_pointEv"]; asm["__ZNKSt3__28numpunctIcE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28numpunctIcE16do_decimal_pointEv.apply(null, arguments);
};

var real___ZNKSt3__28numpunctIcE16do_thousands_sepEv = asm["__ZNKSt3__28numpunctIcE16do_thousands_sepEv"]; asm["__ZNKSt3__28numpunctIcE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28numpunctIcE16do_thousands_sepEv.apply(null, arguments);
};

var real___ZNKSt3__28numpunctIwE11do_groupingEv = asm["__ZNKSt3__28numpunctIwE11do_groupingEv"]; asm["__ZNKSt3__28numpunctIwE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28numpunctIwE11do_groupingEv.apply(null, arguments);
};

var real___ZNKSt3__28numpunctIwE11do_truenameEv = asm["__ZNKSt3__28numpunctIwE11do_truenameEv"]; asm["__ZNKSt3__28numpunctIwE11do_truenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28numpunctIwE11do_truenameEv.apply(null, arguments);
};

var real___ZNKSt3__28numpunctIwE12do_falsenameEv = asm["__ZNKSt3__28numpunctIwE12do_falsenameEv"]; asm["__ZNKSt3__28numpunctIwE12do_falsenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28numpunctIwE12do_falsenameEv.apply(null, arguments);
};

var real___ZNKSt3__28numpunctIwE16do_decimal_pointEv = asm["__ZNKSt3__28numpunctIwE16do_decimal_pointEv"]; asm["__ZNKSt3__28numpunctIwE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28numpunctIwE16do_decimal_pointEv.apply(null, arguments);
};

var real___ZNKSt3__28numpunctIwE16do_thousands_sepEv = asm["__ZNKSt3__28numpunctIwE16do_thousands_sepEv"]; asm["__ZNKSt3__28numpunctIwE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28numpunctIwE16do_thousands_sepEv.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE"]; asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE"]; asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE"]; asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE"]; asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE"]; asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"]; asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"]; asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"]; asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE"]; asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE"]; asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE"]; asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE"]; asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE"]; asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv"]; asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"]; asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE"]; asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"]; asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE"]; asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE"]; asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE"]; asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_ = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_"]; asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"]; asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc.apply(null, arguments);
};

var real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE = asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE"]; asm["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE"]; asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE"]; asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE"]; asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE"]; asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE"]; asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"]; asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"]; asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"]; asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE"]; asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE"]; asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE"]; asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE"]; asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE"]; asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv"]; asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"]; asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE"]; asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"]; asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE"]; asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE"]; asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE"]; asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_ = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_"]; asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"]; asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc.apply(null, arguments);
};

var real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE = asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE"]; asm["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE.apply(null, arguments);
};

var real___ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc = asm["__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc"]; asm["__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc.apply(null, arguments);
};

var real___ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc = asm["__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc"]; asm["__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc.apply(null, arguments);
};

var real___ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE = asm["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE"]; asm["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE.apply(null, arguments);
};

var real___ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe = asm["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"]; asm["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe.apply(null, arguments);
};

var real___ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE = asm["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE"]; asm["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE.apply(null, arguments);
};

var real___ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe = asm["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"]; asm["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe.apply(null, arguments);
};

var real___ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE = asm["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE"]; asm["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE.apply(null, arguments);
};

var real___ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce = asm["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce"]; asm["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce.apply(null, arguments);
};

var real___ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE = asm["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE"]; asm["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE.apply(null, arguments);
};

var real___ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe = asm["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe"]; asm["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe.apply(null, arguments);
};

var real___ZNKSt8bad_cast4whatEv = asm["__ZNKSt8bad_cast4whatEv"]; asm["__ZNKSt8bad_cast4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt8bad_cast4whatEv.apply(null, arguments);
};

var real___ZNKSt9bad_alloc4whatEv = asm["__ZNKSt9bad_alloc4whatEv"]; asm["__ZNKSt9bad_alloc4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNKSt9bad_alloc4whatEv.apply(null, arguments);
};

var real___ZNSt11logic_errorC2EPKc = asm["__ZNSt11logic_errorC2EPKc"]; asm["__ZNSt11logic_errorC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt11logic_errorC2EPKc.apply(null, arguments);
};

var real___ZNSt11logic_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE = asm["__ZNSt11logic_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"]; asm["__ZNSt11logic_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt11logic_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE.apply(null, arguments);
};

var real___ZNSt11logic_errorD0Ev = asm["__ZNSt11logic_errorD0Ev"]; asm["__ZNSt11logic_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt11logic_errorD0Ev.apply(null, arguments);
};

var real___ZNSt11logic_errorD2Ev = asm["__ZNSt11logic_errorD2Ev"]; asm["__ZNSt11logic_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt11logic_errorD2Ev.apply(null, arguments);
};

var real___ZNSt12length_errorD0Ev = asm["__ZNSt12length_errorD0Ev"]; asm["__ZNSt12length_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt12length_errorD0Ev.apply(null, arguments);
};

var real___ZNSt13runtime_errorC2EPKc = asm["__ZNSt13runtime_errorC2EPKc"]; asm["__ZNSt13runtime_errorC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt13runtime_errorC2EPKc.apply(null, arguments);
};

var real___ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE = asm["__ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"]; asm["__ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE.apply(null, arguments);
};

var real___ZNSt13runtime_errorD0Ev = asm["__ZNSt13runtime_errorD0Ev"]; asm["__ZNSt13runtime_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt13runtime_errorD0Ev.apply(null, arguments);
};

var real___ZNSt13runtime_errorD2Ev = asm["__ZNSt13runtime_errorD2Ev"]; asm["__ZNSt13runtime_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt13runtime_errorD2Ev.apply(null, arguments);
};

var real___ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE = asm["__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE"]; asm["__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE.apply(null, arguments);
};

var real___ZNSt3__210__stdinbufIcE5uflowEv = asm["__ZNSt3__210__stdinbufIcE5uflowEv"]; asm["__ZNSt3__210__stdinbufIcE5uflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__stdinbufIcE5uflowEv.apply(null, arguments);
};

var real___ZNSt3__210__stdinbufIcE9__getcharEb = asm["__ZNSt3__210__stdinbufIcE9__getcharEb"]; asm["__ZNSt3__210__stdinbufIcE9__getcharEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__stdinbufIcE9__getcharEb.apply(null, arguments);
};

var real___ZNSt3__210__stdinbufIcE9pbackfailEi = asm["__ZNSt3__210__stdinbufIcE9pbackfailEi"]; asm["__ZNSt3__210__stdinbufIcE9pbackfailEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__stdinbufIcE9pbackfailEi.apply(null, arguments);
};

var real___ZNSt3__210__stdinbufIcE9underflowEv = asm["__ZNSt3__210__stdinbufIcE9underflowEv"]; asm["__ZNSt3__210__stdinbufIcE9underflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__stdinbufIcE9underflowEv.apply(null, arguments);
};

var real___ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t = asm["__ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t"]; asm["__ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t.apply(null, arguments);
};

var real___ZNSt3__210__stdinbufIcED0Ev = asm["__ZNSt3__210__stdinbufIcED0Ev"]; asm["__ZNSt3__210__stdinbufIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__stdinbufIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__210__stdinbufIcED2Ev = asm["__ZNSt3__210__stdinbufIcED2Ev"]; asm["__ZNSt3__210__stdinbufIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__stdinbufIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE = asm["__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE"]; asm["__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE.apply(null, arguments);
};

var real___ZNSt3__210__stdinbufIwE5uflowEv = asm["__ZNSt3__210__stdinbufIwE5uflowEv"]; asm["__ZNSt3__210__stdinbufIwE5uflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__stdinbufIwE5uflowEv.apply(null, arguments);
};

var real___ZNSt3__210__stdinbufIwE9__getcharEb = asm["__ZNSt3__210__stdinbufIwE9__getcharEb"]; asm["__ZNSt3__210__stdinbufIwE9__getcharEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__stdinbufIwE9__getcharEb.apply(null, arguments);
};

var real___ZNSt3__210__stdinbufIwE9pbackfailEj = asm["__ZNSt3__210__stdinbufIwE9pbackfailEj"]; asm["__ZNSt3__210__stdinbufIwE9pbackfailEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__stdinbufIwE9pbackfailEj.apply(null, arguments);
};

var real___ZNSt3__210__stdinbufIwE9underflowEv = asm["__ZNSt3__210__stdinbufIwE9underflowEv"]; asm["__ZNSt3__210__stdinbufIwE9underflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__stdinbufIwE9underflowEv.apply(null, arguments);
};

var real___ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t = asm["__ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t"]; asm["__ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t.apply(null, arguments);
};

var real___ZNSt3__210__stdinbufIwED0Ev = asm["__ZNSt3__210__stdinbufIwED0Ev"]; asm["__ZNSt3__210__stdinbufIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__stdinbufIwED0Ev.apply(null, arguments);
};

var real___ZNSt3__210__stdinbufIwED2Ev = asm["__ZNSt3__210__stdinbufIwED2Ev"]; asm["__ZNSt3__210__stdinbufIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__stdinbufIwED2Ev.apply(null, arguments);
};

var real___ZNSt3__210__time_putD2Ev = asm["__ZNSt3__210__time_putD2Ev"]; asm["__ZNSt3__210__time_putD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210__time_putD2Ev.apply(null, arguments);
};

var real___ZNSt3__210moneypunctIcLb0EED0Ev = asm["__ZNSt3__210moneypunctIcLb0EED0Ev"]; asm["__ZNSt3__210moneypunctIcLb0EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210moneypunctIcLb0EED0Ev.apply(null, arguments);
};

var real___ZNSt3__210moneypunctIcLb0EED2Ev = asm["__ZNSt3__210moneypunctIcLb0EED2Ev"]; asm["__ZNSt3__210moneypunctIcLb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210moneypunctIcLb0EED2Ev.apply(null, arguments);
};

var real___ZNSt3__210moneypunctIcLb1EED0Ev = asm["__ZNSt3__210moneypunctIcLb1EED0Ev"]; asm["__ZNSt3__210moneypunctIcLb1EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210moneypunctIcLb1EED0Ev.apply(null, arguments);
};

var real___ZNSt3__210moneypunctIcLb1EED2Ev = asm["__ZNSt3__210moneypunctIcLb1EED2Ev"]; asm["__ZNSt3__210moneypunctIcLb1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210moneypunctIcLb1EED2Ev.apply(null, arguments);
};

var real___ZNSt3__210moneypunctIwLb0EED0Ev = asm["__ZNSt3__210moneypunctIwLb0EED0Ev"]; asm["__ZNSt3__210moneypunctIwLb0EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210moneypunctIwLb0EED0Ev.apply(null, arguments);
};

var real___ZNSt3__210moneypunctIwLb0EED2Ev = asm["__ZNSt3__210moneypunctIwLb0EED2Ev"]; asm["__ZNSt3__210moneypunctIwLb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210moneypunctIwLb0EED2Ev.apply(null, arguments);
};

var real___ZNSt3__210moneypunctIwLb1EED0Ev = asm["__ZNSt3__210moneypunctIwLb1EED0Ev"]; asm["__ZNSt3__210moneypunctIwLb1EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210moneypunctIwLb1EED0Ev.apply(null, arguments);
};

var real___ZNSt3__210moneypunctIwLb1EED2Ev = asm["__ZNSt3__210moneypunctIwLb1EED2Ev"]; asm["__ZNSt3__210moneypunctIwLb1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__210moneypunctIwLb1EED2Ev.apply(null, arguments);
};

var real___ZNSt3__211__call_onceERVmPvPFvS2_E = asm["__ZNSt3__211__call_onceERVmPvPFvS2_E"]; asm["__ZNSt3__211__call_onceERVmPvPFvS2_E"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__call_onceERVmPvPFvS2_E.apply(null, arguments);
};

var real___ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri = asm["__ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri"]; asm["__ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri.apply(null, arguments);
};

var real___ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri = asm["__ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri"]; asm["__ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri.apply(null, arguments);
};

var real___ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri = asm["__ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri"]; asm["__ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri.apply(null, arguments);
};

var real___ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i = asm["__ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i"]; asm["__ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i.apply(null, arguments);
};

var real___ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri = asm["__ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri"]; asm["__ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri.apply(null, arguments);
};

var real___ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i = asm["__ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i"]; asm["__ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i.apply(null, arguments);
};

var real___ZNSt3__211__stdoutbufIcE4syncEv = asm["__ZNSt3__211__stdoutbufIcE4syncEv"]; asm["__ZNSt3__211__stdoutbufIcE4syncEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__stdoutbufIcE4syncEv.apply(null, arguments);
};

var real___ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE = asm["__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE"]; asm["__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE.apply(null, arguments);
};

var real___ZNSt3__211__stdoutbufIcE6xsputnEPKci = asm["__ZNSt3__211__stdoutbufIcE6xsputnEPKci"]; asm["__ZNSt3__211__stdoutbufIcE6xsputnEPKci"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__stdoutbufIcE6xsputnEPKci.apply(null, arguments);
};

var real___ZNSt3__211__stdoutbufIcE8overflowEi = asm["__ZNSt3__211__stdoutbufIcE8overflowEi"]; asm["__ZNSt3__211__stdoutbufIcE8overflowEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__stdoutbufIcE8overflowEi.apply(null, arguments);
};

var real___ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t = asm["__ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t"]; asm["__ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t.apply(null, arguments);
};

var real___ZNSt3__211__stdoutbufIcED0Ev = asm["__ZNSt3__211__stdoutbufIcED0Ev"]; asm["__ZNSt3__211__stdoutbufIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__stdoutbufIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__211__stdoutbufIcED2Ev = asm["__ZNSt3__211__stdoutbufIcED2Ev"]; asm["__ZNSt3__211__stdoutbufIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__stdoutbufIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__211__stdoutbufIwE4syncEv = asm["__ZNSt3__211__stdoutbufIwE4syncEv"]; asm["__ZNSt3__211__stdoutbufIwE4syncEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__stdoutbufIwE4syncEv.apply(null, arguments);
};

var real___ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE = asm["__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE"]; asm["__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE.apply(null, arguments);
};

var real___ZNSt3__211__stdoutbufIwE6xsputnEPKwi = asm["__ZNSt3__211__stdoutbufIwE6xsputnEPKwi"]; asm["__ZNSt3__211__stdoutbufIwE6xsputnEPKwi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__stdoutbufIwE6xsputnEPKwi.apply(null, arguments);
};

var real___ZNSt3__211__stdoutbufIwE8overflowEj = asm["__ZNSt3__211__stdoutbufIwE8overflowEj"]; asm["__ZNSt3__211__stdoutbufIwE8overflowEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__stdoutbufIwE8overflowEj.apply(null, arguments);
};

var real___ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t = asm["__ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t"]; asm["__ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t.apply(null, arguments);
};

var real___ZNSt3__211__stdoutbufIwED0Ev = asm["__ZNSt3__211__stdoutbufIwED0Ev"]; asm["__ZNSt3__211__stdoutbufIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__stdoutbufIwED0Ev.apply(null, arguments);
};

var real___ZNSt3__211__stdoutbufIwED2Ev = asm["__ZNSt3__211__stdoutbufIwED2Ev"]; asm["__ZNSt3__211__stdoutbufIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211__stdoutbufIwED2Ev.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIcE11eq_int_typeEii = asm["__ZNSt3__211char_traitsIcE11eq_int_typeEii"]; asm["__ZNSt3__211char_traitsIcE11eq_int_typeEii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIcE11eq_int_typeEii.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIcE11to_int_typeEc = asm["__ZNSt3__211char_traitsIcE11to_int_typeEc"]; asm["__ZNSt3__211char_traitsIcE11to_int_typeEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIcE11to_int_typeEc.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIcE12to_char_typeEi = asm["__ZNSt3__211char_traitsIcE12to_char_typeEi"]; asm["__ZNSt3__211char_traitsIcE12to_char_typeEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIcE12to_char_typeEi.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIcE2eqEcc = asm["__ZNSt3__211char_traitsIcE2eqEcc"]; asm["__ZNSt3__211char_traitsIcE2eqEcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIcE2eqEcc.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIcE3eofEv = asm["__ZNSt3__211char_traitsIcE3eofEv"]; asm["__ZNSt3__211char_traitsIcE3eofEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIcE3eofEv.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIcE4copyEPcPKcj = asm["__ZNSt3__211char_traitsIcE4copyEPcPKcj"]; asm["__ZNSt3__211char_traitsIcE4copyEPcPKcj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIcE4copyEPcPKcj.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIcE4moveEPcPKcj = asm["__ZNSt3__211char_traitsIcE4moveEPcPKcj"]; asm["__ZNSt3__211char_traitsIcE4moveEPcPKcj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIcE4moveEPcPKcj.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIcE6assignEPcjc = asm["__ZNSt3__211char_traitsIcE6assignEPcjc"]; asm["__ZNSt3__211char_traitsIcE6assignEPcjc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIcE6assignEPcjc.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIcE6assignERcRKc = asm["__ZNSt3__211char_traitsIcE6assignERcRKc"]; asm["__ZNSt3__211char_traitsIcE6assignERcRKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIcE6assignERcRKc.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIcE6lengthEPKc = asm["__ZNSt3__211char_traitsIcE6lengthEPKc"]; asm["__ZNSt3__211char_traitsIcE6lengthEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIcE6lengthEPKc.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIcE7not_eofEi = asm["__ZNSt3__211char_traitsIcE7not_eofEi"]; asm["__ZNSt3__211char_traitsIcE7not_eofEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIcE7not_eofEi.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIwE11eq_int_typeEjj = asm["__ZNSt3__211char_traitsIwE11eq_int_typeEjj"]; asm["__ZNSt3__211char_traitsIwE11eq_int_typeEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIwE11eq_int_typeEjj.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIwE11to_int_typeEw = asm["__ZNSt3__211char_traitsIwE11to_int_typeEw"]; asm["__ZNSt3__211char_traitsIwE11to_int_typeEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIwE11to_int_typeEw.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIwE12to_char_typeEj = asm["__ZNSt3__211char_traitsIwE12to_char_typeEj"]; asm["__ZNSt3__211char_traitsIwE12to_char_typeEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIwE12to_char_typeEj.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIwE3eofEv = asm["__ZNSt3__211char_traitsIwE3eofEv"]; asm["__ZNSt3__211char_traitsIwE3eofEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIwE3eofEv.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIwE4copyEPwPKwj = asm["__ZNSt3__211char_traitsIwE4copyEPwPKwj"]; asm["__ZNSt3__211char_traitsIwE4copyEPwPKwj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIwE4copyEPwPKwj.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIwE4moveEPwPKwj = asm["__ZNSt3__211char_traitsIwE4moveEPwPKwj"]; asm["__ZNSt3__211char_traitsIwE4moveEPwPKwj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIwE4moveEPwPKwj.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIwE6assignEPwjw = asm["__ZNSt3__211char_traitsIwE6assignEPwjw"]; asm["__ZNSt3__211char_traitsIwE6assignEPwjw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIwE6assignEPwjw.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIwE6assignERwRKw = asm["__ZNSt3__211char_traitsIwE6assignERwRKw"]; asm["__ZNSt3__211char_traitsIwE6assignERwRKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIwE6assignERwRKw.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIwE6lengthEPKw = asm["__ZNSt3__211char_traitsIwE6lengthEPKw"]; asm["__ZNSt3__211char_traitsIwE6lengthEPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIwE6lengthEPKw.apply(null, arguments);
};

var real___ZNSt3__211char_traitsIwE7not_eofEj = asm["__ZNSt3__211char_traitsIwE7not_eofEj"]; asm["__ZNSt3__211char_traitsIwE7not_eofEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__211char_traitsIwE7not_eofEj.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_ = asm["__ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_"]; asm["__ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_113do_strerror_rEi = asm["__ZNSt3__212_GLOBAL__N_113do_strerror_rEi"]; asm["__ZNSt3__212_GLOBAL__N_113do_strerror_rEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_113do_strerror_rEi.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = asm["__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"]; asm["__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_17countofIcEEjPKT_S4_ = asm["__ZNSt3__212_GLOBAL__N_17countofIcEEjPKT_S4_"]; asm["__ZNSt3__212_GLOBAL__N_17countofIcEEjPKT_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_17countofIcEEjPKT_S4_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_17countofIwEEjPKT_S4_ = asm["__ZNSt3__212_GLOBAL__N_17countofIwEEjPKT_S4_"]; asm["__ZNSt3__212_GLOBAL__N_17countofIwEEjPKT_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_17countofIwEEjPKT_S4_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_17releaseclEPNS_6locale5facetE = asm["__ZNSt3__212_GLOBAL__N_17releaseclEPNS_6locale5facetE"]; asm["__ZNSt3__212_GLOBAL__N_17releaseclEPNS_6locale5facetE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_17releaseclEPNS_6locale5facetE.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_ = asm["__ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_"]; asm["__ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_.apply(null, arguments);
};

var real___ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_ = asm["__ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_"]; asm["__ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_.apply(null, arguments);
};

var real___ZNSt3__212__do_nothingEPv = asm["__ZNSt3__212__do_nothingEPv"]; asm["__ZNSt3__212__do_nothingEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212__do_nothingEPv.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc"]; asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_ = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_"]; asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc"]; asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj"]; asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc"]; asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc"]; asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj"]; asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc"]; asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj"]; asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj"]; asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc"]; asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_ = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_"]; asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev"]; asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_ = asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_"]; asm["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw"]; asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_ = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_"]; asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwj = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwj"]; asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwj.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw"]; asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj"]; asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj"]; asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj"]; asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw"]; asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw.apply(null, arguments);
};

var real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev = asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev"]; asm["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = asm["__ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"]; asm["__ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE.apply(null, arguments);
};

var real___ZNSt3__212system_errorC2ENS_10error_codeEPKc = asm["__ZNSt3__212system_errorC2ENS_10error_codeEPKc"]; asm["__ZNSt3__212system_errorC2ENS_10error_codeEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212system_errorC2ENS_10error_codeEPKc.apply(null, arguments);
};

var real___ZNSt3__212system_errorD0Ev = asm["__ZNSt3__212system_errorD0Ev"]; asm["__ZNSt3__212system_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212system_errorD0Ev.apply(null, arguments);
};

var real___ZNSt3__212system_errorD2Ev = asm["__ZNSt3__212system_errorD2Ev"]; asm["__ZNSt3__212system_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__212system_errorD2Ev.apply(null, arguments);
};

var real___ZNSt3__213__vector_baseIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEED2Ev = asm["__ZNSt3__213__vector_baseIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEED2Ev"]; asm["__ZNSt3__213__vector_baseIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__vector_baseIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev = asm["__ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev"]; asm["__ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv = asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv"]; asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv.apply(null, arguments);
};

var real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv = asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv"]; asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv.apply(null, arguments);
};

var real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4openEPKcj = asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4openEPKcj"]; asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4openEPKcj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4openEPKcj.apply(null, arguments);
};

var real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv = asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv"]; asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv.apply(null, arguments);
};

var real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5closeEv = asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5closeEv"]; asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5closeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5closeEv.apply(null, arguments);
};

var real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE = asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE"]; asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE.apply(null, arguments);
};

var real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPci = asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPci"]; asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPci"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPci.apply(null, arguments);
};

var real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj = asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj"]; asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj.apply(null, arguments);
};

var real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj = asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj"]; asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj.apply(null, arguments);
};

var real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi = asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi"]; asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi.apply(null, arguments);
};

var real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi = asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi"]; asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi.apply(null, arguments);
};

var real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv = asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv"]; asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv.apply(null, arguments);
};

var real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev = asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev"]; asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev.apply(null, arguments);
};

var real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev = asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev"]; asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev = asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev"]; asm["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev"]; asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev"]; asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev.apply(null, arguments);
};

var real___ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev = asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev"]; asm["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev"]; asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev"]; asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev.apply(null, arguments);
};

var real___ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev = asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev"]; asm["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc"]; asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc.apply(null, arguments);
};

var real___ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv"]; asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv.apply(null, arguments);
};

var real___ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_ = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_"]; asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_.apply(null, arguments);
};

var real___ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev"]; asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev.apply(null, arguments);
};

var real___ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev"]; asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev"]; asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev.apply(null, arguments);
};

var real___ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev"]; asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEd = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEd"]; asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEd.apply(null, arguments);
};

var real___ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj = asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj"]; asm["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj.apply(null, arguments);
};

var real___ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev"]; asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev"]; asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev.apply(null, arguments);
};

var real___ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev = asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev"]; asm["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE = asm["__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE"]; asm["__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE.apply(null, arguments);
};

var real___ZNSt3__214__num_put_base12__format_intEPcPKcbj = asm["__ZNSt3__214__num_put_base12__format_intEPcPKcbj"]; asm["__ZNSt3__214__num_put_base12__format_intEPcPKcbj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__num_put_base12__format_intEPcPKcbj.apply(null, arguments);
};

var real___ZNSt3__214__num_put_base14__format_floatEPcPKcj = asm["__ZNSt3__214__num_put_base14__format_floatEPcPKcj"]; asm["__ZNSt3__214__num_put_base14__format_floatEPcPKcj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__num_put_base14__format_floatEPcPKcj.apply(null, arguments);
};

var real___ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE = asm["__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE"]; asm["__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE.apply(null, arguments);
};

var real___ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_ = asm["__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_"]; asm["__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_.apply(null, arguments);
};

var real___ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_ = asm["__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_"]; asm["__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_.apply(null, arguments);
};

var real___ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb = asm["__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb"]; asm["__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb.apply(null, arguments);
};

var real___ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb = asm["__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb"]; asm["__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb.apply(null, arguments);
};

var real___ZNSt3__214__shared_count12__add_sharedEv = asm["__ZNSt3__214__shared_count12__add_sharedEv"]; asm["__ZNSt3__214__shared_count12__add_sharedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__shared_count12__add_sharedEv.apply(null, arguments);
};

var real___ZNSt3__214__shared_count16__release_sharedEv = asm["__ZNSt3__214__shared_count16__release_sharedEv"]; asm["__ZNSt3__214__shared_count16__release_sharedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__shared_count16__release_sharedEv.apply(null, arguments);
};

var real___ZNSt3__214__shared_countD2Ev = asm["__ZNSt3__214__shared_countD2Ev"]; asm["__ZNSt3__214__shared_countD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__shared_countD2Ev.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj = asm["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj"]; asm["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_ = asm["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_"]; asm["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_.apply(null, arguments);
};

var real___ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev = asm["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev"]; asm["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev = asm["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"]; asm["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev = asm["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"]; asm["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev.apply(null, arguments);
};

var real___ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev = asm["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev"]; asm["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEE4openEPKcj = asm["__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEE4openEPKcj"]; asm["__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEE4openEPKcj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEE4openEPKcj.apply(null, arguments);
};

var real___ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev = asm["__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev"]; asm["__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev = asm["__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev"]; asm["__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev.apply(null, arguments);
};

var real___ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED2Ev = asm["__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED2Ev"]; asm["__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__214error_categoryD2Ev = asm["__ZNSt3__214error_categoryD2Ev"]; asm["__ZNSt3__214error_categoryD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__214error_categoryD2Ev.apply(null, arguments);
};

var real___ZNSt3__215__num_get_floatIdEET_PKcS3_Rj = asm["__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj"]; asm["__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215__num_get_floatIdEET_PKcS3_Rj.apply(null, arguments);
};

var real___ZNSt3__215__num_get_floatIeEET_PKcS3_Rj = asm["__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj"]; asm["__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215__num_get_floatIeEET_PKcS3_Rj.apply(null, arguments);
};

var real___ZNSt3__215__num_get_floatIfEET_PKcS3_Rj = asm["__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj"]; asm["__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215__num_get_floatIfEET_PKcS3_Rj.apply(null, arguments);
};

var real___ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE = asm["__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE"]; asm["__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE.apply(null, arguments);
};

var real___ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1792 = asm["__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1792"]; asm["__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1792"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1792.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv"]; asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE"]; asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv"]; asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci"]; asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci"]; asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci"]; asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj"]; asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj"]; asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi"]; asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi"]; asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv"]; asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv"]; asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev"]; asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev"]; asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev = asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev"]; asm["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv"]; asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE"]; asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv"]; asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi"]; asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi"]; asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi"]; asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj"]; asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj"]; asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj"]; asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj"]; asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv"]; asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv"]; asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev"]; asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev"]; asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev = asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev"]; asm["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE = asm["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE"]; asm["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE.apply(null, arguments);
};

var real___ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj = asm["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj"]; asm["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj.apply(null, arguments);
};

var real___ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj = asm["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj"]; asm["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj.apply(null, arguments);
};

var real___ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi = asm["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi"]; asm["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi.apply(null, arguments);
};

var real___ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi = asm["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi"]; asm["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi.apply(null, arguments);
};

var real___ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv = asm["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv"]; asm["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv.apply(null, arguments);
};

var real___ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev = asm["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"]; asm["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev = asm["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev"]; asm["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj = asm["__ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj"]; asm["__ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj.apply(null, arguments);
};

var real___ZNSt3__216__narrow_to_utf8ILj32EED0Ev = asm["__ZNSt3__216__narrow_to_utf8ILj32EED0Ev"]; asm["__ZNSt3__216__narrow_to_utf8ILj32EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__narrow_to_utf8ILj32EED0Ev.apply(null, arguments);
};

var real___ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = asm["__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"]; asm["__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_.apply(null, arguments);
};

var real___ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = asm["__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"]; asm["__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_.apply(null, arguments);
};

var real___ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv = asm["__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv"]; asm["__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv.apply(null, arguments);
};

var real___ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z = asm["__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z"]; asm["__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z.apply(null, arguments);
};

var real___ZNSt3__217__widen_from_utf8ILj32EED0Ev = asm["__ZNSt3__217__widen_from_utf8ILj32EED0Ev"]; asm["__ZNSt3__217__widen_from_utf8ILj32EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__217__widen_from_utf8ILj32EED0Ev.apply(null, arguments);
};

var real___ZNSt3__217iostream_categoryEv = asm["__ZNSt3__217iostream_categoryEv"]; asm["__ZNSt3__217iostream_categoryEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__217iostream_categoryEv.apply(null, arguments);
};

var real___ZNSt3__218__insertion_sort_3IRN4arma23arma_ascend_sort_helperIjEEPjEEvT0_S6_T_ = asm["__ZNSt3__218__insertion_sort_3IRN4arma23arma_ascend_sort_helperIjEEPjEEvT0_S6_T_"]; asm["__ZNSt3__218__insertion_sort_3IRN4arma23arma_ascend_sort_helperIjEEPjEEvT0_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__218__insertion_sort_3IRN4arma23arma_ascend_sort_helperIjEEPjEEvT0_S6_T_.apply(null, arguments);
};

var real___ZNSt3__218__insertion_sort_3IRN4arma24arma_descend_sort_helperIjEEPjEEvT0_S6_T_ = asm["__ZNSt3__218__insertion_sort_3IRN4arma24arma_descend_sort_helperIjEEPjEEvT0_S6_T_"]; asm["__ZNSt3__218__insertion_sort_3IRN4arma24arma_descend_sort_helperIjEEPjEEvT0_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__218__insertion_sort_3IRN4arma24arma_descend_sort_helperIjEEPjEEvT0_S6_T_.apply(null, arguments);
};

var real___ZNSt3__218__insertion_sort_3IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_ = asm["__ZNSt3__218__insertion_sort_3IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_"]; asm["__ZNSt3__218__insertion_sort_3IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__218__insertion_sort_3IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_.apply(null, arguments);
};

var real___ZNSt3__218__insertion_sort_3IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_ = asm["__ZNSt3__218__insertion_sort_3IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_"]; asm["__ZNSt3__218__insertion_sort_3IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__218__insertion_sort_3IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_.apply(null, arguments);
};

var real___ZNSt3__218__libcpp_refstringC2EPKc = asm["__ZNSt3__218__libcpp_refstringC2EPKc"]; asm["__ZNSt3__218__libcpp_refstringC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__218__libcpp_refstringC2EPKc.apply(null, arguments);
};

var real___ZNSt3__218__libcpp_refstringD2Ev = asm["__ZNSt3__218__libcpp_refstringD2Ev"]; asm["__ZNSt3__218__libcpp_refstringD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__218__libcpp_refstringD2Ev.apply(null, arguments);
};

var real___ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev = asm["__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"]; asm["__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev = asm["__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev"]; asm["__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev.apply(null, arguments);
};

var real___ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev = asm["__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev"]; asm["__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_ = asm["__ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"]; asm["__ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_.apply(null, arguments);
};

var real___ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_ = asm["__ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"]; asm["__ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_.apply(null, arguments);
};

var real___ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_ = asm["__ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"]; asm["__ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_.apply(null, arguments);
};

var real___ZNSt3__219__iostream_categoryD0Ev = asm["__ZNSt3__219__iostream_categoryD0Ev"]; asm["__ZNSt3__219__iostream_categoryD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__219__iostream_categoryD0Ev.apply(null, arguments);
};

var real___ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz = asm["__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz"]; asm["__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz.apply(null, arguments);
};

var real___ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz = asm["__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz"]; asm["__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz.apply(null, arguments);
};

var real___ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi = asm["__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"]; asm["__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi.apply(null, arguments);
};

var real___ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi = asm["__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"]; asm["__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi.apply(null, arguments);
};

var real___ZNSt3__220__time_get_c_storageIcEC2Ev = asm["__ZNSt3__220__time_get_c_storageIcEC2Ev"]; asm["__ZNSt3__220__time_get_c_storageIcEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__time_get_c_storageIcEC2Ev.apply(null, arguments);
};

var real___ZNSt3__220__time_get_c_storageIwEC2Ev = asm["__ZNSt3__220__time_get_c_storageIwEC2Ev"]; asm["__ZNSt3__220__time_get_c_storageIwEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__220__time_get_c_storageIwEC2Ev.apply(null, arguments);
};

var real___ZNSt3__221__throw_runtime_errorEPKc = asm["__ZNSt3__221__throw_runtime_errorEPKc"]; asm["__ZNSt3__221__throw_runtime_errorEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__221__throw_runtime_errorEPKc.apply(null, arguments);
};

var real___ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j = asm["__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j"]; asm["__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j.apply(null, arguments);
};

var real___ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji = asm["__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji"]; asm["__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji.apply(null, arguments);
};

var real___ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji = asm["__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji"]; asm["__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji.apply(null, arguments);
};

var real___ZNSt3__227__insertion_sort_incompleteIRN4arma23arma_ascend_sort_helperIjEEPjEEbT0_S6_T_ = asm["__ZNSt3__227__insertion_sort_incompleteIRN4arma23arma_ascend_sort_helperIjEEPjEEbT0_S6_T_"]; asm["__ZNSt3__227__insertion_sort_incompleteIRN4arma23arma_ascend_sort_helperIjEEPjEEbT0_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__insertion_sort_incompleteIRN4arma23arma_ascend_sort_helperIjEEPjEEbT0_S6_T_.apply(null, arguments);
};

var real___ZNSt3__227__insertion_sort_incompleteIRN4arma24arma_descend_sort_helperIjEEPjEEbT0_S6_T_ = asm["__ZNSt3__227__insertion_sort_incompleteIRN4arma24arma_descend_sort_helperIjEEPjEEbT0_S6_T_"]; asm["__ZNSt3__227__insertion_sort_incompleteIRN4arma24arma_descend_sort_helperIjEEPjEEbT0_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__insertion_sort_incompleteIRN4arma24arma_descend_sort_helperIjEEPjEEbT0_S6_T_.apply(null, arguments);
};

var real___ZNSt3__227__insertion_sort_incompleteIRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEbT0_S8_T_ = asm["__ZNSt3__227__insertion_sort_incompleteIRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEbT0_S8_T_"]; asm["__ZNSt3__227__insertion_sort_incompleteIRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEbT0_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__insertion_sort_incompleteIRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEbT0_S8_T_.apply(null, arguments);
};

var real___ZNSt3__227__insertion_sort_incompleteIRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEbT0_S8_T_ = asm["__ZNSt3__227__insertion_sort_incompleteIRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEbT0_S8_T_"]; asm["__ZNSt3__227__insertion_sort_incompleteIRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEbT0_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__insertion_sort_incompleteIRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEbT0_S8_T_.apply(null, arguments);
};

var real___ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji = asm["__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji"]; asm["__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji.apply(null, arguments);
};

var real___ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji = asm["__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji"]; asm["__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji.apply(null, arguments);
};

var real___ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji = asm["__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji"]; asm["__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji.apply(null, arguments);
};

var real___ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji = asm["__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji"]; asm["__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji.apply(null, arguments);
};

var real___ZNSt3__24endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ = asm["__ZNSt3__24endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_"]; asm["__ZNSt3__24endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__24endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_.apply(null, arguments);
};

var real___ZNSt3__24sqrtIdEENS_7complexIT_EERKS3_ = asm["__ZNSt3__24sqrtIdEENS_7complexIT_EERKS3_"]; asm["__ZNSt3__24sqrtIdEENS_7complexIT_EERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__24sqrtIdEENS_7complexIT_EERKS3_.apply(null, arguments);
};

var real___ZNSt3__25ctypeIcE13classic_tableEv = asm["__ZNSt3__25ctypeIcE13classic_tableEv"]; asm["__ZNSt3__25ctypeIcE13classic_tableEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__25ctypeIcE13classic_tableEv.apply(null, arguments);
};

var real___ZNSt3__25ctypeIcE21__classic_lower_tableEv = asm["__ZNSt3__25ctypeIcE21__classic_lower_tableEv"]; asm["__ZNSt3__25ctypeIcE21__classic_lower_tableEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__25ctypeIcE21__classic_lower_tableEv.apply(null, arguments);
};

var real___ZNSt3__25ctypeIcE21__classic_upper_tableEv = asm["__ZNSt3__25ctypeIcE21__classic_upper_tableEv"]; asm["__ZNSt3__25ctypeIcE21__classic_upper_tableEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__25ctypeIcE21__classic_upper_tableEv.apply(null, arguments);
};

var real___ZNSt3__25ctypeIcEC2EPKtbj = asm["__ZNSt3__25ctypeIcEC2EPKtbj"]; asm["__ZNSt3__25ctypeIcEC2EPKtbj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__25ctypeIcEC2EPKtbj.apply(null, arguments);
};

var real___ZNSt3__25ctypeIcED0Ev = asm["__ZNSt3__25ctypeIcED0Ev"]; asm["__ZNSt3__25ctypeIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__25ctypeIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__25ctypeIcED2Ev = asm["__ZNSt3__25ctypeIcED2Ev"]; asm["__ZNSt3__25ctypeIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__25ctypeIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__25ctypeIwED0Ev = asm["__ZNSt3__25ctypeIwED0Ev"]; asm["__ZNSt3__25ctypeIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__25ctypeIwED0Ev.apply(null, arguments);
};

var real___ZNSt3__25polarIdEENS_7complexIT_EERKS2_S5_ = asm["__ZNSt3__25polarIdEENS_7complexIT_EERKS2_S5_"]; asm["__ZNSt3__25polarIdEENS_7complexIT_EERKS2_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__25polarIdEENS_7complexIT_EERKS2_S5_.apply(null, arguments);
};

var real___ZNSt3__26__clocEv = asm["__ZNSt3__26__clocEv"]; asm["__ZNSt3__26__clocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26__clocEv.apply(null, arguments);
};

var real___ZNSt3__26__sortIRN4arma23arma_ascend_sort_helperIjEEPjEEvT0_S6_T_ = asm["__ZNSt3__26__sortIRN4arma23arma_ascend_sort_helperIjEEPjEEvT0_S6_T_"]; asm["__ZNSt3__26__sortIRN4arma23arma_ascend_sort_helperIjEEPjEEvT0_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26__sortIRN4arma23arma_ascend_sort_helperIjEEPjEEvT0_S6_T_.apply(null, arguments);
};

var real___ZNSt3__26__sortIRN4arma24arma_descend_sort_helperIjEEPjEEvT0_S6_T_ = asm["__ZNSt3__26__sortIRN4arma24arma_descend_sort_helperIjEEPjEEvT0_S6_T_"]; asm["__ZNSt3__26__sortIRN4arma24arma_descend_sort_helperIjEEPjEEvT0_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26__sortIRN4arma24arma_descend_sort_helperIjEEPjEEvT0_S6_T_.apply(null, arguments);
};

var real___ZNSt3__26__sortIRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_ = asm["__ZNSt3__26__sortIRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_"]; asm["__ZNSt3__26__sortIRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26__sortIRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_.apply(null, arguments);
};

var real___ZNSt3__26__sortIRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_ = asm["__ZNSt3__26__sortIRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_"]; asm["__ZNSt3__26__sortIRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26__sortIRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_.apply(null, arguments);
};

var real___ZNSt3__26locale2id5__getEv = asm["__ZNSt3__26locale2id5__getEv"]; asm["__ZNSt3__26locale2id5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale2id5__getEv.apply(null, arguments);
};

var real___ZNSt3__26locale2id6__initEv = asm["__ZNSt3__26locale2id6__initEv"]; asm["__ZNSt3__26locale2id6__initEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale2id6__initEv.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp11make_globalEv = asm["__ZNSt3__26locale5__imp11make_globalEv"]; asm["__ZNSt3__26locale5__imp11make_globalEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp11make_globalEv.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp12make_classicEv = asm["__ZNSt3__26locale5__imp12make_classicEv"]; asm["__ZNSt3__26locale5__imp12make_classicEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp12make_classicEv.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installEPNS0_5facetEl = asm["__ZNSt3__26locale5__imp7installEPNS0_5facetEl"]; asm["__ZNSt3__26locale5__imp7installEPNS0_5facetEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installEPNS0_5facetEl.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = asm["__ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"]; asm["__ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_.apply(null, arguments);
};

var real___ZNSt3__26locale5__impC2Ej = asm["__ZNSt3__26locale5__impC2Ej"]; asm["__ZNSt3__26locale5__impC2Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__impC2Ej.apply(null, arguments);
};

var real___ZNSt3__26locale5__impD0Ev = asm["__ZNSt3__26locale5__impD0Ev"]; asm["__ZNSt3__26locale5__impD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__impD0Ev.apply(null, arguments);
};

var real___ZNSt3__26locale5__impD2Ev = asm["__ZNSt3__26locale5__impD2Ev"]; asm["__ZNSt3__26locale5__impD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5__impD2Ev.apply(null, arguments);
};

var real___ZNSt3__26locale5facet16__on_zero_sharedEv = asm["__ZNSt3__26locale5facet16__on_zero_sharedEv"]; asm["__ZNSt3__26locale5facet16__on_zero_sharedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5facet16__on_zero_sharedEv.apply(null, arguments);
};

var real___ZNSt3__26locale5facetD0Ev = asm["__ZNSt3__26locale5facetD0Ev"]; asm["__ZNSt3__26locale5facetD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5facetD0Ev.apply(null, arguments);
};

var real___ZNSt3__26locale5facetD2Ev = asm["__ZNSt3__26locale5facetD2Ev"]; asm["__ZNSt3__26locale5facetD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale5facetD2Ev.apply(null, arguments);
};

var real___ZNSt3__26locale7classicEv = asm["__ZNSt3__26locale7classicEv"]; asm["__ZNSt3__26locale7classicEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale7classicEv.apply(null, arguments);
};

var real___ZNSt3__26locale8__globalEv = asm["__ZNSt3__26locale8__globalEv"]; asm["__ZNSt3__26locale8__globalEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26locale8__globalEv.apply(null, arguments);
};

var real___ZNSt3__26localeC2ERKS0_ = asm["__ZNSt3__26localeC2ERKS0_"]; asm["__ZNSt3__26localeC2ERKS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26localeC2ERKS0_.apply(null, arguments);
};

var real___ZNSt3__26localeC2Ev = asm["__ZNSt3__26localeC2Ev"]; asm["__ZNSt3__26localeC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26localeC2Ev.apply(null, arguments);
};

var real___ZNSt3__26localeD2Ev = asm["__ZNSt3__26localeD2Ev"]; asm["__ZNSt3__26localeD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26localeD2Ev.apply(null, arguments);
};

var real___ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEE18__construct_at_endEj = asm["__ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEE18__construct_at_endEj"]; asm["__ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEE18__construct_at_endEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEE18__construct_at_endEj.apply(null, arguments);
};

var real___ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEE8allocateEj = asm["__ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEE8allocateEj"]; asm["__ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEE8allocateEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEE8allocateEj.apply(null, arguments);
};

var real___ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEEC2Ej = asm["__ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEEC2Ej"]; asm["__ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEEC2Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEEC2Ej.apply(null, arguments);
};

var real___ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEED2Ev = asm["__ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEED2Ev"]; asm["__ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEED2Ev.apply(null, arguments);
};

var real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj = asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj"]; asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj.apply(null, arguments);
};

var real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE = asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE"]; asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE.apply(null, arguments);
};

var real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj = asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj"]; asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj.apply(null, arguments);
};

var real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj = asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj"]; asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj.apply(null, arguments);
};

var real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj = asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj"]; asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj.apply(null, arguments);
};

var real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej = asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej"]; asm["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej.apply(null, arguments);
};

var real___ZNSt3__27__sort3IRN4arma23arma_ascend_sort_helperIjEEPjEEjT0_S6_S6_T_ = asm["__ZNSt3__27__sort3IRN4arma23arma_ascend_sort_helperIjEEPjEEjT0_S6_S6_T_"]; asm["__ZNSt3__27__sort3IRN4arma23arma_ascend_sort_helperIjEEPjEEjT0_S6_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27__sort3IRN4arma23arma_ascend_sort_helperIjEEPjEEjT0_S6_S6_T_.apply(null, arguments);
};

var real___ZNSt3__27__sort3IRN4arma24arma_descend_sort_helperIjEEPjEEjT0_S6_S6_T_ = asm["__ZNSt3__27__sort3IRN4arma24arma_descend_sort_helperIjEEPjEEjT0_S6_S6_T_"]; asm["__ZNSt3__27__sort3IRN4arma24arma_descend_sort_helperIjEEPjEEjT0_S6_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27__sort3IRN4arma24arma_descend_sort_helperIjEEPjEEjT0_S6_S6_T_.apply(null, arguments);
};

var real___ZNSt3__27__sort3IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_T_ = asm["__ZNSt3__27__sort3IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_T_"]; asm["__ZNSt3__27__sort3IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27__sort3IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_T_.apply(null, arguments);
};

var real___ZNSt3__27__sort3IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_T_ = asm["__ZNSt3__27__sort3IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_T_"]; asm["__ZNSt3__27__sort3IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27__sort3IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_T_.apply(null, arguments);
};

var real___ZNSt3__27__sort4IRN4arma23arma_ascend_sort_helperIjEEPjEEjT0_S6_S6_S6_T_ = asm["__ZNSt3__27__sort4IRN4arma23arma_ascend_sort_helperIjEEPjEEjT0_S6_S6_S6_T_"]; asm["__ZNSt3__27__sort4IRN4arma23arma_ascend_sort_helperIjEEPjEEjT0_S6_S6_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27__sort4IRN4arma23arma_ascend_sort_helperIjEEPjEEjT0_S6_S6_S6_T_.apply(null, arguments);
};

var real___ZNSt3__27__sort4IRN4arma24arma_descend_sort_helperIjEEPjEEjT0_S6_S6_S6_T_ = asm["__ZNSt3__27__sort4IRN4arma24arma_descend_sort_helperIjEEPjEEjT0_S6_S6_S6_T_"]; asm["__ZNSt3__27__sort4IRN4arma24arma_descend_sort_helperIjEEPjEEjT0_S6_S6_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27__sort4IRN4arma24arma_descend_sort_helperIjEEPjEEjT0_S6_S6_S6_T_.apply(null, arguments);
};

var real___ZNSt3__27__sort4IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_T_ = asm["__ZNSt3__27__sort4IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_T_"]; asm["__ZNSt3__27__sort4IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27__sort4IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_T_.apply(null, arguments);
};

var real___ZNSt3__27__sort4IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_T_ = asm["__ZNSt3__27__sort4IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_T_"]; asm["__ZNSt3__27__sort4IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27__sort4IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_T_.apply(null, arguments);
};

var real___ZNSt3__27__sort5IRN4arma23arma_ascend_sort_helperIjEEPjEEjT0_S6_S6_S6_S6_T_ = asm["__ZNSt3__27__sort5IRN4arma23arma_ascend_sort_helperIjEEPjEEjT0_S6_S6_S6_S6_T_"]; asm["__ZNSt3__27__sort5IRN4arma23arma_ascend_sort_helperIjEEPjEEjT0_S6_S6_S6_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27__sort5IRN4arma23arma_ascend_sort_helperIjEEPjEEjT0_S6_S6_S6_S6_T_.apply(null, arguments);
};

var real___ZNSt3__27__sort5IRN4arma24arma_descend_sort_helperIjEEPjEEjT0_S6_S6_S6_S6_T_ = asm["__ZNSt3__27__sort5IRN4arma24arma_descend_sort_helperIjEEPjEEjT0_S6_S6_S6_S6_T_"]; asm["__ZNSt3__27__sort5IRN4arma24arma_descend_sort_helperIjEEPjEEjT0_S6_S6_S6_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27__sort5IRN4arma24arma_descend_sort_helperIjEEPjEEjT0_S6_S6_S6_S6_T_.apply(null, arguments);
};

var real___ZNSt3__27__sort5IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_S8_T_ = asm["__ZNSt3__27__sort5IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_S8_T_"]; asm["__ZNSt3__27__sort5IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27__sort5IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_S8_T_.apply(null, arguments);
};

var real___ZNSt3__27__sort5IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_S8_T_ = asm["__ZNSt3__27__sort5IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_S8_T_"]; asm["__ZNSt3__27__sort5IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27__sort5IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_S8_T_.apply(null, arguments);
};

var real___ZNSt3__27codecvtIDic11__mbstate_tED0Ev = asm["__ZNSt3__27codecvtIDic11__mbstate_tED0Ev"]; asm["__ZNSt3__27codecvtIDic11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27codecvtIDic11__mbstate_tED0Ev.apply(null, arguments);
};

var real___ZNSt3__27codecvtIDsc11__mbstate_tED0Ev = asm["__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev"]; asm["__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27codecvtIDsc11__mbstate_tED0Ev.apply(null, arguments);
};

var real___ZNSt3__27codecvtIcc11__mbstate_tED0Ev = asm["__ZNSt3__27codecvtIcc11__mbstate_tED0Ev"]; asm["__ZNSt3__27codecvtIcc11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27codecvtIcc11__mbstate_tED0Ev.apply(null, arguments);
};

var real___ZNSt3__27codecvtIwc11__mbstate_tEC2Ej = asm["__ZNSt3__27codecvtIwc11__mbstate_tEC2Ej"]; asm["__ZNSt3__27codecvtIwc11__mbstate_tEC2Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27codecvtIwc11__mbstate_tEC2Ej.apply(null, arguments);
};

var real___ZNSt3__27codecvtIwc11__mbstate_tED0Ev = asm["__ZNSt3__27codecvtIwc11__mbstate_tED0Ev"]; asm["__ZNSt3__27codecvtIwc11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27codecvtIwc11__mbstate_tED0Ev.apply(null, arguments);
};

var real___ZNSt3__27codecvtIwc11__mbstate_tED2Ev = asm["__ZNSt3__27codecvtIwc11__mbstate_tED2Ev"]; asm["__ZNSt3__27codecvtIwc11__mbstate_tED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27codecvtIwc11__mbstate_tED2Ev.apply(null, arguments);
};

var real___ZNSt3__27collateIcED0Ev = asm["__ZNSt3__27collateIcED0Ev"]; asm["__ZNSt3__27collateIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27collateIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__27collateIcED2Ev = asm["__ZNSt3__27collateIcED2Ev"]; asm["__ZNSt3__27collateIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27collateIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__27collateIwED0Ev = asm["__ZNSt3__27collateIwED0Ev"]; asm["__ZNSt3__27collateIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27collateIwED0Ev.apply(null, arguments);
};

var real___ZNSt3__27collateIwED2Ev = asm["__ZNSt3__27collateIwED2Ev"]; asm["__ZNSt3__27collateIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27collateIwED2Ev.apply(null, arguments);
};

var real___ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = asm["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"]; asm["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = asm["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"]; asm["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = asm["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"]; asm["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = asm["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"]; asm["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = asm["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"]; asm["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = asm["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"]; asm["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = asm["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"]; asm["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = asm["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"]; asm["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__28ios_base16__call_callbacksENS0_5eventE = asm["__ZNSt3__28ios_base16__call_callbacksENS0_5eventE"]; asm["__ZNSt3__28ios_base16__call_callbacksENS0_5eventE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28ios_base16__call_callbacksENS0_5eventE.apply(null, arguments);
};

var real___ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv = asm["__ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv"]; asm["__ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv.apply(null, arguments);
};

var real___ZNSt3__28ios_base4InitC2Ev = asm["__ZNSt3__28ios_base4InitC2Ev"]; asm["__ZNSt3__28ios_base4InitC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28ios_base4InitC2Ev.apply(null, arguments);
};

var real___ZNSt3__28ios_base4initEPv = asm["__ZNSt3__28ios_base4initEPv"]; asm["__ZNSt3__28ios_base4initEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28ios_base4initEPv.apply(null, arguments);
};

var real___ZNSt3__28ios_base5clearEj = asm["__ZNSt3__28ios_base5clearEj"]; asm["__ZNSt3__28ios_base5clearEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28ios_base5clearEj.apply(null, arguments);
};

var real___ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE = asm["__ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE"]; asm["__ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE.apply(null, arguments);
};

var real___ZNSt3__28ios_base7failureD0Ev = asm["__ZNSt3__28ios_base7failureD0Ev"]; asm["__ZNSt3__28ios_base7failureD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28ios_base7failureD0Ev.apply(null, arguments);
};

var real___ZNSt3__28ios_base7failureD2Ev = asm["__ZNSt3__28ios_base7failureD2Ev"]; asm["__ZNSt3__28ios_base7failureD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28ios_base7failureD2Ev.apply(null, arguments);
};

var real___ZNSt3__28ios_baseD0Ev = asm["__ZNSt3__28ios_baseD0Ev"]; asm["__ZNSt3__28ios_baseD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28ios_baseD0Ev.apply(null, arguments);
};

var real___ZNSt3__28ios_baseD2Ev = asm["__ZNSt3__28ios_baseD2Ev"]; asm["__ZNSt3__28ios_baseD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28ios_baseD2Ev.apply(null, arguments);
};

var real___ZNSt3__28messagesIcED0Ev = asm["__ZNSt3__28messagesIcED0Ev"]; asm["__ZNSt3__28messagesIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28messagesIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__28messagesIcED2Ev = asm["__ZNSt3__28messagesIcED2Ev"]; asm["__ZNSt3__28messagesIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28messagesIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__28messagesIwED0Ev = asm["__ZNSt3__28messagesIwED0Ev"]; asm["__ZNSt3__28messagesIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28messagesIwED0Ev.apply(null, arguments);
};

var real___ZNSt3__28messagesIwED2Ev = asm["__ZNSt3__28messagesIwED2Ev"]; asm["__ZNSt3__28messagesIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28messagesIwED2Ev.apply(null, arguments);
};

var real___ZNSt3__28numpunctIcEC2Ej = asm["__ZNSt3__28numpunctIcEC2Ej"]; asm["__ZNSt3__28numpunctIcEC2Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28numpunctIcEC2Ej.apply(null, arguments);
};

var real___ZNSt3__28numpunctIcED0Ev = asm["__ZNSt3__28numpunctIcED0Ev"]; asm["__ZNSt3__28numpunctIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28numpunctIcED0Ev.apply(null, arguments);
};

var real___ZNSt3__28numpunctIcED2Ev = asm["__ZNSt3__28numpunctIcED2Ev"]; asm["__ZNSt3__28numpunctIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28numpunctIcED2Ev.apply(null, arguments);
};

var real___ZNSt3__28numpunctIwEC2Ej = asm["__ZNSt3__28numpunctIwEC2Ej"]; asm["__ZNSt3__28numpunctIwEC2Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28numpunctIwEC2Ej.apply(null, arguments);
};

var real___ZNSt3__28numpunctIwED0Ev = asm["__ZNSt3__28numpunctIwED0Ev"]; asm["__ZNSt3__28numpunctIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28numpunctIwED0Ev.apply(null, arguments);
};

var real___ZNSt3__28numpunctIwED2Ev = asm["__ZNSt3__28numpunctIwED2Ev"]; asm["__ZNSt3__28numpunctIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28numpunctIwED2Ev.apply(null, arguments);
};

var real___ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = asm["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"]; asm["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = asm["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"]; asm["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = asm["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"]; asm["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = asm["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"]; asm["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = asm["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"]; asm["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = asm["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"]; asm["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = asm["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"]; asm["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = asm["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"]; asm["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_ = asm["__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_"]; asm["__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_.apply(null, arguments);
};

var real___ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc = asm["__ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc"]; asm["__ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc.apply(null, arguments);
};

var real___ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_ = asm["__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_"]; asm["__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_.apply(null, arguments);
};

var real___ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_ = asm["__ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_"]; asm["__ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_.apply(null, arguments);
};

var real___ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw = asm["__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw"]; asm["__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw.apply(null, arguments);
};

var real___ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw = asm["__ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw"]; asm["__ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw.apply(null, arguments);
};

var real___ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw = asm["__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw"]; asm["__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw.apply(null, arguments);
};

var real___ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_ = asm["__ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_"]; asm["__ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_.apply(null, arguments);
};

var real___ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE = asm["__ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE"]; asm["__ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE.apply(null, arguments);
};

var real___ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE = asm["__ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE"]; asm["__ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE.apply(null, arguments);
};

var real___ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE = asm["__ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE"]; asm["__ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE.apply(null, arguments);
};

var real___ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE = asm["__ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE"]; asm["__ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE.apply(null, arguments);
};

var real___ZNSt3__29basic_iosIcNS_11char_traitsIcEEED0Ev = asm["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED0Ev"]; asm["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29basic_iosIcNS_11char_traitsIcEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev = asm["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev"]; asm["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev = asm["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev"]; asm["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_ = asm["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_"]; asm["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_.apply(null, arguments);
};

var real___ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = asm["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"]; asm["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = asm["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"]; asm["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_ = asm["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_"]; asm["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_.apply(null, arguments);
};

var real___ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = asm["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"]; asm["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = asm["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"]; asm["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = asm["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"]; asm["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = asm["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"]; asm["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = asm["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"]; asm["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev.apply(null, arguments);
};

var real___ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = asm["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"]; asm["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev.apply(null, arguments);
};

var real___ZNSt3__2L10init_am_pmEv = asm["__ZNSt3__2L10init_am_pmEv"]; asm["__ZNSt3__2L10init_am_pmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L10init_am_pmEv.apply(null, arguments);
};

var real___ZNSt3__2L10init_weeksEv = asm["__ZNSt3__2L10init_weeksEv"]; asm["__ZNSt3__2L10init_weeksEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L10init_weeksEv.apply(null, arguments);
};

var real___ZNSt3__2L11init_monthsEv = asm["__ZNSt3__2L11init_monthsEv"]; asm["__ZNSt3__2L11init_monthsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L11init_monthsEv.apply(null, arguments);
};

var real___ZNSt3__2L11init_wam_pmEv = asm["__ZNSt3__2L11init_wam_pmEv"]; asm["__ZNSt3__2L11init_wam_pmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L11init_wam_pmEv.apply(null, arguments);
};

var real___ZNSt3__2L11init_wweeksEv = asm["__ZNSt3__2L11init_wweeksEv"]; asm["__ZNSt3__2L11init_wweeksEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L11init_wweeksEv.apply(null, arguments);
};

var real___ZNSt3__2L12init_wmonthsEv = asm["__ZNSt3__2L12init_wmonthsEv"]; asm["__ZNSt3__2L12init_wmonthsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L12init_wmonthsEv.apply(null, arguments);
};

var real___ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE = asm["__ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"]; asm["__ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE.apply(null, arguments);
};

var real___ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE = asm["__ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE"]; asm["__ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE.apply(null, arguments);
};

var real___ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE = asm["__ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"]; asm["__ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE.apply(null, arguments);
};

var real___ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE = asm["__ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE"]; asm["__ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE.apply(null, arguments);
};

var real___ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE = asm["__ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE"]; asm["__ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE.apply(null, arguments);
};

var real___ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE = asm["__ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE"]; asm["__ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE.apply(null, arguments);
};

var real___ZNSt3__2dvIdEENS_7complexIT_EERKS3_S5_ = asm["__ZNSt3__2dvIdEENS_7complexIT_EERKS3_S5_"]; asm["__ZNSt3__2dvIdEENS_7complexIT_EERKS3_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2dvIdEENS_7complexIT_EERKS3_S5_.apply(null, arguments);
};

var real___ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc = asm["__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc"]; asm["__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc.apply(null, arguments);
};

var real___ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c = asm["__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c"]; asm["__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c.apply(null, arguments);
};

var real___ZNSt3__2lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE = asm["__ZNSt3__2lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE"]; asm["__ZNSt3__2lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE.apply(null, arguments);
};

var real___ZNSt3__2mlIdEENS_7complexIT_EERKS3_S5_ = asm["__ZNSt3__2mlIdEENS_7complexIT_EERKS3_S5_"]; asm["__ZNSt3__2mlIdEENS_7complexIT_EERKS3_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt3__2mlIdEENS_7complexIT_EERKS3_S5_.apply(null, arguments);
};

var real___ZNSt8bad_castC2Ev = asm["__ZNSt8bad_castC2Ev"]; asm["__ZNSt8bad_castC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt8bad_castC2Ev.apply(null, arguments);
};

var real___ZNSt8bad_castD0Ev = asm["__ZNSt8bad_castD0Ev"]; asm["__ZNSt8bad_castD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt8bad_castD0Ev.apply(null, arguments);
};

var real___ZNSt8bad_castD2Ev = asm["__ZNSt8bad_castD2Ev"]; asm["__ZNSt8bad_castD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt8bad_castD2Ev.apply(null, arguments);
};

var real___ZNSt9bad_allocC2Ev = asm["__ZNSt9bad_allocC2Ev"]; asm["__ZNSt9bad_allocC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt9bad_allocC2Ev.apply(null, arguments);
};

var real___ZNSt9bad_allocD0Ev = asm["__ZNSt9bad_allocD0Ev"]; asm["__ZNSt9bad_allocD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt9bad_allocD0Ev.apply(null, arguments);
};

var real___ZNSt9bad_allocD2Ev = asm["__ZNSt9bad_allocD2Ev"]; asm["__ZNSt9bad_allocD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt9bad_allocD2Ev.apply(null, arguments);
};

var real___ZNSt9exceptionD2Ev = asm["__ZNSt9exceptionD2Ev"]; asm["__ZNSt9exceptionD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt9exceptionD2Ev.apply(null, arguments);
};

var real___ZNSt9type_infoD2Ev = asm["__ZNSt9type_infoD2Ev"]; asm["__ZNSt9type_infoD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZNSt9type_infoD2Ev.apply(null, arguments);
};

var real___ZSt11__terminatePFvvE = asm["__ZSt11__terminatePFvvE"]; asm["__ZSt11__terminatePFvvE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt11__terminatePFvvE.apply(null, arguments);
};

var real___ZSt13get_terminatev = asm["__ZSt13get_terminatev"]; asm["__ZSt13get_terminatev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt13get_terminatev.apply(null, arguments);
};

var real___ZSt15get_new_handlerv = asm["__ZSt15get_new_handlerv"]; asm["__ZSt15get_new_handlerv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt15get_new_handlerv.apply(null, arguments);
};

var real___ZSt17__throw_bad_allocv = asm["__ZSt17__throw_bad_allocv"]; asm["__ZSt17__throw_bad_allocv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt17__throw_bad_allocv.apply(null, arguments);
};

var real___ZSt9terminatev = asm["__ZSt9terminatev"]; asm["__ZSt9terminatev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZSt9terminatev.apply(null, arguments);
};

var real___ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev = asm["__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"]; asm["__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev.apply(null, arguments);
};

var real___ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev = asm["__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"]; asm["__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev.apply(null, arguments);
};

var real___ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev = asm["__ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"]; asm["__ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev.apply(null, arguments);
};

var real___ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev = asm["__ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev"]; asm["__ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev.apply(null, arguments);
};

var real___ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev = asm["__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev"]; asm["__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev.apply(null, arguments);
};

var real___ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev = asm["__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev"]; asm["__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev.apply(null, arguments);
};

var real___ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev = asm["__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev"]; asm["__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev.apply(null, arguments);
};

var real___ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev = asm["__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev"]; asm["__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev.apply(null, arguments);
};

var real___ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev = asm["__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev"]; asm["__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev.apply(null, arguments);
};

var real___ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev = asm["__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev"]; asm["__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev.apply(null, arguments);
};

var real___ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev = asm["__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev"]; asm["__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev.apply(null, arguments);
};

var real___ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev = asm["__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev"]; asm["__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev.apply(null, arguments);
};

var real___ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev = asm["__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"]; asm["__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev.apply(null, arguments);
};

var real___ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev = asm["__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"]; asm["__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev.apply(null, arguments);
};

var real___ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev = asm["__ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev"]; asm["__ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev.apply(null, arguments);
};

var real___ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev = asm["__ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev"]; asm["__ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev.apply(null, arguments);
};

var real___ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev = asm["__ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"]; asm["__ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev.apply(null, arguments);
};

var real___ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev = asm["__ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev"]; asm["__ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev.apply(null, arguments);
};

var real___ZdaPv = asm["__ZdaPv"]; asm["__ZdaPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZdaPv.apply(null, arguments);
};

var real___ZdlPv = asm["__ZdlPv"]; asm["__ZdlPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___ZdlPv.apply(null, arguments);
};

var real___Znaj = asm["__Znaj"]; asm["__Znaj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Znaj.apply(null, arguments);
};

var real___Znwj = asm["__Znwj"]; asm["__Znwj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___Znwj.apply(null, arguments);
};

var real____DOUBLE_BITS_267 = asm["___DOUBLE_BITS_267"]; asm["___DOUBLE_BITS_267"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____DOUBLE_BITS_267.apply(null, arguments);
};

var real____DOUBLE_BITS_271 = asm["___DOUBLE_BITS_271"]; asm["___DOUBLE_BITS_271"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____DOUBLE_BITS_271.apply(null, arguments);
};

var real____DOUBLE_BITS_323 = asm["___DOUBLE_BITS_323"]; asm["___DOUBLE_BITS_323"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____DOUBLE_BITS_323.apply(null, arguments);
};

var real____DOUBLE_BITS_670 = asm["___DOUBLE_BITS_670"]; asm["___DOUBLE_BITS_670"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____DOUBLE_BITS_670.apply(null, arguments);
};

var real____clang_call_terminate = asm["___clang_call_terminate"]; asm["___clang_call_terminate"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____clang_call_terminate.apply(null, arguments);
};

var real____cos = asm["___cos"]; asm["___cos"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cos.apply(null, arguments);
};

var real____ctype_b_loc = asm["___ctype_b_loc"]; asm["___ctype_b_loc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ctype_b_loc.apply(null, arguments);
};

var real____ctype_get_mb_cur_max = asm["___ctype_get_mb_cur_max"]; asm["___ctype_get_mb_cur_max"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ctype_get_mb_cur_max.apply(null, arguments);
};

var real____ctype_tolower_loc = asm["___ctype_tolower_loc"]; asm["___ctype_tolower_loc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ctype_tolower_loc.apply(null, arguments);
};

var real____ctype_toupper_loc = asm["___ctype_toupper_loc"]; asm["___ctype_toupper_loc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ctype_toupper_loc.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_get_globals_fast = asm["___cxa_get_globals_fast"]; asm["___cxa_get_globals_fast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_get_globals_fast.apply(null, arguments);
};

var real____cxa_guard_abort = asm["___cxa_guard_abort"]; asm["___cxa_guard_abort"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_guard_abort.apply(null, arguments);
};

var real____cxa_guard_acquire = asm["___cxa_guard_acquire"]; asm["___cxa_guard_acquire"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_guard_acquire.apply(null, arguments);
};

var real____cxa_guard_release = asm["___cxa_guard_release"]; asm["___cxa_guard_release"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_guard_release.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____cxx_global_var_init = asm["___cxx_global_var_init"]; asm["___cxx_global_var_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init.apply(null, arguments);
};

var real____cxx_global_var_init_1 = asm["___cxx_global_var_init_1"]; asm["___cxx_global_var_init_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_1.apply(null, arguments);
};

var real____cxx_global_var_init_10 = asm["___cxx_global_var_init_10"]; asm["___cxx_global_var_init_10"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_10.apply(null, arguments);
};

var real____cxx_global_var_init_11 = asm["___cxx_global_var_init_11"]; asm["___cxx_global_var_init_11"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_11.apply(null, arguments);
};

var real____cxx_global_var_init_1174 = asm["___cxx_global_var_init_1174"]; asm["___cxx_global_var_init_1174"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_1174.apply(null, arguments);
};

var real____cxx_global_var_init_12 = asm["___cxx_global_var_init_12"]; asm["___cxx_global_var_init_12"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_12.apply(null, arguments);
};

var real____cxx_global_var_init_13 = asm["___cxx_global_var_init_13"]; asm["___cxx_global_var_init_13"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_13.apply(null, arguments);
};

var real____cxx_global_var_init_14 = asm["___cxx_global_var_init_14"]; asm["___cxx_global_var_init_14"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_14.apply(null, arguments);
};

var real____cxx_global_var_init_1444 = asm["___cxx_global_var_init_1444"]; asm["___cxx_global_var_init_1444"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_1444.apply(null, arguments);
};

var real____cxx_global_var_init_15 = asm["___cxx_global_var_init_15"]; asm["___cxx_global_var_init_15"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_15.apply(null, arguments);
};

var real____cxx_global_var_init_16 = asm["___cxx_global_var_init_16"]; asm["___cxx_global_var_init_16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_16.apply(null, arguments);
};

var real____cxx_global_var_init_17 = asm["___cxx_global_var_init_17"]; asm["___cxx_global_var_init_17"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_17.apply(null, arguments);
};

var real____cxx_global_var_init_18 = asm["___cxx_global_var_init_18"]; asm["___cxx_global_var_init_18"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_18.apply(null, arguments);
};

var real____cxx_global_var_init_19 = asm["___cxx_global_var_init_19"]; asm["___cxx_global_var_init_19"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_19.apply(null, arguments);
};

var real____cxx_global_var_init_2 = asm["___cxx_global_var_init_2"]; asm["___cxx_global_var_init_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_2.apply(null, arguments);
};

var real____cxx_global_var_init_20 = asm["___cxx_global_var_init_20"]; asm["___cxx_global_var_init_20"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_20.apply(null, arguments);
};

var real____cxx_global_var_init_21 = asm["___cxx_global_var_init_21"]; asm["___cxx_global_var_init_21"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_21.apply(null, arguments);
};

var real____cxx_global_var_init_26 = asm["___cxx_global_var_init_26"]; asm["___cxx_global_var_init_26"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_26.apply(null, arguments);
};

var real____cxx_global_var_init_27 = asm["___cxx_global_var_init_27"]; asm["___cxx_global_var_init_27"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_27.apply(null, arguments);
};

var real____cxx_global_var_init_28 = asm["___cxx_global_var_init_28"]; asm["___cxx_global_var_init_28"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_28.apply(null, arguments);
};

var real____cxx_global_var_init_29 = asm["___cxx_global_var_init_29"]; asm["___cxx_global_var_init_29"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_29.apply(null, arguments);
};

var real____cxx_global_var_init_3 = asm["___cxx_global_var_init_3"]; asm["___cxx_global_var_init_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_3.apply(null, arguments);
};

var real____cxx_global_var_init_4 = asm["___cxx_global_var_init_4"]; asm["___cxx_global_var_init_4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_4.apply(null, arguments);
};

var real____cxx_global_var_init_5 = asm["___cxx_global_var_init_5"]; asm["___cxx_global_var_init_5"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_5.apply(null, arguments);
};

var real____cxx_global_var_init_6 = asm["___cxx_global_var_init_6"]; asm["___cxx_global_var_init_6"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_6.apply(null, arguments);
};

var real____cxx_global_var_init_7 = asm["___cxx_global_var_init_7"]; asm["___cxx_global_var_init_7"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_7.apply(null, arguments);
};

var real____cxx_global_var_init_8 = asm["___cxx_global_var_init_8"]; asm["___cxx_global_var_init_8"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_8.apply(null, arguments);
};

var real____cxx_global_var_init_9 = asm["___cxx_global_var_init_9"]; asm["___cxx_global_var_init_9"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxx_global_var_init_9.apply(null, arguments);
};

var real____dup3 = asm["___dup3"]; asm["___dup3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____dup3.apply(null, arguments);
};

var real____dynamic_cast = asm["___dynamic_cast"]; asm["___dynamic_cast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____dynamic_cast.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____fdopen = asm["___fdopen"]; asm["___fdopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____fdopen.apply(null, arguments);
};

var real____fflush_unlocked = asm["___fflush_unlocked"]; asm["___fflush_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____fflush_unlocked.apply(null, arguments);
};

var real____floatscan = asm["___floatscan"]; asm["___floatscan"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____floatscan.apply(null, arguments);
};

var real____fmodeflags = asm["___fmodeflags"]; asm["___fmodeflags"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____fmodeflags.apply(null, arguments);
};

var real____fseeko = asm["___fseeko"]; asm["___fseeko"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____fseeko.apply(null, arguments);
};

var real____fseeko_unlocked = asm["___fseeko_unlocked"]; asm["___fseeko_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____fseeko_unlocked.apply(null, arguments);
};

var real____ftello = asm["___ftello"]; asm["___ftello"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ftello.apply(null, arguments);
};

var real____ftello_unlocked = asm["___ftello_unlocked"]; asm["___ftello_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ftello_unlocked.apply(null, arguments);
};

var real____fwritex = asm["___fwritex"]; asm["___fwritex"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____fwritex.apply(null, arguments);
};

var real____getTypeName = asm["___getTypeName"]; asm["___getTypeName"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____getTypeName.apply(null, arguments);
};

var real____get_locale = asm["___get_locale"]; asm["___get_locale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____get_locale.apply(null, arguments);
};

var real____intscan = asm["___intscan"]; asm["___intscan"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____intscan.apply(null, arguments);
};

var real____lctrans = asm["___lctrans"]; asm["___lctrans"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____lctrans.apply(null, arguments);
};

var real____lctrans_impl = asm["___lctrans_impl"]; asm["___lctrans_impl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____lctrans_impl.apply(null, arguments);
};

var real____loc_is_allocated = asm["___loc_is_allocated"]; asm["___loc_is_allocated"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____loc_is_allocated.apply(null, arguments);
};

var real____lockfile = asm["___lockfile"]; asm["___lockfile"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____lockfile.apply(null, arguments);
};

var real____mo_lookup = asm["___mo_lookup"]; asm["___mo_lookup"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____mo_lookup.apply(null, arguments);
};

var real____munmap = asm["___munmap"]; asm["___munmap"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____munmap.apply(null, arguments);
};

var real____newlocale = asm["___newlocale"]; asm["___newlocale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____newlocale.apply(null, arguments);
};

var real____ofl_add = asm["___ofl_add"]; asm["___ofl_add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ofl_add.apply(null, arguments);
};

var real____ofl_lock = asm["___ofl_lock"]; asm["___ofl_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ofl_lock.apply(null, arguments);
};

var real____ofl_unlock = asm["___ofl_unlock"]; asm["___ofl_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____ofl_unlock.apply(null, arguments);
};

var real____overflow = asm["___overflow"]; asm["___overflow"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____overflow.apply(null, arguments);
};

var real____procfdname = asm["___procfdname"]; asm["___procfdname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____procfdname.apply(null, arguments);
};

var real____pthread_self = asm["___pthread_self"]; asm["___pthread_self"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_self.apply(null, arguments);
};

var real____pthread_self_105 = asm["___pthread_self_105"]; asm["___pthread_self_105"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_self_105.apply(null, arguments);
};

var real____pthread_self_229 = asm["___pthread_self_229"]; asm["___pthread_self_229"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_self_229.apply(null, arguments);
};

var real____pthread_self_434 = asm["___pthread_self_434"]; asm["___pthread_self_434"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_self_434.apply(null, arguments);
};

var real____pthread_self_437 = asm["___pthread_self_437"]; asm["___pthread_self_437"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_self_437.apply(null, arguments);
};

var real____pthread_self_440 = asm["___pthread_self_440"]; asm["___pthread_self_440"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_self_440.apply(null, arguments);
};

var real____pthread_self_443 = asm["___pthread_self_443"]; asm["___pthread_self_443"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_self_443.apply(null, arguments);
};

var real____pthread_self_602 = asm["___pthread_self_602"]; asm["___pthread_self_602"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____pthread_self_602.apply(null, arguments);
};

var real____randname = asm["___randname"]; asm["___randname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____randname.apply(null, arguments);
};

var real____rem_pio2 = asm["___rem_pio2"]; asm["___rem_pio2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____rem_pio2.apply(null, arguments);
};

var real____rem_pio2_large = asm["___rem_pio2_large"]; asm["___rem_pio2_large"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____rem_pio2_large.apply(null, arguments);
};

var real____shgetc = asm["___shgetc"]; asm["___shgetc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____shgetc.apply(null, arguments);
};

var real____shlim = asm["___shlim"]; asm["___shlim"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____shlim.apply(null, arguments);
};

var real____sin = asm["___sin"]; asm["___sin"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____sin.apply(null, arguments);
};

var real____stdio_close = asm["___stdio_close"]; asm["___stdio_close"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____stdio_close.apply(null, arguments);
};

var real____stdio_read = asm["___stdio_read"]; asm["___stdio_read"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____stdio_read.apply(null, arguments);
};

var real____stdio_seek = asm["___stdio_seek"]; asm["___stdio_seek"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____stdio_seek.apply(null, arguments);
};

var real____stdio_write = asm["___stdio_write"]; asm["___stdio_write"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____stdio_write.apply(null, arguments);
};

var real____stdout_write = asm["___stdout_write"]; asm["___stdout_write"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____stdout_write.apply(null, arguments);
};

var real____stpcpy = asm["___stpcpy"]; asm["___stpcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____stpcpy.apply(null, arguments);
};

var real____strchrnul = asm["___strchrnul"]; asm["___strchrnul"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____strchrnul.apply(null, arguments);
};

var real____strdup = asm["___strdup"]; asm["___strdup"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____strdup.apply(null, arguments);
};

var real____strerror_l = asm["___strerror_l"]; asm["___strerror_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____strerror_l.apply(null, arguments);
};

var real____string_read = asm["___string_read"]; asm["___string_read"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____string_read.apply(null, arguments);
};

var real____syscall_ret = asm["___syscall_ret"]; asm["___syscall_ret"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____syscall_ret.apply(null, arguments);
};

var real____toread = asm["___toread"]; asm["___toread"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____toread.apply(null, arguments);
};

var real____towrite = asm["___towrite"]; asm["___towrite"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____towrite.apply(null, arguments);
};

var real____uflow = asm["___uflow"]; asm["___uflow"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uflow.apply(null, arguments);
};

var real____unlist_locked_file = asm["___unlist_locked_file"]; asm["___unlist_locked_file"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____unlist_locked_file.apply(null, arguments);
};

var real____unlockfile = asm["___unlockfile"]; asm["___unlockfile"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____unlockfile.apply(null, arguments);
};

var real____uselocale = asm["___uselocale"]; asm["___uselocale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uselocale.apply(null, arguments);
};

var real__abort_message = asm["_abort_message"]; asm["_abort_message"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__abort_message.apply(null, arguments);
};

var real__access = asm["_access"]; asm["_access"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__access.apply(null, arguments);
};

var real__arg_n = asm["_arg_n"]; asm["_arg_n"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__arg_n.apply(null, arguments);
};

var real__atan = asm["_atan"]; asm["_atan"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__atan.apply(null, arguments);
};

var real__atan2 = asm["_atan2"]; asm["_atan2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__atan2.apply(null, arguments);
};

var real__atoi = asm["_atoi"]; asm["_atoi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__atoi.apply(null, arguments);
};

var real__c_sfe = asm["_c_sfe"]; asm["_c_sfe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__c_sfe.apply(null, arguments);
};

var real__catclose = asm["_catclose"]; asm["_catclose"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__catclose.apply(null, arguments);
};

var real__catgets = asm["_catgets"]; asm["_catgets"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__catgets.apply(null, arguments);
};

var real__catopen = asm["_catopen"]; asm["_catopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__catopen.apply(null, arguments);
};

var real__copysign = asm["_copysign"]; asm["_copysign"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__copysign.apply(null, arguments);
};

var real__copysignl = asm["_copysignl"]; asm["_copysignl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__copysignl.apply(null, arguments);
};

var real__cos = asm["_cos"]; asm["_cos"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__cos.apply(null, arguments);
};

var real__d_cnjg = asm["_d_cnjg"]; asm["_d_cnjg"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__d_cnjg.apply(null, arguments);
};

var real__d_imag = asm["_d_imag"]; asm["_d_imag"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__d_imag.apply(null, arguments);
};

var real__d_lg10 = asm["_d_lg10"]; asm["_d_lg10"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__d_lg10.apply(null, arguments);
};

var real__d_sign = asm["_d_sign"]; asm["_d_sign"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__d_sign.apply(null, arguments);
};

var real__daxpy_ = asm["_daxpy_"]; asm["_daxpy_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__daxpy_.apply(null, arguments);
};

var real__dcabs1_ = asm["_dcabs1_"]; asm["_dcabs1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dcabs1_.apply(null, arguments);
};

var real__dcopy_ = asm["_dcopy_"]; asm["_dcopy_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dcopy_.apply(null, arguments);
};

var real__ddot_ = asm["_ddot_"]; asm["_ddot_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ddot_.apply(null, arguments);
};

var real__decfloat = asm["_decfloat"]; asm["_decfloat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__decfloat.apply(null, arguments);
};

var real__dgemm_ = asm["_dgemm_"]; asm["_dgemm_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dgemm_.apply(null, arguments);
};

var real__dgemv_ = asm["_dgemv_"]; asm["_dgemv_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dgemv_.apply(null, arguments);
};

var real__dger_ = asm["_dger_"]; asm["_dger_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dger_.apply(null, arguments);
};

var real__dgetf2_ = asm["_dgetf2_"]; asm["_dgetf2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dgetf2_.apply(null, arguments);
};

var real__dgetrf_ = asm["_dgetrf_"]; asm["_dgetrf_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dgetrf_.apply(null, arguments);
};

var real__dgetri_ = asm["_dgetri_"]; asm["_dgetri_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dgetri_.apply(null, arguments);
};

var real__disnan_ = asm["_disnan_"]; asm["_disnan_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__disnan_.apply(null, arguments);
};

var real__dispose_chunk = asm["_dispose_chunk"]; asm["_dispose_chunk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dispose_chunk.apply(null, arguments);
};

var real__dlabad_ = asm["_dlabad_"]; asm["_dlabad_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlabad_.apply(null, arguments);
};

var real__dlacpy_ = asm["_dlacpy_"]; asm["_dlacpy_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlacpy_.apply(null, arguments);
};

var real__dladiv_ = asm["_dladiv_"]; asm["_dladiv_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dladiv_.apply(null, arguments);
};

var real__dlae2_ = asm["_dlae2_"]; asm["_dlae2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlae2_.apply(null, arguments);
};

var real__dlaed0_ = asm["_dlaed0_"]; asm["_dlaed0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlaed0_.apply(null, arguments);
};

var real__dlaed1_ = asm["_dlaed1_"]; asm["_dlaed1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlaed1_.apply(null, arguments);
};

var real__dlaed2_ = asm["_dlaed2_"]; asm["_dlaed2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlaed2_.apply(null, arguments);
};

var real__dlaed3_ = asm["_dlaed3_"]; asm["_dlaed3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlaed3_.apply(null, arguments);
};

var real__dlaed4_ = asm["_dlaed4_"]; asm["_dlaed4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlaed4_.apply(null, arguments);
};

var real__dlaed5_ = asm["_dlaed5_"]; asm["_dlaed5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlaed5_.apply(null, arguments);
};

var real__dlaed6_ = asm["_dlaed6_"]; asm["_dlaed6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlaed6_.apply(null, arguments);
};

var real__dlaed7_ = asm["_dlaed7_"]; asm["_dlaed7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlaed7_.apply(null, arguments);
};

var real__dlaed8_ = asm["_dlaed8_"]; asm["_dlaed8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlaed8_.apply(null, arguments);
};

var real__dlaed9_ = asm["_dlaed9_"]; asm["_dlaed9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlaed9_.apply(null, arguments);
};

var real__dlaeda_ = asm["_dlaeda_"]; asm["_dlaeda_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlaeda_.apply(null, arguments);
};

var real__dlaev2_ = asm["_dlaev2_"]; asm["_dlaev2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlaev2_.apply(null, arguments);
};

var real__dlaisnan_ = asm["_dlaisnan_"]; asm["_dlaisnan_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlaisnan_.apply(null, arguments);
};

var real__dlamc1_ = asm["_dlamc1_"]; asm["_dlamc1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlamc1_.apply(null, arguments);
};

var real__dlamc2_ = asm["_dlamc2_"]; asm["_dlamc2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlamc2_.apply(null, arguments);
};

var real__dlamc3_ = asm["_dlamc3_"]; asm["_dlamc3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlamc3_.apply(null, arguments);
};

var real__dlamc4_ = asm["_dlamc4_"]; asm["_dlamc4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlamc4_.apply(null, arguments);
};

var real__dlamc5_ = asm["_dlamc5_"]; asm["_dlamc5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlamc5_.apply(null, arguments);
};

var real__dlamch_ = asm["_dlamch_"]; asm["_dlamch_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlamch_.apply(null, arguments);
};

var real__dlamrg_ = asm["_dlamrg_"]; asm["_dlamrg_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlamrg_.apply(null, arguments);
};

var real__dlanst_ = asm["_dlanst_"]; asm["_dlanst_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlanst_.apply(null, arguments);
};

var real__dlansy_ = asm["_dlansy_"]; asm["_dlansy_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlansy_.apply(null, arguments);
};

var real__dlapy2_ = asm["_dlapy2_"]; asm["_dlapy2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlapy2_.apply(null, arguments);
};

var real__dlapy3_ = asm["_dlapy3_"]; asm["_dlapy3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlapy3_.apply(null, arguments);
};

var real__dlarf_ = asm["_dlarf_"]; asm["_dlarf_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlarf_.apply(null, arguments);
};

var real__dlarfb_ = asm["_dlarfb_"]; asm["_dlarfb_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlarfb_.apply(null, arguments);
};

var real__dlarfg_ = asm["_dlarfg_"]; asm["_dlarfg_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlarfg_.apply(null, arguments);
};

var real__dlarft_ = asm["_dlarft_"]; asm["_dlarft_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlarft_.apply(null, arguments);
};

var real__dlartg_ = asm["_dlartg_"]; asm["_dlartg_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlartg_.apply(null, arguments);
};

var real__dlascl_ = asm["_dlascl_"]; asm["_dlascl_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlascl_.apply(null, arguments);
};

var real__dlaset_ = asm["_dlaset_"]; asm["_dlaset_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlaset_.apply(null, arguments);
};

var real__dlasr_ = asm["_dlasr_"]; asm["_dlasr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlasr_.apply(null, arguments);
};

var real__dlasrt_ = asm["_dlasrt_"]; asm["_dlasrt_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlasrt_.apply(null, arguments);
};

var real__dlassq_ = asm["_dlassq_"]; asm["_dlassq_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlassq_.apply(null, arguments);
};

var real__dlaswp_ = asm["_dlaswp_"]; asm["_dlaswp_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlaswp_.apply(null, arguments);
};

var real__dlatrd_ = asm["_dlatrd_"]; asm["_dlatrd_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dlatrd_.apply(null, arguments);
};

var real__dnrm2_ = asm["_dnrm2_"]; asm["_dnrm2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dnrm2_.apply(null, arguments);
};

var real__do_fio = asm["_do_fio"]; asm["_do_fio"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__do_fio.apply(null, arguments);
};

var real__do_read = asm["_do_read"]; asm["_do_read"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__do_read.apply(null, arguments);
};

var real__dorg2l_ = asm["_dorg2l_"]; asm["_dorg2l_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dorg2l_.apply(null, arguments);
};

var real__dorg2r_ = asm["_dorg2r_"]; asm["_dorg2r_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dorg2r_.apply(null, arguments);
};

var real__dorgql_ = asm["_dorgql_"]; asm["_dorgql_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dorgql_.apply(null, arguments);
};

var real__dorgqr_ = asm["_dorgqr_"]; asm["_dorgqr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dorgqr_.apply(null, arguments);
};

var real__dorgtr_ = asm["_dorgtr_"]; asm["_dorgtr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dorgtr_.apply(null, arguments);
};

var real__dorm2l_ = asm["_dorm2l_"]; asm["_dorm2l_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dorm2l_.apply(null, arguments);
};

var real__dorm2r_ = asm["_dorm2r_"]; asm["_dorm2r_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dorm2r_.apply(null, arguments);
};

var real__dormql_ = asm["_dormql_"]; asm["_dormql_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dormql_.apply(null, arguments);
};

var real__dormqr_ = asm["_dormqr_"]; asm["_dormqr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dormqr_.apply(null, arguments);
};

var real__dormtr_ = asm["_dormtr_"]; asm["_dormtr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dormtr_.apply(null, arguments);
};

var real__drot_ = asm["_drot_"]; asm["_drot_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__drot_.apply(null, arguments);
};

var real__dscal_ = asm["_dscal_"]; asm["_dscal_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dscal_.apply(null, arguments);
};

var real__dstedc_ = asm["_dstedc_"]; asm["_dstedc_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dstedc_.apply(null, arguments);
};

var real__dsteqr_ = asm["_dsteqr_"]; asm["_dsteqr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dsteqr_.apply(null, arguments);
};

var real__dsterf_ = asm["_dsterf_"]; asm["_dsterf_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dsterf_.apply(null, arguments);
};

var real__dswap_ = asm["_dswap_"]; asm["_dswap_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dswap_.apply(null, arguments);
};

var real__dsyev_ = asm["_dsyev_"]; asm["_dsyev_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dsyev_.apply(null, arguments);
};

var real__dsyevd_ = asm["_dsyevd_"]; asm["_dsyevd_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dsyevd_.apply(null, arguments);
};

var real__dsymv_ = asm["_dsymv_"]; asm["_dsymv_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dsymv_.apply(null, arguments);
};

var real__dsyr2_ = asm["_dsyr2_"]; asm["_dsyr2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dsyr2_.apply(null, arguments);
};

var real__dsyr2k_ = asm["_dsyr2k_"]; asm["_dsyr2k_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dsyr2k_.apply(null, arguments);
};

var real__dsytd2_ = asm["_dsytd2_"]; asm["_dsytd2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dsytd2_.apply(null, arguments);
};

var real__dsytrd_ = asm["_dsytrd_"]; asm["_dsytrd_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dsytrd_.apply(null, arguments);
};

var real__dtrmm_ = asm["_dtrmm_"]; asm["_dtrmm_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dtrmm_.apply(null, arguments);
};

var real__dtrmv_ = asm["_dtrmv_"]; asm["_dtrmv_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dtrmv_.apply(null, arguments);
};

var real__dtrsm_ = asm["_dtrsm_"]; asm["_dtrsm_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dtrsm_.apply(null, arguments);
};

var real__dtrti2_ = asm["_dtrti2_"]; asm["_dtrti2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dtrti2_.apply(null, arguments);
};

var real__dtrtri_ = asm["_dtrtri_"]; asm["_dtrtri_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dtrtri_.apply(null, arguments);
};

var real__dummy = asm["_dummy"]; asm["_dummy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dummy.apply(null, arguments);
};

var real__dummy_733 = asm["_dummy_733"]; asm["_dummy_733"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dummy_733.apply(null, arguments);
};

var real__dznrm2_ = asm["_dznrm2_"]; asm["_dznrm2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dznrm2_.apply(null, arguments);
};

var real__dzsum1_ = asm["_dzsum1_"]; asm["_dzsum1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__dzsum1_.apply(null, arguments);
};

var real__e_wsfe = asm["_e_wsfe"]; asm["_e_wsfe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__e_wsfe.apply(null, arguments);
};

var real__en_fio = asm["_en_fio"]; asm["_en_fio"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__en_fio.apply(null, arguments);
};

var real__err__fl = asm["_err__fl"]; asm["_err__fl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__err__fl.apply(null, arguments);
};

var real__exit_ = asm["_exit_"]; asm["_exit_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__exit_.apply(null, arguments);
};

var real__exp = asm["_exp"]; asm["_exp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__exp.apply(null, arguments);
};

var real__f__cabs = asm["_f__cabs"]; asm["_f__cabs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__f__cabs.apply(null, arguments);
};

var real__f__canseek = asm["_f__canseek"]; asm["_f__canseek"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__f__canseek.apply(null, arguments);
};

var real__f__fatal = asm["_f__fatal"]; asm["_f__fatal"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__f__fatal.apply(null, arguments);
};

var real__f__icvt = asm["_f__icvt"]; asm["_f__icvt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__f__icvt.apply(null, arguments);
};

var real__f__inode = asm["_f__inode"]; asm["_f__inode"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__f__inode.apply(null, arguments);
};

var real__f__nowwriting = asm["_f__nowwriting"]; asm["_f__nowwriting"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__f__nowwriting.apply(null, arguments);
};

var real__f__putbuf = asm["_f__putbuf"]; asm["_f__putbuf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__f__putbuf.apply(null, arguments);
};

var real__f_clos = asm["_f_clos"]; asm["_f_clos"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__f_clos.apply(null, arguments);
};

var real__f_exit = asm["_f_exit"]; asm["_f_exit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__f_exit.apply(null, arguments);
};

var real__f_init = asm["_f_init"]; asm["_f_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__f_init.apply(null, arguments);
};

var real__f_open = asm["_f_open"]; asm["_f_open"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__f_open.apply(null, arguments);
};

var real__f_s = asm["_f_s"]; asm["_f_s"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__f_s.apply(null, arguments);
};

var real__fclose = asm["_fclose"]; asm["_fclose"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fclose.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__fileno = asm["_fileno"]; asm["_fileno"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fileno.apply(null, arguments);
};

var real__fk_open = asm["_fk_open"]; asm["_fk_open"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fk_open.apply(null, arguments);
};

var real__fmax = asm["_fmax"]; asm["_fmax"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fmax.apply(null, arguments);
};

var real__fmod = asm["_fmod"]; asm["_fmod"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fmod.apply(null, arguments);
};

var real__fmodl = asm["_fmodl"]; asm["_fmodl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fmodl.apply(null, arguments);
};

var real__fmt_bg = asm["_fmt_bg"]; asm["_fmt_bg"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fmt_bg.apply(null, arguments);
};

var real__fmt_fp = asm["_fmt_fp"]; asm["_fmt_fp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fmt_fp.apply(null, arguments);
};

var real__fmt_o = asm["_fmt_o"]; asm["_fmt_o"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fmt_o.apply(null, arguments);
};

var real__fmt_u = asm["_fmt_u"]; asm["_fmt_u"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fmt_u.apply(null, arguments);
};

var real__fmt_x = asm["_fmt_x"]; asm["_fmt_x"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fmt_x.apply(null, arguments);
};

var real__fopen = asm["_fopen"]; asm["_fopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fopen.apply(null, arguments);
};

var real__fprintf = asm["_fprintf"]; asm["_fprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fprintf.apply(null, arguments);
};

var real__fputc = asm["_fputc"]; asm["_fputc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fputc.apply(null, arguments);
};

var real__fputs = asm["_fputs"]; asm["_fputs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fputs.apply(null, arguments);
};

var real__fread = asm["_fread"]; asm["_fread"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fread.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__freelocale = asm["_freelocale"]; asm["_freelocale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freelocale.apply(null, arguments);
};

var real__freopen = asm["_freopen"]; asm["_freopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__freopen.apply(null, arguments);
};

var real__frexp = asm["_frexp"]; asm["_frexp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__frexp.apply(null, arguments);
};

var real__frexpl = asm["_frexpl"]; asm["_frexpl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__frexpl.apply(null, arguments);
};

var real__fseek = asm["_fseek"]; asm["_fseek"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fseek.apply(null, arguments);
};

var real__fstat = asm["_fstat"]; asm["_fstat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fstat.apply(null, arguments);
};

var real__ftell = asm["_ftell"]; asm["_ftell"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ftell.apply(null, arguments);
};

var real__ftruncate = asm["_ftruncate"]; asm["_ftruncate"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ftruncate.apply(null, arguments);
};

var real__fwrite = asm["_fwrite"]; asm["_fwrite"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fwrite.apply(null, arguments);
};

var real__g_char = asm["_g_char"]; asm["_g_char"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__g_char.apply(null, arguments);
};

var real__getc = asm["_getc"]; asm["_getc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__getc.apply(null, arguments);
};

var real__getint = asm["_getint"]; asm["_getint"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__getint.apply(null, arguments);
};

var real__hexfloat = asm["_hexfloat"]; asm["_hexfloat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hexfloat.apply(null, arguments);
};

var real__hypot = asm["_hypot"]; asm["_hypot"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__hypot.apply(null, arguments);
};

var real__i_nint = asm["_i_nint"]; asm["_i_nint"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i_nint.apply(null, arguments);
};

var real__idamax_ = asm["_idamax_"]; asm["_idamax_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__idamax_.apply(null, arguments);
};

var real__ieeeck_ = asm["_ieeeck_"]; asm["_ieeeck_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ieeeck_.apply(null, arguments);
};

var real__iladlc_ = asm["_iladlc_"]; asm["_iladlc_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__iladlc_.apply(null, arguments);
};

var real__iladlr_ = asm["_iladlr_"]; asm["_iladlr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__iladlr_.apply(null, arguments);
};

var real__ilaenv_ = asm["_ilaenv_"]; asm["_ilaenv_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ilaenv_.apply(null, arguments);
};

var real__ilazlc_ = asm["_ilazlc_"]; asm["_ilazlc_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ilazlc_.apply(null, arguments);
};

var real__ilazlr_ = asm["_ilazlr_"]; asm["_ilazlr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ilazlr_.apply(null, arguments);
};

var real__ilogb = asm["_ilogb"]; asm["_ilogb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ilogb.apply(null, arguments);
};

var real__internal_memalign = asm["_internal_memalign"]; asm["_internal_memalign"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__internal_memalign.apply(null, arguments);
};

var real__iparmq_ = asm["_iparmq_"]; asm["_iparmq_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__iparmq_.apply(null, arguments);
};

var real__isatty = asm["_isatty"]; asm["_isatty"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__isatty.apply(null, arguments);
};

var real__isdigit_l = asm["_isdigit_l"]; asm["_isdigit_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__isdigit_l.apply(null, arguments);
};

var real__isspace = asm["_isspace"]; asm["_isspace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__isspace.apply(null, arguments);
};

var real__isxdigit = asm["_isxdigit"]; asm["_isxdigit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__isxdigit.apply(null, arguments);
};

var real__isxdigit_l = asm["_isxdigit_l"]; asm["_isxdigit_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__isxdigit_l.apply(null, arguments);
};

var real__izamax_ = asm["_izamax_"]; asm["_izamax_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__izamax_.apply(null, arguments);
};

var real__izmax1_ = asm["_izmax1_"]; asm["_izmax1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__izmax1_.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__log = asm["_log"]; asm["_log"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__log.apply(null, arguments);
};

var real__logb = asm["_logb"]; asm["_logb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__logb.apply(null, arguments);
};

var real__lsame_ = asm["_lsame_"]; asm["_lsame_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__lsame_.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__mbrlen = asm["_mbrlen"]; asm["_mbrlen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mbrlen.apply(null, arguments);
};

var real__mbrtowc = asm["_mbrtowc"]; asm["_mbrtowc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mbrtowc.apply(null, arguments);
};

var real__mbsinit = asm["_mbsinit"]; asm["_mbsinit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mbsinit.apply(null, arguments);
};

var real__mbsnrtowcs = asm["_mbsnrtowcs"]; asm["_mbsnrtowcs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mbsnrtowcs.apply(null, arguments);
};

var real__mbsrtowcs = asm["_mbsrtowcs"]; asm["_mbsrtowcs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mbsrtowcs.apply(null, arguments);
};

var real__mbtowc = asm["_mbtowc"]; asm["_mbtowc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mbtowc.apply(null, arguments);
};

var real__memchr = asm["_memchr"]; asm["_memchr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memchr.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__mv_cur = asm["_mv_cur"]; asm["_mv_cur"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__mv_cur.apply(null, arguments);
};

var real__opn_err = asm["_opn_err"]; asm["_opn_err"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__opn_err.apply(null, arguments);
};

var real__out = asm["_out"]; asm["_out"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__out.apply(null, arguments);
};

var real__pad_669 = asm["_pad_669"]; asm["_pad_669"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pad_669.apply(null, arguments);
};

var real__pars_f = asm["_pars_f"]; asm["_pars_f"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pars_f.apply(null, arguments);
};

var real__perror = asm["_perror"]; asm["_perror"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__perror.apply(null, arguments);
};

var real__pop_arg = asm["_pop_arg"]; asm["_pop_arg"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pop_arg.apply(null, arguments);
};

var real__posix_memalign = asm["_posix_memalign"]; asm["_posix_memalign"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__posix_memalign.apply(null, arguments);
};

var real__pow_di = asm["_pow_di"]; asm["_pow_di"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pow_di.apply(null, arguments);
};

var real__pow_ii = asm["_pow_ii"]; asm["_pow_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pow_ii.apply(null, arguments);
};

var real__pow_zi = asm["_pow_zi"]; asm["_pow_zi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pow_zi.apply(null, arguments);
};

var real__printf = asm["_printf"]; asm["_printf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__printf.apply(null, arguments);
};

var real__printf_core = asm["_printf_core"]; asm["_printf_core"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__printf_core.apply(null, arguments);
};

var real__pthread_cond_broadcast = asm["_pthread_cond_broadcast"]; asm["_pthread_cond_broadcast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_cond_broadcast.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__pthread_self = asm["_pthread_self"]; asm["_pthread_self"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_self.apply(null, arguments);
};

var real__putc = asm["_putc"]; asm["_putc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__putc.apply(null, arguments);
};

var real__rand = asm["_rand"]; asm["_rand"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__rand.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__realloc.apply(null, arguments);
};

var real__rewind = asm["_rewind"]; asm["_rewind"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__rewind.apply(null, arguments);
};

var real__s_cat = asm["_s_cat"]; asm["_s_cat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__s_cat.apply(null, arguments);
};

var real__s_cmp = asm["_s_cmp"]; asm["_s_cmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__s_cmp.apply(null, arguments);
};

var real__s_copy = asm["_s_copy"]; asm["_s_copy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__s_copy.apply(null, arguments);
};

var real__s_wsfe = asm["_s_wsfe"]; asm["_s_wsfe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__s_wsfe.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real__scalbn = asm["_scalbn"]; asm["_scalbn"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__scalbn.apply(null, arguments);
};

var real__scalbnl = asm["_scalbnl"]; asm["_scalbnl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__scalbnl.apply(null, arguments);
};

var real__scanexp = asm["_scanexp"]; asm["_scanexp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__scanexp.apply(null, arguments);
};

var real__sig_die = asm["_sig_die"]; asm["_sig_die"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sig_die.apply(null, arguments);
};

var real__sigfdie = asm["_sigfdie"]; asm["_sigfdie"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sigfdie.apply(null, arguments);
};

var real__sigidie = asm["_sigidie"]; asm["_sigidie"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sigidie.apply(null, arguments);
};

var real__sigindie = asm["_sigindie"]; asm["_sigindie"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sigindie.apply(null, arguments);
};

var real__sigqdie = asm["_sigqdie"]; asm["_sigqdie"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sigqdie.apply(null, arguments);
};

var real__sigtdie = asm["_sigtdie"]; asm["_sigtdie"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sigtdie.apply(null, arguments);
};

var real__sigtrdie = asm["_sigtrdie"]; asm["_sigtrdie"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sigtrdie.apply(null, arguments);
};

var real__sin = asm["_sin"]; asm["_sin"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sin.apply(null, arguments);
};

var real__sn_write = asm["_sn_write"]; asm["_sn_write"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sn_write.apply(null, arguments);
};

var real__snprintf = asm["_snprintf"]; asm["_snprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__snprintf.apply(null, arguments);
};

var real__sprintf = asm["_sprintf"]; asm["_sprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sprintf.apply(null, arguments);
};

var real__sq = asm["_sq"]; asm["_sq"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sq.apply(null, arguments);
};

var real__sscanf = asm["_sscanf"]; asm["_sscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sscanf.apply(null, arguments);
};

var real__stat = asm["_stat"]; asm["_stat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__stat.apply(null, arguments);
};

var real__store_int = asm["_store_int"]; asm["_store_int"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__store_int.apply(null, arguments);
};

var real__strchr = asm["_strchr"]; asm["_strchr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strchr.apply(null, arguments);
};

var real__strcmp = asm["_strcmp"]; asm["_strcmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strcmp.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strcpy.apply(null, arguments);
};

var real__strerror = asm["_strerror"]; asm["_strerror"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strerror.apply(null, arguments);
};

var real__strerror_r = asm["_strerror_r"]; asm["_strerror_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strerror_r.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strlen.apply(null, arguments);
};

var real__strtod = asm["_strtod"]; asm["_strtod"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtod.apply(null, arguments);
};

var real__strtod_l = asm["_strtod_l"]; asm["_strtod_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtod_l.apply(null, arguments);
};

var real__strtof = asm["_strtof"]; asm["_strtof"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtof.apply(null, arguments);
};

var real__strtof_l = asm["_strtof_l"]; asm["_strtof_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtof_l.apply(null, arguments);
};

var real__strtold = asm["_strtold"]; asm["_strtold"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtold.apply(null, arguments);
};

var real__strtold_l = asm["_strtold_l"]; asm["_strtold_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtold_l.apply(null, arguments);
};

var real__strtoll = asm["_strtoll"]; asm["_strtoll"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtoll.apply(null, arguments);
};

var real__strtoll_l = asm["_strtoll_l"]; asm["_strtoll_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtoll_l.apply(null, arguments);
};

var real__strtoull = asm["_strtoull"]; asm["_strtoull"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtoull.apply(null, arguments);
};

var real__strtoull_l = asm["_strtoull_l"]; asm["_strtoull_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtoull_l.apply(null, arguments);
};

var real__strtox = asm["_strtox"]; asm["_strtox"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtox.apply(null, arguments);
};

var real__strtox_763 = asm["_strtox_763"]; asm["_strtox_763"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__strtox_763.apply(null, arguments);
};

var real__swapc = asm["_swapc"]; asm["_swapc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__swapc.apply(null, arguments);
};

var real__t_runc = asm["_t_runc"]; asm["_t_runc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__t_runc.apply(null, arguments);
};

var real__tmpfile = asm["_tmpfile"]; asm["_tmpfile"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__tmpfile.apply(null, arguments);
};

var real__try_realloc_chunk = asm["_try_realloc_chunk"]; asm["_try_realloc_chunk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__try_realloc_chunk.apply(null, arguments);
};

var real__ungetc = asm["_ungetc"]; asm["_ungetc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ungetc.apply(null, arguments);
};

var real__unlink = asm["_unlink"]; asm["_unlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__unlink.apply(null, arguments);
};

var real__vasprintf = asm["_vasprintf"]; asm["_vasprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vasprintf.apply(null, arguments);
};

var real__vfprintf = asm["_vfprintf"]; asm["_vfprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vfprintf.apply(null, arguments);
};

var real__vfscanf = asm["_vfscanf"]; asm["_vfscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vfscanf.apply(null, arguments);
};

var real__vsnprintf = asm["_vsnprintf"]; asm["_vsnprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vsnprintf.apply(null, arguments);
};

var real__vsprintf = asm["_vsprintf"]; asm["_vsprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vsprintf.apply(null, arguments);
};

var real__vsscanf = asm["_vsscanf"]; asm["_vsscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__vsscanf.apply(null, arguments);
};

var real__w_ed = asm["_w_ed"]; asm["_w_ed"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__w_ed.apply(null, arguments);
};

var real__w_ned = asm["_w_ned"]; asm["_w_ned"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__w_ned.apply(null, arguments);
};

var real__wcrtomb = asm["_wcrtomb"]; asm["_wcrtomb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wcrtomb.apply(null, arguments);
};

var real__wcslen = asm["_wcslen"]; asm["_wcslen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wcslen.apply(null, arguments);
};

var real__wcsnrtombs = asm["_wcsnrtombs"]; asm["_wcsnrtombs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wcsnrtombs.apply(null, arguments);
};

var real__wcsrtombs = asm["_wcsrtombs"]; asm["_wcsrtombs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wcsrtombs.apply(null, arguments);
};

var real__wctomb = asm["_wctomb"]; asm["_wctomb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wctomb.apply(null, arguments);
};

var real__wmemcpy = asm["_wmemcpy"]; asm["_wmemcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wmemcpy.apply(null, arguments);
};

var real__wmemmove = asm["_wmemmove"]; asm["_wmemmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wmemmove.apply(null, arguments);
};

var real__wmemset = asm["_wmemset"]; asm["_wmemset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wmemset.apply(null, arguments);
};

var real__wrt_E = asm["_wrt_E"]; asm["_wrt_E"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wrt_E.apply(null, arguments);
};

var real__wrt_F = asm["_wrt_F"]; asm["_wrt_F"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wrt_F.apply(null, arguments);
};

var real__wrt_I = asm["_wrt_I"]; asm["_wrt_I"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wrt_I.apply(null, arguments);
};

var real__wrt_IM = asm["_wrt_IM"]; asm["_wrt_IM"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wrt_IM.apply(null, arguments);
};

var real__wrt_Z = asm["_wrt_Z"]; asm["_wrt_Z"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__wrt_Z.apply(null, arguments);
};

var real__x_putc = asm["_x_putc"]; asm["_x_putc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__x_putc.apply(null, arguments);
};

var real__x_wSL = asm["_x_wSL"]; asm["_x_wSL"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__x_wSL.apply(null, arguments);
};

var real__xerbla_ = asm["_xerbla_"]; asm["_xerbla_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__xerbla_.apply(null, arguments);
};

var real__xw_end = asm["_xw_end"]; asm["_xw_end"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__xw_end.apply(null, arguments);
};

var real__xw_rev = asm["_xw_rev"]; asm["_xw_rev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__xw_rev.apply(null, arguments);
};

var real__z_abs = asm["_z_abs"]; asm["_z_abs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__z_abs.apply(null, arguments);
};

var real__z_div = asm["_z_div"]; asm["_z_div"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__z_div.apply(null, arguments);
};

var real__z_sqrt = asm["_z_sqrt"]; asm["_z_sqrt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__z_sqrt.apply(null, arguments);
};

var real__zaxpy_ = asm["_zaxpy_"]; asm["_zaxpy_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zaxpy_.apply(null, arguments);
};

var real__zcopy_ = asm["_zcopy_"]; asm["_zcopy_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zcopy_.apply(null, arguments);
};

var real__zdotc_ = asm["_zdotc_"]; asm["_zdotc_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zdotc_.apply(null, arguments);
};

var real__zdotu_ = asm["_zdotu_"]; asm["_zdotu_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zdotu_.apply(null, arguments);
};

var real__zdscal_ = asm["_zdscal_"]; asm["_zdscal_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zdscal_.apply(null, arguments);
};

var real__zgebak_ = asm["_zgebak_"]; asm["_zgebak_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zgebak_.apply(null, arguments);
};

var real__zgebal_ = asm["_zgebal_"]; asm["_zgebal_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zgebal_.apply(null, arguments);
};

var real__zgees_ = asm["_zgees_"]; asm["_zgees_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zgees_.apply(null, arguments);
};

var real__zgehd2_ = asm["_zgehd2_"]; asm["_zgehd2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zgehd2_.apply(null, arguments);
};

var real__zgehrd_ = asm["_zgehrd_"]; asm["_zgehrd_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zgehrd_.apply(null, arguments);
};

var real__zgemm_ = asm["_zgemm_"]; asm["_zgemm_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zgemm_.apply(null, arguments);
};

var real__zgemv_ = asm["_zgemv_"]; asm["_zgemv_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zgemv_.apply(null, arguments);
};

var real__zgerc_ = asm["_zgerc_"]; asm["_zgerc_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zgerc_.apply(null, arguments);
};

var real__zherk_ = asm["_zherk_"]; asm["_zherk_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zherk_.apply(null, arguments);
};

var real__zhseqr_ = asm["_zhseqr_"]; asm["_zhseqr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zhseqr_.apply(null, arguments);
};

var real__zlacgv_ = asm["_zlacgv_"]; asm["_zlacgv_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zlacgv_.apply(null, arguments);
};

var real__zlacn2_ = asm["_zlacn2_"]; asm["_zlacn2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zlacn2_.apply(null, arguments);
};

var real__zlacpy_ = asm["_zlacpy_"]; asm["_zlacpy_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zlacpy_.apply(null, arguments);
};

var real__zladiv_ = asm["_zladiv_"]; asm["_zladiv_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zladiv_.apply(null, arguments);
};

var real__zlahqr_ = asm["_zlahqr_"]; asm["_zlahqr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zlahqr_.apply(null, arguments);
};

var real__zlahr2_ = asm["_zlahr2_"]; asm["_zlahr2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zlahr2_.apply(null, arguments);
};

var real__zlange_ = asm["_zlange_"]; asm["_zlange_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zlange_.apply(null, arguments);
};

var real__zlaqr0_ = asm["_zlaqr0_"]; asm["_zlaqr0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zlaqr0_.apply(null, arguments);
};

var real__zlaqr1_ = asm["_zlaqr1_"]; asm["_zlaqr1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zlaqr1_.apply(null, arguments);
};

var real__zlaqr2_ = asm["_zlaqr2_"]; asm["_zlaqr2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zlaqr2_.apply(null, arguments);
};

var real__zlaqr3_ = asm["_zlaqr3_"]; asm["_zlaqr3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zlaqr3_.apply(null, arguments);
};

var real__zlaqr4_ = asm["_zlaqr4_"]; asm["_zlaqr4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zlaqr4_.apply(null, arguments);
};

var real__zlaqr5_ = asm["_zlaqr5_"]; asm["_zlaqr5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zlaqr5_.apply(null, arguments);
};

var real__zlarf_ = asm["_zlarf_"]; asm["_zlarf_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zlarf_.apply(null, arguments);
};

var real__zlarfb_ = asm["_zlarfb_"]; asm["_zlarfb_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zlarfb_.apply(null, arguments);
};

var real__zlarfg_ = asm["_zlarfg_"]; asm["_zlarfg_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zlarfg_.apply(null, arguments);
};

var real__zlarft_ = asm["_zlarft_"]; asm["_zlarft_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zlarft_.apply(null, arguments);
};

var real__zlartg_ = asm["_zlartg_"]; asm["_zlartg_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zlartg_.apply(null, arguments);
};

var real__zlascl_ = asm["_zlascl_"]; asm["_zlascl_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zlascl_.apply(null, arguments);
};

var real__zlaset_ = asm["_zlaset_"]; asm["_zlaset_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zlaset_.apply(null, arguments);
};

var real__zlassq_ = asm["_zlassq_"]; asm["_zlassq_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zlassq_.apply(null, arguments);
};

var real__zrot_ = asm["_zrot_"]; asm["_zrot_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zrot_.apply(null, arguments);
};

var real__zscal_ = asm["_zscal_"]; asm["_zscal_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zscal_.apply(null, arguments);
};

var real__zswap_ = asm["_zswap_"]; asm["_zswap_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zswap_.apply(null, arguments);
};

var real__ztrexc_ = asm["_ztrexc_"]; asm["_ztrexc_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ztrexc_.apply(null, arguments);
};

var real__ztrmm_ = asm["_ztrmm_"]; asm["_ztrmm_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ztrmm_.apply(null, arguments);
};

var real__ztrmv_ = asm["_ztrmv_"]; asm["_ztrmv_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ztrmv_.apply(null, arguments);
};

var real__ztrsen_ = asm["_ztrsen_"]; asm["_ztrsen_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ztrsen_.apply(null, arguments);
};

var real__ztrsyl_ = asm["_ztrsyl_"]; asm["_ztrsyl_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ztrsyl_.apply(null, arguments);
};

var real__zung2r_ = asm["_zung2r_"]; asm["_zung2r_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zung2r_.apply(null, arguments);
};

var real__zunghr_ = asm["_zunghr_"]; asm["_zunghr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zunghr_.apply(null, arguments);
};

var real__zungqr_ = asm["_zungqr_"]; asm["_zungqr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zungqr_.apply(null, arguments);
};

var real__zunm2r_ = asm["_zunm2r_"]; asm["_zunm2r_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zunm2r_.apply(null, arguments);
};

var real__zunmhr_ = asm["_zunmhr_"]; asm["_zunmhr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zunmhr_.apply(null, arguments);
};

var real__zunmqr_ = asm["_zunmqr_"]; asm["_zunmqr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__zunmqr_.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
Module["asm"] = asm;
var _F77_aloc = Module["_F77_aloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_F77_aloc"].apply(null, arguments) };
var __GLOBAL__I_000101 = Module["__GLOBAL__I_000101"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__GLOBAL__I_000101"].apply(null, arguments) };
var __GLOBAL__sub_I_bind_cpp = Module["__GLOBAL__sub_I_bind_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__GLOBAL__sub_I_bind_cpp"].apply(null, arguments) };
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__GLOBAL__sub_I_iostream_cpp"].apply(null, arguments) };
var __GLOBAL__sub_I_objectDetector1_cpp = Module["__GLOBAL__sub_I_objectDetector1_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__GLOBAL__sub_I_objectDetector1_cpp"].apply(null, arguments) };
var __Z11getClustersv = Module["__Z11getClustersv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__Z11getClustersv"].apply(null, arguments) };
var __Z11setImgFrontN10emscripten3valE = Module["__Z11setImgFrontN10emscripten3valE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__Z11setImgFrontN10emscripten3valE"].apply(null, arguments) };
var __Z13matrixToArrayN4arma3MatIdEE = Module["__Z13matrixToArrayN4arma3MatIdEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__Z13matrixToArrayN4arma3MatIdEE"].apply(null, arguments) };
var __Z17copyArrayInMatrixRN4arma3MatIdEEN10emscripten3valE = Module["__Z17copyArrayInMatrixRN4arma3MatIdEEN10emscripten3valE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__Z17copyArrayInMatrixRN4arma3MatIdEEN10emscripten3valE"].apply(null, arguments) };
var __Z4initv = Module["__Z4initv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__Z4initv"].apply(null, arguments) };
var __Z7executev = Module["__Z7executev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__Z7executev"].apply(null, arguments) };
var __ZL13__DOUBLE_BITSd = Module["__ZL13__DOUBLE_BITSd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZL13__DOUBLE_BITSd"].apply(null, arguments) };
var __ZL25default_terminate_handlerv = Module["__ZL25default_terminate_handlerv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZL25default_terminate_handlerv"].apply(null, arguments) };
var __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev = Module["__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev"].apply(null, arguments) };
var __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv = Module["__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv"].apply(null, arguments) };
var __ZN10__cxxabiv116__shim_type_infoD2Ev = Module["__ZN10__cxxabiv116__shim_type_infoD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10__cxxabiv116__shim_type_infoD2Ev"].apply(null, arguments) };
var __ZN10__cxxabiv117__class_type_infoD0Ev = Module["__ZN10__cxxabiv117__class_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10__cxxabiv117__class_type_infoD0Ev"].apply(null, arguments) };
var __ZN10__cxxabiv120__si_class_type_infoD0Ev = Module["__ZN10__cxxabiv120__si_class_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10__cxxabiv120__si_class_type_infoD0Ev"].apply(null, arguments) };
var __ZN10__cxxabiv121__vmi_class_type_infoD0Ev = Module["__ZN10__cxxabiv121__vmi_class_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10__cxxabiv121__vmi_class_type_infoD0Ev"].apply(null, arguments) };
var __ZN10__cxxabiv123__fundamental_type_infoD0Ev = Module["__ZN10__cxxabiv123__fundamental_type_infoD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10__cxxabiv123__fundamental_type_infoD0Ev"].apply(null, arguments) };
var __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b = Module["__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b"].apply(null, arguments) };
var __ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE = Module["__ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten3val14take_ownershipEPNS_8internal7_EM_VALE"].apply(null, arguments) };
var __ZN10emscripten3val3setIiEEvRKT_RKS0_ = Module["__ZN10emscripten3val3setIiEEvRKT_RKS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten3val3setIiEEvRKT_RKS0_"].apply(null, arguments) };
var __ZN10emscripten3val3setIidEEvRKT_RKT0_ = Module["__ZN10emscripten3val3setIidEEvRKT_RKT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten3val3setIidEEvRKT_RKT0_"].apply(null, arguments) };
var __ZN10emscripten3val5arrayEv = Module["__ZN10emscripten3val5arrayEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten3val5arrayEv"].apply(null, arguments) };
var __ZN10emscripten3valC2EPKc = Module["__ZN10emscripten3valC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten3valC2EPKc"].apply(null, arguments) };
var __ZN10emscripten3valC2EPNS_8internal7_EM_VALE = Module["__ZN10emscripten3valC2EPNS_8internal7_EM_VALE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten3valC2EPNS_8internal7_EM_VALE"].apply(null, arguments) };
var __ZN10emscripten3valC2ERKS0_ = Module["__ZN10emscripten3valC2ERKS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten3valC2ERKS0_"].apply(null, arguments) };
var __ZN10emscripten3valC2IRKdEEOT_ = Module["__ZN10emscripten3valC2IRKdEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten3valC2IRKdEEOT_"].apply(null, arguments) };
var __ZN10emscripten3valC2IRKiEEOT_ = Module["__ZN10emscripten3valC2IRKiEEOT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten3valC2IRKiEEOT_"].apply(null, arguments) };
var __ZN10emscripten3valD2Ev = Module["__ZN10emscripten3valD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten3valD2Ev"].apply(null, arguments) };
var __ZN10emscripten8functionINS_3valEJEJEEEvPKcPFT_DpT0_EDpT1_ = Module["__ZN10emscripten8functionINS_3valEJEJEEEvPKcPFT_DpT0_EDpT1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8functionINS_3valEJEJEEEvPKcPFT_DpT0_EDpT1_"].apply(null, arguments) };
var __ZN10emscripten8functionIvJEJEEEvPKcPFT_DpT0_EDpT1_ = Module["__ZN10emscripten8functionIvJEJEEEvPKcPFT_DpT0_EDpT1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8functionIvJEJEEEvPKcPFT_DpT0_EDpT1_"].apply(null, arguments) };
var __ZN10emscripten8functionIvJNS_3valEEJEEEvPKcPFT_DpT0_EDpT1_ = Module["__ZN10emscripten8functionIvJNS_3valEEJEEEvPKcPFT_DpT0_EDpT1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8functionIvJNS_3valEEJEEEvPKcPFT_DpT0_EDpT1_"].apply(null, arguments) };
var __ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_ = Module["__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11BindingTypeINS_3valEE10toWireTypeERKS2_"].apply(null, arguments) };
var __ZN10emscripten8internal11BindingTypeINS_3valEE12fromWireTypeEPNS0_7_EM_VALE = Module["__ZN10emscripten8internal11BindingTypeINS_3valEE12fromWireTypeEPNS0_7_EM_VALE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11BindingTypeINS_3valEE12fromWireTypeEPNS0_7_EM_VALE"].apply(null, arguments) };
var __ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd = Module["__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11BindingTypeIdE10toWireTypeERKd"].apply(null, arguments) };
var __ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd = Module["__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11BindingTypeIdE12fromWireTypeEd"].apply(null, arguments) };
var __ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi = Module["__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11BindingTypeIiE10toWireTypeERKi"].apply(null, arguments) };
var __ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi = Module["__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11BindingTypeIiE12fromWireTypeEi"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv = Module["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIaEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv = Module["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIcEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv = Module["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIdEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv = Module["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIeEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv = Module["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIfEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv = Module["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIhEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv = Module["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIiEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv = Module["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIjEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv = Module["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIlEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv = Module["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewImEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv = Module["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewIsEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv = Module["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDINS_11memory_viewItEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv = Module["__ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDINS_3valEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv = Module["__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv = Module["__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv = Module["__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDIRKdE3getEv = Module["__ZN10emscripten8internal11LightTypeIDIRKdE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDIRKdE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDIRKiE3getEv = Module["__ZN10emscripten8internal11LightTypeIDIRKiE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDIRKiE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDIaE3getEv = Module["__ZN10emscripten8internal11LightTypeIDIaE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDIaE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDIbE3getEv = Module["__ZN10emscripten8internal11LightTypeIDIbE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDIbE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDIcE3getEv = Module["__ZN10emscripten8internal11LightTypeIDIcE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDIcE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDIdE3getEv = Module["__ZN10emscripten8internal11LightTypeIDIdE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDIdE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDIfE3getEv = Module["__ZN10emscripten8internal11LightTypeIDIfE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDIfE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDIhE3getEv = Module["__ZN10emscripten8internal11LightTypeIDIhE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDIhE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDIiE3getEv = Module["__ZN10emscripten8internal11LightTypeIDIiE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDIiE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDIjE3getEv = Module["__ZN10emscripten8internal11LightTypeIDIjE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDIjE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDIlE3getEv = Module["__ZN10emscripten8internal11LightTypeIDIlE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDIlE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDImE3getEv = Module["__ZN10emscripten8internal11LightTypeIDImE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDImE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDIsE3getEv = Module["__ZN10emscripten8internal11LightTypeIDIsE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDIsE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDItE3getEv = Module["__ZN10emscripten8internal11LightTypeIDItE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDItE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal11LightTypeIDIvE3getEv = Module["__ZN10emscripten8internal11LightTypeIDIvE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal11LightTypeIDIvE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal12WireTypePackIJRKdEEC2ES3_ = Module["__ZN10emscripten8internal12WireTypePackIJRKdEEC2ES3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal12WireTypePackIJRKdEEC2ES3_"].apply(null, arguments) };
var __ZN10emscripten8internal12WireTypePackIJRKiEEC2ES3_ = Module["__ZN10emscripten8internal12WireTypePackIJRKiEEC2ES3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal12WireTypePackIJRKiEEC2ES3_"].apply(null, arguments) };
var __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valEEEEE3getEv = Module["__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valEEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJNS_3valEEEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdEEEE3getEv = Module["__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJdEEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiEEEE3getEv = Module["__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJiEEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvEEEE3getEv = Module["__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvEEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS_3valEEEEE3getEv = Module["__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS_3valEEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal14ArgArrayGetterINS0_8TypeListIJvNS_3valEEEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal17DestructorsRunnerC2EPNS0_15_EM_DESTRUCTORSE = Module["__ZN10emscripten8internal17DestructorsRunnerC2EPNS0_15_EM_DESTRUCTORSE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal17DestructorsRunnerC2EPNS0_15_EM_DESTRUCTORSE"].apply(null, arguments) };
var __ZN10emscripten8internal17DestructorsRunnerD2Ev = Module["__ZN10emscripten8internal17DestructorsRunnerD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal17DestructorsRunnerD2Ev"].apply(null, arguments) };
var __ZN10emscripten8internal19fromGenericWireTypeIdEET_d = Module["__ZN10emscripten8internal19fromGenericWireTypeIdEET_d"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal19fromGenericWireTypeIdEET_d"].apply(null, arguments) };
var __ZN10emscripten8internal19fromGenericWireTypeIiEET_d = Module["__ZN10emscripten8internal19fromGenericWireTypeIiEET_d"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal19fromGenericWireTypeIiEET_d"].apply(null, arguments) };
var __ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv = Module["__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal19getGenericSignatureIJiiEEEPKcv"].apply(null, arguments) };
var __ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv = Module["__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal19getGenericSignatureIJviEEEPKcv"].apply(null, arguments) };
var __ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv = Module["__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal19getGenericSignatureIJviiEEEPKcv"].apply(null, arguments) };
var __ZN10emscripten8internal20writeGenericWireTypeERPNS0_15GenericWireTypeEd = Module["__ZN10emscripten8internal20writeGenericWireTypeERPNS0_15GenericWireTypeEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal20writeGenericWireTypeERPNS0_15GenericWireTypeEd"].apply(null, arguments) };
var __ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_ = Module["__ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal20writeGenericWireTypeIiEEvRPNS0_15GenericWireTypeET_"].apply(null, arguments) };
var __ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE = Module["__ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal21writeGenericWireTypesERPNS0_15GenericWireTypeE"].apply(null, arguments) };
var __ZN10emscripten8internal24GenericWireTypeConverterIdE4fromEd = Module["__ZN10emscripten8internal24GenericWireTypeConverterIdE4fromEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal24GenericWireTypeConverterIdE4fromEd"].apply(null, arguments) };
var __ZN10emscripten8internal24GenericWireTypeConverterIiE4fromEd = Module["__ZN10emscripten8internal24GenericWireTypeConverterIiE4fromEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal24GenericWireTypeConverterIiE4fromEd"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv = Module["__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDINS_11memory_viewIaEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv = Module["__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDINS_11memory_viewIcEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv = Module["__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDINS_11memory_viewIdEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv = Module["__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDINS_11memory_viewIeEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv = Module["__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDINS_11memory_viewIfEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv = Module["__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDINS_11memory_viewIhEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv = Module["__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDINS_11memory_viewIiEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv = Module["__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDINS_11memory_viewIjEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv = Module["__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDINS_11memory_viewIlEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv = Module["__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDINS_11memory_viewImEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv = Module["__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDINS_11memory_viewIsEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv = Module["__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDINS_11memory_viewItEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDINS_3valEE3getEv = Module["__ZN10emscripten8internal6TypeIDINS_3valEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDINS_3valEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv = Module["__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv = Module["__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIhNS2_11char_traitsIhEENS2_9allocatorIhEEEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv = Module["__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDINSt3__212basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDIRKdE3getEv = Module["__ZN10emscripten8internal6TypeIDIRKdE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDIRKdE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDIRKiE3getEv = Module["__ZN10emscripten8internal6TypeIDIRKiE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDIRKiE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDIaE3getEv = Module["__ZN10emscripten8internal6TypeIDIaE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDIaE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDIbE3getEv = Module["__ZN10emscripten8internal6TypeIDIbE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDIbE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDIcE3getEv = Module["__ZN10emscripten8internal6TypeIDIcE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDIcE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDIdE3getEv = Module["__ZN10emscripten8internal6TypeIDIdE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDIdE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDIfE3getEv = Module["__ZN10emscripten8internal6TypeIDIfE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDIfE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDIhE3getEv = Module["__ZN10emscripten8internal6TypeIDIhE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDIhE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDIiE3getEv = Module["__ZN10emscripten8internal6TypeIDIiE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDIiE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDIjE3getEv = Module["__ZN10emscripten8internal6TypeIDIjE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDIjE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDIlE3getEv = Module["__ZN10emscripten8internal6TypeIDIlE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDIlE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDImE3getEv = Module["__ZN10emscripten8internal6TypeIDImE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDImE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDIsE3getEv = Module["__ZN10emscripten8internal6TypeIDIsE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDIsE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDItE3getEv = Module["__ZN10emscripten8internal6TypeIDItE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDItE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal6TypeIDIvE3getEv = Module["__ZN10emscripten8internal6TypeIDIvE3getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal6TypeIDIvE3getEv"].apply(null, arguments) };
var __ZN10emscripten8internal7InvokerINS_3valEJEE6invokeEPFS2_vE = Module["__ZN10emscripten8internal7InvokerINS_3valEJEE6invokeEPFS2_vE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal7InvokerINS_3valEJEE6invokeEPFS2_vE"].apply(null, arguments) };
var __ZN10emscripten8internal7InvokerIvJEE6invokeEPFvvE = Module["__ZN10emscripten8internal7InvokerIvJEE6invokeEPFvvE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal7InvokerIvJEE6invokeEPFvvE"].apply(null, arguments) };
var __ZN10emscripten8internal7InvokerIvJNS_3valEEE6invokeEPFvS2_EPNS0_7_EM_VALE = Module["__ZN10emscripten8internal7InvokerIvJNS_3valEEE6invokeEPFvS2_EPNS0_7_EM_VALE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN10emscripten8internal7InvokerIvJNS_3valEEE6invokeEPFvS2_EPNS0_7_EM_VALE"].apply(null, arguments) };
var __ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv = Module["__ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_118getTypedArrayIndexIaEENS_15TypedArrayIndexEv"].apply(null, arguments) };
var __ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv = Module["__ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_118getTypedArrayIndexIcEENS_15TypedArrayIndexEv"].apply(null, arguments) };
var __ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv = Module["__ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_118getTypedArrayIndexIdEENS_15TypedArrayIndexEv"].apply(null, arguments) };
var __ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv = Module["__ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_118getTypedArrayIndexIeEENS_15TypedArrayIndexEv"].apply(null, arguments) };
var __ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv = Module["__ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_118getTypedArrayIndexIfEENS_15TypedArrayIndexEv"].apply(null, arguments) };
var __ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv = Module["__ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_118getTypedArrayIndexIhEENS_15TypedArrayIndexEv"].apply(null, arguments) };
var __ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv = Module["__ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_118getTypedArrayIndexIiEENS_15TypedArrayIndexEv"].apply(null, arguments) };
var __ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv = Module["__ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_118getTypedArrayIndexIjEENS_15TypedArrayIndexEv"].apply(null, arguments) };
var __ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv = Module["__ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_118getTypedArrayIndexIlEENS_15TypedArrayIndexEv"].apply(null, arguments) };
var __ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv = Module["__ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_118getTypedArrayIndexImEENS_15TypedArrayIndexEv"].apply(null, arguments) };
var __ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv = Module["__ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_118getTypedArrayIndexIsEENS_15TypedArrayIndexEv"].apply(null, arguments) };
var __ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv = Module["__ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_118getTypedArrayIndexItEENS_15TypedArrayIndexEv"].apply(null, arguments) };
var __ZN12_GLOBAL__N_1L14register_floatIdEEvPKc = Module["__ZN12_GLOBAL__N_1L14register_floatIdEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_1L14register_floatIdEEvPKc"].apply(null, arguments) };
var __ZN12_GLOBAL__N_1L14register_floatIfEEvPKc = Module["__ZN12_GLOBAL__N_1L14register_floatIfEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_1L14register_floatIfEEvPKc"].apply(null, arguments) };
var __ZN12_GLOBAL__N_1L16register_integerIaEEvPKc = Module["__ZN12_GLOBAL__N_1L16register_integerIaEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_1L16register_integerIaEEvPKc"].apply(null, arguments) };
var __ZN12_GLOBAL__N_1L16register_integerIcEEvPKc = Module["__ZN12_GLOBAL__N_1L16register_integerIcEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_1L16register_integerIcEEvPKc"].apply(null, arguments) };
var __ZN12_GLOBAL__N_1L16register_integerIhEEvPKc = Module["__ZN12_GLOBAL__N_1L16register_integerIhEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_1L16register_integerIhEEvPKc"].apply(null, arguments) };
var __ZN12_GLOBAL__N_1L16register_integerIiEEvPKc = Module["__ZN12_GLOBAL__N_1L16register_integerIiEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_1L16register_integerIiEEvPKc"].apply(null, arguments) };
var __ZN12_GLOBAL__N_1L16register_integerIjEEvPKc = Module["__ZN12_GLOBAL__N_1L16register_integerIjEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_1L16register_integerIjEEvPKc"].apply(null, arguments) };
var __ZN12_GLOBAL__N_1L16register_integerIlEEvPKc = Module["__ZN12_GLOBAL__N_1L16register_integerIlEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_1L16register_integerIlEEvPKc"].apply(null, arguments) };
var __ZN12_GLOBAL__N_1L16register_integerImEEvPKc = Module["__ZN12_GLOBAL__N_1L16register_integerImEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_1L16register_integerImEEvPKc"].apply(null, arguments) };
var __ZN12_GLOBAL__N_1L16register_integerIsEEvPKc = Module["__ZN12_GLOBAL__N_1L16register_integerIsEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_1L16register_integerIsEEvPKc"].apply(null, arguments) };
var __ZN12_GLOBAL__N_1L16register_integerItEEvPKc = Module["__ZN12_GLOBAL__N_1L16register_integerItEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_1L16register_integerItEEvPKc"].apply(null, arguments) };
var __ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc = Module["__ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_1L20register_memory_viewIaEEvPKc"].apply(null, arguments) };
var __ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc = Module["__ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_1L20register_memory_viewIcEEvPKc"].apply(null, arguments) };
var __ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc = Module["__ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_1L20register_memory_viewIdEEvPKc"].apply(null, arguments) };
var __ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc = Module["__ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_1L20register_memory_viewIeEEvPKc"].apply(null, arguments) };
var __ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc = Module["__ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_1L20register_memory_viewIfEEvPKc"].apply(null, arguments) };
var __ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc = Module["__ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_1L20register_memory_viewIhEEvPKc"].apply(null, arguments) };
var __ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc = Module["__ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_1L20register_memory_viewIiEEvPKc"].apply(null, arguments) };
var __ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc = Module["__ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_1L20register_memory_viewIjEEvPKc"].apply(null, arguments) };
var __ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc = Module["__ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_1L20register_memory_viewIlEEvPKc"].apply(null, arguments) };
var __ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc = Module["__ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_1L20register_memory_viewImEEvPKc"].apply(null, arguments) };
var __ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc = Module["__ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_1L20register_memory_viewIsEEvPKc"].apply(null, arguments) };
var __ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc = Module["__ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN12_GLOBAL__N_1L20register_memory_viewItEEvPKc"].apply(null, arguments) };
var __ZN25detection_objectDetector14initEv = Module["__ZN25detection_objectDetector14initEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN25detection_objectDetector14initEv"].apply(null, arguments) };
var __ZN25detection_objectDetector17executeEv = Module["__ZN25detection_objectDetector17executeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN25detection_objectDetector17executeEv"].apply(null, arguments) };
var __ZN25detection_objectDetector1C2Ev = Module["__ZN25detection_objectDetector1C2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN25detection_objectDetector1C2Ev"].apply(null, arguments) };
var __ZN38EmscriptenBindingInitializer_my_moduleC2Ev = Module["__ZN38EmscriptenBindingInitializer_my_moduleC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN38EmscriptenBindingInitializer_my_moduleC2Ev"].apply(null, arguments) };
var __ZN43detection_objectDetector1_spectralClusterer4initEv = Module["__ZN43detection_objectDetector1_spectralClusterer4initEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN43detection_objectDetector1_spectralClusterer4initEv"].apply(null, arguments) };
var __ZN43detection_objectDetector1_spectralClusterer7executeEv = Module["__ZN43detection_objectDetector1_spectralClusterer7executeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN43detection_objectDetector1_spectralClusterer7executeEv"].apply(null, arguments) };
var __ZN43detection_objectDetector1_spectralClustererC2Ev = Module["__ZN43detection_objectDetector1_spectralClustererC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN43detection_objectDetector1_spectralClustererC2Ev"].apply(null, arguments) };
var __ZN4arma10arma_checkIA21_cEEvbRKT_ = Module["__ZN4arma10arma_checkIA21_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10arma_checkIA21_cEEvbRKT_"].apply(null, arguments) };
var __ZN4arma10arma_checkIA27_cEEvbRKT_ = Module["__ZN4arma10arma_checkIA27_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10arma_checkIA27_cEEvbRKT_"].apply(null, arguments) };
var __ZN4arma10arma_checkIA28_cEEvbRKT_ = Module["__ZN4arma10arma_checkIA28_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10arma_checkIA28_cEEvbRKT_"].apply(null, arguments) };
var __ZN4arma10arma_checkIA31_cEEvbRKT_ = Module["__ZN4arma10arma_checkIA31_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10arma_checkIA31_cEEvbRKT_"].apply(null, arguments) };
var __ZN4arma10arma_checkIA32_cEEvbRKT_ = Module["__ZN4arma10arma_checkIA32_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10arma_checkIA32_cEEvbRKT_"].apply(null, arguments) };
var __ZN4arma10arma_checkIA33_cEEvbRKT_ = Module["__ZN4arma10arma_checkIA33_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10arma_checkIA33_cEEvbRKT_"].apply(null, arguments) };
var __ZN4arma10arma_checkIA36_cEEvbRKT_ = Module["__ZN4arma10arma_checkIA36_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10arma_checkIA36_cEEvbRKT_"].apply(null, arguments) };
var __ZN4arma10arma_checkIA37_cEEvbRKT_ = Module["__ZN4arma10arma_checkIA37_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10arma_checkIA37_cEEvbRKT_"].apply(null, arguments) };
var __ZN4arma10arma_checkIA39_cEEvbRKT_ = Module["__ZN4arma10arma_checkIA39_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10arma_checkIA39_cEEvbRKT_"].apply(null, arguments) };
var __ZN4arma10arma_checkIA41_cEEvbRKT_ = Module["__ZN4arma10arma_checkIA41_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10arma_checkIA41_cEEvbRKT_"].apply(null, arguments) };
var __ZN4arma10arma_checkIA42_cEEvbRKT_ = Module["__ZN4arma10arma_checkIA42_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10arma_checkIA42_cEEvbRKT_"].apply(null, arguments) };
var __ZN4arma10arma_checkIA45_cEEvbRKT_ = Module["__ZN4arma10arma_checkIA45_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10arma_checkIA45_cEEvbRKT_"].apply(null, arguments) };
var __ZN4arma10arma_checkIA53_cEEvbRKT_ = Module["__ZN4arma10arma_checkIA53_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10arma_checkIA53_cEEvbRKT_"].apply(null, arguments) };
var __ZN4arma10arma_checkIA55_cEEvbRKT_ = Module["__ZN4arma10arma_checkIA55_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10arma_checkIA55_cEEvbRKT_"].apply(null, arguments) };
var __ZN4arma10arma_checkIA64_cEEvbRKT_ = Module["__ZN4arma10arma_checkIA64_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10arma_checkIA64_cEEvbRKT_"].apply(null, arguments) };
var __ZN4arma10arma_checkIA66_cEEvbRKT_ = Module["__ZN4arma10arma_checkIA66_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10arma_checkIA66_cEEvbRKT_"].apply(null, arguments) };
var __ZN4arma10arma_checkIA74_cEEvbRKT_ = Module["__ZN4arma10arma_checkIA74_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10arma_checkIA74_cEEvbRKT_"].apply(null, arguments) };
var __ZN4arma10arma_checkIPKcEEvbRKT_ = Module["__ZN4arma10arma_checkIPKcEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10arma_checkIPKcEEvbRKT_"].apply(null, arguments) };
var __ZN4arma10arma_checkIPcEEvbRKT_ = Module["__ZN4arma10arma_checkIPcEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10arma_checkIPcEEvbRKT_"].apply(null, arguments) };
var __ZN4arma10glue_times5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS6_NS_9op_htransEEEEEvRNS2_INT_9elem_typeEEERKNS_4GlueISA_T0_S0_EE = Module["__ZN4arma10glue_times5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS6_NS_9op_htransEEEEEvRNS2_INT_9elem_typeEEERKNS_4GlueISA_T0_S0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10glue_times5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS6_NS_9op_htransEEEEEvRNS2_INT_9elem_typeEEERKNS_4GlueISA_T0_S0_EE"].apply(null, arguments) };
var __ZN4arma10glue_times5applyINS_3MatINSt3__27complexIdEEEES6_EEvRNS2_INT_9elem_typeEEERKNS_4GlueIS7_T0_S0_EE = Module["__ZN4arma10glue_times5applyINS_3MatINSt3__27complexIdEEEES6_EEvRNS2_INT_9elem_typeEEERKNS_4GlueIS7_T0_S0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10glue_times5applyINS_3MatINSt3__27complexIdEEEES6_EEvRNS2_INT_9elem_typeEEERKNS_4GlueIS7_T0_S0_EE"].apply(null, arguments) };
var __ZN4arma10glue_times5applyINS_4GlueINS_3MatIdEES4_S0_EES4_EEvRNS3_INT_9elem_typeEEERKNS2_IS6_T0_S0_EE = Module["__ZN4arma10glue_times5applyINS_4GlueINS_3MatIdEES4_S0_EES4_EEvRNS3_INT_9elem_typeEEERKNS2_IS6_T0_S0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10glue_times5applyINS_4GlueINS_3MatIdEES4_S0_EES4_EEvRNS3_INT_9elem_typeEEERKNS2_IS6_T0_S0_EE"].apply(null, arguments) };
var __ZN4arma10glue_times5applyINSt3__27complexIdEELb0ELb0ELb0ENS_3MatIS4_EES6_EEvRNS5_IT_EERKT3_RKT4_S7_ = Module["__ZN4arma10glue_times5applyINSt3__27complexIdEELb0ELb0ELb0ENS_3MatIS4_EES6_EEvRNS5_IT_EERKT3_RKT4_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10glue_times5applyINSt3__27complexIdEELb0ELb0ELb0ENS_3MatIS4_EES6_EEvRNS5_IT_EERKT3_RKT4_S7_"].apply(null, arguments) };
var __ZN4arma10glue_times5applyINSt3__27complexIdEELb0ELb1ELb0ENS_3MatIS4_EES6_EEvRNS5_IT_EERKT3_RKT4_S7_ = Module["__ZN4arma10glue_times5applyINSt3__27complexIdEELb0ELb1ELb0ENS_3MatIS4_EES6_EEvRNS5_IT_EERKT3_RKT4_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10glue_times5applyINSt3__27complexIdEELb0ELb1ELb0ENS_3MatIS4_EES6_EEvRNS5_IT_EERKT3_RKT4_S7_"].apply(null, arguments) };
var __ZN4arma10glue_times5applyIdLb0ELb0ELb0ELb0ENS_3MatIdEES3_S3_EEvRNS2_IT_EERKT4_RKT5_RKT6_S4_ = Module["__ZN4arma10glue_times5applyIdLb0ELb0ELb0ELb0ENS_3MatIdEES3_S3_EEvRNS2_IT_EERKT4_RKT5_RKT6_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10glue_times5applyIdLb0ELb0ELb0ELb0ENS_3MatIdEES3_S3_EEvRNS2_IT_EERKT4_RKT5_RKT6_S4_"].apply(null, arguments) };
var __ZN4arma10glue_times5applyIdLb0ELb0ELb0ENS_3MatIdEES3_EEvRNS2_IT_EERKT3_RKT4_S4_ = Module["__ZN4arma10glue_times5applyIdLb0ELb0ELb0ENS_3MatIdEES3_EEvRNS2_IT_EERKT3_RKT4_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10glue_times5applyIdLb0ELb0ELb0ENS_3MatIdEES3_EEvRNS2_IT_EERKT3_RKT4_S4_"].apply(null, arguments) };
var __ZN4arma10op_sqrtmat12apply_directINS_3MatIdEEEEbRNS2_INSt3__27complexINT_9elem_typeEEEEERKNS_4BaseIS7_S6_EE = Module["__ZN4arma10op_sqrtmat12apply_directINS_3MatIdEEEEbRNS2_INSt3__27complexINT_9elem_typeEEEEERKNS_4BaseIS7_S6_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10op_sqrtmat12apply_directINS_3MatIdEEEEbRNS2_INSt3__27complexINT_9elem_typeEEEEERKNS_4BaseIS7_S6_EE"].apply(null, arguments) };
var __ZN4arma10op_sqrtmat5applyINS_3MatIdEEEEvRNS2_INSt3__27complexINT_9elem_typeEEEEERKNS_4mtOpIS8_S6_S0_EE = Module["__ZN4arma10op_sqrtmat5applyINS_3MatIdEEEEvRNS2_INSt3__27complexINT_9elem_typeEEEEERKNS_4mtOpIS8_S6_S0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10op_sqrtmat5applyINS_3MatIdEEEEvRNS2_INSt3__27complexINT_9elem_typeEEEEERKNS_4mtOpIS8_S6_S0_EE"].apply(null, arguments) };
var __ZN4arma10solve_opts14opts_no_approxC2Ev = Module["__ZN4arma10solve_opts14opts_no_approxC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10solve_opts14opts_no_approxC2Ev"].apply(null, arguments) };
var __ZN4arma10solve_opts16opts_equilibrateC2Ev = Module["__ZN4arma10solve_opts16opts_equilibrateC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10solve_opts16opts_equilibrateC2Ev"].apply(null, arguments) };
var __ZN4arma10solve_opts4optsC2Ej = Module["__ZN4arma10solve_opts4optsC2Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10solve_opts4optsC2Ej"].apply(null, arguments) };
var __ZN4arma10solve_opts9opts_fastC2Ev = Module["__ZN4arma10solve_opts9opts_fastC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10solve_opts9opts_fastC2Ev"].apply(null, arguments) };
var __ZN4arma10solve_opts9opts_noneC2Ev = Module["__ZN4arma10solve_opts9opts_noneC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10solve_opts9opts_noneC2Ev"].apply(null, arguments) };
var __ZN4arma10solve_opts9opts_trilC2Ev = Module["__ZN4arma10solve_opts9opts_trilC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10solve_opts9opts_trilC2Ev"].apply(null, arguments) };
var __ZN4arma10solve_opts9opts_triuC2Ev = Module["__ZN4arma10solve_opts9opts_triuC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma10solve_opts9opts_triuC2Ev"].apply(null, arguments) };
var __ZN4arma11distr_paramC2Eii = Module["__ZN4arma11distr_paramC2Eii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma11distr_paramC2Eii"].apply(null, arguments) };
var __ZN4arma11herk_helper40inplace_conj_copy_upper_tri_to_lower_triINSt3__27complexIdEEEEvRNS_3MatIT_EE = Module["__ZN4arma11herk_helper40inplace_conj_copy_upper_tri_to_lower_triINSt3__27complexIdEEEEvRNS_3MatIT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma11herk_helper40inplace_conj_copy_upper_tri_to_lower_triINSt3__27complexIdEEEEvRNS_3MatIT_EE"].apply(null, arguments) };
var __ZN4arma11subview_colIdEC2ERKNS_3MatIdEEj = Module["__ZN4arma11subview_colIdEC2ERKNS_3MatIdEEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma11subview_colIdEC2ERKNS_3MatIdEEj"].apply(null, arguments) };
var __ZN4arma11subview_colIdED2Ev = Module["__ZN4arma11subview_colIdED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma11subview_colIdED2Ev"].apply(null, arguments) };
var __ZN4arma11subview_colIdEaSERKS1_ = Module["__ZN4arma11subview_colIdEaSERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma11subview_colIdEaSERKS1_"].apply(null, arguments) };
var __ZN4arma11subview_colIdEaSINS_3MatIdEEEEvRKNS_4BaseIdT_EE = Module["__ZN4arma11subview_colIdEaSINS_3MatIdEEEEvRKNS_4BaseIdT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma11subview_colIdEaSINS_3MatIdEEEEvRKNS_4BaseIdT_EE"].apply(null, arguments) };
var __ZN4arma11subview_colIjEC2ERKNS_3MatIjEEjjj = Module["__ZN4arma11subview_colIjEC2ERKNS_3MatIjEEjjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma11subview_colIjEC2ERKNS_3MatIjEEjjj"].apply(null, arguments) };
var __ZN4arma11subview_colIjED2Ev = Module["__ZN4arma11subview_colIjED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma11subview_colIjED2Ev"].apply(null, arguments) };
var __ZN4arma11subview_rowIdEC2ERKNS_3MatIdEEj = Module["__ZN4arma11subview_rowIdEC2ERKNS_3MatIdEEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma11subview_rowIdEC2ERKNS_3MatIdEEj"].apply(null, arguments) };
var __ZN4arma11subview_rowIdED2Ev = Module["__ZN4arma11subview_rowIdED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma11subview_rowIdED2Ev"].apply(null, arguments) };
var __ZN4arma11subview_rowIdEaSINS_3eOpIS1_NS_19eop_scalar_div_postEEEEEvRKNS_4BaseIdT_EE = Module["__ZN4arma11subview_rowIdEaSINS_3eOpIS1_NS_19eop_scalar_div_postEEEEEvRKNS_4BaseIdT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma11subview_rowIdEaSINS_3eOpIS1_NS_19eop_scalar_div_postEEEEEvRKNS_4BaseIdT_EE"].apply(null, arguments) };
var __ZN4arma12arma_counterIdE5resetEv = Module["__ZN4arma12arma_counterIdE5resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma12arma_counterIdE5resetEv"].apply(null, arguments) };
var __ZN4arma12arma_counterIdEC2Ev = Module["__ZN4arma12arma_counterIdEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma12arma_counterIdEC2Ev"].apply(null, arguments) };
var __ZN4arma12arma_counterIdED2Ev = Module["__ZN4arma12arma_counterIdED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma12arma_counterIdED2Ev"].apply(null, arguments) };
var __ZN4arma12arma_counterIdEppEi = Module["__ZN4arma12arma_counterIdEppEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma12arma_counterIdEppEi"].apply(null, arguments) };
var __ZN4arma12arma_counterIdEppEv = Module["__ZN4arma12arma_counterIdEppEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma12arma_counterIdEppEv"].apply(null, arguments) };
var __ZN4arma12arma_ostream13modify_streamIdEEiRNSt3__213basic_ostreamIcNS2_11char_traitsIcEEEEPKT_j = Module["__ZN4arma12arma_ostream13modify_streamIdEEiRNSt3__213basic_ostreamIcNS2_11char_traitsIcEEEEPKT_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma12arma_ostream13modify_streamIdEEiRNSt3__213basic_ostreamIcNS2_11char_traitsIcEEEEPKT_j"].apply(null, arguments) };
var __ZN4arma12arma_ostream15print_elem_zeroIdEEvRNSt3__213basic_ostreamIcNS2_11char_traitsIcEEEEb = Module["__ZN4arma12arma_ostream15print_elem_zeroIdEEvRNSt3__213basic_ostreamIcNS2_11char_traitsIcEEEEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma12arma_ostream15print_elem_zeroIdEEvRNSt3__213basic_ostreamIcNS2_11char_traitsIcEEEEb"].apply(null, arguments) };
var __ZN4arma12arma_ostream5printIdEEvRNSt3__213basic_ostreamIcNS2_11char_traitsIcEEEERKNS_3MatIT_EEb = Module["__ZN4arma12arma_ostream5printIdEEvRNSt3__213basic_ostreamIcNS2_11char_traitsIcEEEERKNS_3MatIT_EEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma12arma_ostream5printIdEEvRNSt3__213basic_ostreamIcNS2_11char_traitsIcEEEERKNS_3MatIT_EEb"].apply(null, arguments) };
var __ZN4arma12quasi_unwrapINS_3RowIdEEEC2ERKS2_ = Module["__ZN4arma12quasi_unwrapINS_3RowIdEEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma12quasi_unwrapINS_3RowIdEEEC2ERKS2_"].apply(null, arguments) };
var __ZN4arma12quasi_unwrapINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEEC2ERKS7_ = Module["__ZN4arma12quasi_unwrapINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEEC2ERKS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma12quasi_unwrapINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEEC2ERKS7_"].apply(null, arguments) };
var __ZN4arma12quasi_unwrapINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEED2Ev = Module["__ZN4arma12quasi_unwrapINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma12quasi_unwrapINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEED2Ev"].apply(null, arguments) };
var __ZN4arma12running_statIdE5resetEv = Module["__ZN4arma12running_statIdE5resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma12running_statIdE5resetEv"].apply(null, arguments) };
var __ZN4arma12running_statIdEC2Ev = Module["__ZN4arma12running_statIdEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma12running_statIdEC2Ev"].apply(null, arguments) };
var __ZN4arma12running_statIdED2Ev = Module["__ZN4arma12running_statIdED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma12running_statIdED2Ev"].apply(null, arguments) };
var __ZN4arma12running_statIdEclEd = Module["__ZN4arma12running_statIdEclEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma12running_statIdEclEd"].apply(null, arguments) };
var __ZN4arma12unwrap_checkINS_3MatIdEEEC2ERKS2_b = Module["__ZN4arma12unwrap_checkINS_3MatIdEEEC2ERKS2_b"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma12unwrap_checkINS_3MatIdEEEC2ERKS2_b"].apply(null, arguments) };
var __ZN4arma12unwrap_checkINS_3MatIdEEED2Ev = Module["__ZN4arma12unwrap_checkINS_3MatIdEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma12unwrap_checkINS_3MatIdEEED2Ev"].apply(null, arguments) };
var __ZN4arma12unwrap_checkINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEC2ERKS5_b = Module["__ZN4arma12unwrap_checkINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEC2ERKS5_b"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma12unwrap_checkINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEC2ERKS5_b"].apply(null, arguments) };
var __ZN4arma12unwrap_checkINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEED2Ev = Module["__ZN4arma12unwrap_checkINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma12unwrap_checkINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEED2Ev"].apply(null, arguments) };
var __ZN4arma13gmm_dist_euclC2Ev = Module["__ZN4arma13gmm_dist_euclC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma13gmm_dist_euclC2Ev"].apply(null, arguments) };
var __ZN4arma13gmm_dist_mahaC2Ev = Module["__ZN4arma13gmm_dist_mahaC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma13gmm_dist_mahaC2Ev"].apply(null, arguments) };
var __ZN4arma13gmm_dist_modeC2Ej = Module["__ZN4arma13gmm_dist_modeC2Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma13gmm_dist_modeC2Ej"].apply(null, arguments) };
var __ZN4arma13gmm_dist_probC2Ev = Module["__ZN4arma13gmm_dist_probC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma13gmm_dist_probC2Ev"].apply(null, arguments) };
var __ZN4arma13gmm_seed_modeC2Ej = Module["__ZN4arma13gmm_seed_modeC2Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma13gmm_seed_modeC2Ej"].apply(null, arguments) };
var __ZN4arma13op_sort_index13apply_noaliasINS_3GenINS_3ColIdEENS_9gen_randuEEEEEbRNS_3MatIjEERKNS_5ProxyIT_EEj = Module["__ZN4arma13op_sort_index13apply_noaliasINS_3GenINS_3ColIdEENS_9gen_randuEEEEEbRNS_3MatIjEERKNS_5ProxyIT_EEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma13op_sort_index13apply_noaliasINS_3GenINS_3ColIdEENS_9gen_randuEEEEEbRNS_3MatIjEERKNS_5ProxyIT_EEj"].apply(null, arguments) };
var __ZN4arma13op_sort_index5applyINS_3GenINS_3ColIdEENS_9gen_randuEEEEEvRNS_3MatIjEERKNS_4mtOpIjT_S0_EE = Module["__ZN4arma13op_sort_index5applyINS_3GenINS_3ColIdEENS_9gen_randuEEEEEvRNS_3MatIjEERKNS_4mtOpIjT_S0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma13op_sort_index5applyINS_3GenINS_3ColIdEENS_9gen_randuEEEEEvRNS_3MatIjEERKNS_4mtOpIjT_S0_EE"].apply(null, arguments) };
var __ZN4arma13op_sqrtmat_cx6helperIdEEbRNS_3MatINSt3__27complexIT_EEEE = Module["__ZN4arma13op_sqrtmat_cx6helperIdEEbRNS_3MatINSt3__27complexIT_EEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma13op_sqrtmat_cx6helperIdEEbRNS_3MatINSt3__27complexIT_EEEE"].apply(null, arguments) };
var __ZN4arma13strip_diagmatINS_3MatIdEEEC2ERKS2_ = Module["__ZN4arma13strip_diagmatINS_3MatIdEEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma13strip_diagmatINS_3MatIdEEEC2ERKS2_"].apply(null, arguments) };
var __ZN4arma13subview_elem2IdNS_3MatIjEES2_E7extractERNS1_IdEERKS3_ = Module["__ZN4arma13subview_elem2IdNS_3MatIjEES2_E7extractERNS1_IdEERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma13subview_elem2IdNS_3MatIjEES2_E7extractERNS1_IdEERKS3_"].apply(null, arguments) };
var __ZN4arma13subview_elem2IdNS_3MatIjEES2_ED2Ev = Module["__ZN4arma13subview_elem2IdNS_3MatIjEES2_ED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma13subview_elem2IdNS_3MatIjEES2_ED2Ev"].apply(null, arguments) };
var __ZN4arma14arma_rng_cxx9810randi_fillIjEEvPT_jii = Module["__ZN4arma14arma_rng_cxx9810randi_fillIjEEvPT_jii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma14arma_rng_cxx9810randi_fillIjEEvPT_jii"].apply(null, arguments) };
var __ZN4arma14arma_rng_cxx9813randi_max_valEv = Module["__ZN4arma14arma_rng_cxx9813randi_max_valEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma14arma_rng_cxx9813randi_max_valEv"].apply(null, arguments) };
var __ZN4arma14op_find_simple5applyINS_4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEEEEvRNS_3MatIjEERKNS2_IjT_S0_EE = Module["__ZN4arma14op_find_simple5applyINS_4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEEEEvRNS_3MatIjEERKNS2_IjT_S0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma14op_find_simple5applyINS_4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEEEEvRNS_3MatIjEERKNS2_IjT_S0_EE"].apply(null, arguments) };
var __ZN4arma14op_find_simple5applyINS_4mtOpIjNS_3RowIjEENS_9op_rel_eqEEEEEvRNS_3MatIjEERKNS2_IjT_S0_EE = Module["__ZN4arma14op_find_simple5applyINS_4mtOpIjNS_3RowIjEENS_9op_rel_eqEEEEEvRNS_3MatIjEERKNS2_IjT_S0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma14op_find_simple5applyINS_4mtOpIjNS_3RowIjEENS_9op_rel_eqEEEEEvRNS_3MatIjEERKNS2_IjT_S0_EE"].apply(null, arguments) };
var __ZN4arma14partial_unwrapINS_2OpINS_3MatINSt3__27complexIdEEEENS_9op_htransEEEEC2ERKS8_ = Module["__ZN4arma14partial_unwrapINS_2OpINS_3MatINSt3__27complexIdEEEENS_9op_htransEEEEC2ERKS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma14partial_unwrapINS_2OpINS_3MatINSt3__27complexIdEEEENS_9op_htransEEEEC2ERKS8_"].apply(null, arguments) };
var __ZN4arma14partial_unwrapINS_3MatINSt3__27complexIdEEEEEC2ERKS5_ = Module["__ZN4arma14partial_unwrapINS_3MatINSt3__27complexIdEEEEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma14partial_unwrapINS_3MatINSt3__27complexIdEEEEEC2ERKS5_"].apply(null, arguments) };
var __ZN4arma14partial_unwrapINS_3MatIdEEEC2ERKS2_ = Module["__ZN4arma14partial_unwrapINS_3MatIdEEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma14partial_unwrapINS_3MatIdEEEC2ERKS2_"].apply(null, arguments) };
var __ZN4arma14unwrap_defaultINS_2OpINS_3MatIdEENS_9op_htransEEEEC2ERKS5_ = Module["__ZN4arma14unwrap_defaultINS_2OpINS_3MatIdEENS_9op_htransEEEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma14unwrap_defaultINS_2OpINS_3MatIdEENS_9op_htransEEEEC2ERKS5_"].apply(null, arguments) };
var __ZN4arma14unwrap_defaultINS_2OpINS_3MatIdEENS_9op_htransEEEED2Ev = Module["__ZN4arma14unwrap_defaultINS_2OpINS_3MatIdEENS_9op_htransEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma14unwrap_defaultINS_2OpINS_3MatIdEENS_9op_htransEEEED2Ev"].apply(null, arguments) };
var __ZN4arma15get_cerr_streamEv = Module["__ZN4arma15get_cerr_streamEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma15get_cerr_streamEv"].apply(null, arguments) };
var __ZN4arma15get_cout_streamEv = Module["__ZN4arma15get_cout_streamEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma15get_cout_streamEv"].apply(null, arguments) };
var __ZN4arma15op_sort_default5applyINS_4mtOpIjNS2_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEEEvRNS_3MatINT_9elem_typeEEERKNS_2OpISA_S0_EE = Module["__ZN4arma15op_sort_default5applyINS_4mtOpIjNS2_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEEEvRNS_3MatINT_9elem_typeEEERKNS_2OpISA_S0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma15op_sort_default5applyINS_4mtOpIjNS2_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEEEvRNS_3MatINT_9elem_typeEEERKNS_2OpISA_S0_EE"].apply(null, arguments) };
var __ZN4arma16arma_cerr_streamIcEERNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEEPS5_ = Module["__ZN4arma16arma_cerr_streamIcEERNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEEPS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma16arma_cerr_streamIcEERNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEEPS5_"].apply(null, arguments) };
var __ZN4arma16arma_cout_streamIcEERNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEEPS5_ = Module["__ZN4arma16arma_cout_streamIcEERNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEEPS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma16arma_cout_streamIcEERNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEEPS5_"].apply(null, arguments) };
var __ZN4arma16gemm_emul_tinysqILb0ELb0ELb0EE5applyINSt3__27complexIdEENS_3MatIS5_EES7_EEvRNS6_IT_EERKT0_RKT1_S8_S8_ = Module["__ZN4arma16gemm_emul_tinysqILb0ELb0ELb0EE5applyINSt3__27complexIdEENS_3MatIS5_EES7_EEvRNS6_IT_EERKT0_RKT1_S8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma16gemm_emul_tinysqILb0ELb0ELb0EE5applyINSt3__27complexIdEENS_3MatIS5_EES7_EEvRNS6_IT_EERKT0_RKT1_S8_S8_"].apply(null, arguments) };
var __ZN4arma16gemm_emul_tinysqILb0ELb0ELb0EE5applyIdNS_3MatIdEES4_EEvRNS3_IT_EERKT0_RKT1_S5_S5_ = Module["__ZN4arma16gemm_emul_tinysqILb0ELb0ELb0EE5applyIdNS_3MatIdEES4_EEvRNS3_IT_EERKT0_RKT1_S5_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma16gemm_emul_tinysqILb0ELb0ELb0EE5applyIdNS_3MatIdEES4_EEvRNS3_IT_EERKT0_RKT1_S5_S5_"].apply(null, arguments) };
var __ZN4arma16gemv_emul_tinysqILb0ELb0ELb0EE5applyINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_ = Module["__ZN4arma16gemv_emul_tinysqILb0ELb0ELb0EE5applyINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma16gemv_emul_tinysqILb0ELb0ELb0EE5applyINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_"].apply(null, arguments) };
var __ZN4arma16gemv_emul_tinysqILb0ELb0ELb0EE5applyIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_ = Module["__ZN4arma16gemv_emul_tinysqILb0ELb0ELb0EE5applyIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma16gemv_emul_tinysqILb0ELb0ELb0EE5applyIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_"].apply(null, arguments) };
var __ZN4arma16gemv_emul_tinysqILb1ELb0ELb0EE5applyINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_ = Module["__ZN4arma16gemv_emul_tinysqILb1ELb0ELb0EE5applyINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma16gemv_emul_tinysqILb1ELb0ELb0EE5applyINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_"].apply(null, arguments) };
var __ZN4arma16gemv_emul_tinysqILb1ELb0ELb0EE5applyIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_ = Module["__ZN4arma16gemv_emul_tinysqILb1ELb0ELb0EE5applyIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma16gemv_emul_tinysqILb1ELb0ELb0EE5applyIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_"].apply(null, arguments) };
var __ZN4arma16running_stat_aux12update_statsIdEEvRNS_12running_statIT_EES3_PKNS_11arma_not_cxIS3_E6resultE = Module["__ZN4arma16running_stat_aux12update_statsIdEEvRNS_12running_statIT_EES3_PKNS_11arma_not_cxIS3_E6resultE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma16running_stat_aux12update_statsIdEEvRNS_12running_statIT_EES3_PKNS_11arma_not_cxIS3_E6resultE"].apply(null, arguments) };
var __ZN4arma17accu_proxy_linearINS_11subview_rowIdEEEENT_9elem_typeERKNS_5ProxyIS3_EE = Module["__ZN4arma17accu_proxy_linearINS_11subview_rowIdEEEENT_9elem_typeERKNS_5ProxyIS3_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma17accu_proxy_linearINS_11subview_rowIdEEEENT_9elem_typeERKNS_5ProxyIS3_EE"].apply(null, arguments) };
var __ZN4arma18arma_ostream_stateC2ERKNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEE = Module["__ZN4arma18arma_ostream_stateC2ERKNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma18arma_ostream_stateC2ERKNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEE"].apply(null, arguments) };
var __ZN4arma18unwrap_check_mixedINS_3MatIjEEEC2IdEERKS2_RKNS1_IT_EE = Module["__ZN4arma18unwrap_check_mixedINS_3MatIjEEEC2IdEERKS2_RKNS1_IT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma18unwrap_check_mixedINS_3MatIjEEEC2IdEERKS2_RKNS1_IT_EE"].apply(null, arguments) };
var __ZN4arma18unwrap_check_mixedINS_3MatIjEEED2Ev = Module["__ZN4arma18unwrap_check_mixedINS_3MatIjEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma18unwrap_check_mixedINS_3MatIjEEED2Ev"].apply(null, arguments) };
var __ZN4arma19glue_times_redirectILj2EE5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS7_NS_9op_htransEEEEEvRNS3_INT_9elem_typeEEERKNS_4GlueISB_T0_NS_10glue_timesEEE = Module["__ZN4arma19glue_times_redirectILj2EE5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS7_NS_9op_htransEEEEEvRNS3_INT_9elem_typeEEERKNS_4GlueISB_T0_NS_10glue_timesEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma19glue_times_redirectILj2EE5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS7_NS_9op_htransEEEEEvRNS3_INT_9elem_typeEEERKNS_4GlueISB_T0_NS_10glue_timesEEE"].apply(null, arguments) };
var __ZN4arma19glue_times_redirectILj2EE5applyINS_3MatINSt3__27complexIdEEEES7_EEvRNS3_INT_9elem_typeEEERKNS_4GlueIS8_T0_NS_10glue_timesEEE = Module["__ZN4arma19glue_times_redirectILj2EE5applyINS_3MatINSt3__27complexIdEEEES7_EEvRNS3_INT_9elem_typeEEERKNS_4GlueIS8_T0_NS_10glue_timesEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma19glue_times_redirectILj2EE5applyINS_3MatINSt3__27complexIdEEEES7_EEvRNS3_INT_9elem_typeEEERKNS_4GlueIS8_T0_NS_10glue_timesEEE"].apply(null, arguments) };
var __ZN4arma19glue_times_redirectILj3EE5applyINS_3MatIdEES4_S4_EEvRNS3_INT_9elem_typeEEERKNS_4GlueINS9_IS5_T0_NS_10glue_timesEEET1_SB_EE = Module["__ZN4arma19glue_times_redirectILj3EE5applyINS_3MatIdEES4_S4_EEvRNS3_INT_9elem_typeEEERKNS_4GlueINS9_IS5_T0_NS_10glue_timesEEET1_SB_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma19glue_times_redirectILj3EE5applyINS_3MatIdEES4_S4_EEvRNS3_INT_9elem_typeEEERKNS_4GlueINS9_IS5_T0_NS_10glue_timesEEET1_SB_EE"].apply(null, arguments) };
var __ZN4arma20arma_check_bad_allocIA39_cEEvbRKT_ = Module["__ZN4arma20arma_check_bad_allocIA39_cEEvbRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma20arma_check_bad_allocIA39_cEEvbRKT_"].apply(null, arguments) };
var __ZN4arma20unwrap_check_defaultINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEC2ERKS5_b = Module["__ZN4arma20unwrap_check_defaultINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEC2ERKS5_b"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma20unwrap_check_defaultINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEC2ERKS5_b"].apply(null, arguments) };
var __ZN4arma20unwrap_check_defaultINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEED2Ev = Module["__ZN4arma20unwrap_check_defaultINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma20unwrap_check_defaultINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEED2Ev"].apply(null, arguments) };
var __ZN4arma21arma_assert_blas_sizeINS_3MatINSt3__27complexIdEEEEEEvRKT_ = Module["__ZN4arma21arma_assert_blas_sizeINS_3MatINSt3__27complexIdEEEEEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma21arma_assert_blas_sizeINS_3MatINSt3__27complexIdEEEEEEvRKT_"].apply(null, arguments) };
var __ZN4arma21arma_assert_blas_sizeINS_3MatINSt3__27complexIdEEEES5_EEvRKT_RKT0_ = Module["__ZN4arma21arma_assert_blas_sizeINS_3MatINSt3__27complexIdEEEES5_EEvRKT_RKT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma21arma_assert_blas_sizeINS_3MatINSt3__27complexIdEEEES5_EEvRKT_RKT0_"].apply(null, arguments) };
var __ZN4arma21arma_assert_blas_sizeINS_3MatIdEEEEvRKT_ = Module["__ZN4arma21arma_assert_blas_sizeINS_3MatIdEEEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma21arma_assert_blas_sizeINS_3MatIdEEEEvRKT_"].apply(null, arguments) };
var __ZN4arma21arma_assert_blas_sizeINS_3MatIdEES2_EEvRKT_RKT0_ = Module["__ZN4arma21arma_assert_blas_sizeINS_3MatIdEES2_EEvRKT_RKT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma21arma_assert_blas_sizeINS_3MatIdEES2_EEvRKT_RKT0_"].apply(null, arguments) };
var __ZN4arma21arma_assert_same_sizeIdNS_3MatIdEEEEvRKNS_7subviewIT_EERKNS_5ProxyIT0_EEPKc = Module["__ZN4arma21arma_assert_same_sizeIdNS_3MatIdEEEEvRKNS_7subviewIT_EERKNS_5ProxyIT0_EEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma21arma_assert_same_sizeIdNS_3MatIdEEEEvRKNS_7subviewIT_EERKNS_5ProxyIT0_EEPKc"].apply(null, arguments) };
var __ZN4arma21arma_assert_same_sizeIdNS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEEvRKNS_7subviewIT_EERKNS_5ProxyIT0_EEPKc = Module["__ZN4arma21arma_assert_same_sizeIdNS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEEvRKNS_7subviewIT_EERKNS_5ProxyIT0_EEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma21arma_assert_same_sizeIdNS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEEvRKNS_7subviewIT_EERKNS_5ProxyIT0_EEPKc"].apply(null, arguments) };
var __ZN4arma21arma_assert_same_sizeIddEEvRKNS_7subviewIT_EERKNS1_IT0_EEPKc = Module["__ZN4arma21arma_assert_same_sizeIddEEvRKNS_7subviewIT_EERKNS1_IT0_EEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma21arma_assert_same_sizeIddEEvRKNS_7subviewIT_EERKNS1_IT0_EEPKc"].apply(null, arguments) };
var __ZN4arma22arma_sort_index_helperINS_3GenINS_3ColIdEENS_9gen_randuEEELb0EEEbRNS_3MatIjEERKNS_5ProxyIT_EEj = Module["__ZN4arma22arma_sort_index_helperINS_3GenINS_3ColIdEENS_9gen_randuEEELb0EEEbRNS_3MatIjEERKNS_5ProxyIT_EEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma22arma_sort_index_helperINS_3GenINS_3ColIdEENS_9gen_randuEEELb0EEEbRNS_3MatIjEERKNS_5ProxyIT_EEj"].apply(null, arguments) };
var __ZN4arma22gmm_seed_keep_existingC2Ev = Module["__ZN4arma22gmm_seed_keep_existingC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma22gmm_seed_keep_existingC2Ev"].apply(null, arguments) };
var __ZN4arma22gmm_seed_random_spreadC2Ev = Module["__ZN4arma22gmm_seed_random_spreadC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma22gmm_seed_random_spreadC2Ev"].apply(null, arguments) };
var __ZN4arma22gmm_seed_random_subsetC2Ev = Module["__ZN4arma22gmm_seed_random_subsetC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma22gmm_seed_random_subsetC2Ev"].apply(null, arguments) };
var __ZN4arma22gmm_seed_static_spreadC2Ev = Module["__ZN4arma22gmm_seed_static_spreadC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma22gmm_seed_static_spreadC2Ev"].apply(null, arguments) };
var __ZN4arma22gmm_seed_static_subsetC2Ev = Module["__ZN4arma22gmm_seed_static_subsetC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma22gmm_seed_static_subsetC2Ev"].apply(null, arguments) };
var __ZN4arma26arma_assert_trans_mul_sizeILb0ELb0EEEvjjjjPKc = Module["__ZN4arma26arma_assert_trans_mul_sizeILb0ELb0EEEvjjjjPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma26arma_assert_trans_mul_sizeILb0ELb0EEEvjjjjPKc"].apply(null, arguments) };
var __ZN4arma26arma_assert_trans_mul_sizeILb0ELb1EEEvjjjjPKc = Module["__ZN4arma26arma_assert_trans_mul_sizeILb0ELb1EEEvjjjjPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma26arma_assert_trans_mul_sizeILb0ELb1EEEvjjjjPKc"].apply(null, arguments) };
var __ZN4arma27glue_times_redirect2_helperILb0EE5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS7_NS_9op_htransEEEEEvRNS3_INT_9elem_typeEEERKNS_4GlueISB_T0_NS_10glue_timesEEE = Module["__ZN4arma27glue_times_redirect2_helperILb0EE5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS7_NS_9op_htransEEEEEvRNS3_INT_9elem_typeEEERKNS_4GlueISB_T0_NS_10glue_timesEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma27glue_times_redirect2_helperILb0EE5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS7_NS_9op_htransEEEEEvRNS3_INT_9elem_typeEEERKNS_4GlueISB_T0_NS_10glue_timesEEE"].apply(null, arguments) };
var __ZN4arma27glue_times_redirect2_helperILb0EE5applyINS_3MatINSt3__27complexIdEEEES7_EEvRNS3_INT_9elem_typeEEERKNS_4GlueIS8_T0_NS_10glue_timesEEE = Module["__ZN4arma27glue_times_redirect2_helperILb0EE5applyINS_3MatINSt3__27complexIdEEEES7_EEvRNS3_INT_9elem_typeEEERKNS_4GlueIS8_T0_NS_10glue_timesEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma27glue_times_redirect2_helperILb0EE5applyINS_3MatINSt3__27complexIdEEEES7_EEvRNS3_INT_9elem_typeEEERKNS_4GlueIS8_T0_NS_10glue_timesEEE"].apply(null, arguments) };
var __ZN4arma27glue_times_redirect2_helperILb1EE5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS7_NS_9op_htransEEEEEvRNS3_INT_9elem_typeEEERKNS_4GlueISB_T0_NS_10glue_timesEEE = Module["__ZN4arma27glue_times_redirect2_helperILb1EE5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS7_NS_9op_htransEEEEEvRNS3_INT_9elem_typeEEERKNS_4GlueISB_T0_NS_10glue_timesEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma27glue_times_redirect2_helperILb1EE5applyINS_3MatINSt3__27complexIdEEEENS_2OpIS7_NS_9op_htransEEEEEvRNS3_INT_9elem_typeEEERKNS_4GlueISB_T0_NS_10glue_timesEEE"].apply(null, arguments) };
var __ZN4arma27glue_times_redirect2_helperILb1EE5applyINS_3MatINSt3__27complexIdEEEES7_EEvRNS3_INT_9elem_typeEEERKNS_4GlueIS8_T0_NS_10glue_timesEEE = Module["__ZN4arma27glue_times_redirect2_helperILb1EE5applyINS_3MatINSt3__27complexIdEEEES7_EEvRNS3_INT_9elem_typeEEERKNS_4GlueIS8_T0_NS_10glue_timesEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma27glue_times_redirect2_helperILb1EE5applyINS_3MatINSt3__27complexIdEEEES7_EEvRNS3_INT_9elem_typeEEERKNS_4GlueIS8_T0_NS_10glue_timesEEE"].apply(null, arguments) };
var __ZN4arma27glue_times_redirect3_helperILb0EE5applyINS_3MatIdEES4_S4_EEvRNS3_INT_9elem_typeEEERKNS_4GlueINS9_IS5_T0_NS_10glue_timesEEET1_SB_EE = Module["__ZN4arma27glue_times_redirect3_helperILb0EE5applyINS_3MatIdEES4_S4_EEvRNS3_INT_9elem_typeEEERKNS_4GlueINS9_IS5_T0_NS_10glue_timesEEET1_SB_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma27glue_times_redirect3_helperILb0EE5applyINS_3MatIdEES4_S4_EEvRNS3_INT_9elem_typeEEERKNS_4GlueINS9_IS5_T0_NS_10glue_timesEEET1_SB_EE"].apply(null, arguments) };
var __ZN4arma27glue_times_redirect3_helperILb1EE5applyINS_3MatIdEES4_S4_EEvRNS3_INT_9elem_typeEEERKNS_4GlueINS9_IS5_T0_NS_10glue_timesEEET1_SB_EE = Module["__ZN4arma27glue_times_redirect3_helperILb1EE5applyINS_3MatIdEES4_S4_EEvRNS3_INT_9elem_typeEEERKNS_4GlueINS9_IS5_T0_NS_10glue_timesEEET1_SB_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma27glue_times_redirect3_helperILb1EE5applyINS_3MatIdEES4_S4_EEvRNS3_INT_9elem_typeEEERKNS_4GlueINS9_IS5_T0_NS_10glue_timesEEET1_SB_EE"].apply(null, arguments) };
var __ZN4arma2OpINS_3MatINSt3__27complexIdEEEENS_9op_htransEEC2ERKS5_ = Module["__ZN4arma2OpINS_3MatINSt3__27complexIdEEEENS_9op_htransEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma2OpINS_3MatINSt3__27complexIdEEEENS_9op_htransEEC2ERKS5_"].apply(null, arguments) };
var __ZN4arma2OpINS_3MatINSt3__27complexIdEEEENS_9op_htransEED2Ev = Module["__ZN4arma2OpINS_3MatINSt3__27complexIdEEEENS_9op_htransEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma2OpINS_3MatINSt3__27complexIdEEEENS_9op_htransEED2Ev"].apply(null, arguments) };
var __ZN4arma2OpINS_3MatIdEENS_6op_invEEC2ERKS2_ = Module["__ZN4arma2OpINS_3MatIdEENS_6op_invEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma2OpINS_3MatIdEENS_6op_invEEC2ERKS2_"].apply(null, arguments) };
var __ZN4arma2OpINS_3MatIdEENS_6op_invEED2Ev = Module["__ZN4arma2OpINS_3MatIdEENS_6op_invEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma2OpINS_3MatIdEENS_6op_invEED2Ev"].apply(null, arguments) };
var __ZN4arma2OpINS_3MatIdEENS_9op_htransEEC2ERKS2_ = Module["__ZN4arma2OpINS_3MatIdEENS_9op_htransEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma2OpINS_3MatIdEENS_9op_htransEEC2ERKS2_"].apply(null, arguments) };
var __ZN4arma2OpINS_3MatIdEENS_9op_htransEED2Ev = Module["__ZN4arma2OpINS_3MatIdEENS_9op_htransEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma2OpINS_3MatIdEENS_9op_htransEED2Ev"].apply(null, arguments) };
var __ZN4arma2OpINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEEC2ERKS7_jj = Module["__ZN4arma2OpINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEEC2ERKS7_jj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma2OpINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEEC2ERKS7_jj"].apply(null, arguments) };
var __ZN4arma2OpINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEED2Ev = Module["__ZN4arma2OpINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma2OpINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEED2Ev"].apply(null, arguments) };
var __ZN4arma3ColIdEC2EPdjbb = Module["__ZN4arma3ColIdEC2EPdjbb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3ColIdEC2EPdjbb"].apply(null, arguments) };
var __ZN4arma3ColIdEC2Ev = Module["__ZN4arma3ColIdEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3ColIdEC2Ev"].apply(null, arguments) };
var __ZN4arma3ColIdED2Ev = Module["__ZN4arma3ColIdED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3ColIdED2Ev"].apply(null, arguments) };
var __ZN4arma3ColIjEC2Ejj = Module["__ZN4arma3ColIjEC2Ejj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3ColIjEC2Ejj"].apply(null, arguments) };
var __ZN4arma3ColIjEC2Ev = Module["__ZN4arma3ColIjEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3ColIjEC2Ev"].apply(null, arguments) };
var __ZN4arma3ColIjEC2INS_2OpINS_4mtOpIjNS4_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEEEEERKNS_4BaseIjT_EE = Module["__ZN4arma3ColIjEC2INS_2OpINS_4mtOpIjNS4_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEEEEERKNS_4BaseIjT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3ColIjEC2INS_2OpINS_4mtOpIjNS4_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEEEEERKNS_4BaseIjT_EE"].apply(null, arguments) };
var __ZN4arma3ColIjEC2INS_4mtOpIjNS3_IjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEEEEERKNS_4BaseIjT_EE = Module["__ZN4arma3ColIjEC2INS_4mtOpIjNS3_IjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEEEEERKNS_4BaseIjT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3ColIjEC2INS_4mtOpIjNS3_IjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEEEEERKNS_4BaseIjT_EE"].apply(null, arguments) };
var __ZN4arma3ColIjEC2INS_4mtOpIjNS_3GenINS0_IdEENS_9gen_randuEEENS_13op_sort_indexEEEEERKNS_4BaseIjT_EE = Module["__ZN4arma3ColIjEC2INS_4mtOpIjNS_3GenINS0_IdEENS_9gen_randuEEENS_13op_sort_indexEEEEERKNS_4BaseIjT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3ColIjEC2INS_4mtOpIjNS_3GenINS0_IdEENS_9gen_randuEEENS_13op_sort_indexEEEEERKNS_4BaseIjT_EE"].apply(null, arguments) };
var __ZN4arma3ColIjED2Ev = Module["__ZN4arma3ColIjED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3ColIjED2Ev"].apply(null, arguments) };
var __ZN4arma3ColIjEaSEOS1_ = Module["__ZN4arma3ColIjEaSEOS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3ColIjEaSEOS1_"].apply(null, arguments) };
var __ZN4arma3ColIjEaSINS_7subviewIjEEEERS1_RKNS_4BaseIjT_EE = Module["__ZN4arma3ColIjEaSINS_7subviewIjEEEERS1_RKNS_4BaseIjT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3ColIjEaSINS_7subviewIjEEEERS1_RKNS_4BaseIjT_EE"].apply(null, arguments) };
var __ZN4arma3MatINSt3__27complexIdEEE10soft_resetEv = Module["__ZN4arma3MatINSt3__27complexIdEEE10soft_resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatINSt3__27complexIdEEE10soft_resetEv"].apply(null, arguments) };
var __ZN4arma3MatINSt3__27complexIdEEE4fillES3_ = Module["__ZN4arma3MatINSt3__27complexIdEEE4fillES3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatINSt3__27complexIdEEE4fillES3_"].apply(null, arguments) };
var __ZN4arma3MatINSt3__27complexIdEEE5resetEv = Module["__ZN4arma3MatINSt3__27complexIdEEE5resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatINSt3__27complexIdEEE5resetEv"].apply(null, arguments) };
var __ZN4arma3MatINSt3__27complexIdEEE5zerosEv = Module["__ZN4arma3MatINSt3__27complexIdEEE5zerosEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatINSt3__27complexIdEEE5zerosEv"].apply(null, arguments) };
var __ZN4arma3MatINSt3__27complexIdEEE8set_sizeEjj = Module["__ZN4arma3MatINSt3__27complexIdEEE8set_sizeEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatINSt3__27complexIdEEE8set_sizeEjj"].apply(null, arguments) };
var __ZN4arma3MatINSt3__27complexIdEEE9init_coldEv = Module["__ZN4arma3MatINSt3__27complexIdEEE9init_coldEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatINSt3__27complexIdEEE9init_coldEv"].apply(null, arguments) };
var __ZN4arma3MatINSt3__27complexIdEEE9init_warmEjj = Module["__ZN4arma3MatINSt3__27complexIdEEE9init_warmEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatINSt3__27complexIdEEE9init_warmEjj"].apply(null, arguments) };
var __ZN4arma3MatINSt3__27complexIdEEE9steal_memERS4_ = Module["__ZN4arma3MatINSt3__27complexIdEEE9steal_memERS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatINSt3__27complexIdEEE9steal_memERS4_"].apply(null, arguments) };
var __ZN4arma3MatINSt3__27complexIdEEEC2Ejj = Module["__ZN4arma3MatINSt3__27complexIdEEEC2Ejj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatINSt3__27complexIdEEEC2Ejj"].apply(null, arguments) };
var __ZN4arma3MatINSt3__27complexIdEEEC2Ev = Module["__ZN4arma3MatINSt3__27complexIdEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatINSt3__27complexIdEEEC2Ev"].apply(null, arguments) };
var __ZN4arma3MatINSt3__27complexIdEEEC2INS0_IdEENS_10op_sqrtmatEEERKNS_4mtOpIS3_T_T0_EE = Module["__ZN4arma3MatINSt3__27complexIdEEEC2INS0_IdEENS_10op_sqrtmatEEERKNS_4mtOpIS3_T_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatINSt3__27complexIdEEEC2INS0_IdEENS_10op_sqrtmatEEERKNS_4mtOpIS3_T_T0_EE"].apply(null, arguments) };
var __ZN4arma3MatINSt3__27complexIdEEEC2IS4_S4_NS_10glue_timesEEERKNS_4GlueIT_T0_T1_EE = Module["__ZN4arma3MatINSt3__27complexIdEEEC2IS4_S4_NS_10glue_timesEEERKNS_4GlueIT_T0_T1_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatINSt3__27complexIdEEEC2IS4_S4_NS_10glue_timesEEERKNS_4GlueIT_T0_T1_EE"].apply(null, arguments) };
var __ZN4arma3MatINSt3__27complexIdEEED2Ev = Module["__ZN4arma3MatINSt3__27complexIdEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatINSt3__27complexIdEEED2Ev"].apply(null, arguments) };
var __ZN4arma3MatINSt3__27complexIdEEEaSERKS4_ = Module["__ZN4arma3MatINSt3__27complexIdEEEaSERKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatINSt3__27complexIdEEEaSERKS4_"].apply(null, arguments) };
var __ZN4arma3MatINSt3__27complexIdEEEaSIS4_NS_2OpIS4_NS_9op_htransEEENS_10glue_timesEEERS4_RKNS_4GlueIT_T0_T1_EE = Module["__ZN4arma3MatINSt3__27complexIdEEEaSIS4_NS_2OpIS4_NS_9op_htransEEENS_10glue_timesEEERS4_RKNS_4GlueIT_T0_T1_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatINSt3__27complexIdEEEaSIS4_NS_2OpIS4_NS_9op_htransEEENS_10glue_timesEEERS4_RKNS_4GlueIT_T0_T1_EE"].apply(null, arguments) };
var __ZN4arma3MatIdE10soft_resetEv = Module["__ZN4arma3MatIdE10soft_resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdE10soft_resetEv"].apply(null, arguments) };
var __ZN4arma3MatIdE4fillEd = Module["__ZN4arma3MatIdE4fillEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdE4fillEd"].apply(null, arguments) };
var __ZN4arma3MatIdE4fillINS_4fill10fill_zerosEEERKS1_RKNS3_10fill_classIT_EE = Module["__ZN4arma3MatIdE4fillINS_4fill10fill_zerosEEERKS1_RKNS3_10fill_classIT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdE4fillINS_4fill10fill_zerosEEERKS1_RKNS3_10fill_classIT_EE"].apply(null, arguments) };
var __ZN4arma3MatIdE4onesEjj = Module["__ZN4arma3MatIdE4onesEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdE4onesEjj"].apply(null, arguments) };
var __ZN4arma3MatIdE4swapERS1_ = Module["__ZN4arma3MatIdE4swapERS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdE4swapERS1_"].apply(null, arguments) };
var __ZN4arma3MatIdE5randuEv = Module["__ZN4arma3MatIdE5randuEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdE5randuEv"].apply(null, arguments) };
var __ZN4arma3MatIdE5resetEv = Module["__ZN4arma3MatIdE5resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdE5resetEv"].apply(null, arguments) };
var __ZN4arma3MatIdE5zerosEjj = Module["__ZN4arma3MatIdE5zerosEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdE5zerosEjj"].apply(null, arguments) };
var __ZN4arma3MatIdE5zerosEv = Module["__ZN4arma3MatIdE5zerosEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdE5zerosEv"].apply(null, arguments) };
var __ZN4arma3MatIdE8set_sizeEj = Module["__ZN4arma3MatIdE8set_sizeEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdE8set_sizeEj"].apply(null, arguments) };
var __ZN4arma3MatIdE8set_sizeEjj = Module["__ZN4arma3MatIdE8set_sizeEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdE8set_sizeEjj"].apply(null, arguments) };
var __ZN4arma3MatIdE9copy_sizeIdS1_EEvRKNS_4BaseIT_T0_EE = Module["__ZN4arma3MatIdE9copy_sizeIdS1_EEvRKNS_4BaseIT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdE9copy_sizeIdS1_EEvRKNS_4BaseIT_T0_EE"].apply(null, arguments) };
var __ZN4arma3MatIdE9init_coldEv = Module["__ZN4arma3MatIdE9init_coldEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdE9init_coldEv"].apply(null, arguments) };
var __ZN4arma3MatIdE9init_warmEjj = Module["__ZN4arma3MatIdE9init_warmEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdE9init_warmEjj"].apply(null, arguments) };
var __ZN4arma3MatIdE9steal_memERS1_ = Module["__ZN4arma3MatIdE9steal_memERS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdE9steal_memERS1_"].apply(null, arguments) };
var __ZN4arma3MatIdEC2EPdjjbb = Module["__ZN4arma3MatIdEC2EPdjjbb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdEC2EPdjjbb"].apply(null, arguments) };
var __ZN4arma3MatIdEC2ERKNS_18arma_vec_indicatorEt = Module["__ZN4arma3MatIdEC2ERKNS_18arma_vec_indicatorEt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdEC2ERKNS_18arma_vec_indicatorEt"].apply(null, arguments) };
var __ZN4arma3MatIdEC2ERKNS_7subviewIdEE = Module["__ZN4arma3MatIdEC2ERKNS_7subviewIdEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdEC2ERKNS_7subviewIdEE"].apply(null, arguments) };
var __ZN4arma3MatIdEC2ERKS1_ = Module["__ZN4arma3MatIdEC2ERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdEC2ERKS1_"].apply(null, arguments) };
var __ZN4arma3MatIdEC2Ejj = Module["__ZN4arma3MatIdEC2Ejj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdEC2Ejj"].apply(null, arguments) };
var __ZN4arma3MatIdEC2Ev = Module["__ZN4arma3MatIdEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdEC2Ev"].apply(null, arguments) };
var __ZN4arma3MatIdEC2INS0_INSt3__27complexIdEEEENS_7op_realEEERKNS_4mtOpIdT_T0_EE = Module["__ZN4arma3MatIdEC2INS0_INSt3__27complexIdEEEENS_7op_realEEERKNS_4mtOpIdT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdEC2INS0_INSt3__27complexIdEEEENS_7op_realEEERKNS_4mtOpIdT_T0_EE"].apply(null, arguments) };
var __ZN4arma3MatIdEC2INS_11subview_rowIdEENS_19eop_scalar_div_postEEERKNS_3eOpIT_T0_EE = Module["__ZN4arma3MatIdEC2INS_11subview_rowIdEENS_19eop_scalar_div_postEEERKNS_3eOpIT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdEC2INS_11subview_rowIdEENS_19eop_scalar_div_postEEERKNS_3eOpIT_T0_EE"].apply(null, arguments) };
var __ZN4arma3MatIdEC2INS_3ColIdEENS_9gen_randuEEERKNS_3GenIT_T0_EE = Module["__ZN4arma3MatIdEC2INS_3ColIdEENS_9gen_randuEEERKNS_3GenIT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdEC2INS_3ColIdEENS_9gen_randuEEERKNS_3GenIT_T0_EE"].apply(null, arguments) };
var __ZN4arma3MatIdEC2INS_4fill10fill_zerosEEEjjRKNS3_10fill_classIT_EE = Module["__ZN4arma3MatIdEC2INS_4fill10fill_zerosEEEjjRKNS3_10fill_classIT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdEC2INS_4fill10fill_zerosEEEjjRKNS3_10fill_classIT_EE"].apply(null, arguments) };
var __ZN4arma3MatIdEC2INS_7subviewIdEENS_7eop_powEEERKNS_3eOpIT_T0_EE = Module["__ZN4arma3MatIdEC2INS_7subviewIdEENS_7eop_powEEERKNS_3eOpIT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdEC2INS_7subviewIdEENS_7eop_powEEERKNS_3eOpIT_T0_EE"].apply(null, arguments) };
var __ZN4arma3MatIdEC2IS1_NS_6op_invEEERKNS_2OpIT_T0_EE = Module["__ZN4arma3MatIdEC2IS1_NS_6op_invEEERKNS_2OpIT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdEC2IS1_NS_6op_invEEERKNS_2OpIT_T0_EE"].apply(null, arguments) };
var __ZN4arma3MatIdEC2IS1_NS_9op_htransEEERKNS_2OpIT_T0_EE = Module["__ZN4arma3MatIdEC2IS1_NS_9op_htransEEERKNS_2OpIT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdEC2IS1_NS_9op_htransEEERKNS_2OpIT_T0_EE"].apply(null, arguments) };
var __ZN4arma3MatIdED2Ev = Module["__ZN4arma3MatIdED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdED2Ev"].apply(null, arguments) };
var __ZN4arma3MatIdEaSEOS1_ = Module["__ZN4arma3MatIdEaSEOS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdEaSEOS1_"].apply(null, arguments) };
var __ZN4arma3MatIdEaSERKS1_ = Module["__ZN4arma3MatIdEaSERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdEaSERKS1_"].apply(null, arguments) };
var __ZN4arma3MatIdEaSINS0_IjEES3_EERS1_RKNS_13subview_elem2IdT_T0_EE = Module["__ZN4arma3MatIdEaSINS0_IjEES3_EERS1_RKNS_13subview_elem2IdT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdEaSINS0_IjEES3_EERS1_RKNS_13subview_elem2IdT_T0_EE"].apply(null, arguments) };
var __ZN4arma3MatIdEaSINS_3RowIdEENS_7eop_logEEERS1_RKNS_3eOpIT_T0_EE = Module["__ZN4arma3MatIdEaSINS_3RowIdEENS_7eop_logEEERS1_RKNS_3eOpIT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdEaSINS_3RowIdEENS_7eop_logEEERS1_RKNS_3eOpIT_T0_EE"].apply(null, arguments) };
var __ZN4arma3MatIdEaSINS_4GlueIS1_S1_NS_10glue_timesEEES1_S4_EERS1_RKNS3_IT_T0_T1_EE = Module["__ZN4arma3MatIdEaSINS_4GlueIS1_S1_NS_10glue_timesEEES1_S4_EERS1_RKNS3_IT_T0_T1_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdEaSINS_4GlueIS1_S1_NS_10glue_timesEEES1_S4_EERS1_RKNS3_IT_T0_T1_EE"].apply(null, arguments) };
var __ZN4arma3MatIdEaSINS_7subviewIdEENS_7eop_powEEERS1_RKNS_3eOpIT_T0_EE = Module["__ZN4arma3MatIdEaSINS_7subviewIdEENS_7eop_powEEERS1_RKNS_3eOpIT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIdEaSINS_7subviewIdEENS_7eop_powEEERS1_RKNS_3eOpIT_T0_EE"].apply(null, arguments) };
var __ZN4arma3MatIjE10soft_resetEv = Module["__ZN4arma3MatIjE10soft_resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjE10soft_resetEv"].apply(null, arguments) };
var __ZN4arma3MatIjE13steal_mem_colERS1_j = Module["__ZN4arma3MatIjE13steal_mem_colERS1_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjE13steal_mem_colERS1_j"].apply(null, arguments) };
var __ZN4arma3MatIjE4fillEj = Module["__ZN4arma3MatIjE4fillEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjE4fillEj"].apply(null, arguments) };
var __ZN4arma3MatIjE4fillINS_4fill10fill_zerosEEERKS1_RKNS3_10fill_classIT_EE = Module["__ZN4arma3MatIjE4fillINS_4fill10fill_zerosEEERKS1_RKNS3_10fill_classIT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjE4fillINS_4fill10fill_zerosEEERKS1_RKNS3_10fill_classIT_EE"].apply(null, arguments) };
var __ZN4arma3MatIjE5resetEv = Module["__ZN4arma3MatIjE5resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjE5resetEv"].apply(null, arguments) };
var __ZN4arma3MatIjE5zerosEv = Module["__ZN4arma3MatIjE5zerosEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjE5zerosEv"].apply(null, arguments) };
var __ZN4arma3MatIjE8set_sizeEj = Module["__ZN4arma3MatIjE8set_sizeEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjE8set_sizeEj"].apply(null, arguments) };
var __ZN4arma3MatIjE8set_sizeEjj = Module["__ZN4arma3MatIjE8set_sizeEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjE8set_sizeEjj"].apply(null, arguments) };
var __ZN4arma3MatIjE9copy_sizeIjS1_EEvRKNS_4BaseIT_T0_EE = Module["__ZN4arma3MatIjE9copy_sizeIjS1_EEvRKNS_4BaseIT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjE9copy_sizeIjS1_EEvRKNS_4BaseIT_T0_EE"].apply(null, arguments) };
var __ZN4arma3MatIjE9init_coldEv = Module["__ZN4arma3MatIjE9init_coldEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjE9init_coldEv"].apply(null, arguments) };
var __ZN4arma3MatIjE9init_warmEjj = Module["__ZN4arma3MatIjE9init_warmEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjE9init_warmEjj"].apply(null, arguments) };
var __ZN4arma3MatIjE9steal_memERS1_ = Module["__ZN4arma3MatIjE9steal_memERS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjE9steal_memERS1_"].apply(null, arguments) };
var __ZN4arma3MatIjEC2ERKNS_18arma_vec_indicatorEjjt = Module["__ZN4arma3MatIjEC2ERKNS_18arma_vec_indicatorEjjt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjEC2ERKNS_18arma_vec_indicatorEjjt"].apply(null, arguments) };
var __ZN4arma3MatIjEC2ERKNS_18arma_vec_indicatorEt = Module["__ZN4arma3MatIjEC2ERKNS_18arma_vec_indicatorEt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjEC2ERKNS_18arma_vec_indicatorEt"].apply(null, arguments) };
var __ZN4arma3MatIjEC2ERKNS_7subviewIjEE = Module["__ZN4arma3MatIjEC2ERKNS_7subviewIjEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjEC2ERKNS_7subviewIjEE"].apply(null, arguments) };
var __ZN4arma3MatIjEC2ERKS1_ = Module["__ZN4arma3MatIjEC2ERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjEC2ERKS1_"].apply(null, arguments) };
var __ZN4arma3MatIjEC2Ejj = Module["__ZN4arma3MatIjEC2Ejj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjEC2Ejj"].apply(null, arguments) };
var __ZN4arma3MatIjEC2Ev = Module["__ZN4arma3MatIjEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjEC2Ev"].apply(null, arguments) };
var __ZN4arma3MatIjEC2INS_4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEERKNS3_IjT_T0_EE = Module["__ZN4arma3MatIjEC2INS_4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEERKNS3_IjT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjEC2INS_4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEERKNS3_IjT_T0_EE"].apply(null, arguments) };
var __ZN4arma3MatIjED2Ev = Module["__ZN4arma3MatIjED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjED2Ev"].apply(null, arguments) };
var __ZN4arma3MatIjEaSERKNS_7subviewIjEE = Module["__ZN4arma3MatIjEaSERKNS_7subviewIjEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjEaSERKNS_7subviewIjEE"].apply(null, arguments) };
var __ZN4arma3MatIjEaSERKS1_ = Module["__ZN4arma3MatIjEaSERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjEaSERKS1_"].apply(null, arguments) };
var __ZN4arma3MatIjEaSINS_3GenINS_3ColIdEENS_9gen_randuEEENS_13op_sort_indexEEERS1_RKNS_4mtOpIjT_T0_EE = Module["__ZN4arma3MatIjEaSINS_3GenINS_3ColIdEENS_9gen_randuEEENS_13op_sort_indexEEERS1_RKNS_4mtOpIjT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjEaSINS_3GenINS_3ColIdEENS_9gen_randuEEENS_13op_sort_indexEEERS1_RKNS_4mtOpIjT_T0_EE"].apply(null, arguments) };
var __ZN4arma3MatIjEaSINS_4mtOpIjNS3_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEEERS1_RKNS_2OpIT_T0_EE = Module["__ZN4arma3MatIjEaSINS_4mtOpIjNS3_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEEERS1_RKNS_2OpIT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjEaSINS_4mtOpIjNS3_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEENS_15op_sort_defaultEEERS1_RKNS_2OpIT_T0_EE"].apply(null, arguments) };
var __ZN4arma3MatIjEaSINS_4mtOpIjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEEERS1_RKNS3_IjT_T0_EE = Module["__ZN4arma3MatIjEaSINS_4mtOpIjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEEERS1_RKNS3_IjT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3MatIjEaSINS_4mtOpIjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEEERS1_RKNS3_IjT_T0_EE"].apply(null, arguments) };
var __ZN4arma3RowIdEC2Ev = Module["__ZN4arma3RowIdEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3RowIdEC2Ev"].apply(null, arguments) };
var __ZN4arma3RowIdEC2INS_3eOpINS_7subviewIdEENS_7eop_powEEEEERKNS_4BaseIdT_EE = Module["__ZN4arma3RowIdEC2INS_3eOpINS_7subviewIdEENS_7eop_powEEEEERKNS_4BaseIdT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3RowIdEC2INS_3eOpINS_7subviewIdEENS_7eop_powEEEEERKNS_4BaseIdT_EE"].apply(null, arguments) };
var __ZN4arma3RowIdED2Ev = Module["__ZN4arma3RowIdED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3RowIdED2Ev"].apply(null, arguments) };
var __ZN4arma3RowIdEaSINS_3eOpIS1_NS_7eop_logEEEEERS1_RKNS_4BaseIdT_EE = Module["__ZN4arma3RowIdEaSINS_3eOpIS1_NS_7eop_logEEEEERS1_RKNS_4BaseIdT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3RowIdEaSINS_3eOpIS1_NS_7eop_logEEEEERS1_RKNS_4BaseIdT_EE"].apply(null, arguments) };
var __ZN4arma3RowIjEC2INS_4fill10fill_zerosEEEjRKNS3_10fill_classIT_EE = Module["__ZN4arma3RowIjEC2INS_4fill10fill_zerosEEEjRKNS3_10fill_classIT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3RowIjEC2INS_4fill10fill_zerosEEEjRKNS3_10fill_classIT_EE"].apply(null, arguments) };
var __ZN4arma3RowIjED2Ev = Module["__ZN4arma3RowIjED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3RowIjED2Ev"].apply(null, arguments) };
var __ZN4arma3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEC2ERKS2_d = Module["__ZN4arma3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEC2ERKS2_d"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEC2ERKS2_d"].apply(null, arguments) };
var __ZN4arma3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEED2Ev = Module["__ZN4arma3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEED2Ev"].apply(null, arguments) };
var __ZN4arma3eOpINS_3RowIdEENS_7eop_logEEC2ERKS2_ = Module["__ZN4arma3eOpINS_3RowIdEENS_7eop_logEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3eOpINS_3RowIdEENS_7eop_logEEC2ERKS2_"].apply(null, arguments) };
var __ZN4arma3eOpINS_3RowIdEENS_7eop_logEED2Ev = Module["__ZN4arma3eOpINS_3RowIdEENS_7eop_logEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3eOpINS_3RowIdEENS_7eop_logEED2Ev"].apply(null, arguments) };
var __ZN4arma3eOpINS_7subviewIdEENS_7eop_powEEC2ERKS2_d = Module["__ZN4arma3eOpINS_7subviewIdEENS_7eop_powEEC2ERKS2_d"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3eOpINS_7subviewIdEENS_7eop_powEEC2ERKS2_d"].apply(null, arguments) };
var __ZN4arma3eOpINS_7subviewIdEENS_7eop_powEED2Ev = Module["__ZN4arma3eOpINS_7subviewIdEENS_7eop_powEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma3eOpINS_7subviewIdEENS_7eop_powEED2Ev"].apply(null, arguments) };
var __ZN4arma4accuINS_11subview_rowIdEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueENS4_9elem_typeEE6resultERKS4_ = Module["__ZN4arma4accuINS_11subview_rowIdEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueENS4_9elem_typeEE6resultERKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4accuINS_11subview_rowIdEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueENS4_9elem_typeEE6resultERKS4_"].apply(null, arguments) };
var __ZN4arma4accuINS_3RowIdEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueENS4_9elem_typeEE6resultERKS4_ = Module["__ZN4arma4accuINS_3RowIdEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueENS4_9elem_typeEE6resultERKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4accuINS_3RowIdEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueENS4_9elem_typeEE6resultERKS4_"].apply(null, arguments) };
var __ZN4arma4blas4gemmINSt3__27complexIdEEEEvPKcS6_PKiS8_S8_PKT_SB_S8_SB_S8_SB_PS9_S8_ = Module["__ZN4arma4blas4gemmINSt3__27complexIdEEEEvPKcS6_PKiS8_S8_PKT_SB_S8_SB_S8_SB_PS9_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4blas4gemmINSt3__27complexIdEEEEvPKcS6_PKiS8_S8_PKT_SB_S8_SB_S8_SB_PS9_S8_"].apply(null, arguments) };
var __ZN4arma4blas4gemmIdEEvPKcS3_PKiS5_S5_PKT_S8_S5_S8_S5_S8_PS6_S5_ = Module["__ZN4arma4blas4gemmIdEEvPKcS3_PKiS5_S5_PKT_S8_S5_S8_S5_S8_PS6_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4blas4gemmIdEEvPKcS3_PKiS5_S5_PKT_S8_S5_S8_S5_S8_PS6_S5_"].apply(null, arguments) };
var __ZN4arma4blas4gemvINSt3__27complexIdEEEEvPKcPKiS8_PKT_SB_S8_SB_S8_SB_PS9_S8_ = Module["__ZN4arma4blas4gemvINSt3__27complexIdEEEEvPKcPKiS8_PKT_SB_S8_SB_S8_SB_PS9_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4blas4gemvINSt3__27complexIdEEEEvPKcPKiS8_PKT_SB_S8_SB_S8_SB_PS9_S8_"].apply(null, arguments) };
var __ZN4arma4blas4gemvIdEEvPKcPKiS5_PKT_S8_S5_S8_S5_S8_PS6_S5_ = Module["__ZN4arma4blas4gemvIdEEvPKcPKiS5_PKT_S8_S5_S8_S5_S8_PS6_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4blas4gemvIdEEvPKcPKiS5_PKT_S8_S5_S8_S5_S8_PS6_S5_"].apply(null, arguments) };
var __ZN4arma4blas4herkIdEEvPKcS3_PKiS5_PKT_PKNSt3__27complexIS6_EES5_S8_PSB_S5_ = Module["__ZN4arma4blas4herkIdEEvPKcS3_PKiS5_PKT_PKNSt3__27complexIS6_EES5_S8_PSB_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4blas4herkIdEEvPKcS3_PKiS5_PKT_PKNSt3__27complexIS6_EES5_S8_PSB_S5_"].apply(null, arguments) };
var __ZN4arma4fill10fill_classINS0_10fill_randnEEC2Ev = Module["__ZN4arma4fill10fill_classINS0_10fill_randnEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4fill10fill_classINS0_10fill_randnEEC2Ev"].apply(null, arguments) };
var __ZN4arma4fill10fill_classINS0_10fill_randuEEC2Ev = Module["__ZN4arma4fill10fill_classINS0_10fill_randuEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4fill10fill_classINS0_10fill_randuEEC2Ev"].apply(null, arguments) };
var __ZN4arma4fill10fill_classINS0_10fill_zerosEEC2Ev = Module["__ZN4arma4fill10fill_classINS0_10fill_zerosEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4fill10fill_classINS0_10fill_zerosEEC2Ev"].apply(null, arguments) };
var __ZN4arma4fill10fill_classINS0_8fill_eyeEEC2Ev = Module["__ZN4arma4fill10fill_classINS0_8fill_eyeEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4fill10fill_classINS0_8fill_eyeEEC2Ev"].apply(null, arguments) };
var __ZN4arma4fill10fill_classINS0_9fill_noneEEC2Ev = Module["__ZN4arma4fill10fill_classINS0_9fill_noneEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4fill10fill_classINS0_9fill_noneEEC2Ev"].apply(null, arguments) };
var __ZN4arma4fill10fill_classINS0_9fill_onesEEC2Ev = Module["__ZN4arma4fill10fill_classINS0_9fill_onesEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4fill10fill_classINS0_9fill_onesEEC2Ev"].apply(null, arguments) };
var __ZN4arma4findINS_4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueEKNS1_IjS7_NS_14op_find_simpleEEEE6resultERKS7_ = Module["__ZN4arma4findINS_4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueEKNS1_IjS7_NS_14op_find_simpleEEEE6resultERKS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4findINS_4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueEKNS1_IjS7_NS_14op_find_simpleEEEE6resultERKS7_"].apply(null, arguments) };
var __ZN4arma4findINS_4mtOpIjNS_3RowIjEENS_9op_rel_eqEEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueEKNS1_IjS7_NS_14op_find_simpleEEEE6resultERKS7_ = Module["__ZN4arma4findINS_4mtOpIjNS_3RowIjEENS_9op_rel_eqEEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueEKNS1_IjS7_NS_14op_find_simpleEEEE6resultERKS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4findINS_4mtOpIjNS_3RowIjEENS_9op_rel_eqEEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueEKNS1_IjS7_NS_14op_find_simpleEEEE6resultERKS7_"].apply(null, arguments) };
var __ZN4arma4gemmILb0ELb0ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EES7_EEvRNS6_IT_EERKT0_RKT1_S8_S8_ = Module["__ZN4arma4gemmILb0ELb0ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EES7_EEvRNS6_IT_EERKT0_RKT1_S8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4gemmILb0ELb0ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EES7_EEvRNS6_IT_EERKT0_RKT1_S8_S8_"].apply(null, arguments) };
var __ZN4arma4gemmILb0ELb0ELb0ELb0EE15apply_blas_typeIdNS_3MatIdEES4_EEvRNS3_IT_EERKT0_RKT1_S5_S5_ = Module["__ZN4arma4gemmILb0ELb0ELb0ELb0EE15apply_blas_typeIdNS_3MatIdEES4_EEvRNS3_IT_EERKT0_RKT1_S5_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4gemmILb0ELb0ELb0ELb0EE15apply_blas_typeIdNS_3MatIdEES4_EEvRNS3_IT_EERKT0_RKT1_S5_S5_"].apply(null, arguments) };
var __ZN4arma4gemmILb0ELb1ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EES7_EEvRNS6_IT_EERKT0_RKT1_S8_S8_ = Module["__ZN4arma4gemmILb0ELb1ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EES7_EEvRNS6_IT_EERKT0_RKT1_S8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4gemmILb0ELb1ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EES7_EEvRNS6_IT_EERKT0_RKT1_S8_S8_"].apply(null, arguments) };
var __ZN4arma4gemvILb0ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_ = Module["__ZN4arma4gemvILb0ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4gemvILb0ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_"].apply(null, arguments) };
var __ZN4arma4gemvILb0ELb0ELb0EE15apply_blas_typeIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_ = Module["__ZN4arma4gemvILb0ELb0ELb0EE15apply_blas_typeIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4gemvILb0ELb0ELb0EE15apply_blas_typeIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_"].apply(null, arguments) };
var __ZN4arma4gemvILb1ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_ = Module["__ZN4arma4gemvILb1ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4gemvILb1ELb0ELb0EE15apply_blas_typeINSt3__27complexIdEENS_3MatIS5_EEEEvPT_RKT0_PKS8_S8_S8_"].apply(null, arguments) };
var __ZN4arma4gemvILb1ELb0ELb0EE15apply_blas_typeIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_ = Module["__ZN4arma4gemvILb1ELb0ELb0EE15apply_blas_typeIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4gemvILb1ELb0ELb0EE15apply_blas_typeIdNS_3MatIdEEEEvPT_RKT0_PKS5_S5_S5_"].apply(null, arguments) };
var __ZN4arma4herkILb0ELb0ELb0EE15apply_blas_typeIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_ = Module["__ZN4arma4herkILb0ELb0ELb0EE15apply_blas_typeIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4herkILb0ELb0ELb0EE15apply_blas_typeIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_"].apply(null, arguments) };
var __ZN4arma4mtOpINSt3__27complexIdEENS_3MatIdEENS_10op_sqrtmatEEC2ERKS5_ = Module["__ZN4arma4mtOpINSt3__27complexIdEENS_3MatIdEENS_10op_sqrtmatEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4mtOpINSt3__27complexIdEENS_3MatIdEENS_10op_sqrtmatEEC2ERKS5_"].apply(null, arguments) };
var __ZN4arma4mtOpINSt3__27complexIdEENS_3MatIdEENS_10op_sqrtmatEED2Ev = Module["__ZN4arma4mtOpINSt3__27complexIdEENS_3MatIdEENS_10op_sqrtmatEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4mtOpINSt3__27complexIdEENS_3MatIdEENS_10op_sqrtmatEED2Ev"].apply(null, arguments) };
var __ZN4arma4mtOpIdNS_3MatINSt3__27complexIdEEEENS_7op_realEEC2ERKS5_ = Module["__ZN4arma4mtOpIdNS_3MatINSt3__27complexIdEEEENS_7op_realEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4mtOpIdNS_3MatINSt3__27complexIdEEEENS_7op_realEEC2ERKS5_"].apply(null, arguments) };
var __ZN4arma4mtOpIdNS_3MatINSt3__27complexIdEEEENS_7op_realEED2Ev = Module["__ZN4arma4mtOpIdNS_3MatINSt3__27complexIdEEEENS_7op_realEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4mtOpIdNS_3MatINSt3__27complexIdEEEENS_7op_realEED2Ev"].apply(null, arguments) };
var __ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEC2ERKS4_ = Module["__ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEC2ERKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEC2ERKS4_"].apply(null, arguments) };
var __ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEED2Ev = Module["__ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEED2Ev"].apply(null, arguments) };
var __ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEEC2ERKS4_ = Module["__ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEEC2ERKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEEC2ERKS4_"].apply(null, arguments) };
var __ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEED2Ev = Module["__ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4mtOpIjNS0_IjNS_3RowIjEENS_9op_rel_eqEEENS_14op_find_simpleEED2Ev"].apply(null, arguments) };
var __ZN4arma4mtOpIjNS_3GenINS_3ColIdEENS_9gen_randuEEENS_13op_sort_indexEEC2ERKS5_jj = Module["__ZN4arma4mtOpIjNS_3GenINS_3ColIdEENS_9gen_randuEEENS_13op_sort_indexEEC2ERKS5_jj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4mtOpIjNS_3GenINS_3ColIdEENS_9gen_randuEEENS_13op_sort_indexEEC2ERKS5_jj"].apply(null, arguments) };
var __ZN4arma4mtOpIjNS_3GenINS_3ColIdEENS_9gen_randuEEENS_13op_sort_indexEED2Ev = Module["__ZN4arma4mtOpIjNS_3GenINS_3ColIdEENS_9gen_randuEEENS_13op_sort_indexEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4mtOpIjNS_3GenINS_3ColIdEENS_9gen_randuEEENS_13op_sort_indexEED2Ev"].apply(null, arguments) };
var __ZN4arma4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEC2ERKS2_j = Module["__ZN4arma4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEC2ERKS2_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEEC2ERKS2_j"].apply(null, arguments) };
var __ZN4arma4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEED2Ev = Module["__ZN4arma4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4mtOpIjNS_3RowIjEENS_16op_rel_gteq_postEED2Ev"].apply(null, arguments) };
var __ZN4arma4mtOpIjNS_3RowIjEENS_9op_rel_eqEEC2ERKS2_j = Module["__ZN4arma4mtOpIjNS_3RowIjEENS_9op_rel_eqEEC2ERKS2_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4mtOpIjNS_3RowIjEENS_9op_rel_eqEEC2ERKS2_j"].apply(null, arguments) };
var __ZN4arma4mtOpIjNS_3RowIjEENS_9op_rel_eqEED2Ev = Module["__ZN4arma4mtOpIjNS_3RowIjEENS_9op_rel_eqEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4mtOpIjNS_3RowIjEENS_9op_rel_eqEED2Ev"].apply(null, arguments) };
var __ZN4arma4priv12Datum_helper3infIdEENS_14arma_real_onlyIT_E6resultEPS6_ = Module["__ZN4arma4priv12Datum_helper3infIdEENS_14arma_real_onlyIT_E6resultEPS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4priv12Datum_helper3infIdEENS_14arma_real_onlyIT_E6resultEPS6_"].apply(null, arguments) };
var __ZN4arma4priv12Datum_helper3nanINSt3__27complexIdEEEENS_12arma_cx_onlyIT_E6resultEPS9_ = Module["__ZN4arma4priv12Datum_helper3nanINSt3__27complexIdEEEENS_12arma_cx_onlyIT_E6resultEPS9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4priv12Datum_helper3nanINSt3__27complexIdEEEENS_12arma_cx_onlyIT_E6resultEPS9_"].apply(null, arguments) };
var __ZN4arma4priv12Datum_helper3nanIdEENS_14arma_real_onlyIT_E6resultEPS6_ = Module["__ZN4arma4priv12Datum_helper3nanIdEENS_14arma_real_onlyIT_E6resultEPS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4priv12Datum_helper3nanIdEENS_14arma_real_onlyIT_E6resultEPS6_"].apply(null, arguments) };
var __ZN4arma4priv12Datum_helper3nanIjEENS_18arma_integral_onlyIT_E6resultEPS6_ = Module["__ZN4arma4priv12Datum_helper3nanIjEENS_18arma_integral_onlyIT_E6resultEPS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4priv12Datum_helper3nanIjEENS_18arma_integral_onlyIT_E6resultEPS6_"].apply(null, arguments) };
var __ZN4arma4realINS_3MatINSt3__27complexIdEEEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr5is_cxINS7_9elem_typeEEE3yesEKNS_4mtOpINS7_8pod_typeES7_NS_7op_realEEEE6resultERKS7_ = Module["__ZN4arma4realINS_3MatINSt3__27complexIdEEEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr5is_cxINS7_9elem_typeEEE3yesEKNS_4mtOpINS7_8pod_typeES7_NS_7op_realEEEE6resultERKS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4realINS_3MatINSt3__27complexIdEEEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr5is_cxINS7_9elem_typeEEE3yesEKNS_4mtOpINS7_8pod_typeES7_NS_7op_realEEEE6resultERKS7_"].apply(null, arguments) };
var __ZN4arma4sortINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEcEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr12is_same_typeIT0_cEE5valueEKNS_2OpIS9_NS_15op_sort_defaultEEEE6resultERKS9_PKSA_ = Module["__ZN4arma4sortINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEcEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr12is_same_typeIT0_cEE5valueEKNS_2OpIS9_NS_15op_sort_defaultEEEE6resultERKS9_PKSA_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4sortINS_4mtOpIjNS1_IjNS_3RowIjEENS_16op_rel_gteq_postEEENS_14op_find_simpleEEEcEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr12is_same_typeIT0_cEE5valueEKNS_2OpIS9_NS_15op_sort_defaultEEEE6resultERKS9_PKSA_"].apply(null, arguments) };
var __ZN4arma4swapIdEEvRNS_3MatIT_EES4_ = Module["__ZN4arma4swapIdEEvRNS_3MatIT_EES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma4swapIdEEvRNS_3MatIT_EES4_"].apply(null, arguments) };
var __ZN4arma5ProxyINS_11subview_rowIdEEEC2ERKS2_ = Module["__ZN4arma5ProxyINS_11subview_rowIdEEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma5ProxyINS_11subview_rowIdEEEC2ERKS2_"].apply(null, arguments) };
var __ZN4arma5ProxyINS_3GenINS_3ColIdEENS_9gen_randuEEEEC2ERKS5_ = Module["__ZN4arma5ProxyINS_3GenINS_3ColIdEENS_9gen_randuEEEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma5ProxyINS_3GenINS_3ColIdEENS_9gen_randuEEEEC2ERKS5_"].apply(null, arguments) };
var __ZN4arma5ProxyINS_3GenINS_3ColIdEENS_9gen_randuEEEED2Ev = Module["__ZN4arma5ProxyINS_3GenINS_3ColIdEENS_9gen_randuEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma5ProxyINS_3GenINS_3ColIdEENS_9gen_randuEEEED2Ev"].apply(null, arguments) };
var __ZN4arma5ProxyINS_3MatINSt3__27complexIdEEEEEC2ERKS5_ = Module["__ZN4arma5ProxyINS_3MatINSt3__27complexIdEEEEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma5ProxyINS_3MatINSt3__27complexIdEEEEEC2ERKS5_"].apply(null, arguments) };
var __ZN4arma5ProxyINS_3MatIdEEEC2ERKS2_ = Module["__ZN4arma5ProxyINS_3MatIdEEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma5ProxyINS_3MatIdEEEC2ERKS2_"].apply(null, arguments) };
var __ZN4arma5ProxyINS_3MatIjEEEC2ERKS2_ = Module["__ZN4arma5ProxyINS_3MatIjEEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma5ProxyINS_3MatIjEEEC2ERKS2_"].apply(null, arguments) };
var __ZN4arma5ProxyINS_3RowIdEEEC2ERKS2_ = Module["__ZN4arma5ProxyINS_3RowIdEEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma5ProxyINS_3RowIdEEEC2ERKS2_"].apply(null, arguments) };
var __ZN4arma5ProxyINS_3RowIjEEEC2ERKS2_ = Module["__ZN4arma5ProxyINS_3RowIjEEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma5ProxyINS_3RowIjEEEC2ERKS2_"].apply(null, arguments) };
var __ZN4arma5ProxyINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEC2ERKS5_ = Module["__ZN4arma5ProxyINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma5ProxyINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEC2ERKS5_"].apply(null, arguments) };
var __ZN4arma5ProxyINS_7subviewIdEEEC2ERKS2_ = Module["__ZN4arma5ProxyINS_7subviewIdEEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma5ProxyINS_7subviewIdEEEC2ERKS2_"].apply(null, arguments) };
var __ZN4arma5randiINS_3ColIjEEEET_jRKNS_11distr_paramENS_16arma_empty_classEPKNS_21arma_Mat_Col_Row_onlyIS3_E6resultE = Module["__ZN4arma5randiINS_3ColIjEEEET_jRKNS_11distr_paramENS_16arma_empty_classEPKNS_21arma_Mat_Col_Row_onlyIS3_E6resultE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma5randiINS_3ColIjEEEET_jRKNS_11distr_paramENS_16arma_empty_classEPKNS_21arma_Mat_Col_Row_onlyIS3_E6resultE"].apply(null, arguments) };
var __ZN4arma5randiINS_3ColIjEEEET_jjRKNS_11distr_paramEPKNS_21arma_Mat_Col_Row_onlyIS3_E6resultE = Module["__ZN4arma5randiINS_3ColIjEEEET_jjRKNS_11distr_paramEPKNS_21arma_Mat_Col_Row_onlyIS3_E6resultE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma5randiINS_3ColIjEEEET_jjRKNS_11distr_paramEPKNS_21arma_Mat_Col_Row_onlyIS3_E6resultE"].apply(null, arguments) };
var __ZN4arma6auxlib10eig_sym_dcIdNS_3MatIdEEEEbRNS_3ColIT_EERNS2_IS5_EERKNS_4BaseIS5_T0_EE = Module["__ZN4arma6auxlib10eig_sym_dcIdNS_3MatIdEEEEbRNS_3ColIT_EERNS2_IS5_EERKNS_4BaseIS5_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma6auxlib10eig_sym_dcIdNS_3MatIdEEEEbRNS_3ColIT_EERNS2_IS5_EERKNS_4BaseIS5_T0_EE"].apply(null, arguments) };
var __ZN4arma6auxlib11det_tinymatIdEET_RKNS_3MatIS2_EEj = Module["__ZN4arma6auxlib11det_tinymatIdEET_RKNS_3MatIS2_EEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma6auxlib11det_tinymatIdEET_RKNS_3MatIS2_EEj"].apply(null, arguments) };
var __ZN4arma6auxlib18inv_inplace_lapackIdEEbRNS_3MatIT_EE = Module["__ZN4arma6auxlib18inv_inplace_lapackIdEEbRNS_3MatIT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma6auxlib18inv_inplace_lapackIdEEbRNS_3MatIT_EE"].apply(null, arguments) };
var __ZN4arma6auxlib19inv_noalias_tinymatIdEEbRNS_3MatIT_EERKS4_j = Module["__ZN4arma6auxlib19inv_noalias_tinymatIdEEbRNS_3MatIT_EERKS4_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma6auxlib19inv_noalias_tinymatIdEEbRNS_3MatIT_EERKS4_j"].apply(null, arguments) };
var __ZN4arma6auxlib3invIdEEbRNS_3MatIT_EERKS4_ = Module["__ZN4arma6auxlib3invIdEEbRNS_3MatIT_EERKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma6auxlib3invIdEEbRNS_3MatIT_EERKS4_"].apply(null, arguments) };
var __ZN4arma6auxlib5schurIdEEbRNS_3MatINSt3__27complexIT_EEEES8_b = Module["__ZN4arma6auxlib5schurIdEEbRNS_3MatINSt3__27complexIT_EEEES8_b"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma6auxlib5schurIdEEbRNS_3MatINSt3__27complexIT_EEEES8_b"].apply(null, arguments) };
var __ZN4arma6auxlib7eig_symIdNS_3MatIdEEEEbRNS_3ColIT_EERNS2_IS5_EERKNS_4BaseIS5_T0_EE = Module["__ZN4arma6auxlib7eig_symIdNS_3MatIdEEEEbRNS_3ColIT_EERNS2_IS5_EERKNS_4BaseIS5_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma6auxlib7eig_symIdNS_3MatIdEEEEbRNS_3ColIT_EERNS2_IS5_EERKNS_4BaseIS5_T0_EE"].apply(null, arguments) };
var __ZN4arma6kmeansINS_2OpINS_3MatIdEENS_9op_htransEEEEENS_10enable_if2IXsr7is_realINT_9elem_typeEEE5valueEbE6resultERNS2_IS8_EERKNS_4BaseIS8_S7_EEjRKNS_13gmm_seed_modeEjb = Module["__ZN4arma6kmeansINS_2OpINS_3MatIdEENS_9op_htransEEEEENS_10enable_if2IXsr7is_realINT_9elem_typeEEE5valueEbE6resultERNS2_IS8_EERKNS_4BaseIS8_S7_EEjRKNS_13gmm_seed_modeEjb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma6kmeansINS_2OpINS_3MatIdEENS_9op_htransEEEEENS_10enable_if2IXsr7is_realINT_9elem_typeEEE5valueEbE6resultERNS2_IS8_EERKNS_4BaseIS8_S7_EEjRKNS_13gmm_seed_modeEjb"].apply(null, arguments) };
var __ZN4arma6lapack4syevIdEEvPcS2_PiPT_S3_S5_S5_S3_S3_ = Module["__ZN4arma6lapack4syevIdEEvPcS2_PiPT_S3_S5_S5_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma6lapack4syevIdEEvPcS2_PiPT_S3_S5_S5_S3_S3_"].apply(null, arguments) };
var __ZN4arma6lapack5getrfIdEEvPiS2_PT_S2_S2_S2_ = Module["__ZN4arma6lapack5getrfIdEEvPiS2_PT_S2_S2_S2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma6lapack5getrfIdEEvPiS2_PT_S2_S2_S2_"].apply(null, arguments) };
var __ZN4arma6lapack5getriIdEEvPiPT_S2_S2_S4_S2_S2_ = Module["__ZN4arma6lapack5getriIdEEvPiPT_S2_S2_S4_S2_S2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma6lapack5getriIdEEvPiPT_S2_S2_S4_S2_S2_"].apply(null, arguments) };
var __ZN4arma6lapack5syevdIdEEvPcS2_PiPT_S3_S5_S5_S3_S3_S3_S3_ = Module["__ZN4arma6lapack5syevdIdEEvPcS2_PiPT_S3_S5_S5_S3_S3_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma6lapack5syevdIdEEvPcS2_PiPT_S3_S5_S5_S3_S3_S3_S3_"].apply(null, arguments) };
var __ZN4arma6lapack7cx_geesIdEEvPcS2_PvPiPNSt3__27complexIT_EES4_S4_S9_S9_S4_S9_S4_PS7_S4_S4_ = Module["__ZN4arma6lapack7cx_geesIdEEvPcS2_PvPiPNSt3__27complexIT_EES4_S4_S9_S9_S4_S9_S4_PS7_S4_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma6lapack7cx_geesIdEEvPcS2_PvPiPNSt3__27complexIT_EES4_S4_S9_S9_S4_S9_S4_PS7_S4_S4_"].apply(null, arguments) };
var __ZN4arma6memory7acquireINSt3__27complexIdEEEEPT_j = Module["__ZN4arma6memory7acquireINSt3__27complexIdEEEEPT_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma6memory7acquireINSt3__27complexIdEEEEPT_j"].apply(null, arguments) };
var __ZN4arma6memory7acquireIdEEPT_j = Module["__ZN4arma6memory7acquireIdEEPT_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma6memory7acquireIdEEPT_j"].apply(null, arguments) };
var __ZN4arma6memory7acquireIiEEPT_j = Module["__ZN4arma6memory7acquireIiEEPT_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma6memory7acquireIiEEPT_j"].apply(null, arguments) };
var __ZN4arma6memory7acquireIjEEPT_j = Module["__ZN4arma6memory7acquireIjEEPT_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma6memory7acquireIjEEPT_j"].apply(null, arguments) };
var __ZN4arma6op_inv5applyINS_3MatIdEEEEvRNS2_INT_9elem_typeEEERKNS_2OpIS4_S0_EE = Module["__ZN4arma6op_inv5applyINS_3MatIdEEEEvRNS2_INT_9elem_typeEEERKNS_2OpIS4_S0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma6op_inv5applyINS_3MatIdEEEEvRNS2_INT_9elem_typeEEERKNS_2OpIS4_S0_EE"].apply(null, arguments) };
var __ZN4arma6unwrapINS_2OpINS_3MatIdEENS_9op_htransEEEEC2ERKS5_ = Module["__ZN4arma6unwrapINS_2OpINS_3MatIdEENS_9op_htransEEEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma6unwrapINS_2OpINS_3MatIdEENS_9op_htransEEEEC2ERKS5_"].apply(null, arguments) };
var __ZN4arma6unwrapINS_2OpINS_3MatIdEENS_9op_htransEEEED2Ev = Module["__ZN4arma6unwrapINS_2OpINS_3MatIdEENS_9op_htransEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma6unwrapINS_2OpINS_3MatIdEENS_9op_htransEEEED2Ev"].apply(null, arguments) };
var __ZN4arma6unwrapINS_3MatIdEEEC2ERKS2_ = Module["__ZN4arma6unwrapINS_3MatIdEEEC2ERKS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma6unwrapINS_3MatIdEEEC2ERKS2_"].apply(null, arguments) };
var __ZN4arma7eig_symINS_3MatIdEEEEbRNS_3ColINT_8pod_typeEEERNS1_INS4_9elem_typeEEERKNS_4BaseIS8_S4_EEPKcPKNS_19arma_blas_type_onlyIS8_E6resultE = Module["__ZN4arma7eig_symINS_3MatIdEEEEbRNS_3ColINT_8pod_typeEEERNS1_INS4_9elem_typeEEERKNS_4BaseIS8_S4_EEPKcPKNS_19arma_blas_type_onlyIS8_E6resultE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma7eig_symINS_3MatIdEEEEbRNS_3ColINT_8pod_typeEEERNS1_INS4_9elem_typeEEERKNS_4BaseIS8_S4_EEPKcPKNS_19arma_blas_type_onlyIS8_E6resultE"].apply(null, arguments) };
var __ZN4arma7op_cdot11direct_cdotINSt3__27complexIdEEEET_jPKS5_S7_ = Module["__ZN4arma7op_cdot11direct_cdotINSt3__27complexIdEEEET_jPKS5_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma7op_cdot11direct_cdotINSt3__27complexIdEEEET_jPKS5_S7_"].apply(null, arguments) };
var __ZN4arma7op_cdot16direct_cdot_armaINSt3__27complexIdEEEET_jPKS5_S7_ = Module["__ZN4arma7op_cdot16direct_cdot_armaINSt3__27complexIdEEEET_jPKS5_S7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma7op_cdot16direct_cdot_armaINSt3__27complexIdEEEET_jPKS5_S7_"].apply(null, arguments) };
var __ZN4arma7op_find6helperINS_3RowIjEENS_16op_rel_gteq_postEEEjRNS_3MatIjEERKNS_4mtOpIjT_T0_EENS_16arma_op_rel_onlyISA_E6resultENS_11arma_not_cxINS9_9elem_typeEE6resultE = Module["__ZN4arma7op_find6helperINS_3RowIjEENS_16op_rel_gteq_postEEEjRNS_3MatIjEERKNS_4mtOpIjT_T0_EENS_16arma_op_rel_onlyISA_E6resultENS_11arma_not_cxINS9_9elem_typeEE6resultE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma7op_find6helperINS_3RowIjEENS_16op_rel_gteq_postEEEjRNS_3MatIjEERKNS_4mtOpIjT_T0_EENS_16arma_op_rel_onlyISA_E6resultENS_11arma_not_cxINS9_9elem_typeEE6resultE"].apply(null, arguments) };
var __ZN4arma7op_find6helperINS_3RowIjEENS_9op_rel_eqEEEjRNS_3MatIjEERKNS_4mtOpIjT_T0_EENS_16arma_op_rel_onlyISA_E6resultENS_11arma_not_cxINS9_9elem_typeEE6resultE = Module["__ZN4arma7op_find6helperINS_3RowIjEENS_9op_rel_eqEEEjRNS_3MatIjEERKNS_4mtOpIjT_T0_EENS_16arma_op_rel_onlyISA_E6resultENS_11arma_not_cxINS9_9elem_typeEE6resultE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma7op_find6helperINS_3RowIjEENS_9op_rel_eqEEEjRNS_3MatIjEERKNS_4mtOpIjT_T0_EENS_16arma_op_rel_onlyISA_E6resultENS_11arma_not_cxINS9_9elem_typeEE6resultE"].apply(null, arguments) };
var __ZN4arma7op_real5applyINS_3MatINSt3__27complexIdEEEEEEvRNS2_INT_8pod_typeEEERKNS_4mtOpIS8_S7_S0_EE = Module["__ZN4arma7op_real5applyINS_3MatINSt3__27complexIdEEEEEEvRNS2_INT_8pod_typeEEERKNS_4mtOpIS8_S7_S0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma7op_real5applyINS_3MatINSt3__27complexIdEEEEEEvRNS2_INT_8pod_typeEEERKNS_4mtOpIS8_S7_S0_EE"].apply(null, arguments) };
var __ZN4arma7op_sort11direct_sortIjEEvPT_jj = Module["__ZN4arma7op_sort11direct_sortIjEEvPT_jj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma7op_sort11direct_sortIjEEvPT_jj"].apply(null, arguments) };
var __ZN4arma7op_sort13apply_noaliasIjEEvRNS_3MatIT_EERKS4_jj = Module["__ZN4arma7op_sort13apply_noaliasIjEEvRNS_3MatIT_EERKS4_jj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma7op_sort13apply_noaliasIjEEvRNS_3MatIT_EERKS4_jj"].apply(null, arguments) };
var __ZN4arma7op_sort8copy_rowIjEEvPT_RKNS_3MatIS2_EEj = Module["__ZN4arma7op_sort8copy_rowIjEEvPT_RKNS_3MatIS2_EEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma7op_sort8copy_rowIjEEvPT_RKNS_3MatIS2_EEj"].apply(null, arguments) };
var __ZN4arma7op_sort8copy_rowIjEEvRNS_3MatIT_EEPKS3_j = Module["__ZN4arma7op_sort8copy_rowIjEEvRNS_3MatIT_EEPKS3_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma7op_sort8copy_rowIjEEvRNS_3MatIT_EEPKS3_j"].apply(null, arguments) };
var __ZN4arma7subviewIdE10inplace_opINS_15op_internal_equEEEvRKS1_PKc = Module["__ZN4arma7subviewIdE10inplace_opINS_15op_internal_equEEEvRKS1_PKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma7subviewIdE10inplace_opINS_15op_internal_equEEEvRKS1_PKc"].apply(null, arguments) };
var __ZN4arma7subviewIdE10inplace_opINS_15op_internal_equENS_3MatIdEEEEvRKNS_4BaseIdT0_EEPKc = Module["__ZN4arma7subviewIdE10inplace_opINS_15op_internal_equENS_3MatIdEEEEvRKNS_4BaseIdT0_EEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma7subviewIdE10inplace_opINS_15op_internal_equENS_3MatIdEEEEvRKNS_4BaseIdT0_EEPKc"].apply(null, arguments) };
var __ZN4arma7subviewIdE10inplace_opINS_15op_internal_equENS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEEvRKNS_4BaseIdT0_EEPKc = Module["__ZN4arma7subviewIdE10inplace_opINS_15op_internal_equENS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEEvRKNS_4BaseIdT0_EEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma7subviewIdE10inplace_opINS_15op_internal_equENS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEEvRKNS_4BaseIdT0_EEPKc"].apply(null, arguments) };
var __ZN4arma7subviewIdE7extractERNS_3MatIdEERKS1_ = Module["__ZN4arma7subviewIdE7extractERNS_3MatIdEERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma7subviewIdE7extractERNS_3MatIdEERKS1_"].apply(null, arguments) };
var __ZN4arma7subviewIdED2Ev = Module["__ZN4arma7subviewIdED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma7subviewIdED2Ev"].apply(null, arguments) };
var __ZN4arma7subviewIdEaSERKS1_ = Module["__ZN4arma7subviewIdEaSERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma7subviewIdEaSERKS1_"].apply(null, arguments) };
var __ZN4arma7subviewIdEaSINS_3MatIdEEEEvRKNS_4BaseIdT_EE = Module["__ZN4arma7subviewIdEaSINS_3MatIdEEEEvRKNS_4BaseIdT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma7subviewIdEaSINS_3MatIdEEEEvRKNS_4BaseIdT_EE"].apply(null, arguments) };
var __ZN4arma7subviewIdEaSINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEEvRKNS_4BaseIdT_EE = Module["__ZN4arma7subviewIdEaSINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEEvRKNS_4BaseIdT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma7subviewIdEaSINS_3eOpINS_11subview_rowIdEENS_19eop_scalar_div_postEEEEEvRKNS_4BaseIdT_EE"].apply(null, arguments) };
var __ZN4arma7subviewIjE7extractERNS_3MatIjEERKS1_ = Module["__ZN4arma7subviewIjE7extractERNS_3MatIjEERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma7subviewIjE7extractERNS_3MatIjEERKS1_"].apply(null, arguments) };
var __ZN4arma7subviewIjED2Ev = Module["__ZN4arma7subviewIjED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma7subviewIjED2Ev"].apply(null, arguments) };
var __ZN4arma8arma_rng5randiIjE4fillEPjjii = Module["__ZN4arma8arma_rng5randiIjE4fillEPjjii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8arma_rng5randiIjE4fillEPjjii"].apply(null, arguments) };
var __ZN4arma8arma_rng5randiIjE7max_valEv = Module["__ZN4arma8arma_rng5randiIjE7max_valEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8arma_rng5randiIjE7max_valEv"].apply(null, arguments) };
var __ZN4arma8arma_rng5randuIdE4fillEPdj = Module["__ZN4arma8arma_rng5randuIdE4fillEPdj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8arma_rng5randuIdE4fillEPdj"].apply(null, arguments) };
var __ZN4arma8arma_strL11str_wrapperIcEEPKT_S4_PKNS0_9char_onlyIS2_E6resultE = Module["__ZN4arma8arma_strL11str_wrapperIcEEPKT_S4_PKNS0_9char_onlyIS2_E6resultE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8arma_strL11str_wrapperIcEEPKT_S4_PKNS0_9char_onlyIS2_E6resultE"].apply(null, arguments) };
var __ZN4arma8arrayops10accumulateIdEET_PKS2_j = Module["__ZN4arma8arrayops10accumulateIdEET_PKS2_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8arrayops10accumulateIdEET_PKS2_j"].apply(null, arguments) };
var __ZN4arma8arrayops10copy_smallIdEEvPT_PKS2_j = Module["__ZN4arma8arrayops10copy_smallIdEEvPT_PKS2_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8arrayops10copy_smallIdEEvPT_PKS2_j"].apply(null, arguments) };
var __ZN4arma8arrayops10copy_smallIjEEvPT_PKS2_j = Module["__ZN4arma8arrayops10copy_smallIjEEvPT_PKS2_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8arrayops10copy_smallIjEEvPT_PKS2_j"].apply(null, arguments) };
var __ZN4arma8arrayops10fill_zerosINSt3__27complexIdEEEEvPT_j = Module["__ZN4arma8arrayops10fill_zerosINSt3__27complexIdEEEEvPT_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8arrayops10fill_zerosINSt3__27complexIdEEEEvPT_j"].apply(null, arguments) };
var __ZN4arma8arrayops10fill_zerosIdEEvPT_j = Module["__ZN4arma8arrayops10fill_zerosIdEEvPT_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8arrayops10fill_zerosIdEEvPT_j"].apply(null, arguments) };
var __ZN4arma8arrayops10fill_zerosIjEEvPT_j = Module["__ZN4arma8arrayops10fill_zerosIjEEvPT_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8arrayops10fill_zerosIjEEvPT_j"].apply(null, arguments) };
var __ZN4arma8arrayops11inplace_setINSt3__27complexIdEEEEvPT_S5_j = Module["__ZN4arma8arrayops11inplace_setINSt3__27complexIdEEEEvPT_S5_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8arrayops11inplace_setINSt3__27complexIdEEEEvPT_S5_j"].apply(null, arguments) };
var __ZN4arma8arrayops11inplace_setIdEEvPT_S2_j = Module["__ZN4arma8arrayops11inplace_setIdEEvPT_S2_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8arrayops11inplace_setIdEEvPT_S2_j"].apply(null, arguments) };
var __ZN4arma8arrayops11inplace_setIjEEvPT_S2_j = Module["__ZN4arma8arrayops11inplace_setIjEEvPT_S2_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8arrayops11inplace_setIjEEvPT_S2_j"].apply(null, arguments) };
var __ZN4arma8arrayops16inplace_set_baseINSt3__27complexIdEEEEvPT_S5_j = Module["__ZN4arma8arrayops16inplace_set_baseINSt3__27complexIdEEEEvPT_S5_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8arrayops16inplace_set_baseINSt3__27complexIdEEEEvPT_S5_j"].apply(null, arguments) };
var __ZN4arma8arrayops16inplace_set_baseIdEEvPT_S2_j = Module["__ZN4arma8arrayops16inplace_set_baseIdEEvPT_S2_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8arrayops16inplace_set_baseIdEEvPT_S2_j"].apply(null, arguments) };
var __ZN4arma8arrayops16inplace_set_baseIjEEvPT_S2_j = Module["__ZN4arma8arrayops16inplace_set_baseIjEEvPT_S2_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8arrayops16inplace_set_baseIjEEvPT_S2_j"].apply(null, arguments) };
var __ZN4arma8arrayops17inplace_set_smallINSt3__27complexIdEEEEvPT_S5_j = Module["__ZN4arma8arrayops17inplace_set_smallINSt3__27complexIdEEEEvPT_S5_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8arrayops17inplace_set_smallINSt3__27complexIdEEEEvPT_S5_j"].apply(null, arguments) };
var __ZN4arma8arrayops17inplace_set_smallIdEEvPT_S2_j = Module["__ZN4arma8arrayops17inplace_set_smallIdEEvPT_S2_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8arrayops17inplace_set_smallIdEEvPT_S2_j"].apply(null, arguments) };
var __ZN4arma8arrayops17inplace_set_smallIjEEvPT_S2_j = Module["__ZN4arma8arrayops17inplace_set_smallIjEEvPT_S2_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8arrayops17inplace_set_smallIjEEvPT_S2_j"].apply(null, arguments) };
var __ZN4arma8arrayops7has_nanIjEEbPKT_j = Module["__ZN4arma8arrayops7has_nanIjEEbPKT_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8arrayops7has_nanIjEEbPKT_j"].apply(null, arguments) };
var __ZN4arma8arrayops9is_finiteIdEEbPKT_j = Module["__ZN4arma8arrayops9is_finiteIdEEbPKT_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8arrayops9is_finiteIdEEbPKT_j"].apply(null, arguments) };
var __ZN4arma8eop_coreINS_19eop_scalar_div_postEE5applyINS_3MatIdEENS_11subview_rowIdEEEEvRT_RKNS_3eOpIT0_S1_EE = Module["__ZN4arma8eop_coreINS_19eop_scalar_div_postEE5applyINS_3MatIdEENS_11subview_rowIdEEEEvRT_RKNS_3eOpIT0_S1_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8eop_coreINS_19eop_scalar_div_postEE5applyINS_3MatIdEENS_11subview_rowIdEEEEvRT_RKNS_3eOpIT0_S1_EE"].apply(null, arguments) };
var __ZN4arma8eop_coreINS_7eop_logEE5applyINS_3MatIdEENS_3RowIdEEEEvRT_RKNS_3eOpIT0_S1_EE = Module["__ZN4arma8eop_coreINS_7eop_logEE5applyINS_3MatIdEENS_3RowIdEEEEvRT_RKNS_3eOpIT0_S1_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8eop_coreINS_7eop_logEE5applyINS_3MatIdEENS_3RowIdEEEEvRT_RKNS_3eOpIT0_S1_EE"].apply(null, arguments) };
var __ZN4arma8eop_coreINS_7eop_powEE5applyINS_3MatIdEENS_7subviewIdEEEEvRT_RKNS_3eOpIT0_S1_EE = Module["__ZN4arma8eop_coreINS_7eop_powEE5applyINS_3MatIdEENS_7subviewIdEEEEvRT_RKNS_3eOpIT0_S1_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8eop_coreINS_7eop_powEE5applyINS_3MatIdEENS_7subviewIdEEEEvRT_RKNS_3eOpIT0_S1_EE"].apply(null, arguments) };
var __ZN4arma8gmm_priv19running_mean_scalarIdE5resetEv = Module["__ZN4arma8gmm_priv19running_mean_scalarIdE5resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8gmm_priv19running_mean_scalarIdE5resetEv"].apply(null, arguments) };
var __ZN4arma8gmm_priv19running_mean_scalarIdEC2Ev = Module["__ZN4arma8gmm_priv19running_mean_scalarIdEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8gmm_priv19running_mean_scalarIdEC2Ev"].apply(null, arguments) };
var __ZN4arma8gmm_priv19running_mean_scalarIdEclEd = Module["__ZN4arma8gmm_priv19running_mean_scalarIdEclEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8gmm_priv19running_mean_scalarIdEclEd"].apply(null, arguments) };
var __ZN4arma8gmm_priv8gmm_diagIdE10km_iterateILj1EEEbRKNS_3MatIdEEjbPKc = Module["__ZN4arma8gmm_priv8gmm_diagIdE10km_iterateILj1EEEbRKNS_3MatIdEEjbPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8gmm_priv8gmm_diagIdE10km_iterateILj1EEEbRKNS_3MatIdEEjbPKc"].apply(null, arguments) };
var __ZN4arma8gmm_priv8gmm_diagIdE14init_constantsEv = Module["__ZN4arma8gmm_priv8gmm_diagIdE14init_constantsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8gmm_priv8gmm_diagIdE14init_constantsEv"].apply(null, arguments) };
var __ZN4arma8gmm_priv8gmm_diagIdE14kmeans_wrapperINS_2OpINS_3MatIdEENS_9op_htransEEEEEbRS6_RKNS_4BaseIdT_EEjRKNS_13gmm_seed_modeEjb = Module["__ZN4arma8gmm_priv8gmm_diagIdE14kmeans_wrapperINS_2OpINS_3MatIdEENS_9op_htransEEEEEbRS6_RKNS_4BaseIdT_EEjRKNS_13gmm_seed_modeEjb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8gmm_priv8gmm_diagIdE14kmeans_wrapperINS_2OpINS_3MatIdEENS_9op_htransEEEEEbRS6_RKNS_4BaseIdT_EEjRKNS_13gmm_seed_modeEjb"].apply(null, arguments) };
var __ZN4arma8gmm_priv8gmm_diagIdE22generate_initial_meansILj1EEEvRKNS_3MatIdEERKNS_13gmm_seed_modeE = Module["__ZN4arma8gmm_priv8gmm_diagIdE22generate_initial_meansILj1EEEvRKNS_3MatIdEERKNS_13gmm_seed_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8gmm_priv8gmm_diagIdE22generate_initial_meansILj1EEEvRKNS_3MatIdEERKNS_13gmm_seed_modeE"].apply(null, arguments) };
var __ZN4arma8gmm_priv8gmm_diagIdE4initEjj = Module["__ZN4arma8gmm_priv8gmm_diagIdE4initEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8gmm_priv8gmm_diagIdE4initEjj"].apply(null, arguments) };
var __ZN4arma8gmm_priv8gmm_diagIdE5resetEv = Module["__ZN4arma8gmm_priv8gmm_diagIdE5resetEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8gmm_priv8gmm_diagIdE5resetEv"].apply(null, arguments) };
var __ZN4arma8gmm_priv8gmm_diagIdEC2Ev = Module["__ZN4arma8gmm_priv8gmm_diagIdEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8gmm_priv8gmm_diagIdEC2Ev"].apply(null, arguments) };
var __ZN4arma8gmm_priv8gmm_diagIdED2Ev = Module["__ZN4arma8gmm_priv8gmm_diagIdED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8gmm_priv8gmm_diagIdED2Ev"].apply(null, arguments) };
var __ZN4arma8herk_vecILb0ELb0ELb0EE5applyIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_ = Module["__ZN4arma8herk_vecILb0ELb0ELb0EE5applyIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8herk_vecILb0ELb0ELb0EE5applyIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_"].apply(null, arguments) };
var __ZN4arma8linspaceINS_3ColIjEEEENS_10enable_if2IXsr6is_MatIT_EE5valueES4_E6resultENS4_8pod_typeES7_j = Module["__ZN4arma8linspaceINS_3ColIjEEEENS_10enable_if2IXsr6is_MatIT_EE5valueES4_E6resultENS4_8pod_typeES7_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8linspaceINS_3ColIjEEEENS_10enable_if2IXsr6is_MatIT_EE5valueES4_E6resultENS4_8pod_typeES7_j"].apply(null, arguments) };
var __ZN4arma8podarrayINSt3__27complexIdEEE9init_coldEj = Module["__ZN4arma8podarrayINSt3__27complexIdEEE9init_coldEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8podarrayINSt3__27complexIdEEE9init_coldEj"].apply(null, arguments) };
var __ZN4arma8podarrayINSt3__27complexIdEEED2Ev = Module["__ZN4arma8podarrayINSt3__27complexIdEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8podarrayINSt3__27complexIdEEED2Ev"].apply(null, arguments) };
var __ZN4arma8podarrayIdE9init_coldEj = Module["__ZN4arma8podarrayIdE9init_coldEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8podarrayIdE9init_coldEj"].apply(null, arguments) };
var __ZN4arma8podarrayIdED2Ev = Module["__ZN4arma8podarrayIdED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8podarrayIdED2Ev"].apply(null, arguments) };
var __ZN4arma8podarrayIiE9init_coldEj = Module["__ZN4arma8podarrayIiE9init_coldEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8podarrayIiE9init_coldEj"].apply(null, arguments) };
var __ZN4arma8podarrayIiED2Ev = Module["__ZN4arma8podarrayIiED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8podarrayIiED2Ev"].apply(null, arguments) };
var __ZN4arma8podarrayIjE9init_coldEj = Module["__ZN4arma8podarrayIjE9init_coldEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8podarrayIjE9init_coldEj"].apply(null, arguments) };
var __ZN4arma8podarrayIjED2Ev = Module["__ZN4arma8podarrayIjED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma8podarrayIjED2Ev"].apply(null, arguments) };
var __ZN4arma9as_scalarINS_3MatIjEEEENT_9elem_typeERKNS_4BaseIS4_S3_EE = Module["__ZN4arma9as_scalarINS_3MatIjEEEENT_9elem_typeERKNS_4BaseIS4_S3_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma9as_scalarINS_3MatIjEEEENT_9elem_typeERKNS_4BaseIS4_S3_EE"].apply(null, arguments) };
var __ZN4arma9herk_emulILb0ELb0ELb0EE5applyIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_ = Module["__ZN4arma9herk_emulILb0ELb0ELb0EE5applyIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma9herk_emulILb0ELb0ELb0EE5applyIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_"].apply(null, arguments) };
var __ZN4arma9herk_emulILb1ELb0ELb0EE5applyIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_ = Module["__ZN4arma9herk_emulILb1ELb0ELb0EE5applyIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma9herk_emulILb1ELb0ELb0EE5applyIdNS_3MatINSt3__27complexIdEEEEEEvRNS3_INS5_IT_EEEERKT0_S8_S8_"].apply(null, arguments) };
var __ZN4arma9op_htrans17apply_mat_noaliasINSt3__27complexIdEEEEvRNS_3MatIT_EERKS7_PKNS_12arma_cx_onlyIS6_E6resultE = Module["__ZN4arma9op_htrans17apply_mat_noaliasINSt3__27complexIdEEEEvRNS_3MatIT_EERKS7_PKNS_12arma_cx_onlyIS6_E6resultE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma9op_htrans17apply_mat_noaliasINSt3__27complexIdEEEEvRNS_3MatIT_EERKS7_PKNS_12arma_cx_onlyIS6_E6resultE"].apply(null, arguments) };
var __ZN4arma9op_htrans5applyINS_3MatIdEEEEvRNS2_INT_9elem_typeEEERKNS_2OpIS4_S0_EEPKNS_11arma_not_cxIS5_E6resultE = Module["__ZN4arma9op_htrans5applyINS_3MatIdEEEEvRNS2_INT_9elem_typeEEERKNS_2OpIS4_S0_EEPKNS_11arma_not_cxIS5_E6resultE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma9op_htrans5applyINS_3MatIdEEEEvRNS2_INT_9elem_typeEEERKNS_2OpIS4_S0_EEPKNS_11arma_not_cxIS5_E6resultE"].apply(null, arguments) };
var __ZN4arma9op_strans11apply_proxyINS_3MatIdEEEEvRNS2_INT_9elem_typeEEERKS4_ = Module["__ZN4arma9op_strans11apply_proxyINS_3MatIdEEEEvRNS2_INT_9elem_typeEEERKS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma9op_strans11apply_proxyINS_3MatIdEEEEvRNS2_INT_9elem_typeEEERKS4_"].apply(null, arguments) };
var __ZN4arma9op_strans17apply_mat_inplaceIdEEvRNS_3MatIT_EE = Module["__ZN4arma9op_strans17apply_mat_inplaceIdEEvRNS_3MatIT_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma9op_strans17apply_mat_inplaceIdEEvRNS_3MatIT_EE"].apply(null, arguments) };
var __ZN4arma9op_strans17apply_mat_noaliasIdNS_3MatIdEEEEvRNS2_IT_EERKT0_ = Module["__ZN4arma9op_strans17apply_mat_noaliasIdNS_3MatIdEEEEvRNS2_IT_EERKT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma9op_strans17apply_mat_noaliasIdNS_3MatIdEEEEvRNS2_IT_EERKT0_"].apply(null, arguments) };
var __ZN4arma9op_strans24apply_mat_noalias_tinysqINSt3__27complexIdEENS_3MatIS4_EEEEvRNS5_IT_EERKT0_ = Module["__ZN4arma9op_strans24apply_mat_noalias_tinysqINSt3__27complexIdEENS_3MatIS4_EEEEvRNS5_IT_EERKT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma9op_strans24apply_mat_noalias_tinysqINSt3__27complexIdEENS_3MatIS4_EEEEvRNS5_IT_EERKT0_"].apply(null, arguments) };
var __ZN4arma9op_strans24apply_mat_noalias_tinysqIdNS_3MatIdEEEEvRNS2_IT_EERKT0_ = Module["__ZN4arma9op_strans24apply_mat_noalias_tinysqIdNS_3MatIdEEEEvRNS2_IT_EERKT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma9op_strans24apply_mat_noalias_tinysqIdNS_3MatIdEEEEvRNS2_IT_EERKT0_"].apply(null, arguments) };
var __ZN4arma9op_strans9apply_matIdNS_3MatIdEEEEvRNS2_IT_EERKT0_ = Module["__ZN4arma9op_strans9apply_matIdNS_3MatIdEEEEvRNS2_IT_EERKT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4arma9op_strans9apply_matIdNS_3MatIdEEEEvRNS2_IT_EERKT0_"].apply(null, arguments) };
var __ZN4armaL19arma_stop_bad_allocIA39_cEEvRKT_ = Module["__ZN4armaL19arma_stop_bad_allocIA39_cEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4armaL19arma_stop_bad_allocIA39_cEEvRKT_"].apply(null, arguments) };
var __ZN4armaL21arma_stop_logic_errorINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEvRKT_ = Module["__ZN4armaL21arma_stop_logic_errorINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4armaL21arma_stop_logic_errorINSt3__212basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEvRKT_"].apply(null, arguments) };
var __ZN4armaL21arma_stop_logic_errorIPKcEEvRKT_ = Module["__ZN4armaL21arma_stop_logic_errorIPKcEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4armaL21arma_stop_logic_errorIPKcEEvRKT_"].apply(null, arguments) };
var __ZN4armaL23arma_stop_runtime_errorIA29_cEEvRKT_ = Module["__ZN4armaL23arma_stop_runtime_errorIA29_cEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4armaL23arma_stop_runtime_errorIA29_cEEvRKT_"].apply(null, arguments) };
var __ZN4armaL23arma_stop_runtime_errorIA91_cEEvRKT_ = Module["__ZN4armaL23arma_stop_runtime_errorIA91_cEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4armaL23arma_stop_runtime_errorIA91_cEEvRKT_"].apply(null, arguments) };
var __ZN4armaL25arma_incompat_size_stringEjjjjPKc = Module["__ZN4armaL25arma_incompat_size_stringEjjjjPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4armaL25arma_incompat_size_stringEjjjjPKc"].apply(null, arguments) };
var __ZN4armaL9arma_warnIA28_cEEvRKT_ = Module["__ZN4armaL9arma_warnIA28_cEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4armaL9arma_warnIA28_cEEvRKT_"].apply(null, arguments) };
var __ZN4armaL9arma_warnIA32_cEEvRKT_ = Module["__ZN4armaL9arma_warnIA32_cEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4armaL9arma_warnIA32_cEEvRKT_"].apply(null, arguments) };
var __ZN4armaL9arma_warnIA34_cEEvRKT_ = Module["__ZN4armaL9arma_warnIA34_cEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4armaL9arma_warnIA34_cEEvRKT_"].apply(null, arguments) };
var __ZN4armaL9arma_warnIA45_cEEvRKT_ = Module["__ZN4armaL9arma_warnIA45_cEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4armaL9arma_warnIA45_cEEvRKT_"].apply(null, arguments) };
var __ZN4armaL9arma_warnIA49_cEEvRKT_ = Module["__ZN4armaL9arma_warnIA49_cEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4armaL9arma_warnIA49_cEEvRKT_"].apply(null, arguments) };
var __ZN4armaL9arma_warnIA57_cEEvRKT_ = Module["__ZN4armaL9arma_warnIA57_cEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4armaL9arma_warnIA57_cEEvRKT_"].apply(null, arguments) };
var __ZN4armaL9arma_warnIA67_cEEvRKT_ = Module["__ZN4armaL9arma_warnIA67_cEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4armaL9arma_warnIA67_cEEvRKT_"].apply(null, arguments) };
var __ZN4armaL9arma_warnIA74_cEEvRKT_ = Module["__ZN4armaL9arma_warnIA74_cEEvRKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4armaL9arma_warnIA74_cEEvRKT_"].apply(null, arguments) };
var __ZN4armaeqERKNS_13gmm_seed_modeES2_ = Module["__ZN4armaeqERKNS_13gmm_seed_modeES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4armaeqERKNS_13gmm_seed_modeES2_"].apply(null, arguments) };
var __ZN4armaeqINS_3RowIjEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueEKNS_4mtOpIjS4_NS_9op_rel_eqEEEE6resultERKS4_NS4_9elem_typeE = Module["__ZN4armaeqINS_3RowIjEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueEKNS_4mtOpIjS4_NS_9op_rel_eqEEEE6resultERKS4_NS4_9elem_typeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4armaeqINS_3RowIjEEEENS_10enable_if2IXsr12is_arma_typeIT_EE5valueEKNS_4mtOpIjS4_NS_9op_rel_eqEEEE6resultERKS4_NS4_9elem_typeE"].apply(null, arguments) };
var __ZN4armageINS_3RowIjEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr5is_cxINS4_9elem_typeEEE2noEKNS_4mtOpIjS4_NS_16op_rel_gteq_postEEEE6resultERKS4_S5_ = Module["__ZN4armageINS_3RowIjEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr5is_cxINS4_9elem_typeEEE2noEKNS_4mtOpIjS4_NS_16op_rel_gteq_postEEEE6resultERKS4_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4armageINS_3RowIjEEEENS_10enable_if2IXaasr12is_arma_typeIT_EE5valuesr5is_cxINS4_9elem_typeEEE2noEKNS_4mtOpIjS4_NS_16op_rel_gteq_postEEEE6resultERKS4_S5_"].apply(null, arguments) };
var __ZN4armalsIdNS_3MatIdEEEERNSt3__213basic_ostreamIcNS3_11char_traitsIcEEEES8_RKNS_4BaseIT_T0_EE = Module["__ZN4armalsIdNS_3MatIdEEEERNSt3__213basic_ostreamIcNS3_11char_traitsIcEEEES8_RKNS_4BaseIT_T0_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN4armalsIdNS_3MatIdEEEERNSt3__213basic_ostreamIcNS3_11char_traitsIcEEEES8_RKNS_4BaseIT_T0_EE"].apply(null, arguments) };
var __ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev = Module["__ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN53EmscriptenBindingInitializer_native_and_builtin_typesC2Ev"].apply(null, arguments) };
var __ZN54detection_objectDetector1_spectralClusterer_similarity4initEv = Module["__ZN54detection_objectDetector1_spectralClusterer_similarity4initEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN54detection_objectDetector1_spectralClusterer_similarity4initEv"].apply(null, arguments) };
var __ZN54detection_objectDetector1_spectralClusterer_similarity7executeEv = Module["__ZN54detection_objectDetector1_spectralClusterer_similarity7executeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN54detection_objectDetector1_spectralClusterer_similarity7executeEv"].apply(null, arguments) };
var __ZN54detection_objectDetector1_spectralClusterer_similarityC2Ev = Module["__ZN54detection_objectDetector1_spectralClusterer_similarityC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN54detection_objectDetector1_spectralClusterer_similarityC2Ev"].apply(null, arguments) };
var __ZN54detection_objectDetector1_spectralClusterer_similarityD2Ev = Module["__ZN54detection_objectDetector1_spectralClusterer_similarityD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN54detection_objectDetector1_spectralClusterer_similarityD2Ev"].apply(null, arguments) };
var __ZN55detection_objectDetector1_spectralClusterer_eigenSolver4initEv = Module["__ZN55detection_objectDetector1_spectralClusterer_eigenSolver4initEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN55detection_objectDetector1_spectralClusterer_eigenSolver4initEv"].apply(null, arguments) };
var __ZN55detection_objectDetector1_spectralClusterer_eigenSolver7executeEv = Module["__ZN55detection_objectDetector1_spectralClusterer_eigenSolver7executeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN55detection_objectDetector1_spectralClusterer_eigenSolver7executeEv"].apply(null, arguments) };
var __ZN55detection_objectDetector1_spectralClusterer_eigenSolverC2Ev = Module["__ZN55detection_objectDetector1_spectralClusterer_eigenSolverC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN55detection_objectDetector1_spectralClusterer_eigenSolverC2Ev"].apply(null, arguments) };
var __ZN55detection_objectDetector1_spectralClusterer_eigenSolverD2Ev = Module["__ZN55detection_objectDetector1_spectralClusterer_eigenSolverD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN55detection_objectDetector1_spectralClusterer_eigenSolverD2Ev"].apply(null, arguments) };
var __ZN60detection_objectDetector1_spectralClusterer_kMeansClustering4initEv = Module["__ZN60detection_objectDetector1_spectralClusterer_kMeansClustering4initEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN60detection_objectDetector1_spectralClusterer_kMeansClustering4initEv"].apply(null, arguments) };
var __ZN60detection_objectDetector1_spectralClusterer_kMeansClustering7executeEv = Module["__ZN60detection_objectDetector1_spectralClusterer_kMeansClustering7executeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN60detection_objectDetector1_spectralClusterer_kMeansClustering7executeEv"].apply(null, arguments) };
var __ZN60detection_objectDetector1_spectralClusterer_kMeansClusteringC2Ev = Module["__ZN60detection_objectDetector1_spectralClusterer_kMeansClusteringC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN60detection_objectDetector1_spectralClusterer_kMeansClusteringC2Ev"].apply(null, arguments) };
var __ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacian4initEv = Module["__ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacian4initEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacian4initEv"].apply(null, arguments) };
var __ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacian7executeEv = Module["__ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacian7executeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacian7executeEv"].apply(null, arguments) };
var __ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacianC2Ev = Module["__ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacianC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacianC2Ev"].apply(null, arguments) };
var __ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacianD2Ev = Module["__ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacianD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN63detection_objectDetector1_spectralClusterer_normalizedLaplacianD2Ev"].apply(null, arguments) };
var __ZN7HelperA10getSqrtMatEN4arma3MatIdEE = Module["__ZN7HelperA10getSqrtMatEN4arma3MatIdEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN7HelperA10getSqrtMatEN4arma3MatIdEE"].apply(null, arguments) };
var __ZN7HelperA15getEigenVectorsEN4arma3MatIdEE = Module["__ZN7HelperA15getEigenVectorsEN4arma3MatIdEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN7HelperA15getEigenVectorsEN4arma3MatIdEE"].apply(null, arguments) };
var __ZN7HelperA17getKMeansClustersEN4arma3MatIdEEi = Module["__ZN7HelperA17getKMeansClustersEN4arma3MatIdEEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN7HelperA17getKMeansClustersEN4arma3MatIdEEi"].apply(null, arguments) };
var __ZN7HelperA20getEuclideanDistanceEN4arma3MatIdEEiS2_i = Module["__ZN7HelperA20getEuclideanDistanceEN4arma3MatIdEEiS2_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN7HelperA20getEuclideanDistanceEN4arma3MatIdEEiS2_i"].apply(null, arguments) };
var __ZN7HelperA26getKMeansClustersIndexDataEN4arma3MatIdEES2_ = Module["__ZN7HelperA26getKMeansClustersIndexDataEN4arma3MatIdEES2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN7HelperA26getKMeansClustersIndexDataEN4arma3MatIdEES2_"].apply(null, arguments) };
var __ZN7HelperA27getIndexForClusterCentroidsEN4arma3MatIdEEiS2_ = Module["__ZN7HelperA27getIndexForClusterCentroidsEN4arma3MatIdEEiS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZN7HelperA27getIndexForClusterCentroidsEN4arma3MatIdEEiS2_"].apply(null, arguments) };
var __ZNK10__cxxabiv116__shim_type_info5noop1Ev = Module["__ZNK10__cxxabiv116__shim_type_info5noop1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv116__shim_type_info5noop1Ev"].apply(null, arguments) };
var __ZNK10__cxxabiv116__shim_type_info5noop2Ev = Module["__ZNK10__cxxabiv116__shim_type_info5noop2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv116__shim_type_info5noop2Ev"].apply(null, arguments) };
var __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = Module["__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"].apply(null, arguments) };
var __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = Module["__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"].apply(null, arguments) };
var __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi = Module["__ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi"].apply(null, arguments) };
var __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = Module["__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"].apply(null, arguments) };
var __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i = Module["__ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i"].apply(null, arguments) };
var __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi = Module["__ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi"].apply(null, arguments) };
var __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv = Module["__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv"].apply(null, arguments) };
var __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = Module["__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"].apply(null, arguments) };
var __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = Module["__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"].apply(null, arguments) };
var __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = Module["__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"].apply(null, arguments) };
var __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = Module["__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"].apply(null, arguments) };
var __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = Module["__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"].apply(null, arguments) };
var __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = Module["__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"].apply(null, arguments) };
var __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib = Module["__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"].apply(null, arguments) };
var __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib = Module["__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"].apply(null, arguments) };
var __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi = Module["__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi"].apply(null, arguments) };
var __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv = Module["__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv"].apply(null, arguments) };
var __ZNK10emscripten3val2asIdJEEET_DpT0_ = Module["__ZNK10emscripten3val2asIdJEEET_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10emscripten3val2asIdJEEET_DpT0_"].apply(null, arguments) };
var __ZNK10emscripten3val2asIiJEEET_DpT0_ = Module["__ZNK10emscripten3val2asIiJEEET_DpT0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10emscripten3val2asIiJEEET_DpT0_"].apply(null, arguments) };
var __ZNK10emscripten3valixIA7_cEES0_RKT_ = Module["__ZNK10emscripten3valixIA7_cEES0_RKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10emscripten3valixIA7_cEES0_RKT_"].apply(null, arguments) };
var __ZNK10emscripten3valixIiEES0_RKT_ = Module["__ZNK10emscripten3valixIiEES0_RKT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10emscripten3valixIiEES0_RKT_"].apply(null, arguments) };
var __ZNK10emscripten8internal12WireTypePackIJRKdEEcvPKvEv = Module["__ZNK10emscripten8internal12WireTypePackIJRKdEEcvPKvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10emscripten8internal12WireTypePackIJRKdEEcvPKvEv"].apply(null, arguments) };
var __ZNK10emscripten8internal12WireTypePackIJRKiEEcvPKvEv = Module["__ZNK10emscripten8internal12WireTypePackIJRKiEEcvPKvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10emscripten8internal12WireTypePackIJRKiEEcvPKvEv"].apply(null, arguments) };
var __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valEEE8getCountEv = Module["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valEEE8getCountEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valEEE8getCountEv"].apply(null, arguments) };
var __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valEEE8getTypesEv = Module["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valEEE8getTypesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJNS_3valEEE8getTypesEv"].apply(null, arguments) };
var __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdEE8getTypesEv = Module["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdEE8getTypesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJdEE8getTypesEv"].apply(null, arguments) };
var __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getTypesEv = Module["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getTypesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJiEE8getTypesEv"].apply(null, arguments) };
var __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getCountEv = Module["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getCountEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getCountEv"].apply(null, arguments) };
var __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getTypesEv = Module["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getTypesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvEE8getTypesEv"].apply(null, arguments) };
var __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS_3valEEE8getCountEv = Module["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS_3valEEE8getCountEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS_3valEEE8getCountEv"].apply(null, arguments) };
var __ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS_3valEEE8getTypesEv = Module["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS_3valEEE8getTypesEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK10emscripten8internal12WithPoliciesIJEE11ArgTypeListIJvNS_3valEEE8getTypesEv"].apply(null, arguments) };
var __ZNK4arma11subview_rowIdE6at_altEj = Module["__ZNK4arma11subview_rowIdE6at_altEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK4arma11subview_rowIdE6at_altEj"].apply(null, arguments) };
var __ZNK4arma11subview_rowIdEixEj = Module["__ZNK4arma11subview_rowIdEixEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK4arma11subview_rowIdEixEj"].apply(null, arguments) };
var __ZNK4arma12arma_counterIdE12value_plus_1Ev = Module["__ZNK4arma12arma_counterIdE12value_plus_1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK4arma12arma_counterIdE12value_plus_1Ev"].apply(null, arguments) };
var __ZNK4arma12arma_counterIdE13value_minus_1Ev = Module["__ZNK4arma12arma_counterIdE13value_minus_1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK4arma12arma_counterIdE13value_minus_1Ev"].apply(null, arguments) };
var __ZNK4arma12arma_counterIdE5valueEv = Module["__ZNK4arma12arma_counterIdE5valueEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK4arma12arma_counterIdE5valueEv"].apply(null, arguments) };
var __ZNK4arma12running_statIdE4meanEv = Module["__ZNK4arma12running_statIdE4meanEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK4arma12running_statIdE4meanEv"].apply(null, arguments) };
var __ZNK4arma18arma_ostream_state7restoreERNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEE = Module["__ZNK4arma18arma_ostream_state7restoreERNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK4arma18arma_ostream_state7restoreERNSt3__213basic_ostreamIcNS1_11char_traitsIcEEEE"].apply(null, arguments) };
var __ZNK4arma3GenINS_3ColIdEENS_9gen_randuEE5applyERNS_3MatIdEE = Module["__ZNK4arma3GenINS_3ColIdEENS_9gen_randuEE5applyERNS_3MatIdEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK4arma3GenINS_3ColIdEENS_9gen_randuEE5applyERNS_3MatIdEE"].apply(null, arguments) };
var __ZNK4arma3MatIdE10unsafe_colEj = Module["__ZNK4arma3MatIdE10unsafe_colEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK4arma3MatIdE10unsafe_colEj"].apply(null, arguments) };
var __ZNK4arma3MatIdE9is_finiteEv = Module["__ZNK4arma3MatIdE9is_finiteEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK4arma3MatIdE9is_finiteEv"].apply(null, arguments) };
var __ZNK4arma3MatIjE7has_nanEv = Module["__ZNK4arma3MatIjE7has_nanEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK4arma3MatIjE7has_nanEv"].apply(null, arguments) };
var __ZNK4arma7subviewIdE13check_overlapERKS1_ = Module["__ZNK4arma7subviewIdE13check_overlapERKS1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK4arma7subviewIdE13check_overlapERKS1_"].apply(null, arguments) };
var __ZNK4arma7subviewIdE2atEjj = Module["__ZNK4arma7subviewIdE2atEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK4arma7subviewIdE2atEjj"].apply(null, arguments) };
var __ZNK4arma7subviewIdE6is_vecEv = Module["__ZNK4arma7subviewIdE6is_vecEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK4arma7subviewIdE6is_vecEv"].apply(null, arguments) };
var __ZNK4arma7subviewIjE6is_vecEv = Module["__ZNK4arma7subviewIjE6is_vecEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK4arma7subviewIjE6is_vecEv"].apply(null, arguments) };
var __ZNK4arma8gmm_priv19running_mean_scalarIdE4meanEv = Module["__ZNK4arma8gmm_priv19running_mean_scalarIdE4meanEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNK4arma8gmm_priv19running_mean_scalarIdE4meanEv"].apply(null, arguments) };
var __ZNKSt11logic_error4whatEv = Module["__ZNKSt11logic_error4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt11logic_error4whatEv"].apply(null, arguments) };
var __ZNKSt13runtime_error4whatEv = Module["__ZNKSt13runtime_error4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt13runtime_error4whatEv"].apply(null, arguments) };
var __ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc = Module["__ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210__time_put8__do_putEPcRS1_PK2tmcc"].apply(null, arguments) };
var __ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc = Module["__ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210__time_put8__do_putEPwRS1_PK2tmcc"].apply(null, arguments) };
var __ZNKSt3__210error_code7messageEv = Module["__ZNKSt3__210error_code7messageEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210error_code7messageEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIcLb0EE11do_groupingEv = Module["__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb0EE11do_groupingEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv = Module["__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb0EE13do_neg_formatEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv = Module["__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb0EE13do_pos_formatEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv = Module["__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb0EE14do_curr_symbolEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv = Module["__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb0EE14do_frac_digitsEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv = Module["__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb0EE16do_decimal_pointEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv = Module["__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb0EE16do_negative_signEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv = Module["__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb0EE16do_positive_signEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv = Module["__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb0EE16do_thousands_sepEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIcLb1EE11do_groupingEv = Module["__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb1EE11do_groupingEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv = Module["__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb1EE13do_neg_formatEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv = Module["__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb1EE13do_pos_formatEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv = Module["__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb1EE14do_curr_symbolEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv = Module["__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb1EE14do_frac_digitsEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv = Module["__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb1EE16do_decimal_pointEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv = Module["__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb1EE16do_negative_signEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv = Module["__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb1EE16do_positive_signEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv = Module["__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIcLb1EE16do_thousands_sepEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIwLb0EE11do_groupingEv = Module["__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb0EE11do_groupingEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv = Module["__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb0EE13do_neg_formatEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv = Module["__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb0EE13do_pos_formatEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv = Module["__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb0EE14do_curr_symbolEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv = Module["__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb0EE14do_frac_digitsEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv = Module["__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb0EE16do_decimal_pointEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv = Module["__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb0EE16do_negative_signEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv = Module["__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb0EE16do_positive_signEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv = Module["__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb0EE16do_thousands_sepEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIwLb1EE11do_groupingEv = Module["__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb1EE11do_groupingEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv = Module["__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb1EE13do_neg_formatEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv = Module["__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb1EE13do_pos_formatEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv = Module["__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb1EE14do_curr_symbolEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv = Module["__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb1EE14do_frac_digitsEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv = Module["__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb1EE16do_decimal_pointEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv = Module["__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb1EE16do_negative_signEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv = Module["__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb1EE16do_positive_signEv"].apply(null, arguments) };
var __ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv = Module["__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__210moneypunctIwLb1EE16do_thousands_sepEv"].apply(null, arguments) };
var __ZNKSt3__212_GLOBAL__N_111__fake_bindclEv = Module["__ZNKSt3__212_GLOBAL__N_111__fake_bindclEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__212_GLOBAL__N_111__fake_bindclEv"].apply(null, arguments) };
var __ZNKSt3__212__do_message7messageEi = Module["__ZNKSt3__212__do_message7messageEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__212__do_message7messageEi"].apply(null, arguments) };
var __ZNKSt3__214error_category10equivalentERKNS_10error_codeEi = Module["__ZNKSt3__214error_category10equivalentERKNS_10error_codeEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__214error_category10equivalentERKNS_10error_codeEi"].apply(null, arguments) };
var __ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE = Module["__ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__214error_category10equivalentEiRKNS_15error_conditionE"].apply(null, arguments) };
var __ZNKSt3__214error_category23default_error_conditionEi = Module["__ZNKSt3__214error_category23default_error_conditionEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__214error_category23default_error_conditionEi"].apply(null, arguments) };
var __ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv = Module["__ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strEv"].apply(null, arguments) };
var __ZNKSt3__218__libcpp_refstring15__uses_refcountEv = Module["__ZNKSt3__218__libcpp_refstring15__uses_refcountEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__218__libcpp_refstring15__uses_refcountEv"].apply(null, arguments) };
var __ZNKSt3__218__libcpp_refstring5c_strEv = Module["__ZNKSt3__218__libcpp_refstring5c_strEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__218__libcpp_refstring5c_strEv"].apply(null, arguments) };
var __ZNKSt3__219__iostream_category4nameEv = Module["__ZNKSt3__219__iostream_category4nameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__219__iostream_category4nameEv"].apply(null, arguments) };
var __ZNKSt3__219__iostream_category7messageEi = Module["__ZNKSt3__219__iostream_category7messageEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__219__iostream_category7messageEi"].apply(null, arguments) };
var __ZNKSt3__220__time_get_c_storageIcE3__XEv = Module["__ZNKSt3__220__time_get_c_storageIcE3__XEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIcE3__XEv"].apply(null, arguments) };
var __ZNKSt3__220__time_get_c_storageIcE3__cEv = Module["__ZNKSt3__220__time_get_c_storageIcE3__cEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIcE3__cEv"].apply(null, arguments) };
var __ZNKSt3__220__time_get_c_storageIcE3__rEv = Module["__ZNKSt3__220__time_get_c_storageIcE3__rEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIcE3__rEv"].apply(null, arguments) };
var __ZNKSt3__220__time_get_c_storageIcE3__xEv = Module["__ZNKSt3__220__time_get_c_storageIcE3__xEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIcE3__xEv"].apply(null, arguments) };
var __ZNKSt3__220__time_get_c_storageIcE7__am_pmEv = Module["__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIcE7__am_pmEv"].apply(null, arguments) };
var __ZNKSt3__220__time_get_c_storageIcE7__weeksEv = Module["__ZNKSt3__220__time_get_c_storageIcE7__weeksEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIcE7__weeksEv"].apply(null, arguments) };
var __ZNKSt3__220__time_get_c_storageIcE8__monthsEv = Module["__ZNKSt3__220__time_get_c_storageIcE8__monthsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIcE8__monthsEv"].apply(null, arguments) };
var __ZNKSt3__220__time_get_c_storageIwE3__XEv = Module["__ZNKSt3__220__time_get_c_storageIwE3__XEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIwE3__XEv"].apply(null, arguments) };
var __ZNKSt3__220__time_get_c_storageIwE3__cEv = Module["__ZNKSt3__220__time_get_c_storageIwE3__cEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIwE3__cEv"].apply(null, arguments) };
var __ZNKSt3__220__time_get_c_storageIwE3__rEv = Module["__ZNKSt3__220__time_get_c_storageIwE3__rEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIwE3__rEv"].apply(null, arguments) };
var __ZNKSt3__220__time_get_c_storageIwE3__xEv = Module["__ZNKSt3__220__time_get_c_storageIwE3__xEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIwE3__xEv"].apply(null, arguments) };
var __ZNKSt3__220__time_get_c_storageIwE7__am_pmEv = Module["__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIwE7__am_pmEv"].apply(null, arguments) };
var __ZNKSt3__220__time_get_c_storageIwE7__weeksEv = Module["__ZNKSt3__220__time_get_c_storageIwE7__weeksEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIwE7__weeksEv"].apply(null, arguments) };
var __ZNKSt3__220__time_get_c_storageIwE8__monthsEv = Module["__ZNKSt3__220__time_get_c_storageIwE8__monthsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__time_get_c_storageIwE8__monthsEv"].apply(null, arguments) };
var __ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv = Module["__ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__220__vector_base_commonILb1EE20__throw_length_errorEv"].apply(null, arguments) };
var __ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv = Module["__ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__221__basic_string_commonILb1EE20__throw_length_errorEv"].apply(null, arguments) };
var __ZNKSt3__25ctypeIcE10do_tolowerEPcPKc = Module["__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIcE10do_tolowerEPcPKc"].apply(null, arguments) };
var __ZNKSt3__25ctypeIcE10do_tolowerEc = Module["__ZNKSt3__25ctypeIcE10do_tolowerEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIcE10do_tolowerEc"].apply(null, arguments) };
var __ZNKSt3__25ctypeIcE10do_toupperEPcPKc = Module["__ZNKSt3__25ctypeIcE10do_toupperEPcPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIcE10do_toupperEPcPKc"].apply(null, arguments) };
var __ZNKSt3__25ctypeIcE10do_toupperEc = Module["__ZNKSt3__25ctypeIcE10do_toupperEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIcE10do_toupperEc"].apply(null, arguments) };
var __ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc = Module["__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIcE8do_widenEPKcS3_Pc"].apply(null, arguments) };
var __ZNKSt3__25ctypeIcE8do_widenEc = Module["__ZNKSt3__25ctypeIcE8do_widenEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIcE8do_widenEc"].apply(null, arguments) };
var __ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc = Module["__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIcE9do_narrowEPKcS3_cPc"].apply(null, arguments) };
var __ZNKSt3__25ctypeIcE9do_narrowEcc = Module["__ZNKSt3__25ctypeIcE9do_narrowEcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIcE9do_narrowEcc"].apply(null, arguments) };
var __ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_ = Module["__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE10do_scan_isEtPKwS3_"].apply(null, arguments) };
var __ZNKSt3__25ctypeIwE10do_tolowerEPwPKw = Module["__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE10do_tolowerEPwPKw"].apply(null, arguments) };
var __ZNKSt3__25ctypeIwE10do_tolowerEw = Module["__ZNKSt3__25ctypeIwE10do_tolowerEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE10do_tolowerEw"].apply(null, arguments) };
var __ZNKSt3__25ctypeIwE10do_toupperEPwPKw = Module["__ZNKSt3__25ctypeIwE10do_toupperEPwPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE10do_toupperEPwPKw"].apply(null, arguments) };
var __ZNKSt3__25ctypeIwE10do_toupperEw = Module["__ZNKSt3__25ctypeIwE10do_toupperEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE10do_toupperEw"].apply(null, arguments) };
var __ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_ = Module["__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE11do_scan_notEtPKwS3_"].apply(null, arguments) };
var __ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt = Module["__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE5do_isEPKwS3_Pt"].apply(null, arguments) };
var __ZNKSt3__25ctypeIwE5do_isEtw = Module["__ZNKSt3__25ctypeIwE5do_isEtw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE5do_isEtw"].apply(null, arguments) };
var __ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw = Module["__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE8do_widenEPKcS3_Pw"].apply(null, arguments) };
var __ZNKSt3__25ctypeIwE8do_widenEc = Module["__ZNKSt3__25ctypeIwE8do_widenEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE8do_widenEc"].apply(null, arguments) };
var __ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc = Module["__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE9do_narrowEPKwS3_cPc"].apply(null, arguments) };
var __ZNKSt3__25ctypeIwE9do_narrowEwc = Module["__ZNKSt3__25ctypeIwE9do_narrowEwc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__25ctypeIwE9do_narrowEwc"].apply(null, arguments) };
var __ZNKSt3__26locale5__imp9has_facetEl = Module["__ZNKSt3__26locale5__imp9has_facetEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26locale5__imp9has_facetEl"].apply(null, arguments) };
var __ZNKSt3__26locale5__imp9use_facetEl = Module["__ZNKSt3__26locale5__imp9use_facetEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26locale5__imp9use_facetEl"].apply(null, arguments) };
var __ZNKSt3__26locale9has_facetERNS0_2idE = Module["__ZNKSt3__26locale9has_facetERNS0_2idE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26locale9has_facetERNS0_2idE"].apply(null, arguments) };
var __ZNKSt3__26locale9use_facetERNS0_2idE = Module["__ZNKSt3__26locale9use_facetERNS0_2idE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26locale9use_facetERNS0_2idE"].apply(null, arguments) };
var __ZNKSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEE8max_sizeEv = Module["__ZNKSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEE8max_sizeEv"].apply(null, arguments) };
var __ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv = Module["__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8max_sizeEv"].apply(null, arguments) };
var __ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"].apply(null, arguments) };
var __ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDic11__mbstate_tE11do_encodingEv"].apply(null, arguments) };
var __ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDic11__mbstate_tE13do_max_lengthEv"].apply(null, arguments) };
var __ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDic11__mbstate_tE16do_always_noconvEv"].apply(null, arguments) };
var __ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_ = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_"].apply(null, arguments) };
var __ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_"].apply(null, arguments) };
var __ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j = Module["__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j"].apply(null, arguments) };
var __ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"].apply(null, arguments) };
var __ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDsc11__mbstate_tE11do_encodingEv"].apply(null, arguments) };
var __ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDsc11__mbstate_tE13do_max_lengthEv"].apply(null, arguments) };
var __ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDsc11__mbstate_tE16do_always_noconvEv"].apply(null, arguments) };
var __ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_ = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_"].apply(null, arguments) };
var __ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_"].apply(null, arguments) };
var __ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j = Module["__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j"].apply(null, arguments) };
var __ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"].apply(null, arguments) };
var __ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIcc11__mbstate_tE11do_encodingEv"].apply(null, arguments) };
var __ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIcc11__mbstate_tE13do_max_lengthEv"].apply(null, arguments) };
var __ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIcc11__mbstate_tE16do_always_noconvEv"].apply(null, arguments) };
var __ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_"].apply(null, arguments) };
var __ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_"].apply(null, arguments) };
var __ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j = Module["__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j"].apply(null, arguments) };
var __ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_ = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_"].apply(null, arguments) };
var __ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIwc11__mbstate_tE11do_encodingEv"].apply(null, arguments) };
var __ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIwc11__mbstate_tE13do_max_lengthEv"].apply(null, arguments) };
var __ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIwc11__mbstate_tE16do_always_noconvEv"].apply(null, arguments) };
var __ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_ = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_"].apply(null, arguments) };
var __ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_ = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_"].apply(null, arguments) };
var __ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j = Module["__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j"].apply(null, arguments) };
var __ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_ = Module["__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27collateIcE10do_compareEPKcS3_S3_S3_"].apply(null, arguments) };
var __ZNKSt3__27collateIcE12do_transformEPKcS3_ = Module["__ZNKSt3__27collateIcE12do_transformEPKcS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27collateIcE12do_transformEPKcS3_"].apply(null, arguments) };
var __ZNKSt3__27collateIcE7do_hashEPKcS3_ = Module["__ZNKSt3__27collateIcE7do_hashEPKcS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27collateIcE7do_hashEPKcS3_"].apply(null, arguments) };
var __ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_ = Module["__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27collateIwE10do_compareEPKwS3_S3_S3_"].apply(null, arguments) };
var __ZNKSt3__27collateIwE12do_transformEPKwS3_ = Module["__ZNKSt3__27collateIwE12do_transformEPKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27collateIwE12do_transformEPKwS3_"].apply(null, arguments) };
var __ZNKSt3__27collateIwE7do_hashEPKwS3_ = Module["__ZNKSt3__27collateIwE7do_hashEPKwS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27collateIwE7do_hashEPKwS3_"].apply(null, arguments) };
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments) };
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments) };
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments) };
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments) };
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments) };
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments) };
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments) };
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments) };
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments) };
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"].apply(null, arguments) };
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"].apply(null, arguments) };
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"].apply(null, arguments) };
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"].apply(null, arguments) };
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"].apply(null, arguments) };
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"].apply(null, arguments) };
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"].apply(null, arguments) };
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"].apply(null, arguments) };
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"].apply(null, arguments) };
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"].apply(null, arguments) };
var __ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_ = Module["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"].apply(null, arguments) };
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments) };
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments) };
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments) };
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments) };
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments) };
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments) };
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments) };
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments) };
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_"].apply(null, arguments) };
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv"].apply(null, arguments) };
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb"].apply(null, arguments) };
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd"].apply(null, arguments) };
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe"].apply(null, arguments) };
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf"].apply(null, arguments) };
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl"].apply(null, arguments) };
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm"].apply(null, arguments) };
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt"].apply(null, arguments) };
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx"].apply(null, arguments) };
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy"].apply(null, arguments) };
var __ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_ = Module["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_"].apply(null, arguments) };
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv"].apply(null, arguments) };
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb"].apply(null, arguments) };
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd"].apply(null, arguments) };
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce"].apply(null, arguments) };
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl"].apply(null, arguments) };
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm"].apply(null, arguments) };
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx"].apply(null, arguments) };
var __ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy = Module["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy"].apply(null, arguments) };
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv"].apply(null, arguments) };
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb"].apply(null, arguments) };
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd"].apply(null, arguments) };
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe"].apply(null, arguments) };
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl"].apply(null, arguments) };
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm"].apply(null, arguments) };
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx"].apply(null, arguments) };
var __ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy = Module["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy"].apply(null, arguments) };
var __ZNKSt3__28ios_base6getlocEv = Module["__ZNKSt3__28ios_base6getlocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28ios_base6getlocEv"].apply(null, arguments) };
var __ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments) };
var __ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE = Module["__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"].apply(null, arguments) };
var __ZNKSt3__28messagesIcE8do_closeEi = Module["__ZNKSt3__28messagesIcE8do_closeEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28messagesIcE8do_closeEi"].apply(null, arguments) };
var __ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE = Module["__ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE"].apply(null, arguments) };
var __ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE = Module["__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE"].apply(null, arguments) };
var __ZNKSt3__28messagesIwE8do_closeEi = Module["__ZNKSt3__28messagesIwE8do_closeEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28messagesIwE8do_closeEi"].apply(null, arguments) };
var __ZNKSt3__28numpunctIcE11do_groupingEv = Module["__ZNKSt3__28numpunctIcE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28numpunctIcE11do_groupingEv"].apply(null, arguments) };
var __ZNKSt3__28numpunctIcE11do_truenameEv = Module["__ZNKSt3__28numpunctIcE11do_truenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28numpunctIcE11do_truenameEv"].apply(null, arguments) };
var __ZNKSt3__28numpunctIcE12do_falsenameEv = Module["__ZNKSt3__28numpunctIcE12do_falsenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28numpunctIcE12do_falsenameEv"].apply(null, arguments) };
var __ZNKSt3__28numpunctIcE16do_decimal_pointEv = Module["__ZNKSt3__28numpunctIcE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28numpunctIcE16do_decimal_pointEv"].apply(null, arguments) };
var __ZNKSt3__28numpunctIcE16do_thousands_sepEv = Module["__ZNKSt3__28numpunctIcE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28numpunctIcE16do_thousands_sepEv"].apply(null, arguments) };
var __ZNKSt3__28numpunctIwE11do_groupingEv = Module["__ZNKSt3__28numpunctIwE11do_groupingEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28numpunctIwE11do_groupingEv"].apply(null, arguments) };
var __ZNKSt3__28numpunctIwE11do_truenameEv = Module["__ZNKSt3__28numpunctIwE11do_truenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28numpunctIwE11do_truenameEv"].apply(null, arguments) };
var __ZNKSt3__28numpunctIwE12do_falsenameEv = Module["__ZNKSt3__28numpunctIwE12do_falsenameEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28numpunctIwE12do_falsenameEv"].apply(null, arguments) };
var __ZNKSt3__28numpunctIwE16do_decimal_pointEv = Module["__ZNKSt3__28numpunctIwE16do_decimal_pointEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28numpunctIwE16do_decimal_pointEv"].apply(null, arguments) };
var __ZNKSt3__28numpunctIwE16do_thousands_sepEv = Module["__ZNKSt3__28numpunctIwE16do_thousands_sepEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28numpunctIwE16do_thousands_sepEv"].apply(null, arguments) };
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments) };
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments) };
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments) };
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv"].apply(null, arguments) };
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments) };
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments) };
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_ = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_"].apply(null, arguments) };
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"].apply(null, arguments) };
var __ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE = Module["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments) };
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments) };
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments) };
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv"].apply(null, arguments) };
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments) };
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm"].apply(null, arguments) };
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments) };
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_ = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_"].apply(null, arguments) };
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc"].apply(null, arguments) };
var __ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE = Module["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE"].apply(null, arguments) };
var __ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc = Module["__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc"].apply(null, arguments) };
var __ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc = Module["__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc"].apply(null, arguments) };
var __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE = Module["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE"].apply(null, arguments) };
var __ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe = Module["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"].apply(null, arguments) };
var __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE = Module["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE"].apply(null, arguments) };
var __ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe = Module["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe"].apply(null, arguments) };
var __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE = Module["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE"].apply(null, arguments) };
var __ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce = Module["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce"].apply(null, arguments) };
var __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE = Module["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE"].apply(null, arguments) };
var __ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe = Module["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe"].apply(null, arguments) };
var __ZNKSt8bad_cast4whatEv = Module["__ZNKSt8bad_cast4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt8bad_cast4whatEv"].apply(null, arguments) };
var __ZNKSt9bad_alloc4whatEv = Module["__ZNKSt9bad_alloc4whatEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNKSt9bad_alloc4whatEv"].apply(null, arguments) };
var __ZNSt11logic_errorC2EPKc = Module["__ZNSt11logic_errorC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt11logic_errorC2EPKc"].apply(null, arguments) };
var __ZNSt11logic_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE = Module["__ZNSt11logic_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt11logic_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"].apply(null, arguments) };
var __ZNSt11logic_errorD0Ev = Module["__ZNSt11logic_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt11logic_errorD0Ev"].apply(null, arguments) };
var __ZNSt11logic_errorD2Ev = Module["__ZNSt11logic_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt11logic_errorD2Ev"].apply(null, arguments) };
var __ZNSt12length_errorD0Ev = Module["__ZNSt12length_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt12length_errorD0Ev"].apply(null, arguments) };
var __ZNSt13runtime_errorC2EPKc = Module["__ZNSt13runtime_errorC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt13runtime_errorC2EPKc"].apply(null, arguments) };
var __ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE = Module["__ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt13runtime_errorC2ERKNSt3__212basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"].apply(null, arguments) };
var __ZNSt13runtime_errorD0Ev = Module["__ZNSt13runtime_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt13runtime_errorD0Ev"].apply(null, arguments) };
var __ZNSt13runtime_errorD2Ev = Module["__ZNSt13runtime_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt13runtime_errorD2Ev"].apply(null, arguments) };
var __ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE = Module["__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__stdinbufIcE5imbueERKNS_6localeE"].apply(null, arguments) };
var __ZNSt3__210__stdinbufIcE5uflowEv = Module["__ZNSt3__210__stdinbufIcE5uflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__stdinbufIcE5uflowEv"].apply(null, arguments) };
var __ZNSt3__210__stdinbufIcE9__getcharEb = Module["__ZNSt3__210__stdinbufIcE9__getcharEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__stdinbufIcE9__getcharEb"].apply(null, arguments) };
var __ZNSt3__210__stdinbufIcE9pbackfailEi = Module["__ZNSt3__210__stdinbufIcE9pbackfailEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__stdinbufIcE9pbackfailEi"].apply(null, arguments) };
var __ZNSt3__210__stdinbufIcE9underflowEv = Module["__ZNSt3__210__stdinbufIcE9underflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__stdinbufIcE9underflowEv"].apply(null, arguments) };
var __ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t = Module["__ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t"].apply(null, arguments) };
var __ZNSt3__210__stdinbufIcED0Ev = Module["__ZNSt3__210__stdinbufIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__stdinbufIcED0Ev"].apply(null, arguments) };
var __ZNSt3__210__stdinbufIcED2Ev = Module["__ZNSt3__210__stdinbufIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__stdinbufIcED2Ev"].apply(null, arguments) };
var __ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE = Module["__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__stdinbufIwE5imbueERKNS_6localeE"].apply(null, arguments) };
var __ZNSt3__210__stdinbufIwE5uflowEv = Module["__ZNSt3__210__stdinbufIwE5uflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__stdinbufIwE5uflowEv"].apply(null, arguments) };
var __ZNSt3__210__stdinbufIwE9__getcharEb = Module["__ZNSt3__210__stdinbufIwE9__getcharEb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__stdinbufIwE9__getcharEb"].apply(null, arguments) };
var __ZNSt3__210__stdinbufIwE9pbackfailEj = Module["__ZNSt3__210__stdinbufIwE9pbackfailEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__stdinbufIwE9pbackfailEj"].apply(null, arguments) };
var __ZNSt3__210__stdinbufIwE9underflowEv = Module["__ZNSt3__210__stdinbufIwE9underflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__stdinbufIwE9underflowEv"].apply(null, arguments) };
var __ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t = Module["__ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t"].apply(null, arguments) };
var __ZNSt3__210__stdinbufIwED0Ev = Module["__ZNSt3__210__stdinbufIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__stdinbufIwED0Ev"].apply(null, arguments) };
var __ZNSt3__210__stdinbufIwED2Ev = Module["__ZNSt3__210__stdinbufIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__stdinbufIwED2Ev"].apply(null, arguments) };
var __ZNSt3__210__time_putD2Ev = Module["__ZNSt3__210__time_putD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210__time_putD2Ev"].apply(null, arguments) };
var __ZNSt3__210moneypunctIcLb0EED0Ev = Module["__ZNSt3__210moneypunctIcLb0EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210moneypunctIcLb0EED0Ev"].apply(null, arguments) };
var __ZNSt3__210moneypunctIcLb0EED2Ev = Module["__ZNSt3__210moneypunctIcLb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210moneypunctIcLb0EED2Ev"].apply(null, arguments) };
var __ZNSt3__210moneypunctIcLb1EED0Ev = Module["__ZNSt3__210moneypunctIcLb1EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210moneypunctIcLb1EED0Ev"].apply(null, arguments) };
var __ZNSt3__210moneypunctIcLb1EED2Ev = Module["__ZNSt3__210moneypunctIcLb1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210moneypunctIcLb1EED2Ev"].apply(null, arguments) };
var __ZNSt3__210moneypunctIwLb0EED0Ev = Module["__ZNSt3__210moneypunctIwLb0EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210moneypunctIwLb0EED0Ev"].apply(null, arguments) };
var __ZNSt3__210moneypunctIwLb0EED2Ev = Module["__ZNSt3__210moneypunctIwLb0EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210moneypunctIwLb0EED2Ev"].apply(null, arguments) };
var __ZNSt3__210moneypunctIwLb1EED0Ev = Module["__ZNSt3__210moneypunctIwLb1EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210moneypunctIwLb1EED0Ev"].apply(null, arguments) };
var __ZNSt3__210moneypunctIwLb1EED2Ev = Module["__ZNSt3__210moneypunctIwLb1EED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__210moneypunctIwLb1EED2Ev"].apply(null, arguments) };
var __ZNSt3__211__call_onceERVmPvPFvS2_E = Module["__ZNSt3__211__call_onceERVmPvPFvS2_E"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__call_onceERVmPvPFvS2_E"].apply(null, arguments) };
var __ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri = Module["__ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri"].apply(null, arguments) };
var __ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri = Module["__ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri"].apply(null, arguments) };
var __ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri = Module["__ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri"].apply(null, arguments) };
var __ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i = Module["__ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i"].apply(null, arguments) };
var __ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri = Module["__ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri"].apply(null, arguments) };
var __ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i = Module["__ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i"].apply(null, arguments) };
var __ZNSt3__211__stdoutbufIcE4syncEv = Module["__ZNSt3__211__stdoutbufIcE4syncEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__stdoutbufIcE4syncEv"].apply(null, arguments) };
var __ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE = Module["__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__stdoutbufIcE5imbueERKNS_6localeE"].apply(null, arguments) };
var __ZNSt3__211__stdoutbufIcE6xsputnEPKci = Module["__ZNSt3__211__stdoutbufIcE6xsputnEPKci"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__stdoutbufIcE6xsputnEPKci"].apply(null, arguments) };
var __ZNSt3__211__stdoutbufIcE8overflowEi = Module["__ZNSt3__211__stdoutbufIcE8overflowEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__stdoutbufIcE8overflowEi"].apply(null, arguments) };
var __ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t = Module["__ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t"].apply(null, arguments) };
var __ZNSt3__211__stdoutbufIcED0Ev = Module["__ZNSt3__211__stdoutbufIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__stdoutbufIcED0Ev"].apply(null, arguments) };
var __ZNSt3__211__stdoutbufIcED2Ev = Module["__ZNSt3__211__stdoutbufIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__stdoutbufIcED2Ev"].apply(null, arguments) };
var __ZNSt3__211__stdoutbufIwE4syncEv = Module["__ZNSt3__211__stdoutbufIwE4syncEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__stdoutbufIwE4syncEv"].apply(null, arguments) };
var __ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE = Module["__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__stdoutbufIwE5imbueERKNS_6localeE"].apply(null, arguments) };
var __ZNSt3__211__stdoutbufIwE6xsputnEPKwi = Module["__ZNSt3__211__stdoutbufIwE6xsputnEPKwi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__stdoutbufIwE6xsputnEPKwi"].apply(null, arguments) };
var __ZNSt3__211__stdoutbufIwE8overflowEj = Module["__ZNSt3__211__stdoutbufIwE8overflowEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__stdoutbufIwE8overflowEj"].apply(null, arguments) };
var __ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t = Module["__ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t"].apply(null, arguments) };
var __ZNSt3__211__stdoutbufIwED0Ev = Module["__ZNSt3__211__stdoutbufIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__stdoutbufIwED0Ev"].apply(null, arguments) };
var __ZNSt3__211__stdoutbufIwED2Ev = Module["__ZNSt3__211__stdoutbufIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211__stdoutbufIwED2Ev"].apply(null, arguments) };
var __ZNSt3__211char_traitsIcE11eq_int_typeEii = Module["__ZNSt3__211char_traitsIcE11eq_int_typeEii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIcE11eq_int_typeEii"].apply(null, arguments) };
var __ZNSt3__211char_traitsIcE11to_int_typeEc = Module["__ZNSt3__211char_traitsIcE11to_int_typeEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIcE11to_int_typeEc"].apply(null, arguments) };
var __ZNSt3__211char_traitsIcE12to_char_typeEi = Module["__ZNSt3__211char_traitsIcE12to_char_typeEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIcE12to_char_typeEi"].apply(null, arguments) };
var __ZNSt3__211char_traitsIcE2eqEcc = Module["__ZNSt3__211char_traitsIcE2eqEcc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIcE2eqEcc"].apply(null, arguments) };
var __ZNSt3__211char_traitsIcE3eofEv = Module["__ZNSt3__211char_traitsIcE3eofEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIcE3eofEv"].apply(null, arguments) };
var __ZNSt3__211char_traitsIcE4copyEPcPKcj = Module["__ZNSt3__211char_traitsIcE4copyEPcPKcj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIcE4copyEPcPKcj"].apply(null, arguments) };
var __ZNSt3__211char_traitsIcE4moveEPcPKcj = Module["__ZNSt3__211char_traitsIcE4moveEPcPKcj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIcE4moveEPcPKcj"].apply(null, arguments) };
var __ZNSt3__211char_traitsIcE6assignEPcjc = Module["__ZNSt3__211char_traitsIcE6assignEPcjc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIcE6assignEPcjc"].apply(null, arguments) };
var __ZNSt3__211char_traitsIcE6assignERcRKc = Module["__ZNSt3__211char_traitsIcE6assignERcRKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIcE6assignERcRKc"].apply(null, arguments) };
var __ZNSt3__211char_traitsIcE6lengthEPKc = Module["__ZNSt3__211char_traitsIcE6lengthEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIcE6lengthEPKc"].apply(null, arguments) };
var __ZNSt3__211char_traitsIcE7not_eofEi = Module["__ZNSt3__211char_traitsIcE7not_eofEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIcE7not_eofEi"].apply(null, arguments) };
var __ZNSt3__211char_traitsIwE11eq_int_typeEjj = Module["__ZNSt3__211char_traitsIwE11eq_int_typeEjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIwE11eq_int_typeEjj"].apply(null, arguments) };
var __ZNSt3__211char_traitsIwE11to_int_typeEw = Module["__ZNSt3__211char_traitsIwE11to_int_typeEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIwE11to_int_typeEw"].apply(null, arguments) };
var __ZNSt3__211char_traitsIwE12to_char_typeEj = Module["__ZNSt3__211char_traitsIwE12to_char_typeEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIwE12to_char_typeEj"].apply(null, arguments) };
var __ZNSt3__211char_traitsIwE3eofEv = Module["__ZNSt3__211char_traitsIwE3eofEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIwE3eofEv"].apply(null, arguments) };
var __ZNSt3__211char_traitsIwE4copyEPwPKwj = Module["__ZNSt3__211char_traitsIwE4copyEPwPKwj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIwE4copyEPwPKwj"].apply(null, arguments) };
var __ZNSt3__211char_traitsIwE4moveEPwPKwj = Module["__ZNSt3__211char_traitsIwE4moveEPwPKwj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIwE4moveEPwPKwj"].apply(null, arguments) };
var __ZNSt3__211char_traitsIwE6assignEPwjw = Module["__ZNSt3__211char_traitsIwE6assignEPwjw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIwE6assignEPwjw"].apply(null, arguments) };
var __ZNSt3__211char_traitsIwE6assignERwRKw = Module["__ZNSt3__211char_traitsIwE6assignERwRKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIwE6assignERwRKw"].apply(null, arguments) };
var __ZNSt3__211char_traitsIwE6lengthEPKw = Module["__ZNSt3__211char_traitsIwE6lengthEPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIwE6lengthEPKw"].apply(null, arguments) };
var __ZNSt3__211char_traitsIwE7not_eofEj = Module["__ZNSt3__211char_traitsIwE7not_eofEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__211char_traitsIwE7not_eofEj"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_ = Module["__ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_111__fake_bindC2EMNS_6locale2idEFvvEPS3_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_113do_strerror_rEi = Module["__ZNSt3__212_GLOBAL__N_113do_strerror_rEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_113do_strerror_rEi"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb0EEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIcLb1EEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb0EEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_10moneypunctIwLb1EEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIcEEDnbjEERT_T0_T1_T2_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_5ctypeIwEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_6locale5__impEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDic11__mbstate_tEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIDsc11__mbstate_tEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIcc11__mbstate_tEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_7codecvtIwc11__mbstate_tEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_7collateIcEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_7collateIwEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIcEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_8messagesIwEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIcEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_8numpunctIwEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_ = Module["__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_14makeINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEjEERT_T0_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_17countofIcEEjPKT_S4_ = Module["__ZNSt3__212_GLOBAL__N_17countofIcEEjPKT_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_17countofIcEEjPKT_S4_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_17countofIwEEjPKT_S4_ = Module["__ZNSt3__212_GLOBAL__N_17countofIwEEjPKT_S4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_17countofIwEEjPKT_S4_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_17releaseclEPNS_6locale5facetE = Module["__ZNSt3__212_GLOBAL__N_17releaseclEPNS_6locale5facetE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_17releaseclEPNS_6locale5facetE"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_ = Module["__ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_19decrementIlEET_RS2_"].apply(null, arguments) };
var __ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_ = Module["__ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212_GLOBAL__N_19incrementIlEET_RS2_"].apply(null, arguments) };
var __ZNSt3__212__do_nothingEPv = Module["__ZNSt3__212__do_nothingEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212__do_nothingEPv"].apply(null, arguments) };
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc"].apply(null, arguments) };
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE23__append_forward_unsafeIPcEERS5_T_S9_"].apply(null, arguments) };
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc"].apply(null, arguments) };
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj"].apply(null, arguments) };
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc"].apply(null, arguments) };
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc"].apply(null, arguments) };
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj"].apply(null, arguments) };
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc"].apply(null, arguments) };
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj"].apply(null, arguments) };
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj"].apply(null, arguments) };
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc"].apply(null, arguments) };
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_"].apply(null, arguments) };
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev"].apply(null, arguments) };
var __ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_ = Module["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_"].apply(null, arguments) };
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw"].apply(null, arguments) };
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_ = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE23__append_forward_unsafeIPwEERS5_T_S9_"].apply(null, arguments) };
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendEPKwj"].apply(null, arguments) };
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw"].apply(null, arguments) };
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj"].apply(null, arguments) };
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj"].apply(null, arguments) };
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj"].apply(null, arguments) };
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw"].apply(null, arguments) };
var __ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev = Module["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev"].apply(null, arguments) };
var __ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE = Module["__ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"].apply(null, arguments) };
var __ZNSt3__212system_errorC2ENS_10error_codeEPKc = Module["__ZNSt3__212system_errorC2ENS_10error_codeEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212system_errorC2ENS_10error_codeEPKc"].apply(null, arguments) };
var __ZNSt3__212system_errorD0Ev = Module["__ZNSt3__212system_errorD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212system_errorD0Ev"].apply(null, arguments) };
var __ZNSt3__212system_errorD2Ev = Module["__ZNSt3__212system_errorD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__212system_errorD2Ev"].apply(null, arguments) };
var __ZNSt3__213__vector_baseIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEED2Ev = Module["__ZNSt3__213__vector_baseIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__vector_baseIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEED2Ev"].apply(null, arguments) };
var __ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev = Module["__ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev"].apply(null, arguments) };
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE11__read_modeEv"].apply(null, arguments) };
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE12__write_modeEv"].apply(null, arguments) };
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4openEPKcj = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4openEPKcj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4openEPKcj"].apply(null, arguments) };
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE4syncEv"].apply(null, arguments) };
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5closeEv = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5closeEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5closeEv"].apply(null, arguments) };
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE"].apply(null, arguments) };
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPci = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPci"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE6setbufEPci"].apply(null, arguments) };
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj"].apply(null, arguments) };
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj"].apply(null, arguments) };
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE8overflowEi"].apply(null, arguments) };
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9pbackfailEi"].apply(null, arguments) };
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEE9underflowEv"].apply(null, arguments) };
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEEC2Ev"].apply(null, arguments) };
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments) };
var __ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev = Module["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_filebufIcNS_11char_traitsIcEEED2Ev"].apply(null, arguments) };
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments) };
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev"].apply(null, arguments) };
var __ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev = Module["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_istreamIcNS_11char_traitsIcEEED2Ev"].apply(null, arguments) };
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev"].apply(null, arguments) };
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev"].apply(null, arguments) };
var __ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev = Module["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_istreamIwNS_11char_traitsIwEEED2Ev"].apply(null, arguments) };
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE3putEc"].apply(null, arguments) };
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE5flushEv"].apply(null, arguments) };
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_ = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_"].apply(null, arguments) };
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev"].apply(null, arguments) };
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments) };
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev"].apply(null, arguments) };
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEED2Ev"].apply(null, arguments) };
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEd = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEd"].apply(null, arguments) };
var __ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj = Module["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_ostreamIcNS_11char_traitsIcEEElsEj"].apply(null, arguments) };
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev"].apply(null, arguments) };
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev"].apply(null, arguments) };
var __ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev = Module["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__213basic_ostreamIwNS_11char_traitsIwEEED2Ev"].apply(null, arguments) };
var __ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE = Module["__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__num_get_base10__get_baseERNS_8ios_baseE"].apply(null, arguments) };
var __ZNSt3__214__num_put_base12__format_intEPcPKcbj = Module["__ZNSt3__214__num_put_base12__format_intEPcPKcbj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__num_put_base12__format_intEPcPKcbj"].apply(null, arguments) };
var __ZNSt3__214__num_put_base14__format_floatEPcPKcj = Module["__ZNSt3__214__num_put_base14__format_floatEPcPKcj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__num_put_base14__format_floatEPcPKcj"].apply(null, arguments) };
var __ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE = Module["__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE"].apply(null, arguments) };
var __ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_ = Module["__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__ptr_in_rangeIcEEbPKT_S3_S3_"].apply(null, arguments) };
var __ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_ = Module["__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__ptr_in_rangeIwEEbPKT_S3_S3_"].apply(null, arguments) };
var __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb = Module["__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb"].apply(null, arguments) };
var __ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb = Module["__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb"].apply(null, arguments) };
var __ZNSt3__214__shared_count12__add_sharedEv = Module["__ZNSt3__214__shared_count12__add_sharedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__shared_count12__add_sharedEv"].apply(null, arguments) };
var __ZNSt3__214__shared_count16__release_sharedEv = Module["__ZNSt3__214__shared_count16__release_sharedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__shared_count16__release_sharedEv"].apply(null, arguments) };
var __ZNSt3__214__shared_countD2Ev = Module["__ZNSt3__214__shared_countD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__shared_countD2Ev"].apply(null, arguments) };
var __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj = Module["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj"].apply(null, arguments) };
var __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_ = Module["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_"].apply(null, arguments) };
var __ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev = Module["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev"].apply(null, arguments) };
var __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev = Module["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments) };
var __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev = Module["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"].apply(null, arguments) };
var __ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev = Module["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214basic_iostreamIcNS_11char_traitsIcEEED2Ev"].apply(null, arguments) };
var __ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEE4openEPKcj = Module["__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEE4openEPKcj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEE4openEPKcj"].apply(null, arguments) };
var __ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev = Module["__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments) };
var __ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev = Module["__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev"].apply(null, arguments) };
var __ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED2Ev = Module["__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214basic_ofstreamIcNS_11char_traitsIcEEED2Ev"].apply(null, arguments) };
var __ZNSt3__214error_categoryD2Ev = Module["__ZNSt3__214error_categoryD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__214error_categoryD2Ev"].apply(null, arguments) };
var __ZNSt3__215__num_get_floatIdEET_PKcS3_Rj = Module["__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215__num_get_floatIdEET_PKcS3_Rj"].apply(null, arguments) };
var __ZNSt3__215__num_get_floatIeEET_PKcS3_Rj = Module["__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215__num_get_floatIeEET_PKcS3_Rj"].apply(null, arguments) };
var __ZNSt3__215__num_get_floatIfEET_PKcS3_Rj = Module["__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215__num_get_floatIfEET_PKcS3_Rj"].apply(null, arguments) };
var __ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE = Module["__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215__refstring_imp12_GLOBAL__N_113data_from_repEPNS1_9_Rep_baseE"].apply(null, arguments) };
var __ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1792 = Module["__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1792"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215__refstring_imp12_GLOBAL__N_113rep_from_dataEPKc_1792"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE4syncEv"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE5uflowEv"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6setbufEPci"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE8overflowEi"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9showmanycEv"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEE9underflowEv"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEEC2Ev"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev = Module["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIcNS_11char_traitsIcEEED2Ev"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE4syncEv"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE5uflowEv"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE8overflowEj"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9showmanycEv"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEE9underflowEv"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEEC2Ev"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED0Ev"].apply(null, arguments) };
var __ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev = Module["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_streambufIwNS_11char_traitsIwEEED2Ev"].apply(null, arguments) };
var __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE = Module["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE"].apply(null, arguments) };
var __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj = Module["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj"].apply(null, arguments) };
var __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj = Module["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj"].apply(null, arguments) };
var __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi = Module["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi"].apply(null, arguments) };
var __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi = Module["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi"].apply(null, arguments) };
var __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv = Module["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv"].apply(null, arguments) };
var __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev = Module["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"].apply(null, arguments) };
var __ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev = Module["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__215basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev"].apply(null, arguments) };
var __ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj = Module["__ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj"].apply(null, arguments) };
var __ZNSt3__216__narrow_to_utf8ILj32EED0Ev = Module["__ZNSt3__216__narrow_to_utf8ILj32EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__narrow_to_utf8ILj32EED0Ev"].apply(null, arguments) };
var __ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = Module["__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"].apply(null, arguments) };
var __ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_ = Module["__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__216__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_"].apply(null, arguments) };
var __ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv = Module["__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__217__call_once_proxyINS_5tupleIJONS_12_GLOBAL__N_111__fake_bindEEEEEEvPv"].apply(null, arguments) };
var __ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z = Module["__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__217__libcpp_sscanf_lEPKcP15__locale_structS1_z"].apply(null, arguments) };
var __ZNSt3__217__widen_from_utf8ILj32EED0Ev = Module["__ZNSt3__217__widen_from_utf8ILj32EED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__217__widen_from_utf8ILj32EED0Ev"].apply(null, arguments) };
var __ZNSt3__217iostream_categoryEv = Module["__ZNSt3__217iostream_categoryEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__217iostream_categoryEv"].apply(null, arguments) };
var __ZNSt3__218__insertion_sort_3IRN4arma23arma_ascend_sort_helperIjEEPjEEvT0_S6_T_ = Module["__ZNSt3__218__insertion_sort_3IRN4arma23arma_ascend_sort_helperIjEEPjEEvT0_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__218__insertion_sort_3IRN4arma23arma_ascend_sort_helperIjEEPjEEvT0_S6_T_"].apply(null, arguments) };
var __ZNSt3__218__insertion_sort_3IRN4arma24arma_descend_sort_helperIjEEPjEEvT0_S6_T_ = Module["__ZNSt3__218__insertion_sort_3IRN4arma24arma_descend_sort_helperIjEEPjEEvT0_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__218__insertion_sort_3IRN4arma24arma_descend_sort_helperIjEEPjEEvT0_S6_T_"].apply(null, arguments) };
var __ZNSt3__218__insertion_sort_3IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_ = Module["__ZNSt3__218__insertion_sort_3IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__218__insertion_sort_3IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_"].apply(null, arguments) };
var __ZNSt3__218__insertion_sort_3IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_ = Module["__ZNSt3__218__insertion_sort_3IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__218__insertion_sort_3IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_"].apply(null, arguments) };
var __ZNSt3__218__libcpp_refstringC2EPKc = Module["__ZNSt3__218__libcpp_refstringC2EPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__218__libcpp_refstringC2EPKc"].apply(null, arguments) };
var __ZNSt3__218__libcpp_refstringD2Ev = Module["__ZNSt3__218__libcpp_refstringD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__218__libcpp_refstringD2Ev"].apply(null, arguments) };
var __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev = Module["__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"].apply(null, arguments) };
var __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev = Module["__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev"].apply(null, arguments) };
var __ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev = Module["__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev"].apply(null, arguments) };
var __ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_ = Module["__ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__219__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"].apply(null, arguments) };
var __ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_ = Module["__ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__219__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"].apply(null, arguments) };
var __ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_ = Module["__ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__219__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_"].apply(null, arguments) };
var __ZNSt3__219__iostream_categoryD0Ev = Module["__ZNSt3__219__iostream_categoryD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__219__iostream_categoryD0Ev"].apply(null, arguments) };
var __ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz = Module["__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__219__libcpp_asprintf_lEPPcP15__locale_structPKcz"].apply(null, arguments) };
var __ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz = Module["__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__219__libcpp_snprintf_lEPcjP15__locale_structPKcz"].apply(null, arguments) };
var __ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi = Module["__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"].apply(null, arguments) };
var __ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi = Module["__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi"].apply(null, arguments) };
var __ZNSt3__220__time_get_c_storageIcEC2Ev = Module["__ZNSt3__220__time_get_c_storageIcEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__time_get_c_storageIcEC2Ev"].apply(null, arguments) };
var __ZNSt3__220__time_get_c_storageIwEC2Ev = Module["__ZNSt3__220__time_get_c_storageIwEC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__220__time_get_c_storageIwEC2Ev"].apply(null, arguments) };
var __ZNSt3__221__throw_runtime_errorEPKc = Module["__ZNSt3__221__throw_runtime_errorEPKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__221__throw_runtime_errorEPKc"].apply(null, arguments) };
var __ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j = Module["__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__224__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j"].apply(null, arguments) };
var __ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji = Module["__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__225__num_get_signed_integralIlEET_PKcS3_Rji"].apply(null, arguments) };
var __ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji = Module["__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__225__num_get_signed_integralIxEET_PKcS3_Rji"].apply(null, arguments) };
var __ZNSt3__227__insertion_sort_incompleteIRN4arma23arma_ascend_sort_helperIjEEPjEEbT0_S6_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRN4arma23arma_ascend_sort_helperIjEEPjEEbT0_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__insertion_sort_incompleteIRN4arma23arma_ascend_sort_helperIjEEPjEEbT0_S6_T_"].apply(null, arguments) };
var __ZNSt3__227__insertion_sort_incompleteIRN4arma24arma_descend_sort_helperIjEEPjEEbT0_S6_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRN4arma24arma_descend_sort_helperIjEEPjEEbT0_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__insertion_sort_incompleteIRN4arma24arma_descend_sort_helperIjEEPjEEbT0_S6_T_"].apply(null, arguments) };
var __ZNSt3__227__insertion_sort_incompleteIRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEbT0_S8_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEbT0_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__insertion_sort_incompleteIRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEbT0_S8_T_"].apply(null, arguments) };
var __ZNSt3__227__insertion_sort_incompleteIRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEbT0_S8_T_ = Module["__ZNSt3__227__insertion_sort_incompleteIRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEbT0_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__insertion_sort_incompleteIRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEbT0_S8_T_"].apply(null, arguments) };
var __ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji = Module["__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__num_get_unsigned_integralIjEET_PKcS3_Rji"].apply(null, arguments) };
var __ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji = Module["__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__num_get_unsigned_integralImEET_PKcS3_Rji"].apply(null, arguments) };
var __ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji = Module["__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__num_get_unsigned_integralItEET_PKcS3_Rji"].apply(null, arguments) };
var __ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji = Module["__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__227__num_get_unsigned_integralIyEET_PKcS3_Rji"].apply(null, arguments) };
var __ZNSt3__24endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_ = Module["__ZNSt3__24endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__24endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_"].apply(null, arguments) };
var __ZNSt3__24sqrtIdEENS_7complexIT_EERKS3_ = Module["__ZNSt3__24sqrtIdEENS_7complexIT_EERKS3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__24sqrtIdEENS_7complexIT_EERKS3_"].apply(null, arguments) };
var __ZNSt3__25ctypeIcE13classic_tableEv = Module["__ZNSt3__25ctypeIcE13classic_tableEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__25ctypeIcE13classic_tableEv"].apply(null, arguments) };
var __ZNSt3__25ctypeIcE21__classic_lower_tableEv = Module["__ZNSt3__25ctypeIcE21__classic_lower_tableEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__25ctypeIcE21__classic_lower_tableEv"].apply(null, arguments) };
var __ZNSt3__25ctypeIcE21__classic_upper_tableEv = Module["__ZNSt3__25ctypeIcE21__classic_upper_tableEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__25ctypeIcE21__classic_upper_tableEv"].apply(null, arguments) };
var __ZNSt3__25ctypeIcEC2EPKtbj = Module["__ZNSt3__25ctypeIcEC2EPKtbj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__25ctypeIcEC2EPKtbj"].apply(null, arguments) };
var __ZNSt3__25ctypeIcED0Ev = Module["__ZNSt3__25ctypeIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__25ctypeIcED0Ev"].apply(null, arguments) };
var __ZNSt3__25ctypeIcED2Ev = Module["__ZNSt3__25ctypeIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__25ctypeIcED2Ev"].apply(null, arguments) };
var __ZNSt3__25ctypeIwED0Ev = Module["__ZNSt3__25ctypeIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__25ctypeIwED0Ev"].apply(null, arguments) };
var __ZNSt3__25polarIdEENS_7complexIT_EERKS2_S5_ = Module["__ZNSt3__25polarIdEENS_7complexIT_EERKS2_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__25polarIdEENS_7complexIT_EERKS2_S5_"].apply(null, arguments) };
var __ZNSt3__26__clocEv = Module["__ZNSt3__26__clocEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26__clocEv"].apply(null, arguments) };
var __ZNSt3__26__sortIRN4arma23arma_ascend_sort_helperIjEEPjEEvT0_S6_T_ = Module["__ZNSt3__26__sortIRN4arma23arma_ascend_sort_helperIjEEPjEEvT0_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26__sortIRN4arma23arma_ascend_sort_helperIjEEPjEEvT0_S6_T_"].apply(null, arguments) };
var __ZNSt3__26__sortIRN4arma24arma_descend_sort_helperIjEEPjEEvT0_S6_T_ = Module["__ZNSt3__26__sortIRN4arma24arma_descend_sort_helperIjEEPjEEvT0_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26__sortIRN4arma24arma_descend_sort_helperIjEEPjEEvT0_S6_T_"].apply(null, arguments) };
var __ZNSt3__26__sortIRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_ = Module["__ZNSt3__26__sortIRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26__sortIRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_"].apply(null, arguments) };
var __ZNSt3__26__sortIRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_ = Module["__ZNSt3__26__sortIRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26__sortIRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEvT0_S8_T_"].apply(null, arguments) };
var __ZNSt3__26locale2id5__getEv = Module["__ZNSt3__26locale2id5__getEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale2id5__getEv"].apply(null, arguments) };
var __ZNSt3__26locale2id6__initEv = Module["__ZNSt3__26locale2id6__initEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale2id6__initEv"].apply(null, arguments) };
var __ZNSt3__26locale5__imp11make_globalEv = Module["__ZNSt3__26locale5__imp11make_globalEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp11make_globalEv"].apply(null, arguments) };
var __ZNSt3__26locale5__imp12make_classicEv = Module["__ZNSt3__26locale5__imp12make_classicEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp12make_classicEv"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installEPNS0_5facetEl = Module["__ZNSt3__26locale5__imp7installEPNS0_5facetEl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installEPNS0_5facetEl"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_5ctypeIcEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_5ctypeIwEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_7collateIcEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_7collateIwEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_8messagesIcEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_8messagesIwEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_8numpunctIcEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_8numpunctIwEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_ = Module["__ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_"].apply(null, arguments) };
var __ZNSt3__26locale5__impC2Ej = Module["__ZNSt3__26locale5__impC2Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__impC2Ej"].apply(null, arguments) };
var __ZNSt3__26locale5__impD0Ev = Module["__ZNSt3__26locale5__impD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__impD0Ev"].apply(null, arguments) };
var __ZNSt3__26locale5__impD2Ev = Module["__ZNSt3__26locale5__impD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5__impD2Ev"].apply(null, arguments) };
var __ZNSt3__26locale5facet16__on_zero_sharedEv = Module["__ZNSt3__26locale5facet16__on_zero_sharedEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5facet16__on_zero_sharedEv"].apply(null, arguments) };
var __ZNSt3__26locale5facetD0Ev = Module["__ZNSt3__26locale5facetD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5facetD0Ev"].apply(null, arguments) };
var __ZNSt3__26locale5facetD2Ev = Module["__ZNSt3__26locale5facetD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale5facetD2Ev"].apply(null, arguments) };
var __ZNSt3__26locale7classicEv = Module["__ZNSt3__26locale7classicEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale7classicEv"].apply(null, arguments) };
var __ZNSt3__26locale8__globalEv = Module["__ZNSt3__26locale8__globalEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26locale8__globalEv"].apply(null, arguments) };
var __ZNSt3__26localeC2ERKS0_ = Module["__ZNSt3__26localeC2ERKS0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26localeC2ERKS0_"].apply(null, arguments) };
var __ZNSt3__26localeC2Ev = Module["__ZNSt3__26localeC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26localeC2Ev"].apply(null, arguments) };
var __ZNSt3__26localeD2Ev = Module["__ZNSt3__26localeD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26localeD2Ev"].apply(null, arguments) };
var __ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEE18__construct_at_endEj = Module["__ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEE18__construct_at_endEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEE18__construct_at_endEj"].apply(null, arguments) };
var __ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEE8allocateEj = Module["__ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEE8allocateEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEE8allocateEj"].apply(null, arguments) };
var __ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEEC2Ej = Module["__ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEEC2Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEEC2Ej"].apply(null, arguments) };
var __ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEED2Ev = Module["__ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIN4arma22arma_sort_index_packetIdEENS_9allocatorIS3_EEED2Ev"].apply(null, arguments) };
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj"].apply(null, arguments) };
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE"].apply(null, arguments) };
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj"].apply(null, arguments) };
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj"].apply(null, arguments) };
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj"].apply(null, arguments) };
var __ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej = Module["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__26vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej"].apply(null, arguments) };
var __ZNSt3__27__sort3IRN4arma23arma_ascend_sort_helperIjEEPjEEjT0_S6_S6_T_ = Module["__ZNSt3__27__sort3IRN4arma23arma_ascend_sort_helperIjEEPjEEjT0_S6_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27__sort3IRN4arma23arma_ascend_sort_helperIjEEPjEEjT0_S6_S6_T_"].apply(null, arguments) };
var __ZNSt3__27__sort3IRN4arma24arma_descend_sort_helperIjEEPjEEjT0_S6_S6_T_ = Module["__ZNSt3__27__sort3IRN4arma24arma_descend_sort_helperIjEEPjEEjT0_S6_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27__sort3IRN4arma24arma_descend_sort_helperIjEEPjEEjT0_S6_S6_T_"].apply(null, arguments) };
var __ZNSt3__27__sort3IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_T_ = Module["__ZNSt3__27__sort3IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27__sort3IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_T_"].apply(null, arguments) };
var __ZNSt3__27__sort3IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_T_ = Module["__ZNSt3__27__sort3IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27__sort3IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_T_"].apply(null, arguments) };
var __ZNSt3__27__sort4IRN4arma23arma_ascend_sort_helperIjEEPjEEjT0_S6_S6_S6_T_ = Module["__ZNSt3__27__sort4IRN4arma23arma_ascend_sort_helperIjEEPjEEjT0_S6_S6_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27__sort4IRN4arma23arma_ascend_sort_helperIjEEPjEEjT0_S6_S6_S6_T_"].apply(null, arguments) };
var __ZNSt3__27__sort4IRN4arma24arma_descend_sort_helperIjEEPjEEjT0_S6_S6_S6_T_ = Module["__ZNSt3__27__sort4IRN4arma24arma_descend_sort_helperIjEEPjEEjT0_S6_S6_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27__sort4IRN4arma24arma_descend_sort_helperIjEEPjEEjT0_S6_S6_S6_T_"].apply(null, arguments) };
var __ZNSt3__27__sort4IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_T_ = Module["__ZNSt3__27__sort4IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27__sort4IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_T_"].apply(null, arguments) };
var __ZNSt3__27__sort4IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_T_ = Module["__ZNSt3__27__sort4IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27__sort4IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_T_"].apply(null, arguments) };
var __ZNSt3__27__sort5IRN4arma23arma_ascend_sort_helperIjEEPjEEjT0_S6_S6_S6_S6_T_ = Module["__ZNSt3__27__sort5IRN4arma23arma_ascend_sort_helperIjEEPjEEjT0_S6_S6_S6_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27__sort5IRN4arma23arma_ascend_sort_helperIjEEPjEEjT0_S6_S6_S6_S6_T_"].apply(null, arguments) };
var __ZNSt3__27__sort5IRN4arma24arma_descend_sort_helperIjEEPjEEjT0_S6_S6_S6_S6_T_ = Module["__ZNSt3__27__sort5IRN4arma24arma_descend_sort_helperIjEEPjEEjT0_S6_S6_S6_S6_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27__sort5IRN4arma24arma_descend_sort_helperIjEEPjEEjT0_S6_S6_S6_S6_T_"].apply(null, arguments) };
var __ZNSt3__27__sort5IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_S8_T_ = Module["__ZNSt3__27__sort5IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27__sort5IRN4arma29arma_sort_index_helper_ascendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_S8_T_"].apply(null, arguments) };
var __ZNSt3__27__sort5IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_S8_T_ = Module["__ZNSt3__27__sort5IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_S8_T_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27__sort5IRN4arma30arma_sort_index_helper_descendIdEEPNS1_22arma_sort_index_packetIdEEEEjT0_S8_S8_S8_S8_T_"].apply(null, arguments) };
var __ZNSt3__27codecvtIDic11__mbstate_tED0Ev = Module["__ZNSt3__27codecvtIDic11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27codecvtIDic11__mbstate_tED0Ev"].apply(null, arguments) };
var __ZNSt3__27codecvtIDsc11__mbstate_tED0Ev = Module["__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27codecvtIDsc11__mbstate_tED0Ev"].apply(null, arguments) };
var __ZNSt3__27codecvtIcc11__mbstate_tED0Ev = Module["__ZNSt3__27codecvtIcc11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27codecvtIcc11__mbstate_tED0Ev"].apply(null, arguments) };
var __ZNSt3__27codecvtIwc11__mbstate_tEC2Ej = Module["__ZNSt3__27codecvtIwc11__mbstate_tEC2Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27codecvtIwc11__mbstate_tEC2Ej"].apply(null, arguments) };
var __ZNSt3__27codecvtIwc11__mbstate_tED0Ev = Module["__ZNSt3__27codecvtIwc11__mbstate_tED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27codecvtIwc11__mbstate_tED0Ev"].apply(null, arguments) };
var __ZNSt3__27codecvtIwc11__mbstate_tED2Ev = Module["__ZNSt3__27codecvtIwc11__mbstate_tED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27codecvtIwc11__mbstate_tED2Ev"].apply(null, arguments) };
var __ZNSt3__27collateIcED0Ev = Module["__ZNSt3__27collateIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27collateIcED0Ev"].apply(null, arguments) };
var __ZNSt3__27collateIcED2Ev = Module["__ZNSt3__27collateIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27collateIcED2Ev"].apply(null, arguments) };
var __ZNSt3__27collateIwED0Ev = Module["__ZNSt3__27collateIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27collateIwED0Ev"].apply(null, arguments) };
var __ZNSt3__27collateIwED2Ev = Module["__ZNSt3__27collateIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27collateIwED2Ev"].apply(null, arguments) };
var __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"].apply(null, arguments) };
var __ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = Module["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"].apply(null, arguments) };
var __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"].apply(null, arguments) };
var __ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = Module["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"].apply(null, arguments) };
var __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"].apply(null, arguments) };
var __ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = Module["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"].apply(null, arguments) };
var __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"].apply(null, arguments) };
var __ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = Module["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__27num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"].apply(null, arguments) };
var __ZNSt3__28ios_base16__call_callbacksENS0_5eventE = Module["__ZNSt3__28ios_base16__call_callbacksENS0_5eventE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28ios_base16__call_callbacksENS0_5eventE"].apply(null, arguments) };
var __ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv = Module["__ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28ios_base33__set_badbit_and_consider_rethrowEv"].apply(null, arguments) };
var __ZNSt3__28ios_base4InitC2Ev = Module["__ZNSt3__28ios_base4InitC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28ios_base4InitC2Ev"].apply(null, arguments) };
var __ZNSt3__28ios_base4initEPv = Module["__ZNSt3__28ios_base4initEPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28ios_base4initEPv"].apply(null, arguments) };
var __ZNSt3__28ios_base5clearEj = Module["__ZNSt3__28ios_base5clearEj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28ios_base5clearEj"].apply(null, arguments) };
var __ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE = Module["__ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28ios_base7failureC2EPKcRKNS_10error_codeE"].apply(null, arguments) };
var __ZNSt3__28ios_base7failureD0Ev = Module["__ZNSt3__28ios_base7failureD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28ios_base7failureD0Ev"].apply(null, arguments) };
var __ZNSt3__28ios_base7failureD2Ev = Module["__ZNSt3__28ios_base7failureD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28ios_base7failureD2Ev"].apply(null, arguments) };
var __ZNSt3__28ios_baseD0Ev = Module["__ZNSt3__28ios_baseD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28ios_baseD0Ev"].apply(null, arguments) };
var __ZNSt3__28ios_baseD2Ev = Module["__ZNSt3__28ios_baseD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28ios_baseD2Ev"].apply(null, arguments) };
var __ZNSt3__28messagesIcED0Ev = Module["__ZNSt3__28messagesIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28messagesIcED0Ev"].apply(null, arguments) };
var __ZNSt3__28messagesIcED2Ev = Module["__ZNSt3__28messagesIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28messagesIcED2Ev"].apply(null, arguments) };
var __ZNSt3__28messagesIwED0Ev = Module["__ZNSt3__28messagesIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28messagesIwED0Ev"].apply(null, arguments) };
var __ZNSt3__28messagesIwED2Ev = Module["__ZNSt3__28messagesIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28messagesIwED2Ev"].apply(null, arguments) };
var __ZNSt3__28numpunctIcEC2Ej = Module["__ZNSt3__28numpunctIcEC2Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28numpunctIcEC2Ej"].apply(null, arguments) };
var __ZNSt3__28numpunctIcED0Ev = Module["__ZNSt3__28numpunctIcED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28numpunctIcED0Ev"].apply(null, arguments) };
var __ZNSt3__28numpunctIcED2Ev = Module["__ZNSt3__28numpunctIcED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28numpunctIcED2Ev"].apply(null, arguments) };
var __ZNSt3__28numpunctIwEC2Ej = Module["__ZNSt3__28numpunctIwEC2Ej"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28numpunctIwEC2Ej"].apply(null, arguments) };
var __ZNSt3__28numpunctIwED0Ev = Module["__ZNSt3__28numpunctIwED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28numpunctIwED0Ev"].apply(null, arguments) };
var __ZNSt3__28numpunctIwED2Ev = Module["__ZNSt3__28numpunctIwED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28numpunctIwED2Ev"].apply(null, arguments) };
var __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"].apply(null, arguments) };
var __ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = Module["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"].apply(null, arguments) };
var __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"].apply(null, arguments) };
var __ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = Module["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"].apply(null, arguments) };
var __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"].apply(null, arguments) };
var __ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = Module["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"].apply(null, arguments) };
var __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"].apply(null, arguments) };
var __ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = Module["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__28time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"].apply(null, arguments) };
var __ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_ = Module["__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_"].apply(null, arguments) };
var __ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc = Module["__ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc"].apply(null, arguments) };
var __ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_ = Module["__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_"].apply(null, arguments) };
var __ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_ = Module["__ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_"].apply(null, arguments) };
var __ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw = Module["__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw"].apply(null, arguments) };
var __ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw = Module["__ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw"].apply(null, arguments) };
var __ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw = Module["__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw"].apply(null, arguments) };
var __ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_ = Module["__ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_"].apply(null, arguments) };
var __ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE = Module["__ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE"].apply(null, arguments) };
var __ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE = Module["__ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE"].apply(null, arguments) };
var __ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE = Module["__ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE"].apply(null, arguments) };
var __ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE = Module["__ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE"].apply(null, arguments) };
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED0Ev = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments) };
var __ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev = Module["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29basic_iosIcNS_11char_traitsIcEEED2Ev"].apply(null, arguments) };
var __ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev = Module["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29basic_iosIwNS_11char_traitsIwEEED2Ev"].apply(null, arguments) };
var __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_ = Module["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_"].apply(null, arguments) };
var __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"].apply(null, arguments) };
var __ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = Module["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"].apply(null, arguments) };
var __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_ = Module["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_"].apply(null, arguments) };
var __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"].apply(null, arguments) };
var __ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = Module["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"].apply(null, arguments) };
var __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev = Module["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev"].apply(null, arguments) };
var __ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev = Module["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED2Ev"].apply(null, arguments) };
var __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev = Module["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev"].apply(null, arguments) };
var __ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev = Module["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__29money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED2Ev"].apply(null, arguments) };
var __ZNSt3__2L10init_am_pmEv = Module["__ZNSt3__2L10init_am_pmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L10init_am_pmEv"].apply(null, arguments) };
var __ZNSt3__2L10init_weeksEv = Module["__ZNSt3__2L10init_weeksEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L10init_weeksEv"].apply(null, arguments) };
var __ZNSt3__2L11init_monthsEv = Module["__ZNSt3__2L11init_monthsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L11init_monthsEv"].apply(null, arguments) };
var __ZNSt3__2L11init_wam_pmEv = Module["__ZNSt3__2L11init_wam_pmEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L11init_wam_pmEv"].apply(null, arguments) };
var __ZNSt3__2L11init_wweeksEv = Module["__ZNSt3__2L11init_wweeksEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L11init_wweeksEv"].apply(null, arguments) };
var __ZNSt3__2L12init_wmonthsEv = Module["__ZNSt3__2L12init_wmonthsEv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L12init_wmonthsEv"].apply(null, arguments) };
var __ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"].apply(null, arguments) };
var __ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE"].apply(null, arguments) };
var __ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE"].apply(null, arguments) };
var __ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE = Module["__ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE"].apply(null, arguments) };
var __ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE = Module["__ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE"].apply(null, arguments) };
var __ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE = Module["__ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE"].apply(null, arguments) };
var __ZNSt3__2dvIdEENS_7complexIT_EERKS3_S5_ = Module["__ZNSt3__2dvIdEENS_7complexIT_EERKS3_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2dvIdEENS_7complexIT_EERKS3_S5_"].apply(null, arguments) };
var __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc = Module["__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc"].apply(null, arguments) };
var __ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c = Module["__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_c"].apply(null, arguments) };
var __ZNSt3__2lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE = Module["__ZNSt3__2lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE"].apply(null, arguments) };
var __ZNSt3__2mlIdEENS_7complexIT_EERKS3_S5_ = Module["__ZNSt3__2mlIdEENS_7complexIT_EERKS3_S5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt3__2mlIdEENS_7complexIT_EERKS3_S5_"].apply(null, arguments) };
var __ZNSt8bad_castC2Ev = Module["__ZNSt8bad_castC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt8bad_castC2Ev"].apply(null, arguments) };
var __ZNSt8bad_castD0Ev = Module["__ZNSt8bad_castD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt8bad_castD0Ev"].apply(null, arguments) };
var __ZNSt8bad_castD2Ev = Module["__ZNSt8bad_castD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt8bad_castD2Ev"].apply(null, arguments) };
var __ZNSt9bad_allocC2Ev = Module["__ZNSt9bad_allocC2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt9bad_allocC2Ev"].apply(null, arguments) };
var __ZNSt9bad_allocD0Ev = Module["__ZNSt9bad_allocD0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt9bad_allocD0Ev"].apply(null, arguments) };
var __ZNSt9bad_allocD2Ev = Module["__ZNSt9bad_allocD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt9bad_allocD2Ev"].apply(null, arguments) };
var __ZNSt9exceptionD2Ev = Module["__ZNSt9exceptionD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt9exceptionD2Ev"].apply(null, arguments) };
var __ZNSt9type_infoD2Ev = Module["__ZNSt9type_infoD2Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZNSt9type_infoD2Ev"].apply(null, arguments) };
var __ZSt11__terminatePFvvE = Module["__ZSt11__terminatePFvvE"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZSt11__terminatePFvvE"].apply(null, arguments) };
var __ZSt13get_terminatev = Module["__ZSt13get_terminatev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZSt13get_terminatev"].apply(null, arguments) };
var __ZSt15get_new_handlerv = Module["__ZSt15get_new_handlerv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZSt15get_new_handlerv"].apply(null, arguments) };
var __ZSt17__throw_bad_allocv = Module["__ZSt17__throw_bad_allocv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZSt17__throw_bad_allocv"].apply(null, arguments) };
var __ZSt9terminatev = Module["__ZSt9terminatev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZSt9terminatev"].apply(null, arguments) };
var __ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev = Module["__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments) };
var __ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev = Module["__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZThn8_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"].apply(null, arguments) };
var __ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev = Module["__ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"].apply(null, arguments) };
var __ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev = Module["__ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZThn8_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev"].apply(null, arguments) };
var __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev = Module["__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments) };
var __ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev = Module["__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZTv0_n12_NSt3__213basic_istreamIcNS_11char_traitsIcEEED1Ev"].apply(null, arguments) };
var __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev = Module["__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED0Ev"].apply(null, arguments) };
var __ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev = Module["__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZTv0_n12_NSt3__213basic_istreamIwNS_11char_traitsIwEEED1Ev"].apply(null, arguments) };
var __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev = Module["__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments) };
var __ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev = Module["__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZTv0_n12_NSt3__213basic_ostreamIcNS_11char_traitsIcEEED1Ev"].apply(null, arguments) };
var __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev = Module["__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED0Ev"].apply(null, arguments) };
var __ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev = Module["__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZTv0_n12_NSt3__213basic_ostreamIwNS_11char_traitsIwEEED1Ev"].apply(null, arguments) };
var __ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev = Module["__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments) };
var __ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev = Module["__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZTv0_n12_NSt3__214basic_iostreamIcNS_11char_traitsIcEEED1Ev"].apply(null, arguments) };
var __ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev = Module["__ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED0Ev"].apply(null, arguments) };
var __ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev = Module["__ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZTv0_n12_NSt3__214basic_ofstreamIcNS_11char_traitsIcEEED1Ev"].apply(null, arguments) };
var __ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev = Module["__ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev"].apply(null, arguments) };
var __ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev = Module["__ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZTv0_n12_NSt3__218basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev"].apply(null, arguments) };
var __ZdaPv = Module["__ZdaPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZdaPv"].apply(null, arguments) };
var __ZdlPv = Module["__ZdlPv"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__ZdlPv"].apply(null, arguments) };
var __Znaj = Module["__Znaj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__Znaj"].apply(null, arguments) };
var __Znwj = Module["__Znwj"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["__Znwj"].apply(null, arguments) };
var ___DOUBLE_BITS_267 = Module["___DOUBLE_BITS_267"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___DOUBLE_BITS_267"].apply(null, arguments) };
var ___DOUBLE_BITS_271 = Module["___DOUBLE_BITS_271"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___DOUBLE_BITS_271"].apply(null, arguments) };
var ___DOUBLE_BITS_323 = Module["___DOUBLE_BITS_323"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___DOUBLE_BITS_323"].apply(null, arguments) };
var ___DOUBLE_BITS_670 = Module["___DOUBLE_BITS_670"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___DOUBLE_BITS_670"].apply(null, arguments) };
var ___clang_call_terminate = Module["___clang_call_terminate"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___clang_call_terminate"].apply(null, arguments) };
var ___cos = Module["___cos"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cos"].apply(null, arguments) };
var ___ctype_b_loc = Module["___ctype_b_loc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___ctype_b_loc"].apply(null, arguments) };
var ___ctype_get_mb_cur_max = Module["___ctype_get_mb_cur_max"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___ctype_get_mb_cur_max"].apply(null, arguments) };
var ___ctype_tolower_loc = Module["___ctype_tolower_loc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___ctype_tolower_loc"].apply(null, arguments) };
var ___ctype_toupper_loc = Module["___ctype_toupper_loc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___ctype_toupper_loc"].apply(null, arguments) };
var ___cxa_can_catch = Module["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxa_can_catch"].apply(null, arguments) };
var ___cxa_get_globals_fast = Module["___cxa_get_globals_fast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxa_get_globals_fast"].apply(null, arguments) };
var ___cxa_guard_abort = Module["___cxa_guard_abort"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxa_guard_abort"].apply(null, arguments) };
var ___cxa_guard_acquire = Module["___cxa_guard_acquire"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxa_guard_acquire"].apply(null, arguments) };
var ___cxa_guard_release = Module["___cxa_guard_release"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxa_guard_release"].apply(null, arguments) };
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxa_is_pointer_type"].apply(null, arguments) };
var ___cxx_global_var_init = Module["___cxx_global_var_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init"].apply(null, arguments) };
var ___cxx_global_var_init_1 = Module["___cxx_global_var_init_1"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_1"].apply(null, arguments) };
var ___cxx_global_var_init_10 = Module["___cxx_global_var_init_10"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_10"].apply(null, arguments) };
var ___cxx_global_var_init_11 = Module["___cxx_global_var_init_11"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_11"].apply(null, arguments) };
var ___cxx_global_var_init_1174 = Module["___cxx_global_var_init_1174"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_1174"].apply(null, arguments) };
var ___cxx_global_var_init_12 = Module["___cxx_global_var_init_12"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_12"].apply(null, arguments) };
var ___cxx_global_var_init_13 = Module["___cxx_global_var_init_13"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_13"].apply(null, arguments) };
var ___cxx_global_var_init_14 = Module["___cxx_global_var_init_14"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_14"].apply(null, arguments) };
var ___cxx_global_var_init_1444 = Module["___cxx_global_var_init_1444"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_1444"].apply(null, arguments) };
var ___cxx_global_var_init_15 = Module["___cxx_global_var_init_15"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_15"].apply(null, arguments) };
var ___cxx_global_var_init_16 = Module["___cxx_global_var_init_16"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_16"].apply(null, arguments) };
var ___cxx_global_var_init_17 = Module["___cxx_global_var_init_17"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_17"].apply(null, arguments) };
var ___cxx_global_var_init_18 = Module["___cxx_global_var_init_18"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_18"].apply(null, arguments) };
var ___cxx_global_var_init_19 = Module["___cxx_global_var_init_19"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_19"].apply(null, arguments) };
var ___cxx_global_var_init_2 = Module["___cxx_global_var_init_2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_2"].apply(null, arguments) };
var ___cxx_global_var_init_20 = Module["___cxx_global_var_init_20"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_20"].apply(null, arguments) };
var ___cxx_global_var_init_21 = Module["___cxx_global_var_init_21"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_21"].apply(null, arguments) };
var ___cxx_global_var_init_26 = Module["___cxx_global_var_init_26"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_26"].apply(null, arguments) };
var ___cxx_global_var_init_27 = Module["___cxx_global_var_init_27"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_27"].apply(null, arguments) };
var ___cxx_global_var_init_28 = Module["___cxx_global_var_init_28"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_28"].apply(null, arguments) };
var ___cxx_global_var_init_29 = Module["___cxx_global_var_init_29"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_29"].apply(null, arguments) };
var ___cxx_global_var_init_3 = Module["___cxx_global_var_init_3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_3"].apply(null, arguments) };
var ___cxx_global_var_init_4 = Module["___cxx_global_var_init_4"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_4"].apply(null, arguments) };
var ___cxx_global_var_init_5 = Module["___cxx_global_var_init_5"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_5"].apply(null, arguments) };
var ___cxx_global_var_init_6 = Module["___cxx_global_var_init_6"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_6"].apply(null, arguments) };
var ___cxx_global_var_init_7 = Module["___cxx_global_var_init_7"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_7"].apply(null, arguments) };
var ___cxx_global_var_init_8 = Module["___cxx_global_var_init_8"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_8"].apply(null, arguments) };
var ___cxx_global_var_init_9 = Module["___cxx_global_var_init_9"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___cxx_global_var_init_9"].apply(null, arguments) };
var ___dup3 = Module["___dup3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___dup3"].apply(null, arguments) };
var ___dynamic_cast = Module["___dynamic_cast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___dynamic_cast"].apply(null, arguments) };
var ___errno_location = Module["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___errno_location"].apply(null, arguments) };
var ___fdopen = Module["___fdopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___fdopen"].apply(null, arguments) };
var ___fflush_unlocked = Module["___fflush_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___fflush_unlocked"].apply(null, arguments) };
var ___floatscan = Module["___floatscan"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___floatscan"].apply(null, arguments) };
var ___fmodeflags = Module["___fmodeflags"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___fmodeflags"].apply(null, arguments) };
var ___fseeko = Module["___fseeko"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___fseeko"].apply(null, arguments) };
var ___fseeko_unlocked = Module["___fseeko_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___fseeko_unlocked"].apply(null, arguments) };
var ___ftello = Module["___ftello"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___ftello"].apply(null, arguments) };
var ___ftello_unlocked = Module["___ftello_unlocked"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___ftello_unlocked"].apply(null, arguments) };
var ___fwritex = Module["___fwritex"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___fwritex"].apply(null, arguments) };
var ___getTypeName = Module["___getTypeName"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___getTypeName"].apply(null, arguments) };
var ___get_locale = Module["___get_locale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___get_locale"].apply(null, arguments) };
var ___intscan = Module["___intscan"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___intscan"].apply(null, arguments) };
var ___lctrans = Module["___lctrans"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___lctrans"].apply(null, arguments) };
var ___lctrans_impl = Module["___lctrans_impl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___lctrans_impl"].apply(null, arguments) };
var ___loc_is_allocated = Module["___loc_is_allocated"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___loc_is_allocated"].apply(null, arguments) };
var ___lockfile = Module["___lockfile"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___lockfile"].apply(null, arguments) };
var ___mo_lookup = Module["___mo_lookup"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___mo_lookup"].apply(null, arguments) };
var ___munmap = Module["___munmap"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___munmap"].apply(null, arguments) };
var ___newlocale = Module["___newlocale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___newlocale"].apply(null, arguments) };
var ___ofl_add = Module["___ofl_add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___ofl_add"].apply(null, arguments) };
var ___ofl_lock = Module["___ofl_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___ofl_lock"].apply(null, arguments) };
var ___ofl_unlock = Module["___ofl_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___ofl_unlock"].apply(null, arguments) };
var ___overflow = Module["___overflow"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___overflow"].apply(null, arguments) };
var ___procfdname = Module["___procfdname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___procfdname"].apply(null, arguments) };
var ___pthread_self = Module["___pthread_self"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___pthread_self"].apply(null, arguments) };
var ___pthread_self_105 = Module["___pthread_self_105"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___pthread_self_105"].apply(null, arguments) };
var ___pthread_self_229 = Module["___pthread_self_229"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___pthread_self_229"].apply(null, arguments) };
var ___pthread_self_434 = Module["___pthread_self_434"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___pthread_self_434"].apply(null, arguments) };
var ___pthread_self_437 = Module["___pthread_self_437"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___pthread_self_437"].apply(null, arguments) };
var ___pthread_self_440 = Module["___pthread_self_440"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___pthread_self_440"].apply(null, arguments) };
var ___pthread_self_443 = Module["___pthread_self_443"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___pthread_self_443"].apply(null, arguments) };
var ___pthread_self_602 = Module["___pthread_self_602"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___pthread_self_602"].apply(null, arguments) };
var ___randname = Module["___randname"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___randname"].apply(null, arguments) };
var ___rem_pio2 = Module["___rem_pio2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___rem_pio2"].apply(null, arguments) };
var ___rem_pio2_large = Module["___rem_pio2_large"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___rem_pio2_large"].apply(null, arguments) };
var ___shgetc = Module["___shgetc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___shgetc"].apply(null, arguments) };
var ___shlim = Module["___shlim"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___shlim"].apply(null, arguments) };
var ___sin = Module["___sin"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___sin"].apply(null, arguments) };
var ___stdio_close = Module["___stdio_close"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___stdio_close"].apply(null, arguments) };
var ___stdio_read = Module["___stdio_read"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___stdio_read"].apply(null, arguments) };
var ___stdio_seek = Module["___stdio_seek"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___stdio_seek"].apply(null, arguments) };
var ___stdio_write = Module["___stdio_write"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___stdio_write"].apply(null, arguments) };
var ___stdout_write = Module["___stdout_write"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___stdout_write"].apply(null, arguments) };
var ___stpcpy = Module["___stpcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___stpcpy"].apply(null, arguments) };
var ___strchrnul = Module["___strchrnul"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___strchrnul"].apply(null, arguments) };
var ___strdup = Module["___strdup"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___strdup"].apply(null, arguments) };
var ___strerror_l = Module["___strerror_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___strerror_l"].apply(null, arguments) };
var ___string_read = Module["___string_read"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___string_read"].apply(null, arguments) };
var ___syscall_ret = Module["___syscall_ret"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___syscall_ret"].apply(null, arguments) };
var ___toread = Module["___toread"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___toread"].apply(null, arguments) };
var ___towrite = Module["___towrite"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___towrite"].apply(null, arguments) };
var ___uflow = Module["___uflow"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___uflow"].apply(null, arguments) };
var ___unlist_locked_file = Module["___unlist_locked_file"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___unlist_locked_file"].apply(null, arguments) };
var ___unlockfile = Module["___unlockfile"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___unlockfile"].apply(null, arguments) };
var ___uselocale = Module["___uselocale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["___uselocale"].apply(null, arguments) };
var _abort_message = Module["_abort_message"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_abort_message"].apply(null, arguments) };
var _access = Module["_access"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_access"].apply(null, arguments) };
var _arg_n = Module["_arg_n"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_arg_n"].apply(null, arguments) };
var _atan = Module["_atan"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_atan"].apply(null, arguments) };
var _atan2 = Module["_atan2"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_atan2"].apply(null, arguments) };
var _atoi = Module["_atoi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_atoi"].apply(null, arguments) };
var _c_sfe = Module["_c_sfe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_c_sfe"].apply(null, arguments) };
var _catclose = Module["_catclose"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_catclose"].apply(null, arguments) };
var _catgets = Module["_catgets"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_catgets"].apply(null, arguments) };
var _catopen = Module["_catopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_catopen"].apply(null, arguments) };
var _copysign = Module["_copysign"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_copysign"].apply(null, arguments) };
var _copysignl = Module["_copysignl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_copysignl"].apply(null, arguments) };
var _cos = Module["_cos"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_cos"].apply(null, arguments) };
var _d_cnjg = Module["_d_cnjg"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_d_cnjg"].apply(null, arguments) };
var _d_imag = Module["_d_imag"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_d_imag"].apply(null, arguments) };
var _d_lg10 = Module["_d_lg10"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_d_lg10"].apply(null, arguments) };
var _d_sign = Module["_d_sign"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_d_sign"].apply(null, arguments) };
var _daxpy_ = Module["_daxpy_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_daxpy_"].apply(null, arguments) };
var _dcabs1_ = Module["_dcabs1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dcabs1_"].apply(null, arguments) };
var _dcopy_ = Module["_dcopy_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dcopy_"].apply(null, arguments) };
var _ddot_ = Module["_ddot_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ddot_"].apply(null, arguments) };
var _decfloat = Module["_decfloat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_decfloat"].apply(null, arguments) };
var _dgemm_ = Module["_dgemm_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dgemm_"].apply(null, arguments) };
var _dgemv_ = Module["_dgemv_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dgemv_"].apply(null, arguments) };
var _dger_ = Module["_dger_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dger_"].apply(null, arguments) };
var _dgetf2_ = Module["_dgetf2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dgetf2_"].apply(null, arguments) };
var _dgetrf_ = Module["_dgetrf_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dgetrf_"].apply(null, arguments) };
var _dgetri_ = Module["_dgetri_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dgetri_"].apply(null, arguments) };
var _disnan_ = Module["_disnan_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_disnan_"].apply(null, arguments) };
var _dispose_chunk = Module["_dispose_chunk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dispose_chunk"].apply(null, arguments) };
var _dlabad_ = Module["_dlabad_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlabad_"].apply(null, arguments) };
var _dlacpy_ = Module["_dlacpy_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlacpy_"].apply(null, arguments) };
var _dladiv_ = Module["_dladiv_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dladiv_"].apply(null, arguments) };
var _dlae2_ = Module["_dlae2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlae2_"].apply(null, arguments) };
var _dlaed0_ = Module["_dlaed0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlaed0_"].apply(null, arguments) };
var _dlaed1_ = Module["_dlaed1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlaed1_"].apply(null, arguments) };
var _dlaed2_ = Module["_dlaed2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlaed2_"].apply(null, arguments) };
var _dlaed3_ = Module["_dlaed3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlaed3_"].apply(null, arguments) };
var _dlaed4_ = Module["_dlaed4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlaed4_"].apply(null, arguments) };
var _dlaed5_ = Module["_dlaed5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlaed5_"].apply(null, arguments) };
var _dlaed6_ = Module["_dlaed6_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlaed6_"].apply(null, arguments) };
var _dlaed7_ = Module["_dlaed7_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlaed7_"].apply(null, arguments) };
var _dlaed8_ = Module["_dlaed8_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlaed8_"].apply(null, arguments) };
var _dlaed9_ = Module["_dlaed9_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlaed9_"].apply(null, arguments) };
var _dlaeda_ = Module["_dlaeda_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlaeda_"].apply(null, arguments) };
var _dlaev2_ = Module["_dlaev2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlaev2_"].apply(null, arguments) };
var _dlaisnan_ = Module["_dlaisnan_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlaisnan_"].apply(null, arguments) };
var _dlamc1_ = Module["_dlamc1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlamc1_"].apply(null, arguments) };
var _dlamc2_ = Module["_dlamc2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlamc2_"].apply(null, arguments) };
var _dlamc3_ = Module["_dlamc3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlamc3_"].apply(null, arguments) };
var _dlamc4_ = Module["_dlamc4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlamc4_"].apply(null, arguments) };
var _dlamc5_ = Module["_dlamc5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlamc5_"].apply(null, arguments) };
var _dlamch_ = Module["_dlamch_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlamch_"].apply(null, arguments) };
var _dlamrg_ = Module["_dlamrg_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlamrg_"].apply(null, arguments) };
var _dlanst_ = Module["_dlanst_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlanst_"].apply(null, arguments) };
var _dlansy_ = Module["_dlansy_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlansy_"].apply(null, arguments) };
var _dlapy2_ = Module["_dlapy2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlapy2_"].apply(null, arguments) };
var _dlapy3_ = Module["_dlapy3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlapy3_"].apply(null, arguments) };
var _dlarf_ = Module["_dlarf_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlarf_"].apply(null, arguments) };
var _dlarfb_ = Module["_dlarfb_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlarfb_"].apply(null, arguments) };
var _dlarfg_ = Module["_dlarfg_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlarfg_"].apply(null, arguments) };
var _dlarft_ = Module["_dlarft_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlarft_"].apply(null, arguments) };
var _dlartg_ = Module["_dlartg_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlartg_"].apply(null, arguments) };
var _dlascl_ = Module["_dlascl_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlascl_"].apply(null, arguments) };
var _dlaset_ = Module["_dlaset_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlaset_"].apply(null, arguments) };
var _dlasr_ = Module["_dlasr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlasr_"].apply(null, arguments) };
var _dlasrt_ = Module["_dlasrt_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlasrt_"].apply(null, arguments) };
var _dlassq_ = Module["_dlassq_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlassq_"].apply(null, arguments) };
var _dlaswp_ = Module["_dlaswp_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlaswp_"].apply(null, arguments) };
var _dlatrd_ = Module["_dlatrd_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dlatrd_"].apply(null, arguments) };
var _dnrm2_ = Module["_dnrm2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dnrm2_"].apply(null, arguments) };
var _do_fio = Module["_do_fio"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_do_fio"].apply(null, arguments) };
var _do_read = Module["_do_read"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_do_read"].apply(null, arguments) };
var _dorg2l_ = Module["_dorg2l_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dorg2l_"].apply(null, arguments) };
var _dorg2r_ = Module["_dorg2r_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dorg2r_"].apply(null, arguments) };
var _dorgql_ = Module["_dorgql_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dorgql_"].apply(null, arguments) };
var _dorgqr_ = Module["_dorgqr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dorgqr_"].apply(null, arguments) };
var _dorgtr_ = Module["_dorgtr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dorgtr_"].apply(null, arguments) };
var _dorm2l_ = Module["_dorm2l_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dorm2l_"].apply(null, arguments) };
var _dorm2r_ = Module["_dorm2r_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dorm2r_"].apply(null, arguments) };
var _dormql_ = Module["_dormql_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dormql_"].apply(null, arguments) };
var _dormqr_ = Module["_dormqr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dormqr_"].apply(null, arguments) };
var _dormtr_ = Module["_dormtr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dormtr_"].apply(null, arguments) };
var _drot_ = Module["_drot_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_drot_"].apply(null, arguments) };
var _dscal_ = Module["_dscal_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dscal_"].apply(null, arguments) };
var _dstedc_ = Module["_dstedc_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dstedc_"].apply(null, arguments) };
var _dsteqr_ = Module["_dsteqr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dsteqr_"].apply(null, arguments) };
var _dsterf_ = Module["_dsterf_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dsterf_"].apply(null, arguments) };
var _dswap_ = Module["_dswap_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dswap_"].apply(null, arguments) };
var _dsyev_ = Module["_dsyev_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dsyev_"].apply(null, arguments) };
var _dsyevd_ = Module["_dsyevd_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dsyevd_"].apply(null, arguments) };
var _dsymv_ = Module["_dsymv_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dsymv_"].apply(null, arguments) };
var _dsyr2_ = Module["_dsyr2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dsyr2_"].apply(null, arguments) };
var _dsyr2k_ = Module["_dsyr2k_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dsyr2k_"].apply(null, arguments) };
var _dsytd2_ = Module["_dsytd2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dsytd2_"].apply(null, arguments) };
var _dsytrd_ = Module["_dsytrd_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dsytrd_"].apply(null, arguments) };
var _dtrmm_ = Module["_dtrmm_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dtrmm_"].apply(null, arguments) };
var _dtrmv_ = Module["_dtrmv_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dtrmv_"].apply(null, arguments) };
var _dtrsm_ = Module["_dtrsm_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dtrsm_"].apply(null, arguments) };
var _dtrti2_ = Module["_dtrti2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dtrti2_"].apply(null, arguments) };
var _dtrtri_ = Module["_dtrtri_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dtrtri_"].apply(null, arguments) };
var _dummy = Module["_dummy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dummy"].apply(null, arguments) };
var _dummy_733 = Module["_dummy_733"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dummy_733"].apply(null, arguments) };
var _dznrm2_ = Module["_dznrm2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dznrm2_"].apply(null, arguments) };
var _dzsum1_ = Module["_dzsum1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_dzsum1_"].apply(null, arguments) };
var _e_wsfe = Module["_e_wsfe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_e_wsfe"].apply(null, arguments) };
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_emscripten_replace_memory"].apply(null, arguments) };
var _en_fio = Module["_en_fio"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_en_fio"].apply(null, arguments) };
var _err__fl = Module["_err__fl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_err__fl"].apply(null, arguments) };
var _exit_ = Module["_exit_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_exit_"].apply(null, arguments) };
var _exp = Module["_exp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_exp"].apply(null, arguments) };
var _f__cabs = Module["_f__cabs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_f__cabs"].apply(null, arguments) };
var _f__canseek = Module["_f__canseek"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_f__canseek"].apply(null, arguments) };
var _f__fatal = Module["_f__fatal"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_f__fatal"].apply(null, arguments) };
var _f__icvt = Module["_f__icvt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_f__icvt"].apply(null, arguments) };
var _f__inode = Module["_f__inode"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_f__inode"].apply(null, arguments) };
var _f__nowwriting = Module["_f__nowwriting"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_f__nowwriting"].apply(null, arguments) };
var _f__putbuf = Module["_f__putbuf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_f__putbuf"].apply(null, arguments) };
var _f_clos = Module["_f_clos"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_f_clos"].apply(null, arguments) };
var _f_exit = Module["_f_exit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_f_exit"].apply(null, arguments) };
var _f_init = Module["_f_init"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_f_init"].apply(null, arguments) };
var _f_open = Module["_f_open"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_f_open"].apply(null, arguments) };
var _f_s = Module["_f_s"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_f_s"].apply(null, arguments) };
var _fclose = Module["_fclose"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fclose"].apply(null, arguments) };
var _fflush = Module["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fflush"].apply(null, arguments) };
var _fileno = Module["_fileno"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fileno"].apply(null, arguments) };
var _fk_open = Module["_fk_open"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fk_open"].apply(null, arguments) };
var _fmax = Module["_fmax"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fmax"].apply(null, arguments) };
var _fmod = Module["_fmod"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fmod"].apply(null, arguments) };
var _fmodl = Module["_fmodl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fmodl"].apply(null, arguments) };
var _fmt_bg = Module["_fmt_bg"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fmt_bg"].apply(null, arguments) };
var _fmt_fp = Module["_fmt_fp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fmt_fp"].apply(null, arguments) };
var _fmt_o = Module["_fmt_o"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fmt_o"].apply(null, arguments) };
var _fmt_u = Module["_fmt_u"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fmt_u"].apply(null, arguments) };
var _fmt_x = Module["_fmt_x"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fmt_x"].apply(null, arguments) };
var _fopen = Module["_fopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fopen"].apply(null, arguments) };
var _fprintf = Module["_fprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fprintf"].apply(null, arguments) };
var _fputc = Module["_fputc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fputc"].apply(null, arguments) };
var _fputs = Module["_fputs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fputs"].apply(null, arguments) };
var _fread = Module["_fread"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fread"].apply(null, arguments) };
var _free = Module["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_free"].apply(null, arguments) };
var _freelocale = Module["_freelocale"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_freelocale"].apply(null, arguments) };
var _freopen = Module["_freopen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_freopen"].apply(null, arguments) };
var _frexp = Module["_frexp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_frexp"].apply(null, arguments) };
var _frexpl = Module["_frexpl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_frexpl"].apply(null, arguments) };
var _fseek = Module["_fseek"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fseek"].apply(null, arguments) };
var _fstat = Module["_fstat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fstat"].apply(null, arguments) };
var _ftell = Module["_ftell"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ftell"].apply(null, arguments) };
var _ftruncate = Module["_ftruncate"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ftruncate"].apply(null, arguments) };
var _fwrite = Module["_fwrite"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_fwrite"].apply(null, arguments) };
var _g_char = Module["_g_char"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_g_char"].apply(null, arguments) };
var _getc = Module["_getc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_getc"].apply(null, arguments) };
var _getint = Module["_getint"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_getint"].apply(null, arguments) };
var _hexfloat = Module["_hexfloat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_hexfloat"].apply(null, arguments) };
var _hypot = Module["_hypot"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_hypot"].apply(null, arguments) };
var _i_nint = Module["_i_nint"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_i_nint"].apply(null, arguments) };
var _idamax_ = Module["_idamax_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_idamax_"].apply(null, arguments) };
var _ieeeck_ = Module["_ieeeck_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ieeeck_"].apply(null, arguments) };
var _iladlc_ = Module["_iladlc_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_iladlc_"].apply(null, arguments) };
var _iladlr_ = Module["_iladlr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_iladlr_"].apply(null, arguments) };
var _ilaenv_ = Module["_ilaenv_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ilaenv_"].apply(null, arguments) };
var _ilazlc_ = Module["_ilazlc_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ilazlc_"].apply(null, arguments) };
var _ilazlr_ = Module["_ilazlr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ilazlr_"].apply(null, arguments) };
var _ilogb = Module["_ilogb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ilogb"].apply(null, arguments) };
var _internal_memalign = Module["_internal_memalign"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_internal_memalign"].apply(null, arguments) };
var _iparmq_ = Module["_iparmq_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_iparmq_"].apply(null, arguments) };
var _isatty = Module["_isatty"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_isatty"].apply(null, arguments) };
var _isdigit_l = Module["_isdigit_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_isdigit_l"].apply(null, arguments) };
var _isspace = Module["_isspace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_isspace"].apply(null, arguments) };
var _isxdigit = Module["_isxdigit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_isxdigit"].apply(null, arguments) };
var _isxdigit_l = Module["_isxdigit_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_isxdigit_l"].apply(null, arguments) };
var _izamax_ = Module["_izamax_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_izamax_"].apply(null, arguments) };
var _izmax1_ = Module["_izmax1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_izmax1_"].apply(null, arguments) };
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_llvm_bswap_i32"].apply(null, arguments) };
var _log = Module["_log"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_log"].apply(null, arguments) };
var _logb = Module["_logb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_logb"].apply(null, arguments) };
var _lsame_ = Module["_lsame_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_lsame_"].apply(null, arguments) };
var _main = Module["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_main"].apply(null, arguments) };
var _malloc = Module["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_malloc"].apply(null, arguments) };
var _mbrlen = Module["_mbrlen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_mbrlen"].apply(null, arguments) };
var _mbrtowc = Module["_mbrtowc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_mbrtowc"].apply(null, arguments) };
var _mbsinit = Module["_mbsinit"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_mbsinit"].apply(null, arguments) };
var _mbsnrtowcs = Module["_mbsnrtowcs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_mbsnrtowcs"].apply(null, arguments) };
var _mbsrtowcs = Module["_mbsrtowcs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_mbsrtowcs"].apply(null, arguments) };
var _mbtowc = Module["_mbtowc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_mbtowc"].apply(null, arguments) };
var _memchr = Module["_memchr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memchr"].apply(null, arguments) };
var _memcpy = Module["_memcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memcpy"].apply(null, arguments) };
var _memmove = Module["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memmove"].apply(null, arguments) };
var _memset = Module["_memset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_memset"].apply(null, arguments) };
var _mv_cur = Module["_mv_cur"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_mv_cur"].apply(null, arguments) };
var _opn_err = Module["_opn_err"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_opn_err"].apply(null, arguments) };
var _out = Module["_out"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_out"].apply(null, arguments) };
var _pad_669 = Module["_pad_669"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pad_669"].apply(null, arguments) };
var _pars_f = Module["_pars_f"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pars_f"].apply(null, arguments) };
var _perror = Module["_perror"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_perror"].apply(null, arguments) };
var _pop_arg = Module["_pop_arg"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pop_arg"].apply(null, arguments) };
var _posix_memalign = Module["_posix_memalign"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_posix_memalign"].apply(null, arguments) };
var _pow_di = Module["_pow_di"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pow_di"].apply(null, arguments) };
var _pow_ii = Module["_pow_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pow_ii"].apply(null, arguments) };
var _pow_zi = Module["_pow_zi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pow_zi"].apply(null, arguments) };
var _printf = Module["_printf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_printf"].apply(null, arguments) };
var _printf_core = Module["_printf_core"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_printf_core"].apply(null, arguments) };
var _pthread_cond_broadcast = Module["_pthread_cond_broadcast"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pthread_cond_broadcast"].apply(null, arguments) };
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pthread_mutex_lock"].apply(null, arguments) };
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pthread_mutex_unlock"].apply(null, arguments) };
var _pthread_self = Module["_pthread_self"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_pthread_self"].apply(null, arguments) };
var _putc = Module["_putc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_putc"].apply(null, arguments) };
var _rand = Module["_rand"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_rand"].apply(null, arguments) };
var _realloc = Module["_realloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_realloc"].apply(null, arguments) };
var _rewind = Module["_rewind"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_rewind"].apply(null, arguments) };
var _s_cat = Module["_s_cat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_s_cat"].apply(null, arguments) };
var _s_cmp = Module["_s_cmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_s_cmp"].apply(null, arguments) };
var _s_copy = Module["_s_copy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_s_copy"].apply(null, arguments) };
var _s_wsfe = Module["_s_wsfe"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_s_wsfe"].apply(null, arguments) };
var _sbrk = Module["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_sbrk"].apply(null, arguments) };
var _scalbn = Module["_scalbn"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_scalbn"].apply(null, arguments) };
var _scalbnl = Module["_scalbnl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_scalbnl"].apply(null, arguments) };
var _scanexp = Module["_scanexp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_scanexp"].apply(null, arguments) };
var _sig_die = Module["_sig_die"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_sig_die"].apply(null, arguments) };
var _sigfdie = Module["_sigfdie"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_sigfdie"].apply(null, arguments) };
var _sigidie = Module["_sigidie"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_sigidie"].apply(null, arguments) };
var _sigindie = Module["_sigindie"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_sigindie"].apply(null, arguments) };
var _sigqdie = Module["_sigqdie"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_sigqdie"].apply(null, arguments) };
var _sigtdie = Module["_sigtdie"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_sigtdie"].apply(null, arguments) };
var _sigtrdie = Module["_sigtrdie"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_sigtrdie"].apply(null, arguments) };
var _sin = Module["_sin"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_sin"].apply(null, arguments) };
var _sn_write = Module["_sn_write"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_sn_write"].apply(null, arguments) };
var _snprintf = Module["_snprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_snprintf"].apply(null, arguments) };
var _sprintf = Module["_sprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_sprintf"].apply(null, arguments) };
var _sq = Module["_sq"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_sq"].apply(null, arguments) };
var _sscanf = Module["_sscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_sscanf"].apply(null, arguments) };
var _stat = Module["_stat"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_stat"].apply(null, arguments) };
var _store_int = Module["_store_int"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_store_int"].apply(null, arguments) };
var _strchr = Module["_strchr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strchr"].apply(null, arguments) };
var _strcmp = Module["_strcmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strcmp"].apply(null, arguments) };
var _strcpy = Module["_strcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strcpy"].apply(null, arguments) };
var _strerror = Module["_strerror"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strerror"].apply(null, arguments) };
var _strerror_r = Module["_strerror_r"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strerror_r"].apply(null, arguments) };
var _strlen = Module["_strlen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strlen"].apply(null, arguments) };
var _strtod = Module["_strtod"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtod"].apply(null, arguments) };
var _strtod_l = Module["_strtod_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtod_l"].apply(null, arguments) };
var _strtof = Module["_strtof"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtof"].apply(null, arguments) };
var _strtof_l = Module["_strtof_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtof_l"].apply(null, arguments) };
var _strtold = Module["_strtold"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtold"].apply(null, arguments) };
var _strtold_l = Module["_strtold_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtold_l"].apply(null, arguments) };
var _strtoll = Module["_strtoll"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtoll"].apply(null, arguments) };
var _strtoll_l = Module["_strtoll_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtoll_l"].apply(null, arguments) };
var _strtoull = Module["_strtoull"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtoull"].apply(null, arguments) };
var _strtoull_l = Module["_strtoull_l"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtoull_l"].apply(null, arguments) };
var _strtox = Module["_strtox"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtox"].apply(null, arguments) };
var _strtox_763 = Module["_strtox_763"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_strtox_763"].apply(null, arguments) };
var _swapc = Module["_swapc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_swapc"].apply(null, arguments) };
var _t_runc = Module["_t_runc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_t_runc"].apply(null, arguments) };
var _tmpfile = Module["_tmpfile"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_tmpfile"].apply(null, arguments) };
var _try_realloc_chunk = Module["_try_realloc_chunk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_try_realloc_chunk"].apply(null, arguments) };
var _ungetc = Module["_ungetc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ungetc"].apply(null, arguments) };
var _unlink = Module["_unlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_unlink"].apply(null, arguments) };
var _vasprintf = Module["_vasprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_vasprintf"].apply(null, arguments) };
var _vfprintf = Module["_vfprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_vfprintf"].apply(null, arguments) };
var _vfscanf = Module["_vfscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_vfscanf"].apply(null, arguments) };
var _vsnprintf = Module["_vsnprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_vsnprintf"].apply(null, arguments) };
var _vsprintf = Module["_vsprintf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_vsprintf"].apply(null, arguments) };
var _vsscanf = Module["_vsscanf"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_vsscanf"].apply(null, arguments) };
var _w_ed = Module["_w_ed"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_w_ed"].apply(null, arguments) };
var _w_ned = Module["_w_ned"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_w_ned"].apply(null, arguments) };
var _wcrtomb = Module["_wcrtomb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_wcrtomb"].apply(null, arguments) };
var _wcslen = Module["_wcslen"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_wcslen"].apply(null, arguments) };
var _wcsnrtombs = Module["_wcsnrtombs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_wcsnrtombs"].apply(null, arguments) };
var _wcsrtombs = Module["_wcsrtombs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_wcsrtombs"].apply(null, arguments) };
var _wctomb = Module["_wctomb"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_wctomb"].apply(null, arguments) };
var _wmemcpy = Module["_wmemcpy"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_wmemcpy"].apply(null, arguments) };
var _wmemmove = Module["_wmemmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_wmemmove"].apply(null, arguments) };
var _wmemset = Module["_wmemset"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_wmemset"].apply(null, arguments) };
var _wrt_E = Module["_wrt_E"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_wrt_E"].apply(null, arguments) };
var _wrt_F = Module["_wrt_F"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_wrt_F"].apply(null, arguments) };
var _wrt_I = Module["_wrt_I"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_wrt_I"].apply(null, arguments) };
var _wrt_IM = Module["_wrt_IM"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_wrt_IM"].apply(null, arguments) };
var _wrt_Z = Module["_wrt_Z"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_wrt_Z"].apply(null, arguments) };
var _x_putc = Module["_x_putc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_x_putc"].apply(null, arguments) };
var _x_wSL = Module["_x_wSL"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_x_wSL"].apply(null, arguments) };
var _xerbla_ = Module["_xerbla_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_xerbla_"].apply(null, arguments) };
var _xw_end = Module["_xw_end"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_xw_end"].apply(null, arguments) };
var _xw_rev = Module["_xw_rev"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_xw_rev"].apply(null, arguments) };
var _z_abs = Module["_z_abs"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_z_abs"].apply(null, arguments) };
var _z_div = Module["_z_div"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_z_div"].apply(null, arguments) };
var _z_sqrt = Module["_z_sqrt"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_z_sqrt"].apply(null, arguments) };
var _zaxpy_ = Module["_zaxpy_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zaxpy_"].apply(null, arguments) };
var _zcopy_ = Module["_zcopy_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zcopy_"].apply(null, arguments) };
var _zdotc_ = Module["_zdotc_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zdotc_"].apply(null, arguments) };
var _zdotu_ = Module["_zdotu_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zdotu_"].apply(null, arguments) };
var _zdscal_ = Module["_zdscal_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zdscal_"].apply(null, arguments) };
var _zgebak_ = Module["_zgebak_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zgebak_"].apply(null, arguments) };
var _zgebal_ = Module["_zgebal_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zgebal_"].apply(null, arguments) };
var _zgees_ = Module["_zgees_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zgees_"].apply(null, arguments) };
var _zgehd2_ = Module["_zgehd2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zgehd2_"].apply(null, arguments) };
var _zgehrd_ = Module["_zgehrd_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zgehrd_"].apply(null, arguments) };
var _zgemm_ = Module["_zgemm_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zgemm_"].apply(null, arguments) };
var _zgemv_ = Module["_zgemv_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zgemv_"].apply(null, arguments) };
var _zgerc_ = Module["_zgerc_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zgerc_"].apply(null, arguments) };
var _zherk_ = Module["_zherk_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zherk_"].apply(null, arguments) };
var _zhseqr_ = Module["_zhseqr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zhseqr_"].apply(null, arguments) };
var _zlacgv_ = Module["_zlacgv_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zlacgv_"].apply(null, arguments) };
var _zlacn2_ = Module["_zlacn2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zlacn2_"].apply(null, arguments) };
var _zlacpy_ = Module["_zlacpy_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zlacpy_"].apply(null, arguments) };
var _zladiv_ = Module["_zladiv_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zladiv_"].apply(null, arguments) };
var _zlahqr_ = Module["_zlahqr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zlahqr_"].apply(null, arguments) };
var _zlahr2_ = Module["_zlahr2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zlahr2_"].apply(null, arguments) };
var _zlange_ = Module["_zlange_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zlange_"].apply(null, arguments) };
var _zlaqr0_ = Module["_zlaqr0_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zlaqr0_"].apply(null, arguments) };
var _zlaqr1_ = Module["_zlaqr1_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zlaqr1_"].apply(null, arguments) };
var _zlaqr2_ = Module["_zlaqr2_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zlaqr2_"].apply(null, arguments) };
var _zlaqr3_ = Module["_zlaqr3_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zlaqr3_"].apply(null, arguments) };
var _zlaqr4_ = Module["_zlaqr4_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zlaqr4_"].apply(null, arguments) };
var _zlaqr5_ = Module["_zlaqr5_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zlaqr5_"].apply(null, arguments) };
var _zlarf_ = Module["_zlarf_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zlarf_"].apply(null, arguments) };
var _zlarfb_ = Module["_zlarfb_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zlarfb_"].apply(null, arguments) };
var _zlarfg_ = Module["_zlarfg_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zlarfg_"].apply(null, arguments) };
var _zlarft_ = Module["_zlarft_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zlarft_"].apply(null, arguments) };
var _zlartg_ = Module["_zlartg_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zlartg_"].apply(null, arguments) };
var _zlascl_ = Module["_zlascl_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zlascl_"].apply(null, arguments) };
var _zlaset_ = Module["_zlaset_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zlaset_"].apply(null, arguments) };
var _zlassq_ = Module["_zlassq_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zlassq_"].apply(null, arguments) };
var _zrot_ = Module["_zrot_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zrot_"].apply(null, arguments) };
var _zscal_ = Module["_zscal_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zscal_"].apply(null, arguments) };
var _zswap_ = Module["_zswap_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zswap_"].apply(null, arguments) };
var _ztrexc_ = Module["_ztrexc_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ztrexc_"].apply(null, arguments) };
var _ztrmm_ = Module["_ztrmm_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ztrmm_"].apply(null, arguments) };
var _ztrmv_ = Module["_ztrmv_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ztrmv_"].apply(null, arguments) };
var _ztrsen_ = Module["_ztrsen_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ztrsen_"].apply(null, arguments) };
var _ztrsyl_ = Module["_ztrsyl_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_ztrsyl_"].apply(null, arguments) };
var _zung2r_ = Module["_zung2r_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zung2r_"].apply(null, arguments) };
var _zunghr_ = Module["_zunghr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zunghr_"].apply(null, arguments) };
var _zungqr_ = Module["_zungqr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zungqr_"].apply(null, arguments) };
var _zunm2r_ = Module["_zunm2r_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zunm2r_"].apply(null, arguments) };
var _zunmhr_ = Module["_zunmhr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zunmhr_"].apply(null, arguments) };
var _zunmqr_ = Module["_zunmqr_"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["_zunmqr_"].apply(null, arguments) };
var establishStackSpace = Module["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["establishStackSpace"].apply(null, arguments) };
var getTempRet0 = Module["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["getTempRet0"].apply(null, arguments) };
var runPostSets = Module["runPostSets"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["runPostSets"].apply(null, arguments) };
var setTempRet0 = Module["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setTempRet0"].apply(null, arguments) };
var setThrew = Module["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["setThrew"].apply(null, arguments) };
var stackAlloc = Module["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackAlloc"].apply(null, arguments) };
var stackRestore = Module["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackRestore"].apply(null, arguments) };
var stackSave = Module["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["stackSave"].apply(null, arguments) };
var dynCall_dd = Module["dynCall_dd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_dd"].apply(null, arguments) };
var dynCall_di = Module["dynCall_di"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_di"].apply(null, arguments) };
var dynCall_diii = Module["dynCall_diii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diii"].apply(null, arguments) };
var dynCall_diiii = Module["dynCall_diiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_diiii"].apply(null, arguments) };
var dynCall_fiii = Module["dynCall_fiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_fiii"].apply(null, arguments) };
var dynCall_i = Module["dynCall_i"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_i"].apply(null, arguments) };
var dynCall_id = Module["dynCall_id"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_id"].apply(null, arguments) };
var dynCall_ii = Module["dynCall_ii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_ii"].apply(null, arguments) };
var dynCall_iid = Module["dynCall_iid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iid"].apply(null, arguments) };
var dynCall_iii = Module["dynCall_iii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iii"].apply(null, arguments) };
var dynCall_iiii = Module["dynCall_iiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiii"].apply(null, arguments) };
var dynCall_iiiii = Module["dynCall_iiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiii"].apply(null, arguments) };
var dynCall_iiiiid = Module["dynCall_iiiiid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiid"].apply(null, arguments) };
var dynCall_iiiiii = Module["dynCall_iiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiii"].apply(null, arguments) };
var dynCall_iiiiiid = Module["dynCall_iiiiiid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiid"].apply(null, arguments) };
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiii"].apply(null, arguments) };
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiii"].apply(null, arguments) };
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiiii"].apply(null, arguments) };
var dynCall_iiiiiiiiiii = Module["dynCall_iiiiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiiiiii"].apply(null, arguments) };
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiiiiiii"].apply(null, arguments) };
var dynCall_iiiiiiiiiiiii = Module["dynCall_iiiiiiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiiiiiiiiii"].apply(null, arguments) };
var dynCall_iiiiij = Module["dynCall_iiiiij"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_iiiiij"].apply(null, arguments) };
var dynCall_jd = Module["dynCall_jd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_jd"].apply(null, arguments) };
var dynCall_jiiii = Module["dynCall_jiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_jiiii"].apply(null, arguments) };
var dynCall_v = Module["dynCall_v"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_v"].apply(null, arguments) };
var dynCall_vi = Module["dynCall_vi"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vi"].apply(null, arguments) };
var dynCall_vid = Module["dynCall_vid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vid"].apply(null, arguments) };
var dynCall_vii = Module["dynCall_vii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_vii"].apply(null, arguments) };
var dynCall_viid = Module["dynCall_viid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viid"].apply(null, arguments) };
var dynCall_viidd = Module["dynCall_viidd"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viidd"].apply(null, arguments) };
var dynCall_viii = Module["dynCall_viii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viii"].apply(null, arguments) };
var dynCall_viiid = Module["dynCall_viiid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiid"].apply(null, arguments) };
var dynCall_viiii = Module["dynCall_viiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiii"].apply(null, arguments) };
var dynCall_viiiid = Module["dynCall_viiiid"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiid"].apply(null, arguments) };
var dynCall_viiiii = Module["dynCall_viiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiii"].apply(null, arguments) };
var dynCall_viiiiii = Module["dynCall_viiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiii"].apply(null, arguments) };
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiii"].apply(null, arguments) };
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiiii"].apply(null, arguments) };
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiiiii"].apply(null, arguments) };
var dynCall_viiiiiiiiiii = Module["dynCall_viiiiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiiiiii"].apply(null, arguments) };
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viiiiiiiiiiiiiii"].apply(null, arguments) };
var dynCall_viijii = Module["dynCall_viijii"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return Module["asm"]["dynCall_viijii"].apply(null, arguments) };
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });




/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



