package de.rwth.pacman.heithoff1.coneSearch.enemySearch;

import de.rwth.pacman.common.Constant;
import de.rwth.pacman.common.Equals;
import de.rwth.pacman.common.Switch;
import de.rwth.pacman.common.Sqrt;
import de.rwth.pacman.common.Sum;
import de.rwth.pacman.common.Multiplication;
import de.rwth.pacman.common.Abs;
import de.rwth.pacman.common.Difference;
import de.rwth.pacman.common.Division;

component ScoreGhost<Z toPM = 0> {
    ports
      in Q(-1m: 19m) currentX,
      in Q(0m: 22m) currentY,
      in Q(-1m: 19m) ghostX,
      in Q(0m: 22m) ghostY,
      in Z ghostDirection,
      in Boolean ghostEatable,
      
      out Z val;

      instance Constant<toPM> toPMDir;
      instance EnemyWeights weights;
      instance Equals ghostFacingTowardsPMCond;
      instance Switch ghostFacingTowardsPM, ghostIsEatable;

      connect weights.eatable -> ghostIsEatable.in1;
      connect weights.towardsPacMan -> ghostFacingTowardsPM.in1;
      connect weights.normal -> ghostFacingTowardsPM.in3;
      connect ghostEatable -> ghostIsEatable.cond;
      connect ghostFacingTowardsPM.out1 -> ghostIsEatable.in3;
      connect toPMDir.out1 -> ghostFacingTowardsPMCond.in1;
      connect ghostDirection -> ghostFacingTowardsPMCond.in2;
      connect ghostFacingTowardsPMCond.out1 -> ghostFacingTowardsPM.cond;
      
      instance Sqrt dist;
      instance Sum<2> distIn;
      instance Multiplication<2> distInX, distInY;
      instance Abs distX, distY;
      instance Difference<2> distXIn, distYIn;
      
      connect currentX -> distXIn.in1[1];
      connect ghostX -> distXIn.in1[2];
      connect currentY -> distYIn.in1[1];
      connect ghostY -> distYIn.in1[2];
      connect distXIn.out1 -> distX.in1;
      connect distYIn.out1 -> distY.in1;
      connect distX.out1 -> distInX.in1[1], distInX.in1[2];
      connect distY.out1 -> distInY.in1[1], distInY.in1[2];
      connect distInX.out1 -> distIn.in1[1];
      connect distInY.out1 -> distIn.in1[2];
      connect distIn.out1 -> dist.in1;

      instance Division<2> finalValue;
      connect ghostIsEatable.out1 -> finalValue.in1;
      connect dist.out1 -> finalValue.in2;
      connect finalValue.out1 -> val;
      
}