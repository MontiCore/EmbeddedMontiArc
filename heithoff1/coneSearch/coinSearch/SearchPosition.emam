package de.rwth.pacman.heithoff1.coneSearch.coinSearch;

import de.rwth.pacman.common.*;
import de.rwth.pacman.heithoff1.coneSearch.coinSearch.coneCheck.*;

component SearchPosition<N1 indexY = 1, N1 indexX = 1, B isDown = 0, B isRight = 0> {
    ports
      in Z^{22,19} map,
      in Q(-1m: 19m) currentX,
      in Q(0m: 22m) currentY,
      
      out Q val;
    
    instance Constant<indexY> posY;
    instance Constant<indexX> posX;
    instance ConstantBoolean<isDown> bottom;
    instance ConstantBoolean<isRight> right;
    instance Not top;
    instance Not left;
    connect bottom.out1 -> top.in1;
    connect right.out1 -> left.in1;

    instance IsTopCone coneTop;
    instance IsBottomCone coneBottom;
    instance IsLeftCone coneLeft;
    instance IsRightCone coneRight;

    connect currentY -> coneTop.pacManY, coneBottom.pacManY, coneLeft.pacManY, coneRight.pacManY;
    connect currentX -> coneTop.pacManX, coneBottom.pacManX, coneLeft.pacManX, coneRight.pacManX;
    connect posY.out1 -> coneTop.posY, coneBottom.posY, coneLeft.posY, coneRight.posY;
    connect posX.out1 -> coneTop.posX, coneBottom.posX, coneLeft.posX, coneRight.posX;

    instance And<2> correctTop, correctBottom, correctLeft, correctRight;
    instance Or<4> isInCorrectCone;

    connect top.out1 -> correctTop.in1[1];
    connect bottom.out1 -> correctBottom.in1[1];
    connect left.out1 -> correctLeft.in1[1];
    connect right.out1 -> correctRight.in1[1];
    connect coneTop.val -> correctTop.in1[2];
    connect coneBottom.val -> correctBottom.in1[2];
    connect coneLeft.val -> correctLeft.in1[2];
    connect coneRight.val -> correctRight.in1[2];

    connect correctTop.out1 -> isInCorrectCone.in1[1];
    connect correctBottom.out1 -> isInCorrectCone.in1[2];
    connect correctLeft.out1 -> isInCorrectCone.in1[3];
    connect correctRight.out1 -> isInCorrectCone.in1[4];

    instance Switch finalValue;
    instance Constant<0> zero;
    connect zero.out1 -> finalValue.in3;
    connect isInCorrectCone.out1 -> finalValue.cond;

    instance ScoreTile score;
    connect map -> score.map;
    connect currentX -> score.pacManX;
    connect currentY -> score.pacManY;
    connect posX.out1 -> score.posX;
    connect posY.out1 -> score.posY;
    connect score.val -> finalValue.in1;
}