package de.rwth.pacman.heithoff1.coneSearch.coinSearch;

import de.rwth.pacman.common.*;

component ScoreTile {
    ports
      in Z^{22,19} map,
      in Q(-1m: 19m) pacManX,
      in Q(0m: 22m) pacManY,
      in Z posX,
      in Z posY,

      out Boolean val;

    instance Constant<1> buiscuit;
    instance Constant<4> coin;
    instance Constant<0> zero;
    instance CoinWeights weights;
    instance Equals isBuiscuit, isCoin;
    instance Switch switch1, switch2;
    instance PickFromMatrix<22,19> picker;
    
    connect map -> picker.mat;
    connect posX -> picker.indexX;
    connect posY -> picker.indexY;
    connect picker.out1 -> isCoin.in1, isBuiscuit.in1;
    connect coin.out1 -> isCoin.in2;
    connect buiscuit.out1 -> isBuiscuit.in2;
    connect isCoin.out1 -> switch1.cond;
    connect isBuiscuit.out1 -> switch2.cond;
    connect weights.coinWeight -> switch1.in1;
    connect weights.buiscuitWeight -> switch2.in1;
    connect zero.out1 -> switch1.in3;
    connect switch1.out1 -> switch2.in3;

    instance Sqrt dist;
    instance Sum<2> distIn;
    instance Multiplication<2> distInX, distInY;
    instance Abs distX, distY;
    instance Difference<2> distXIn, distYIn;

    connect pacManX -> distXIn.in1[1];
    connect posX -> distXIn.in1[2];
    connect pacManY -> distYIn.in1[1];
    connect posY -> distYIn.in1[2];
    connect distXIn.out1 -> distX.in1;
    connect distYIn.out1 -> distY.in1;
    connect distX.out1 -> distInX.in1[1], distInX.in1[2];
    connect distY.out1 -> distInY.in1[1], distInY.in1[2];
    connect distInX.out1 -> distIn.in1[1];
    connect distInY.out1 -> distIn.in1[2];
    connect distIn.out1 -> dist.in1;

    instance Division<2> finalValue;
    instance Multiplication<2> sqaureDist;
    connect dist.out1 -> sqaureDist.in1[1], sqaureDist.in1[2];
    connect switch2.out1 -> finalValue.in1;
    connect sqaureDist.out1 -> finalValue.in2;
    connect finalValue.out1 -> val;
      
}