package de.rwth.pacman.heithoff1.BFS;

import de.rwth.pacman.heithoff1.BFS.start.*;

// check whether the four directions are safe to go
// a directions is not safe to go if there is a ghost on its path

component Paths {
    ports
      in Q(0m: 20m)^{1,4} ghostX,
      in Q(1m: 23m)^{1,4} ghostY,
      in Z(0 : 1 : 3)^{1,4} ghostDirection,
      in Boolean^{1,4} ghostEatable,
      in Q(0m: 20m) pacManX,
      in Q(1m: 23m) pacManY,
      in Z^{22,19} map,
      
      out Boolean topSafe,
      out Boolean bottomSafe,
      out Boolean leftSafe,
      out Boolean rightSafe;
    
    // instance BFSearch searchLeft;
    // instance BFSearch searchRight;
    // instance BFSearch searchTop;
    // instance BFSearch searchBottom;
    // instance StartLeft startLeft;
    // instance StartRight startRight;
    // instance StartTop startTop;
    // instance StartBottom startBottom;
    
    // connect pacManX -> startLeft.pacManX, startRight.pacManX, startTop.pacManX, startBottom.pacManX;
    // connect pacManY -> startLeft.pacManY, startRight.pacManY, startTop.pacManY, startBottom.pacManY;
    
    // connect ghostX -> searchLeft.ghostX, searchRight.ghostX, searchTop.ghostX, searchBottom.ghostX;
    // connect ghostY ->  searchLeft.ghostY, searchRight.ghostY, searchTop.ghostY, searchBottom.ghostY;
    // connect ghostDirection ->  searchLeft.ghostDirection, searchRight.ghostDirection, searchTop.ghostDirection, searchBottom.ghostDirection;
    // connect ghostEatable -> searchLeft.ghostEatable, searchRight.ghostEatable, searchTop.ghostEatable, searchBottom.ghostEatable;
    // connect map -> searchLeft.map, searchRight.map, searchTop.map, searchBottom.map;
    
    
    // connect startLeft.startX   -> searchLeft.startX;
    // connect startLeft.startY   -> searchLeft.startY;
    // connect startLeft.startD   -> searchLeft.startDirection;
    // connect startLeft.oldX     -> searchLeft.oldX;
    // connect startLeft.oldY     -> searchLeft.oldY;
    // connect startRight.startX  -> searchRight.startX;
    // connect startRight.startY  -> searchRight.startY;
    // connect startRight.startD  -> searchRight.startDirection;
    // connect startRight.oldX    -> searchRight.oldX;
    // connect startRight.oldY    -> searchRight.oldY;
    // connect startTop.startX    -> searchTop.startX;
    // connect startTop.startY    -> searchTop.startY;
    // connect startTop.startD    -> searchTop.startDirection;
    // connect startTop.oldX      -> searchTop.oldX;
    // connect startTop.oldY      -> searchTop.oldY;
    // connect startBottom.startX -> searchBottom.startX;
    // connect startBottom.startY -> searchBottom.startY;
    // connect startBottom.startD -> searchBottom.startDirection;
    // connect startBottom.oldX   -> searchBottom.oldX;
    // connect startBottom.oldY   -> searchBottom.oldY;
    
    // connect searchLeft.safe -> leftSafe;
    // connect searchRight.safe -> rightSafe;
    // connect searchTop.safe -> topSafe;
    // connect searchBottom.safe -> bottomSafe;
    
}