package de.monticore.lang;

grammar MathOpt extends de.monticore.lang.Math
{
    MathOptCompilationUnit /*extends MathCompilationUnit*/ = MathCompilationUnit;

    enum OptimizationType = MINIMIZATION: "minimize" | MAXIMIZATION: "maximize";

    OptimizationCompareOperator = operator:"==" | operator:"<=" | operator:">=";

    OptimizationVariableDeclarationExpression =
        type:AssignmentType?  Name;

    OptimizationObjectiveFunction = (Statement | Expression) ";"?;

    OptimizationSimpleConditionExpression =
        left:Expression operator:OptimizationCompareOperator right:Expression ";"?;

    OptimizationBoundsConditionExpression =
        lower:Expression "<=" expr:Expression "<=" upper:Expression ";"?;

    OptimizationConditionExpression =
        (simpleCondition:OptimizationSimpleConditionExpression | boundedCondition:OptimizationBoundsConditionExpression | forLoopCondition:OptimizationForLoopExpression);

    OptimizationForLoopExpression =
        "for" head:MathForLoopHead body:OptimizationConditionExpression+ "end" ";"?;

    OptimizationObjectiveValue = type:ElementType Name "=";

    OptimizationExpression implements Statement =
        objectiveValue:OptimizationObjectiveValue? optimizationType:OptimizationType "(" optimizationVariable:OptimizationVariableDeclarationExpression ")" objectiveFunction:OptimizationObjectiveFunction "subject to" constraint:OptimizationConditionExpression* "end";
}
