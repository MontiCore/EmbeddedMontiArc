/* (c) https://github.com/MontiCore/monticore */
/*
*
*
*
*
*
*
*/

package de.monticore.lang.embeddedmontiarcdynamic;


grammar Event extends de.monticore.CommonExpressions,  de.monticore.lang.monticar.Types2, de.monticore.lang.monticar.Common2, de.monticore.NumberUnit {

    EventCompilationUnit =
        ("package" package:(Name& || ".")+ ";")?
        ComponentEvent;



    symbol scope ComponentEvent =
        "event" Name
        genericTypeParameters:TypeParameters2?
        (  "("  (Parameter || ",")+  ")" )?
        ("for" forComponent:ReferenceType)?
        "{"
            condition:Expression
        "}";



    PortResolutionDeclaration implements ResolutionDeclaration = "Port" "<" type:Type ">" Name;


    EventReferenceExpression implements Expression <200> =
        "@" type:ReferenceType? "(" arguments:(PortValue || ",")*  ")";


    //Boolean expressions
    TrueExpression =
        "true";
    FalseExpression =
        "false";

    // Port Expressions
    PortExpression implements Expression <200>  =
            portName:QualifiedNameWithArray "::" (PortExpressionContent);

    interface PortExpressionContent;
    PortExpressionValue implements PortExpressionContent = "value" "(" ( PortValue ) ")" ;
    PortExpressionConnect implements PortExpressionContent = "connect";
    PortExpressionFree implements PortExpressionContent = "free";

    // Definitions for Port Expressions
    PortValue = PortSingleValue | PortArrayValue;

    PortSingleValue = NumberWithPrecision | NumberRange | CTV;
    PortArrayValue = "[" (PortArrayValueContent | PortArrayValueMatrixContent) "]" ;

    PortArrayValueContent = ( PortSingleValue || ",")+ ;
    PortArrayValueMatrixContent = PortArrayValueContent ( ";" | PortArrayValueContent )+ ;


    ValueInput = NumberWithUnit | NameWithArray | TrueExpression | FalseExpression;

    NumberWithPrecision = ValueInput ("+" "/" "-" precision:ValueInput)? ;
    NumberRange = "(" lowerBound:ValueInput ":" upperBound:ValueInput ")";

    ast CompareToValue = method public ASTValueInput getCompare(){}
                        method public String getOperator(){};



    interface CompareToValue;

    //CompareTo = (CompareToValueGreater | CompareToValueGreaterEquals |
    //                       CompareToValueLower | CompareToValueLowerEquals |
    //                        CompareToValueNotEquals);

    CompareToValueGreater implements CompareToValue = operator:">" compare:ValueInput ;
    CompareToValueGreaterEquals implements CompareToValue = operator:">=" compare:ValueInput ;
    CompareToValueLower implements CompareToValue = operator:"<" compare:ValueInput ;
    CompareToValueLowerEquals implements CompareToValue = operator:"<=" compare:ValueInput ;
    CompareToValueNotEquals implements CompareToValue = operator:"!=" compare:ValueInput ;

    CTV = (CompareToValueGreater | CompareToValueGreaterEquals |
               CompareToValueLower | CompareToValueLowerEquals |
               CompareToValueNotEquals);


}
