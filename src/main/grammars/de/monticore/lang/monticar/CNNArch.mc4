package de.monticore.lang.monticar;

grammar CNNArch extends de.monticore.CommonExpressions, de.monticore.lang.Math, de.monticore.lang.monticar.Common2 {


    /* =================================*/
    /* ========== PRODUCTIONS ==========*/
    /* =================================*/

    /* ========== Declarations =========*/

    /**
        The complete file.
        Use nonterminal Architecture for embedding in another language (e.g. EmbeddedMontiArc)
    */
    symbol scope CNNArchCompilationUnit = "architecture"
                                          name:Name
                                          ( "(" (ArchitectureParameter || ",")* ")" )? "{"
                                          ioDeclarations:IODeclaration*
                                          Architecture
                                          "}";

    LayerDeclaration =  "def"
                       Name "("
                       parameters:(LayerParameter || ",")* ")" "{"
                       body:Stream  "}";

    UnrollDeclaration =  "unroll" "<" timeParameter:LayerParameter ">"
                         Name "(" parameters:(LayerParameter || ",")* ")"
                        "{" body:Stream "}";

    IODeclaration =  "def"
                    (in:"input" | out:"output")
                    type:ArchType
                    Name
                    (ArrayDeclaration)?;


    /* ============== Type =============*/

    /**
         Similar to EmbeddedMontiArc port types.
         ArchType and Shape are not used if the Architecture is integrated into EmbeddedMontiArc
    */
    ArchType = ElementType "^" Shape;

    Shape = "{" dimensions:(ArchSimpleExpression || ",")* "}";


    /* ========= Architecture  =========*/

    /**
        Defines the architecture of the neural network.
        This NT is used for integration in EmbeddedMontiArc.
        @attribute methodDeclaration*
                 A list of new layers which can be used in the architecture.
        @attribute body
                 The architecture of the neural network.
    */
    Architecture = unrollDeclarations:UnrollDeclaration*
                   methodDeclaration:LayerDeclaration*
                   instructions:(Instruction || ";")+ ";";

    interface Instruction;

    Stream implements Instruction = elements:(ArchitectureElement || "->")+;

    interface ArchitectureElement;

    IOElement implements ArchitectureElement =  Name ("[" index:ArchSimpleExpression "]")?;

    Layer implements ArchitectureElement =  Name "(" arguments:(ArchArgument || ",")* ")";

    Unroll implements ArchitectureElement =  "unroll" "<" timeParameter:LayerParameter ">"
                                                                      Name "(" arguments:(ArchArgument || ",")* ")"
                                                                     "{" input:IOElement? body:Stream output:IOElement? "}";

    ParallelBlock implements ArchitectureElement =  "("
                                                   groups:Stream  "|"
                                                   groups:(Stream || "|")+ ")";

    ArrayAccessLayer implements ArchitectureElement =  "[" index:ArchSimpleExpression "]";


    /* ====== Variables/Arguments ======*/

    interface Variable;

    ArchitectureParameter implements Variable =  Name ("=" default:ArchSimpleExpression)? ;

    LayerParameter implements Variable =  Name ("=" default:ArchSimpleExpression)? ;

    interface ArchArgument;

    ArchParameterArgument implements ArchArgument =  Name "=" rhs:ArchExpression ;

    ArchSpecialArgument implements ArchArgument = (serial:"->" | parallel:"|" | conditional:"?") "="
                                                  rhs:ArchExpression ;


    /* ======= Value Expressions =======*/

    /**
        Expression used for method arguments.
    */
    ArchExpression = (expression:ArchSimpleExpression | sequence:ArchValueSequence);

    interface ArchValueSequence;

    ArchParallelSequence implements ArchValueSequence = "[" parallelValues:(ArchSerialSequence || "|")+ "]";

    ArchSerialSequence = serialValues:(ArchSimpleExpression || "->")*;

    ArchValueRange implements ArchValueSequence = "[" start:ArchSimpleExpression
                                                  (serial:"->" | parallel:"|")
                                                  ".."
                                                  (serial2:"->" | parallel2:"|")
                                                  end:ArchSimpleExpression "]";
    /**
        Expressions for variable values.
    */
    ArchSimpleExpression = (arithmeticExpression:ArchArithmeticExpression
                         | booleanExpression:ArchBooleanExpression
                         | tupleExpression:TupleExpression
                         | string:StringLiteral);

    interface ArchMathExpression extends Expression;
    interface ArchArithmeticExpression extends ArchMathExpression;
    interface ArchBooleanExpression extends ArchMathExpression;

    ArchSimpleArithmeticExpression implements ArchArithmeticExpression = (NumberExpression
                                             | NameExpression
                                             | MathDottedNameExpression
                                             | MathAssignmentDeclarationStatement
                                             | MathAssignmentStatement);

    ArchComplexArithmeticExpression implements ArchArithmeticExpression = leftExpression:ArchMathExpression
                                               (   operator:"*"
                                               |   operator:"/"
                                               |   operator:"%"
                                               |   operator:"^"
                                               |   operator:"+"
                                               |   operator:"-"
                                               )
                                               rightExpression:ArchMathExpression;

    TupleExpression = "(" expressions:ArchArithmeticExpression "," expressions:(ArchArithmeticExpression || ",")* ")";

    ArchSimpleBooleanExpression implements ArchBooleanExpression = (BooleanExpression
                         | BooleanNotExpression
                         | LogicalNotExpression);

    ArchComplexBooleanExpression implements ArchBooleanExpression = leftExpression:ArchMathExpression
                                                                         (   operator:"=="
                                                                         |   operator:"!="
                                                                         |   operator:"&&"
                                                                         |   operator:"||"
                                                                         )
                                                                         rightExpression:ArchMathExpression;

    ArchBracketExpression implements ArchMathExpression, ArchBooleanExpression, ArchArithmeticExpression = "(" ArchMathExpression ")";

    ArchPreMinusExpression implements ArchMathExpression, ArchBooleanExpression, ArchArithmeticExpression = "-" ArchMathExpression ;


    /* =================================*/
    /* ============ ASTRULES ===========*/
    /* =================================*/
    ast Variable = method String getName(){};
    ast ArchSpecialArgument = method public String getName(){return "";}; //Override is necessary
    ast ArchArgument = method String getName(){}
                       method ASTArchExpression getRhs(){};

}
