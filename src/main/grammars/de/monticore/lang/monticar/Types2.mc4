/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

package de.monticore.lang.monticar;

/**
 * This grammar defines Java compliant types. The scope of this grammar is to
 * ease the reuse of type structures in Java-like sublanguages, e.g., by grammar
 * inheritance or grammar embedment.
 * The grammar contains types from Java, e.g., primitives, void, types with
 * dimensions, reference types, generics, and type parameters.
 *
 * @author Martin Schindler
*/
grammar Types2 extends de.monticore.types.Types, de.monticore.NumberUnit, de.monticore.lang.monticar.Resolution, de.monticore.lang.monticar.PrintType, de.monticore.lang.monticar.Ranges {

  // TODO: extend or overwrite TypeVariableDeclaration and TypeParameters
  TypeVariableDeclaration2 =
  (ResolutionDeclaration)|(NamingResolution
  (
          "extends" upperBounds:ComplexReferenceType
          ("&" upperBounds:ComplexReferenceType)*
  )?);

  TypeParameters2 = ("<" (TypeVariableDeclaration2 || ",")+ ">");

  Dimension =
      "^" ("{" matrixDim:(Expression || ",")+ "}" | vecDim:Expression);

  ElementType implements Type, TypeArgument =
      Name Range?;

  // added missing expressions
  BooleanExpression implements Expression<50> = BooleanLiteral;
}
