/*
 * ******************************************************************************
 * MontiCore Language Workbench, www.monticore.de
 * Copyright (c) 2017, MontiCore, All rights reserved.
 *
 * This project is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3.0 of the License, or (at your option) any later version.
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * ******************************************************************************
 */

package de.monticore.lang.monticar;

/**
 * Grammar for common elements that should be imported from somewhere else in future.
 */
grammar Common2 extends de.monticore.lang.monticar.Types2 {

  /**
  * Use this interface to embedd values.
  * It has to be implemented by all values and additionally servers
  * as an extension point to add futher values to sublanguages.
  */ 
  interface Value;

  /**
  * A signed literal value.
  * @example "Any String", -3, 17.3
  *
  * @attribute value the concrete literal value
  */
  LiteralValue implements Value =
        value:SignedLiteral;

  /**
  * Parameters are used in configurable components.
  *
  * @attribute AdaptableKeyword should the parameter be adaptable at runtime
  * @attribute Type the type of the parameter
  * @attribute name the name of the parameter
  */
  Parameter =
    AdaptableKeyword? Type NameWithArray ("=" (defaultValue:Value))?;

    AdaptableKeyword = "adaptable";

    /** TODO rename/refactor after everything that uses this works correctly**/
  QualifiedNameWithArray=
    (compName:Name compArray:ArrayAccess? ".")? (portName:Name portArray:ArrayAccess? );

  NameWithArray= Name ArrayDeclaration?;
  ArrayAccess = ("[" ( intLiteral:UnitNumberResolution | [":"] | lowerbound:UnitNumberResolution ":" upperbound:UnitNumberResolution) "]" );
  ArrayDeclaration = "[" intLiteral:UnitNumberResolution "]" ;

    ast CommonMatrixType= method public String printType(){return "CommonMatrixType";};
    CommonMatrixType implements PrintType, Type = ElementType Dimension;

}
