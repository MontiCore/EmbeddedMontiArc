package de.monticore.lang;

grammar GDL extends de.monticore.literals.MCCommonLiterals {
    
    Game = GameExpression*;

    interface GameExpression;
    interface GameParameter;
    interface GameOperator;

    GameToken implements GameParameter = "?"token:Name;
    GameValue implements GameParameter = value:Name | value:Digits;

    GameFunctionName = Name;

    Comment implements GameExpression = SL_COMMENT;

    GameRoleExpression implements GameExpression = "(" "role" value:GameValue ")";
    GameInitExpression implements GameExpression = "(" "init" state:GameConstantExpression ")";
    GameConstantExpression implements GameExpression = "(" name:GameFunctionName arguments:GameValue* ")";
    GameTerminalExpression implements GameExpression = "(" "<=" "terminal" conditions:GameCondition* ")";
    GameInferenceExpression implements GameExpression = "(" "<=" head:GameInnerExpression conditions:GameCondition* ")";

    interface GameCondition;

    GameInnerExpression implements GameCondition = "(" name:GameFunctionName arguments:GameParameter* ")";
    GameSimpleInnerExpression extends GameInnerExpression = name:GameFunctionName;
    GameNextExpression extends GameInnerExpression = "(" "next" "(" name:GameFunctionName arguments:GameParameter* ")" ")";
    GameLegalExpression extends GameInnerExpression = "(" "legal" role:GameParameter (("(" name:GameFunctionName arguments:GameParameter* ")") | "noop") ")";
    GameOperatorExpression implements GameCondition = "(" operator:GameOperator expression:GameInnerExpression ")";
    GameDistinctCondition implements GameCondition = "(" "distinct" arguments:GameParameter* ")";

    GameTrueOperator implements GameOperator = "true";
    GameNotOperator implements GameOperator = "not";
    GameDoesOperator implements GameOperator = "does" param:GameParameter;

}
