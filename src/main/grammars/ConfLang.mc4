/* (c) https://github.com/MontiCore/monticore */

grammar ConfLang extends ConfLangLiterals {

    ConfLangCompilationUnit =
        ("package" package:(Name& || ".")+ ";")?
        ImportStatement*
        Configuration;

    symbol scope Configuration =
        "configuration" Name ("extends" superConf:QualifiedName)? "{" (ConfigurationEntry*) "}" ;

    /**
     * Production rule for 'basic' configuration entries of the
     * following form.
     *
     * learning_method = supervised
     */
    symbol ConfigurationEntry = name:Name ":" value:SignedLiteral;

    /**
     * Production rule for nested configuration entries of the
     * following form.
     *
     * optimizer = adam {
     *     learning_rate = 0.0001
     * }
     *
     * Nested configuration entries define an object with its own
     * scope.
     */
    symbol scope NestedConfigurationEntry extends ConfigurationEntry = name:Name ":" value:SignedLiteral nestedEntries:"{" (ConfigurationEntry*) "}";
}