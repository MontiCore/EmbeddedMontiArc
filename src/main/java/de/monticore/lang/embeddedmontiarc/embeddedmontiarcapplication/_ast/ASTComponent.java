/**
 *
 *  ******************************************************************************
 *  MontiCAR Modeling Family, www.se-rwth.de
 *  Copyright (c) 2017, Software Engineering Group at RWTH Aachen,
 *  All rights reserved.
 *
 *  This project is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3.0 of the License, or (at your option) any later version.
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * *******************************************************************************
 */
package de.monticore.lang.embeddedmontiarc.embeddedmontiarcapplication._ast;

import de.monticore.lang.embeddedmontiarc.embeddedmontiarc._ast.ASTComponentBody;
import de.monticore.lang.embeddedmontiarc.embeddedmontiarcapplication._visitor.EmbeddedMontiArcApplicationVisitor;
import de.monticore.lang.monticar.common2._ast.ASTParameter;
import de.monticore.lang.monticar.types2._ast.ASTTypeParameters2;
import de.monticore.types.types._ast.ASTReferenceType;

import java.util.List;
import java.util.Optional;

/**
 * @author Sascha Schneiders
 */
public class ASTComponent extends ASTComponentTOP {
    public ASTComponent() {
    }

    public ASTComponent(String name, Optional<ASTTypeParameters2> genericTypeParameters, List<ASTParameter> parameters, Optional<ASTReferenceType> superComponent, ASTComponentBody body) {
        super(name, genericTypeParameters, parameters, superComponent, body);
    }

    @Override
    public void accept(EmbeddedMontiArcApplicationVisitor visitor)   {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(visitor, "0xA7006x255 Parameter 'visitor' must not be null.");

        /* generated by template ast.additionalmethods.Accept*/

        // We allow a down cast here, because the subclass ASTComponent must exist
        // and only this subclass may exist in the AST and hence, only this class may
        // be handled by a visitor. All other cases are invalid an throw an exception!
        // This decision was made during MC Sprint Review on 16.03.2015.
        if (this instanceof de.monticore.lang.embeddedmontiarc.embeddedmontiarc._ast.ASTComponent) {
            visitor.handle((de.monticore.lang.embeddedmontiarc.embeddedmontiarc._ast.ASTComponent) this);
        } else {
            throw new UnsupportedOperationException("0xA7010x664 Only handwritten class ASTComponent is supported for the visitor");
        }

    }

    @Override
    public void accept(de.monticore.lang.embeddedmontiarc.embeddedmontiarc._visitor.EmbeddedMontiArcVisitor visitor) {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(visitor, "0xA7006x255 Parameter 'visitor' must not be null.");

        /* generated by template ast.additionalmethods.Accept*/

        // We allow a down cast here, because the subclass ASTComponent must exist
        // and only this subclass may exist in the AST and hence, only this class may
        // be handled by a visitor. All other cases are invalid an throw an exception!
        // This decision was made during MC Sprint Review on 16.03.2015.
        if (this instanceof de.monticore.lang.embeddedmontiarc.embeddedmontiarc._ast.ASTComponent) {
            visitor.handle((de.monticore.lang.embeddedmontiarc.embeddedmontiarc._ast.ASTComponent) this);
        } else {
            throw new UnsupportedOperationException("0xA7010x664 Only handwritten class ASTComponent is supported for the visitor");
        }

    }
}
