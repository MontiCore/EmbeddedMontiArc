/**
 * ******************************************************************************
 *  MontiCAR Modeling Family, www.se-rwth.de
 *  Copyright (c) 2017, Software Engineering Group at RWTH Aachen,
 *  All rights reserved.
 *
 *  This project is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3.0 of the License, or (at your option) any later version.
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * *******************************************************************************
 */
/* generated by template templates.de.monticore.lang.montiarc.tagschema.ValuedTagTypeCreator*/


package de.monticore.lang.embeddedmontiview.tagging.LatencyTagSchema;

import java.util.Collection;
import java.util.Optional;
import java.util.stream.Collectors;

import de.monticore.lang.embeddedmontiview.embeddedmontiview._symboltable.*;
import de.monticore.lang.montiarc.tagging._ast.ASTNameScope;
import de.monticore.lang.montiarc.tagging._ast.ASTScope;
import de.monticore.lang.montiarc.tagging._ast.ASTTag;
import de.monticore.lang.montiarc.tagging._ast.ASTTaggingUnit;
import de.monticore.lang.montiarc.tagging._symboltable.TagSymbolCreator;
import de.monticore.symboltable.Scope;
import de.monticore.symboltable.Symbol;
import de.monticore.symboltable.SymbolKind;
import de.se_rwth.commons.Joiners;
import de.se_rwth.commons.logging.Log;

import de.monticore.lang.montiarc.tagvalue._parser.TagValueParser;
import javax.measure.quantity.Duration;
import javax.measure.unit.Unit;
import de.monticore.lang.montiarc.tagging.helper.NumericLiteral;
import de.monticore.lang.montiarc.tagvalue._ast.ASTUnitTagValue;

/**
 * created by ValuedTagTypeCreator.ftl
 */
public class LatencyCmpSymbolCreator implements TagSymbolCreator {

  public static Scope getGlobalScope(final Scope scope) {
    Scope s = scope;
    while (s.getEnclosingScope().isPresent()) {
      s = s.getEnclosingScope().get();
    }
    return s;
  }

  public void create(ASTTaggingUnit unit, Scope gs) {
    if (unit.getQualifiedNames().stream()
        .map(q -> q.toString())
        .filter(n -> n.endsWith("LatencyTagSchema"))
        .count() == 0) {
      return; // the tagging model is not conform to the LatencyTagSchema tagging schema
    }
    final String packageName = Joiners.DOT.join(unit.getPackage());
    final String rootCmp = // if-else does not work b/c of final (required by streams)
        (unit.getTagBody().getTargetModel().isPresent()) ?
            Joiners.DOT.join(packageName,
                unit.getTagBody().getTargetModel().get()
                .getQualifiedNameString()) :
            packageName;

    for (ASTTag element : unit.getTagBody().getTags()) {
      element.getTagElements().stream()
          .filter(t -> t.getName().equals("LatencyCmp"))
          .filter(t -> t.getTagValue().isPresent())
          .map(t -> checkContent(t.getTagValue().get()))
          .filter(v -> v != null)
          .filter(this::checkUnit)
          .forEachOrdered(v ->
              element.getScopes().stream()
                .filter(this::checkScope)
                .map(s -> (ASTNameScope) s)
                .map(s -> getGlobalScope(gs).<Symbol>resolveDownMany(
                    Joiners.DOT.join(rootCmp, s.getQualifiedName().toString()),
                    SymbolKind.KIND))
                .filter(s -> !s.isEmpty())
                .map(this::checkKind)
                .filter(s -> s != null)
                .forEachOrdered(s -> s.addTag(new LatencyCmpSymbol(
                   NumericLiteral.getValue(v.getNumericLiteral()),
                   Unit.valueOf(v.getUnit()).asType(Duration.class)))));
    }
  }

  protected boolean checkUnit(ASTUnitTagValue unitTag) {
    Unit unit;
    try {
      unit = Unit.valueOf(unitTag.getUnit());
    } catch (IllegalArgumentException e) {
      Log.error(String.format("0xT0003 Could not parse unit '%s'. This unit is not supported. All supported units are %s and %s",
          unitTag.getUnit(), "http://jscience.org/api/javax/measure/unit/SI.html",
          "http://jscience.org/api/javax/measure/unit/NonSI.html"), e);
      return false;
    }
    if (!unit.isCompatible(Duration.UNIT)) {
      Log.error(String.format("0xT0002 The unit '%s' is not compatible to quantity kind 'Duration'",
          unitTag.getUnit()));
      return false;
    }
    return true;
  }

  protected ASTUnitTagValue checkContent(String s) {
    TagValueParser parser = new TagValueParser();
    Optional<ASTUnitTagValue> ast;
    try {
      boolean enableFailQuick = Log.isFailQuickEnabled();
      Log.enableFailQuick(false);
      long errorCount = Log.getErrorCount();

      ast = parser.parseString_UnitTagValue(s);

      Log.enableFailQuick(enableFailQuick);
      if (Log.getErrorCount() > errorCount) {
        throw new Exception("Error occured during parsing.");
      }
    } catch (Exception e) {
      Log.error(String.format("0xT0004 Could not parse '%s' with TagValueParser#parseString_UnitTagValue",
          s), e);
      return null;
    }
    if (!ast.isPresent()) {
      return null;
    }
    return ast.get();
  }

  protected ViewComponentSymbol checkKind(Collection<Symbol> symbols) {
    ViewComponentSymbol ret = null;
    for (Symbol symbol : symbols) {
      if (symbol.getKind().isSame(ViewComponentSymbol.KIND)) {
        if (ret != null) {
          Log.error(String.format("0xA4095 Found more than one symbol: '%s' and '%s'",
              ret, symbol));
          return null;
        }
        ret = (ViewComponentSymbol)symbol;
      }
    }
    if (ret == null) {
      Log.error(String.format("0xT0001 Invalid symbol kinds: %s. tagTypeName expects as symbol kind 'ViewComponentSymbol.KIND'.",
          symbols.stream().map(s -> "'" + s.getKind().toString() + "'").collect(Collectors.joining(", "))));
      return null;
    }
    return ret;
  }

  protected boolean checkScope(ASTScope scope) {
    if (scope.getScopeKind().equals("NameScope")) {
      return true;
    }
    Log.error(String.format("0xT0005 Invalid scope kind: '%s'. LatencyCmp expects as scope kind 'NameScope'.",
        scope.getScopeKind()), scope.get_SourcePositionStart());
    return false;
  }
}