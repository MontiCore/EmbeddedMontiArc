/**
 * ******************************************************************************
 *  MontiCAR Modeling Family, www.se-rwth.de
 *  Copyright (c) 2017, Software Engineering Group at RWTH Aachen,
 *  All rights reserved.
 *
 *  This project is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3.0 of the License, or (at your option) any later version.
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * *******************************************************************************
 */
/* generated by template templates.de.monticore.lang.montiarc.tagschema.ValuedTagType*/


package de.monticore.lang.embeddedmontiview.tagging.LatencyTagSchema;

import de.monticore.lang.montiarc.tagging._symboltable.TagKind;
import de.monticore.lang.montiarc.tagging._symboltable.TagSymbol;

import org.jscience.physics.amount.Amount;
import javax.measure.quantity.Duration;
import javax.measure.unit.Unit;

/**
 * Created by ValuedTagType.ftl
 */
public class LatencyCmpInstSymbol extends TagSymbol {
  public static final LatencyCmpInstKind KIND = LatencyCmpInstKind.INSTANCE;

  public LatencyCmpInstSymbol(Amount<Duration> value) {
    this(KIND, value);
  }

  public LatencyCmpInstSymbol(Number number, Unit<Duration> unit) {
    this(KIND, number, unit);
  }

  protected LatencyCmpInstSymbol(LatencyCmpInstKind kind, Amount<Duration> value) {
    super(kind, value);
  }

  protected LatencyCmpInstSymbol(LatencyCmpInstKind kind, Number number, Unit<Duration> unit) {
    this(kind, number.toString().contains(".") ?
      Amount.valueOf(number.doubleValue(), unit) :
      Amount.valueOf(number.intValue(),
          unit));
  }

  public Amount<Duration> getValue() {
     return getValue(0);
  }

  public Number getNumber() {
    return getValue().getExactValue();
  }

  public Unit<Duration> getUnit() {
    return getValue().getUnit();
  }

  @Override
  public String toString() {
    return String.format("LatencyCmpInst = %s %s",
      getNumber(), getUnit());
  }

  public static class LatencyCmpInstKind extends TagKind {
    public static final LatencyCmpInstKind INSTANCE = new LatencyCmpInstKind();

    protected LatencyCmpInstKind() {
    }
  }
}