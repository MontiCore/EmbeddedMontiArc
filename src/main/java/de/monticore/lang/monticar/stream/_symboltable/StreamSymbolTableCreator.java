/* (c) https://github.com/MontiCore/monticore */
/* generated from model null*/
/* generated by template symboltable.SymbolTableCreator*/


package de.monticore.lang.monticar.stream._symboltable;

import de.monticore.lang.monticar.stream._ast.*;
import de.monticore.literals.literals._ast.*;
import de.monticore.symboltable.ArtifactScope;
import de.monticore.symboltable.MutableScope;
import de.monticore.symboltable.ResolvingConfiguration;
import de.se_rwth.commons.Names;
import de.se_rwth.commons.logging.Log;

import java.util.ArrayList;
import java.util.Optional;

public class StreamSymbolTableCreator extends StreamSymbolTableCreatorTOP {

    private static int id = 0;

    public StreamSymbolTableCreator(
            final ResolvingConfiguration resolvingConfig, final MutableScope enclosingScope) {
        super(resolvingConfig, enclosingScope);
    }

    @Override
    public void visit(ASTStreamCompilationUnit node) {
        Log.debug("Building Symboltable for Stream: " + node.getComponentStream().getName(),
                StreamSymbolTableCreator.class.getSimpleName());
        String compilationUnitPackage = Names.getQualifiedName(node.getPackageList());
        ArtifactScope artifactScope = new ArtifactScope(
                Optional.empty(),
                compilationUnitPackage,
                new ArrayList<>());
        putOnStack(artifactScope);
        id++;
    }

    @Override
    public void endVisit(ASTStreamCompilationUnit node) {
        removeCurrentScope();
    }

    @Override
    public void visit(ASTComponentStream node) {
        ComponentStreamSymbol streamSymbol = new ComponentStreamSymbol(node.getName());
        addToScopeAndLinkWithNode(streamSymbol, node);
    }

    @Override
    public void endVisit(ASTComponentStream node) {
        removeCurrentScope();
    }

    @Override
    public void visit(ASTNamedStream node) {
        NamedStreamSymbol streamSymbol = new NamedStreamSymbol(node.getName(), id);
        for (ASTAllowedType value : node.getStream().getAllowedTypeList()) {
            if (value.getSignedLiteral() != null) {
                ASTSignedLiteral num = value.getSignedLiteral();
                if (num instanceof ASTSignedDoubleLiteral) {
                    if (((ASTSignedDoubleLiteral) num).isNegative()) {
                        streamSymbol.add(Double.parseDouble("-" + ((ASTSignedDoubleLiteral) num).getSource()));
                    } else {
                        streamSymbol.add(Double.parseDouble(((ASTSignedDoubleLiteral) num).getSource()));
                    }
                } else if (num instanceof ASTDoubleLiteral)
                    streamSymbol.add(Double.parseDouble(((ASTDoubleLiteral) num).getSource()));
                else if (num instanceof ASTSignedIntLiteral) {
                    if (((ASTSignedIntLiteral) num).isNegative()) {
                        streamSymbol.add(Integer.parseInt("-" + ((ASTSignedIntLiteral) num).getSource()));
                    } else {
                        streamSymbol.add(Integer.parseInt(((ASTSignedIntLiteral) num).getSource()));
                    }
                } else if (num instanceof ASTIntLiteral)
                    streamSymbol.add(Integer.parseInt(((ASTIntLiteral) num).getSource()));
            } else if (value.getFilePath() != null) {
                ASTFilePath filePath = value.getFilePath();
                streamSymbol.add(filePath.getStringLiteral());
            }

        }
        addToScopeAndLinkWithNode(streamSymbol, node);
    }



    @Override
    public void visit(ASTAllowedType node) {

    }
}
