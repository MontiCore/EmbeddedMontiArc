/* (c) https://github.com/MontiCore/monticore */
/* generated from model null*/
/* generated by template symboltable.Symbol*/


package de.monticore.lang.monticar.stream._symboltable;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.stream.Stream;

public class NamedStreamSymbol extends NamedStreamSymbolTOP {

    protected boolean expected = true;
    protected int id = 0;
    protected List<Object> timeValues = new ArrayList<>();

    protected NamedStreamSymbol(String name) {
        super(name);
    }

    public NamedStreamSymbol(String name, int id) {
        super(name);
        this.id = id;
    }

    public NamedStreamSymbol(String name, int id, boolean expected, final Collection<Object> timedValues) {
        this(name, id);
        this.expected = expected;
        this.timeValues.addAll(timedValues);
    }

    public void add(Object value) {
        timeValues.add(value);
    }

    public Object getValue(int index) {
        return timeValues.get(index);
    }

    public int getValueSize() {
        return timeValues.size();
    }

    public Stream<Object> stream() {
        return timeValues.stream();
    }

    /**
     * all stream.nonunitstreams.streams defined in one file have the same id,
     * so that you can match the input stream.nonunitstreams.streams to the corresponding
     * output stream.nonunitstreams.streams if several test cases are defined
     * @return
     */
    public int getId() {
        return this.id;
    }

    /**
     * it says whether the stream is expected (e.g. as an assert of an test)
     * or whether the stream is the result of a simulation
     * @return true if it is expected in an test; false if it is the result of a simulation
     */
    public boolean isExpected() {
        return expected;
    }

}
