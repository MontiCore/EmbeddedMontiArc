/* (c) https://github.com/MontiCore/monticore */
/* generated from model null*/
/* generated by template symboltable.SymbolTableCreator*/


package de.monticore.lang.monticar.streamunits._symboltable;

import de.monticore.lang.monticar.streamunits._ast.*;
import de.monticore.lang.monticar.streamunits._parser.StreamUnitsParser;
import de.monticore.literals.literals._ast.ASTDoubleLiteral;
import de.monticore.literals.literals._ast.ASTSignedLiteral;
import de.monticore.symboltable.ArtifactScope;
import de.monticore.symboltable.MutableScope;
import de.monticore.symboltable.ResolvingConfiguration;
import de.se_rwth.commons.Names;
import de.se_rwth.commons.logging.Log;
import org.apache.commons.io.FilenameUtils;

import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class StreamUnitsSymbolTableCreator extends StreamUnitsSymbolTableCreatorTOP {

    private static int id = 0;

    public StreamUnitsSymbolTableCreator(
            final ResolvingConfiguration resolvingConfig, final MutableScope enclosingScope) {
        super(resolvingConfig, enclosingScope);
    }

    @Override
    public void visit(ASTStreamUnitsCompilationUnit node) {
        Log.debug("Building Symboltable for Stream: " + node.getComponentStreamUnits().getName(),
                StreamUnitsSymbolTableCreator.class.getSimpleName());
        String compilationUnitPackage = Names.getQualifiedName(node.getPackageList());
        ArtifactScope artifactScope = new ArtifactScope(
                Optional.empty(),
                compilationUnitPackage,
                new ArrayList<>());
        putOnStack(artifactScope);
        id++;
    }

    @Override
    public void endVisit(ASTStreamUnitsCompilationUnit node) {
        removeCurrentScope();
    }

    @Override
    public void visit(ASTComponentStreamUnits node) {
        ComponentStreamUnitsSymbol streamSymbol = new ComponentStreamUnitsSymbol(node.getName());
        addToScopeAndLinkWithNode(streamSymbol, node);
    }

    @Override
    public void endVisit(ASTComponentStreamUnits node) {
        removeCurrentScope();
    }

    @Override
    public void visit(ASTNamedStreamUnits node) {
        String qualifiedName;
        if(node.getFieldQualifierList().isEmpty()) {
            qualifiedName = node.getName();
        }else{
            qualifiedName = node.getName() + "." + String.join(".", node.getFieldQualifierList());
        }
        NamedStreamUnitsSymbol streamSymbol = new NamedStreamUnitsSymbol(qualifiedName, id);
        for (ASTStreamInstruction streamInstruction : node.getStream().getStreamInstructionList()) {
            handleStreamInstruction(streamSymbol, streamInstruction);
        }
        addToScopeAndLinkWithNode(streamSymbol, node);
    }

    private void handleStreamInstruction(NamedStreamUnitsSymbol streamSymbol,
                                                           ASTStreamInstruction streamInstruction) {
        if (streamInstruction.getStreamValueOpt().isPresent()) {
            streamSymbol.add(handleStreamValue(streamInstruction.getStreamValueOpt().get()));
        } else if (streamInstruction.getStreamCompareOpt().isPresent()) {
            ASTStreamCompare astStreamCompare = streamInstruction.getStreamCompareOpt().get();
            streamSymbol.add(new StreamCompare(new StreamValuePrecision(astStreamCompare.getLeft()),
                    astStreamCompare.getOperator(), new StreamValuePrecision(astStreamCompare.getRight())));
        } else if (streamInstruction.getStreamArrayValuesOpt().isPresent()) {
            streamSymbol.add(handleStreamArrayValues(streamInstruction, Optional.empty(), Optional.empty()));
        } else if (streamInstruction.getFilePathOpt().isPresent()) {
            handleFilePath(streamSymbol, streamInstruction);
        }
    }

    private void handleStreamInstructionForFilePath(NamedStreamUnitsSymbol streamSymbol,
                                         ASTStreamInstruction streamInstruction,
                                         Optional<ASTDoubleLiteral> elementTolerance,
                                                    Optional<ASTDoubleLiteral> generalTolerance) {
        if (streamInstruction.getStreamValueOpt().isPresent()) {
            streamSymbol.add(handleStreamValue(streamInstruction.getStreamValueOpt().get()));
        } else if (streamInstruction.getStreamCompareOpt().isPresent()) {
            ASTStreamCompare astStreamCompare = streamInstruction.getStreamCompareOpt().get();
            streamSymbol.add(new StreamCompare(new StreamValuePrecision(astStreamCompare.getLeft()),
                    astStreamCompare.getOperator(), new StreamValuePrecision(astStreamCompare.getRight())));
        } else if (streamInstruction.getStreamArrayValuesOpt().isPresent()) {
            streamSymbol.add(handleStreamArrayValues(streamInstruction, elementTolerance, generalTolerance));
        } else if (streamInstruction.getFilePathOpt().isPresent()) {
            handleFilePath(streamSymbol, streamInstruction);
        }
    }

    private void handleFilePath(NamedStreamUnitsSymbol streamSymbol, ASTStreamInstruction streamInstruction) {
        ASTFilePath astFilePath = streamInstruction.getFilePathOpt().get();
        final String dir = System.getProperty("user.dir");
        final String filePath = dir + astFilePath.getStringLiteral().getSource();
        File file = new File(filePath);

        if (file.exists()) {
            try {
                handleFileByExtension(file, streamSymbol, astFilePath);
            } catch (IOException | NumberFormatException e) {
                if (e instanceof  IOException) {
                    Log.error("Error on reading file:" + filePath);
                } else {
                    e.printStackTrace();
                }
            }
        }
    }

    private void handleFileByExtension(File file, NamedStreamUnitsSymbol streamSymbol, ASTFilePath astFilePath) throws IOException {
        String extension = FilenameUtils.getExtension(file.getPath());
        if (extension.equals("txt")) {
            Path path = file.toPath();
            List<String> content = Files.readAllLines(path, Charset.defaultCharset());
            Optional<ASTStreamInstruction> astStreamInstruction = new StreamUnitsParser().parse_StringStreamInstruction((content.get(0)));
            astStreamInstruction.ifPresent(instruction ->
                    handleStreamInstructionForFilePath(streamSymbol, instruction, astFilePath.getElementToleranceOpt(), astFilePath.getGeneralToleranceOpt()));
        } else if (extension.equals("png")) {
            streamSymbol.add(handleImagePath(astFilePath));
        } else {
            Log.error("File Extension not supported");
        }
    }

    private IStreamValue handleStreamValue(ASTStreamValue streamValue) {
        IStreamValue result = null;
        if (streamValue.getPrecisionNumberOpt().isPresent()) {
            ASTPrecisionNumber num = streamValue.getPrecisionNumberOpt().get();
            if (num.getPrecisionOpt().isPresent()) {
                result = new StreamValuePrecision(num.getNumberWithUnit(), num.getPrecisionOpt().get().getNumberWithUnit());
            } else {
                result = (new StreamValuePrecision(num.getNumberWithUnit()));
            }
        } else if (streamValue.getNameOpt().isPresent()) {
            result = (new StreamValuePrecision(streamValue.getNameOpt().get()));
        } else if (streamValue.getSignedLiteralOpt().isPresent()) {
            ASTSignedLiteral signedLiteral = streamValue.getSignedLiteralOpt().get();
            result = (new StreamValuePrecision(signedLiteral));
        } else if (streamValue.getDontCareOpt().isPresent()) {
            result = (new StreamValuePrecision("-"));
        } else if (streamValue.getValueAtTickOpt().isPresent()) {
            ASTValueAtTick valueAtTick = streamValue.getValueAtTickOpt().get();
            result = (new StreamValueAtTick(valueAtTick));
        }
        return result;
    }

    private StreamValues handleStreamArrayValues(ASTStreamInstruction streamInstruction,
                                                 Optional<ASTDoubleLiteral> elementTolerance, Optional<ASTDoubleLiteral> generalTolerance) {
        ASTStreamArrayValues streamArrayValues = streamInstruction.getStreamArrayValues();
        StreamValues result = null;
        if (streamArrayValues.getMatrixPairOpt().isPresent()) {
            result = handleMatrixPair(streamArrayValues.getMatrixPairOpt().get());
        } else if (streamArrayValues.getValuePairOpt().isPresent()) {
            result = new StreamValues(handleValuePair(streamArrayValues.getValuePairOpt().get()));
        } else if (streamArrayValues.getCubePairOpt().isPresent()) {
            result = handleCubePair(streamArrayValues.getCubePairOpt().get());
        }

        if (result != null) {
            if (streamArrayValues.getElementToleranceOpt().isPresent()) {
                if (elementTolerance.isPresent()) {
                    result.setElementTolerance(elementTolerance.get().getValue());
                } else {
                    result.setElementTolerance(streamArrayValues.getElementToleranceOpt().get().getValue());
                }
            } else {
                if (elementTolerance.isPresent()) {
                    result.setElementTolerance(elementTolerance.get().getValue());
                }
            }

            if (streamArrayValues.getGeneralToleranceOpt().isPresent()) {
                if (generalTolerance.isPresent()) {
                    result.setGeneralTolerance(generalTolerance.get().getValue());
                } else {
                    result.setGeneralTolerance(streamArrayValues.getGeneralToleranceOpt().get().getValue());
                }
            } else {
                if (generalTolerance.isPresent()) {
                    result.setGeneralTolerance(generalTolerance.get().getValue());
                }
            }
        }
        return result;
    }

    private StreamValues handleCubePair(ASTCubePair astCubePair) {
        StreamValues streamValues = new StreamValues();
        for (int slice = 0; slice < astCubePair.getMatrixPairList().size(); slice++) {
            //TODO: StreamValuesValues???
            streamValues.setStreamValues(handleMatrixPair(astCubePair.getMatrixPairList().get(slice)).streamValues.get(0));
        }
        return streamValues;
    }

    private StreamValues handleMatrixPair(ASTMatrixPair matrixPair) {
        //handle all rows
        StreamValues streamValues = new StreamValues();
        for (int row = 0; row < matrixPair.getValuePairList().size(); ++row) {
            streamValues.add(handleValuePair(matrixPair.getValuePairList().get(row)));
        }
        return streamValues;
    }

    private List<IStreamValue> handleValuePair(ASTValuePair valuePair) {
        List<ASTStreamValue> streamValues = valuePair.getStreamValueList();
        List<IStreamValue> currentList = new ArrayList<>();
        //handle the elements of each row
        for (int i = 0; i < streamValues.size(); ++i) {
            currentList.add(handleStreamValue(streamValues.get(i)));
        }
        return currentList;
    }

    private ImagePath handleImagePath(ASTFilePath imagePath) {
        ImagePath result = new ImagePath();
        result.setImagePath(imagePath.getStringLiteral().getValue());
        return result;
    }
}
