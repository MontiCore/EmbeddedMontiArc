/**
 *
 *  ******************************************************************************
 *  MontiCAR Modeling Family, www.se-rwth.de
 *  Copyright (c) 2017, Software Engineering Group at RWTH Aachen,
 *  All rights reserved.
 *
 *  This project is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3.0 of the License, or (at your option) any later version.
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * *******************************************************************************
 */
/* generated by template symboltable.ScopeSpanningSymbol*/


package de.monticore.lang.monticar.cnnarch._symboltable;

import de.monticore.lang.monticar.cnnarch.helper.Utils;
import de.monticore.lang.monticar.cnnarch.predefined.AllPredefinedLayers;
import de.monticore.lang.monticar.cnnarch.predefined.AllPredefinedVariables;
import de.monticore.symboltable.CommonScopeSpanningSymbol;
import de.monticore.symboltable.Scope;
import de.monticore.symboltable.Symbol;

import java.util.*;

public class ArchitectureSymbol extends CommonScopeSpanningSymbol {

    public static final ArchitectureKind KIND = new ArchitectureKind();

    private List<LayerVariableDeclarationSymbol> layerVariableDeclarations = new ArrayList<>();
    private List<SerialCompositeElementSymbol> streams = new ArrayList<>();
    private List<UnrollSymbol> unrolls = new ArrayList<>();
    private Map<String, IODeclarationSymbol> ioDeclarationMap = new HashMap<>();
    private List<VariableSymbol> inputs = new ArrayList<>();
    private List<VariableSymbol> outputs = new ArrayList<>();
    private String dataPath;
    private String componentName;

    public ArchitectureSymbol() {
        super("", KIND);
    }

    public List<LayerVariableDeclarationSymbol> getLayerVariableDeclarations() {
        return layerVariableDeclarations;
    }

    public void setLayerVariableDeclarations(List<LayerVariableDeclarationSymbol> layerVariableDeclarations) {
        this.layerVariableDeclarations = layerVariableDeclarations;
    }

    public List<SerialCompositeElementSymbol> getStreams() {
        return streams;
    }

    public void setStreams(List<SerialCompositeElementSymbol> streams) {
        this.streams = streams;
    }

    public List<UnrollSymbol> getUnrolls() {
        return unrolls;
    }

    public void setUnrolls(List<UnrollSymbol> unrolls) {
        this.unrolls = unrolls;
    }

    public String getDataPath() {
        return this.dataPath;
    }

    public void setDataPath(String dataPath) {
        this.dataPath = dataPath;
    }

    public void setComponentName(String componentName){
        this.componentName = componentName;
    }

    public String getComponentName(){
        return this.componentName;
    }


    public List<VariableSymbol> getInputs() {
        return inputs;
    }

    public List<VariableSymbol> getOutputs() {
        return outputs;
    }

    public Collection<IODeclarationSymbol> getIODeclarations(){
        return getEnclosingScope().resolveLocally(IODeclarationSymbol.KIND);
    }

    public Collection<LayerDeclarationSymbol> getLayerDeclarations(){
        return getSpannedScope().resolveLocally(LayerDeclarationSymbol.KIND);
    }

    public Collection<UnrollDeclarationSymbol> getUnrollDeclarations(){
        return getSpannedScope().resolveLocally(UnrollDeclarationSymbol.KIND);
    }

    public void resolve() {
        for (CompositeElementSymbol stream : streams) {
            stream.checkIfResolvable();

            try {
                stream.resolveOrError();
            }
            catch (ArchResolveException e) {
                // Do nothing; error is already logged
            }
        }

        for (UnrollSymbol unroll : unrolls) {
            unroll.checkIfResolvable();

            try {
                unroll.resolveOrError();
            }
            catch (ArchResolveException e) {
                // Do nothing; error is already logged
            }
        }
    }

    public boolean isResolved(){
        boolean resolved = true;

        for (CompositeElementSymbol stream : streams) {
            resolved &= stream.isResolved();
        }


        return resolved;
    }

    public boolean isResolvable(){
        boolean resolvable = true;

        for (CompositeElementSymbol stream : streams) {
            resolvable &= stream.isResolvable();
        }

        for (UnrollSymbol unroll: unrolls) {
            resolvable &= unroll.isResolvable();
        }

        return resolvable;
    }

    public void putInScope(Scope scope){
        Collection<Symbol> symbolsInScope = scope.getLocalSymbols().get(getName());
        if (symbolsInScope == null || !symbolsInScope.contains(this)){
            scope.getAsMutableScope().add(this);
            Utils.recursiveSetResolvingFilters(getSpannedScope(), scope.getResolvingFilters());
        }
    }

    /*
      Creates a unresolved copy of this architecture and
      adds the copy to the scope given as argument.
      Useful to create instances.
      This works even if "this" is already resolved.
     */
    public ArchitectureSymbol preResolveDeepCopy(Scope enclosingScopeOfCopy){
        ArchitectureSymbol copy = new ArchitectureSymbol();

        if (getAstNode().isPresent()){
            copy.setAstNode(getAstNode().get());
        }

        copy.getSpannedScope().getAsMutableScope().add(AllPredefinedVariables.createTrueConstant());
        copy.getSpannedScope().getAsMutableScope().add(AllPredefinedVariables.createFalseConstant());

        for (LayerDeclarationSymbol layerDeclaration : AllPredefinedLayers.createList()){
            copy.getSpannedScope().getAsMutableScope().add(layerDeclaration);
        }

        for (UnrollDeclarationSymbol unrollDeclaration : AllPredefinedLayers.createUnrollList()){
            copy.getSpannedScope().getAsMutableScope().add(unrollDeclaration);
        }

        for (LayerDeclarationSymbol layerDeclaration : getLayerDeclarations()){
            if (!layerDeclaration.isPredefined()) {
                copy.getSpannedScope().getAsMutableScope().add(layerDeclaration.deepCopy());
            }
        }

        List<LayerVariableDeclarationSymbol> copyLayerVariableDeclarations = new ArrayList<>();
        for (LayerVariableDeclarationSymbol layerVariableDeclaration : getLayerVariableDeclarations()) {
            LayerVariableDeclarationSymbol copyLayerVariableDeclaration =
                    (LayerVariableDeclarationSymbol) layerVariableDeclaration.preResolveDeepCopy();
            copyLayerVariableDeclaration.putInScope(copy.getSpannedScope());
            copyLayerVariableDeclarations.add(copyLayerVariableDeclaration);
        }
        copy.setLayerVariableDeclarations(copyLayerVariableDeclarations);

        List<SerialCompositeElementSymbol> copyStreams = new ArrayList<>();
        for (SerialCompositeElementSymbol stream : getStreams()) {
            SerialCompositeElementSymbol copyStream = stream.preResolveDeepCopy();
            copyStream.putInScope(copy.getSpannedScope());
            copyStreams.add(copyStream);
        }
        copy.setStreams(copyStreams);

        List<UnrollSymbol> copyUnrolls = new ArrayList<>();
        for (UnrollSymbol unroll : getUnrolls()) {
            UnrollSymbol copyUnroll = (UnrollSymbol) unroll.preResolveDeepCopy();
            copyUnroll.putInScope(copy.getSpannedScope());
            copyUnrolls.add(copyUnroll);
        }
        copy.setUnrolls(copyUnrolls);

        copy.putInScope(enclosingScopeOfCopy);
        return copy;
    }


}
