/**
 *
 *  ******************************************************************************
 *  MontiCAR Modeling Family, www.se-rwth.de
 *  Copyright (c) 2017, Software Engineering Group at RWTH Aachen,
 *  All rights reserved.
 *
 *  This project is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3.0 of the License, or (at your option) any later version.
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * *******************************************************************************
 */
/* generated by template symboltable.ScopeSpanningSymbol*/


package de.monticore.lang.monticar.cnnarch._symboltable;

import de.monticore.lang.monticar.cnnarch.helper.Utils;
import de.monticore.lang.monticar.cnnarch.predefined.AllPredefinedLayers;
import de.monticore.lang.monticar.cnnarch.predefined.AllPredefinedVariables;
import de.monticore.symboltable.CommonScopeSpanningSymbol;
import de.monticore.symboltable.Scope;
import de.monticore.symboltable.Symbol;

import javax.annotation.Nullable;
import java.util.*;

public class ArchitectureSymbol extends CommonScopeSpanningSymbol {

    public static final ArchitectureKind KIND = new ArchitectureKind();

    private List<SerialCompositeElementSymbol> streams = new ArrayList<>();
    private List<IOSymbol> inputs = new ArrayList<>();
    private List<IOSymbol> outputs = new ArrayList<>();
    private Map<String, IODeclarationSymbol> ioDeclarationMap = new HashMap<>();
    private String dataPath;
    private String componentName;

    public ArchitectureSymbol() {
        super("", KIND);
    }

    public List<SerialCompositeElementSymbol> getStreams() {
        return streams;
    }

    public void setStreams(List<SerialCompositeElementSymbol> streams) {
        this.streams = streams;
    }

    public String getDataPath() {
        return this.dataPath;
    }

    public void setDataPath(String dataPath) {
        this.dataPath = dataPath;
    }

    public void setComponentName(String componentName){
        this.componentName = componentName;
    }

    public String getComponentName(){
        return this.componentName;
    }

    public List<IOSymbol> getInputs() {
        return inputs;
    }

    public List<IOSymbol> getOutputs() {
        return outputs;
    }

    //called in IOSymbol to get the IODeclarationSymbol; only null if error; will be checked in coco CheckIOName
    @Nullable
    protected IODeclarationSymbol resolveIODeclaration(String name){
        IODeclarationSymbol ioDeclaration = ioDeclarationMap.get(name);
        if (ioDeclaration == null){
            Collection<IODeclarationSymbol> ioDefCollection = getEnclosingScope().resolveMany(name, IODeclarationSymbol.KIND);
            if (!ioDefCollection.isEmpty()){
                ioDeclaration = ioDefCollection.iterator().next();
                ioDeclarationMap.put(name, ioDeclaration);
                ioDeclaration.setArchitecture(this);
            }
        }
        return ioDeclaration;
    }

    public Collection<IODeclarationSymbol> getIODeclarations(){
        return ioDeclarationMap.values();
    }

    public Collection<LayerDeclarationSymbol> getLayerDeclarations(){
        return getSpannedScope().resolveLocally(LayerDeclarationSymbol.KIND);
    }

    public void resolve() {
        for (CompositeElementSymbol stream : streams) {
            stream.checkIfResolvable();

            try {
                stream.resolveOrError();
            }
            catch (ArchResolveException e) {
                // Do nothing; error is already logged
            }
        }
    }

    /*public List<ArchitectureElementSymbol> getFirstElements() {
        if (!getBody().isResolved()){
            resolve();
        }
        return getBody().getFirstAtomicElements();
    }*/

    public boolean isResolved(){
        boolean resolved = true;

        for (CompositeElementSymbol stream : streams) {
            resolved &= stream.isResolved();
        }

        return resolved;
    }

    public boolean isResolvable(){
        boolean resolvable = true;

        for (CompositeElementSymbol stream : streams) {
            resolvable &= stream.isResolvable();
        }

        return resolvable;
    }

    public void putInScope(Scope scope){
        Collection<Symbol> symbolsInScope = scope.getLocalSymbols().get(getName());
        if (symbolsInScope == null || !symbolsInScope.contains(this)){
            scope.getAsMutableScope().add(this);
            Utils.recursiveSetResolvingFilters(getSpannedScope(), scope.getResolvingFilters());
        }
    }

    /*
      Creates a unresolved copy of this architecture and
      adds the copy to the scope given as argument.
      Useful to create instances.
      This works even if "this" is already resolved.
     */
    public ArchitectureSymbol preResolveDeepCopy(Scope enclosingScopeOfCopy){
        ArchitectureSymbol copy = new ArchitectureSymbol();

        if (getAstNode().isPresent()){
            copy.setAstNode(getAstNode().get());
        }

        copy.getSpannedScope().getAsMutableScope().add(AllPredefinedVariables.createTrueConstant());
        copy.getSpannedScope().getAsMutableScope().add(AllPredefinedVariables.createFalseConstant());

        for (LayerDeclarationSymbol layerDeclaration : AllPredefinedLayers.createList()){
            copy.getSpannedScope().getAsMutableScope().add(layerDeclaration);
        }

        for (LayerDeclarationSymbol layerDeclaration : getSpannedScope().<LayerDeclarationSymbol>resolveLocally(LayerDeclarationSymbol.KIND)){
            if (!layerDeclaration.isPredefined()) {
                copy.getSpannedScope().getAsMutableScope().add(layerDeclaration.deepCopy());
            }
        }

        List<SerialCompositeElementSymbol> copyStreams = new ArrayList<>();
        for (SerialCompositeElementSymbol stream : streams) {
            SerialCompositeElementSymbol copyStream = stream.preResolveDeepCopy();
            copyStream.putInScope(copy.getSpannedScope());
            copyStreams.add(copyStream);
        }
        copy.setStreams(copyStreams);

        copy.putInScope(enclosingScopeOfCopy);
        return copy;
    }
}
