/**
 *
 *  ******************************************************************************
 *  MontiCAR Modeling Family, www.se-rwth.de
 *  Copyright (c) 2017, Software Engineering Group at RWTH Aachen,
 *  All rights reserved.
 *
 *  This project is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 3.0 of the License, or (at your option) any later version.
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this project. If not, see <http://www.gnu.org/licenses/>.
 * *******************************************************************************
 */
/* generated by template symboltable.ScopeSpanningSymbol*/


package de.monticore.lang.monticar.cnnarch._symboltable;

import de.monticore.lang.monticar.cnnarch.predefined.AllPredefinedVariables;
import de.monticore.symboltable.CommonScopeSpanningSymbol;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class UnrollDeclarationSymbol extends CommonScopeSpanningSymbol {

    public static final UnrollDeclarationKind KIND = new UnrollDeclarationKind();

    private List<ParameterSymbol> parameters;

    protected UnrollDeclarationSymbol(String name) {
        super(name, KIND);
    }

    @Override
    protected UnrollDeclarationScope createSpannedScope() {
        return new UnrollDeclarationScope();
    }

    @Override
    public UnrollDeclarationScope getSpannedScope() {
        return (UnrollDeclarationScope) super.getSpannedScope();
    }

    public List<ParameterSymbol> getParameters() {
        return parameters;
    }

    protected void setParameters(List<ParameterSymbol> parameters) {
        this.parameters = parameters;
        if (!getParameter(AllPredefinedVariables.CONDITIONAL_ARG_NAME).isPresent()){
            ParameterSymbol ifParam = AllPredefinedVariables.createConditionalParameter();
            this.parameters.add(ifParam);
            ifParam.putInScope(getSpannedScope());
        }
        if (!getParameter(AllPredefinedVariables.SERIAL_ARG_NAME).isPresent()){
            ParameterSymbol forParam = AllPredefinedVariables.createSerialParameter();
            this.parameters.add(forParam);
            forParam.putInScope(getSpannedScope());
        }
        if (!getParameter(AllPredefinedVariables.PARALLEL_ARG_NAME).isPresent()){
            ParameterSymbol forParam = AllPredefinedVariables.createParallelParameter();
            this.parameters.add(forParam);
            forParam.putInScope(getSpannedScope());
        }
        for (ParameterSymbol param : parameters){
            param.putInScope(getSpannedScope());
        }
    }

    public Optional<ParameterSymbol> getParameter(String name) {
        Optional<ParameterSymbol> res = Optional.empty();
        for (ParameterSymbol parameter : getParameters()){
            if (parameter.getName().equals(name)){
                res = Optional.of(parameter);
            }
        }
        return res;
    }


    public UnrollSymbol call(UnrollSymbol layer) throws ArchResolveException{
        checkForSequence(layer.getArguments());
        return layer;

    }

    private void reset(){
        for (ParameterSymbol param : getParameters()){
            param.reset();
        }
    }

    private void set(List<ArgumentSymbol> arguments){
        for (ArgumentSymbol arg : arguments){
            arg.set();
        }
    }

    private void checkForSequence(List<ArgumentSymbol> arguments){
        boolean valid = true;
        for (ArgumentSymbol arg : arguments){
            if (arg.getRhs() instanceof  ArchAbstractSequenceExpression){
                valid = false;
            }
        }
        if (!valid){
            throw new IllegalArgumentException("Arguments with sequence expressions have to be resolved first before calling the layer method.");
        }
    }
}
