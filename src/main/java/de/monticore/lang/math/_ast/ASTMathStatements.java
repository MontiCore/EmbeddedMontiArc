/* (c) https://github.com/MontiCore/monticore */
/* generated from model Math */
/* generated by template ast.AstClass*/

package de.monticore.lang.math._ast;

import de.monticore.ast.ASTNode;
import de.monticore.ast.Comment;
import de.se_rwth.commons.logging.Log;

import java.util.*;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;

/**
 * Legacy ast class. Some symbols still need this.
 */
@Deprecated
public class ASTMathStatements extends /* generated by template ast.AstSuperTypes*/
        de.monticore.ast.ASTCNode implements ASTMathNode {
    /* generated by template ast.Attribute*/

    public List<ASTStatement> statements = new java.util.ArrayList<>();

    /* generated by template ast.Constructor*/

    public ASTMathStatements(/* generated by template ast.ParametersDeclaration*/
            // Parameters declaration

    )
        /* generated by template ast.EmptyMethodBody*/

    { // empty body
    }


    /* generated by template ast.Constructor*/

    protected ASTMathStatements(/* generated by template ast.ConstructorParametersDeclaration*/
            List<ASTStatement> statements

    )
        /* generated by template ast.ConstructorAttributesSetter*/ {
        setStatementList(statements);
    }



    /* generated by template ast.ClassMethod*/


    public void accept(de.monticore.lang.math._visitor.MathVisitor visitor) {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(visitor, "0xA7006x608 Parameter 'visitor' must not be null.");

        /* generated by template ast.additionalmethods.Accept*/

        visitor.handle(this);

    }

    /* generated by template ast.ClassMethod*/


    public void accept(de.monticore.numberunit._visitor.NumberUnitVisitor visitor) {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(visitor, "0xA7006x753 Parameter 'visitor' must not be null.");

        /* generated by template ast.additionalmethods.AcceptSuper*/

        if (visitor instanceof de.monticore.lang.math._visitor.MathVisitor) {
            accept((de.monticore.lang.math._visitor.MathVisitor) visitor);
        } else {
            Log.error("0xA7000x332AST node type ASTMathStatements of the sub language de.monticore.lang.Math expected a visitor of type de.monticore.lang.math._visitor.MathVisitor, but got de.monticore.numberunit._visitor.NumberUnitVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
        }

    }

    /* generated by template ast.ClassMethod*/


    public void accept(de.monticore.literals.literals._visitor.LiteralsVisitor visitor) {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(visitor, "0xA7006x737 Parameter 'visitor' must not be null.");

        /* generated by template ast.additionalmethods.AcceptSuper*/

        if (visitor instanceof de.monticore.lang.math._visitor.MathVisitor) {
            accept((de.monticore.lang.math._visitor.MathVisitor) visitor);
        } else {
            Log.error("0xA7000x579AST node type ASTMathStatements of the sub language de.monticore.lang.Math expected a visitor of type de.monticore.lang.math._visitor.MathVisitor, but got de.monticore.literals.literals._visitor.LiteralsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
        }

    }

    /* generated by template ast.ClassMethod*/


    public void accept(de.monticore.lexicals.lexicals._visitor.LexicalsVisitor visitor) {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(visitor, "0xA7006x607 Parameter 'visitor' must not be null.");

        /* generated by template ast.additionalmethods.AcceptSuper*/

        if (visitor instanceof de.monticore.lang.math._visitor.MathVisitor) {
            accept((de.monticore.lang.math._visitor.MathVisitor) visitor);
        } else {
            Log.error("0xA7000x669AST node type ASTMathStatements of the sub language de.monticore.lang.Math expected a visitor of type de.monticore.lang.math._visitor.MathVisitor, but got de.monticore.lexicals.lexicals._visitor.LexicalsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
        }

    }

    /* generated by template ast.ClassMethod*/


    public void accept(de.monticore.assignmentexpressions._visitor.AssignmentExpressionsVisitor visitor) {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(visitor, "0xA7006x054 Parameter 'visitor' must not be null.");

        /* generated by template ast.additionalmethods.AcceptSuper*/

        if (visitor instanceof de.monticore.lang.math._visitor.MathVisitor) {
            accept((de.monticore.lang.math._visitor.MathVisitor) visitor);
        } else {
            Log.error("0xA7000x946AST node type ASTMathStatements of the sub language de.monticore.lang.Math expected a visitor of type de.monticore.lang.math._visitor.MathVisitor, but got de.monticore.assignmentexpressions._visitor.AssignmentExpressionsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
        }

    }

    /* generated by template ast.ClassMethod*/


    public void accept(de.monticore.expressionsbasis._visitor.ExpressionsBasisVisitor visitor) {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(visitor, "0xA7006x909 Parameter 'visitor' must not be null.");

        /* generated by template ast.additionalmethods.AcceptSuper*/

        if (visitor instanceof de.monticore.lang.math._visitor.MathVisitor) {
            accept((de.monticore.lang.math._visitor.MathVisitor) visitor);
        } else {
            Log.error("0xA7000x105AST node type ASTMathStatements of the sub language de.monticore.lang.Math expected a visitor of type de.monticore.lang.math._visitor.MathVisitor, but got de.monticore.expressionsbasis._visitor.ExpressionsBasisVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
        }

    }

    /* generated by template ast.ClassMethod*/


    public void accept(de.monticore.mcbasics._visitor.MCBasicsVisitor visitor) {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(visitor, "0xA7006x376 Parameter 'visitor' must not be null.");

        /* generated by template ast.additionalmethods.AcceptSuper*/

        if (visitor instanceof de.monticore.lang.math._visitor.MathVisitor) {
            accept((de.monticore.lang.math._visitor.MathVisitor) visitor);
        } else {
            Log.error("0xA7000x716AST node type ASTMathStatements of the sub language de.monticore.lang.Math expected a visitor of type de.monticore.lang.math._visitor.MathVisitor, but got de.monticore.mcbasics._visitor.MCBasicsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
        }

    }

    /* generated by template ast.ClassMethod*/


    public void accept(de.monticore.commonexpressions._visitor.CommonExpressionsVisitor visitor) {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(visitor, "0xA7006x186 Parameter 'visitor' must not be null.");

        /* generated by template ast.additionalmethods.AcceptSuper*/

        if (visitor instanceof de.monticore.lang.math._visitor.MathVisitor) {
            accept((de.monticore.lang.math._visitor.MathVisitor) visitor);
        } else {
            Log.error("0xA7000x915AST node type ASTMathStatements of the sub language de.monticore.lang.Math expected a visitor of type de.monticore.lang.math._visitor.MathVisitor, but got de.monticore.commonexpressions._visitor.CommonExpressionsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
        }

    }

    /* generated by template ast.ClassMethod*/


    public void accept(de.monticore.lang.matrix._visitor.MatrixVisitor visitor) {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(visitor, "0xA7006x228 Parameter 'visitor' must not be null.");

        /* generated by template ast.additionalmethods.AcceptSuper*/

        if (visitor instanceof de.monticore.lang.math._visitor.MathVisitor) {
            accept((de.monticore.lang.math._visitor.MathVisitor) visitor);
        } else {
            Log.error("0xA7000x207AST node type ASTMathStatements of the sub language de.monticore.lang.Math expected a visitor of type de.monticore.lang.math._visitor.MathVisitor, but got de.monticore.lang.matrix._visitor.MatrixVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
        }

    }

    /* generated by template ast.ClassMethod*/


    public void accept(de.monticore.lang.matrixexpressions._visitor.MatrixExpressionsVisitor visitor) {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(visitor, "0xA7006x601 Parameter 'visitor' must not be null.");

        /* generated by template ast.additionalmethods.AcceptSuper*/

        if (visitor instanceof de.monticore.lang.math._visitor.MathVisitor) {
            accept((de.monticore.lang.math._visitor.MathVisitor) visitor);
        } else {
            Log.error("0xA7000x257AST node type ASTMathStatements of the sub language de.monticore.lang.Math expected a visitor of type de.monticore.lang.math._visitor.MathVisitor, but got de.monticore.lang.matrixexpressions._visitor.MatrixExpressionsVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
        }

    }

    /* generated by template ast.ClassMethod*/


    public void accept(de.monticore.lang.monticar.types2._visitor.Types2Visitor visitor) {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(visitor, "0xA7006x885 Parameter 'visitor' must not be null.");

        /* generated by template ast.additionalmethods.AcceptSuper*/

        if (visitor instanceof de.monticore.lang.math._visitor.MathVisitor) {
            accept((de.monticore.lang.math._visitor.MathVisitor) visitor);
        } else {
            Log.error("0xA7000x474AST node type ASTMathStatements of the sub language de.monticore.lang.Math expected a visitor of type de.monticore.lang.math._visitor.MathVisitor, but got de.monticore.lang.monticar.types2._visitor.Types2Visitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
        }

    }

    /* generated by template ast.ClassMethod*/


    public void accept(de.monticore.types.types._visitor.TypesVisitor visitor) {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(visitor, "0xA7006x978 Parameter 'visitor' must not be null.");

        /* generated by template ast.additionalmethods.AcceptSuper*/

        if (visitor instanceof de.monticore.lang.math._visitor.MathVisitor) {
            accept((de.monticore.lang.math._visitor.MathVisitor) visitor);
        } else {
            Log.error("0xA7000x673AST node type ASTMathStatements of the sub language de.monticore.lang.Math expected a visitor of type de.monticore.lang.math._visitor.MathVisitor, but got de.monticore.types.types._visitor.TypesVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
        }

    }

    /* generated by template ast.ClassMethod*/


    public void accept(de.monticore.lang.monticar.resolution._visitor.ResolutionVisitor visitor) {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(visitor, "0xA7006x665 Parameter 'visitor' must not be null.");

        /* generated by template ast.additionalmethods.AcceptSuper*/

        if (visitor instanceof de.monticore.lang.math._visitor.MathVisitor) {
            accept((de.monticore.lang.math._visitor.MathVisitor) visitor);
        } else {
            Log.error("0xA7000x573AST node type ASTMathStatements of the sub language de.monticore.lang.Math expected a visitor of type de.monticore.lang.math._visitor.MathVisitor, but got de.monticore.lang.monticar.resolution._visitor.ResolutionVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
        }

    }

    /* generated by template ast.ClassMethod*/


    public void accept(de.monticore.lang.monticar.ranges._visitor.RangesVisitor visitor) {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(visitor, "0xA7006x831 Parameter 'visitor' must not be null.");

        /* generated by template ast.additionalmethods.AcceptSuper*/

        if (visitor instanceof de.monticore.lang.math._visitor.MathVisitor) {
            accept((de.monticore.lang.math._visitor.MathVisitor) visitor);
        } else {
            Log.error("0xA7000x702AST node type ASTMathStatements of the sub language de.monticore.lang.Math expected a visitor of type de.monticore.lang.math._visitor.MathVisitor, but got de.monticore.lang.monticar.ranges._visitor.RangesVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
        }

    }

    /* generated by template ast.ClassMethod*/

    @Deprecated

    public Collection<ASTNode> get_Children() {

        /* generated by template ast.additionalmethods.GetChildren*/

        java.util.LinkedList<ASTNode> result = new java.util.LinkedList<ASTNode>();
        result.addAll(getStatementList());
        return result;

    }

    /* generated by template ast.ClassMethod*/


    public boolean deepEquals(Object o, boolean forceSameOrder) {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(o, "0xA7006x178 Parameter 'o' must not be null.");

        /* generated by template ast.additionalmethods.DeepEqualsWithOrder*/

        ASTMathStatements comp;
        if ((o instanceof ASTMathStatements)) {
            comp = (ASTMathStatements) o;
        } else {
            return false;
        }
        if (!equalAttributes(comp)) {
            return false;
        }
        // comparing statements
        if (this.statements.size() != comp.statements.size()) {
            return false;
        } else {
            if (forceSameOrder) {
                Iterator<ASTStatement> it1 = this.statements.iterator();
                Iterator<ASTStatement> it2 = comp.statements.iterator();
                while (it1.hasNext() && it2.hasNext()) {
                    if (!it1.next().deepEquals(it2.next())) {
                        return false;
                    }
                }
            } else {
                Iterator<ASTStatement> it1 = this.statements.iterator();
                while (it1.hasNext()) {
                    ASTStatement oneNext = it1.next();
                    boolean matchFound = false;
                    Iterator<ASTStatement> it2 = comp.statements.iterator();
                    while (it2.hasNext()) {
                        if (oneNext.deepEquals(it2.next())) {
                            matchFound = true;
                            break;
                        }
                    }
                    if (!matchFound) {
                        return false;
                    }
                }
            }
        }
        return true;


    }

    /* generated by template ast.ClassMethod*/


    public boolean deepEquals(Object o) {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(o, "0xA7006x640 Parameter 'o' must not be null.");

        return deepEquals(o, true);

    }

    /* generated by template ast.ClassMethod*/


    public boolean deepEqualsWithComments(Object o, boolean forceSameOrder) {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(o, "0xA7006x035 Parameter 'o' must not be null.");

        /* generated by template ast.additionalmethods.DeepEqualsWithComments*/

        ASTMathStatements comp;
        if ((o instanceof ASTMathStatements)) {
            comp = (ASTMathStatements) o;
        } else {
            return false;
        }
        if (!equalsWithComments(comp)) {
            return false;
        }
        // comparing statements
        if (this.statements.size() != comp.statements.size()) {
            return false;
        } else {
            if (forceSameOrder) {
                Iterator<ASTStatement> it1 = this.statements.iterator();
                Iterator<ASTStatement> it2 = comp.statements.iterator();
                while (it1.hasNext() && it2.hasNext()) {
                    if (!it1.next().deepEqualsWithComments(it2.next())) {
                        return false;
                    }
                }
            } else {
                Iterator<ASTStatement> it1 = this.statements.iterator();
                while (it1.hasNext()) {
                    ASTStatement oneNext = it1.next();
                    boolean matchFound = false;
                    Iterator<ASTStatement> it2 = comp.statements.iterator();
                    while (it2.hasNext()) {
                        if (oneNext.deepEqualsWithComments(it2.next())) {
                            matchFound = true;
                            break;
                        }
                    }
                    if (!matchFound) {
                        return false;
                    }
                }
            }
        }
        return true;

    }

    /* generated by template ast.ClassMethod*/


    public boolean deepEqualsWithComments(Object o) {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(o, "0xA7006x651 Parameter 'o' must not be null.");

        return deepEqualsWithComments(o, true);

    }

    /* generated by template ast.ClassMethod*/


    public boolean equalAttributes(Object o) {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(o, "0xA7006x173 Parameter 'o' must not be null.");

        /* generated by template ast.additionalmethods.EqualAttributes*/

        ASTMathStatements comp;
        if ((o instanceof ASTMathStatements)) {
            comp = (ASTMathStatements) o;
        } else {
            return false;
        }
        return true;


    }

    /* generated by template ast.ClassMethod*/


    public boolean equalsWithComments(Object o) {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(o, "0xA7006x323 Parameter 'o' must not be null.");

        /* generated by template ast.additionalmethods.EqualsWithComments*/

        ASTMathStatements comp;
        if ((o instanceof ASTMathStatements)) {
            comp = (ASTMathStatements) o;
        } else {
            return false;
        }
        if (!equalAttributes(comp)) {
            return false;
        }
        // comparing comments
        if (get_PreCommentList().size() == comp.get_PreCommentList().size()) {
            Iterator<Comment> one = get_PreCommentList().iterator();
            Iterator<Comment> two = comp.get_PreCommentList().iterator();
            while (one.hasNext()) {
                if (!one.next().equals(two.next())) {
                    return false;
                }
            }
        } else {
            return false;
        }

        if (get_PostCommentList().size() == comp.get_PostCommentList().size()) {
            Iterator<Comment> one = get_PostCommentList().iterator();
            Iterator<Comment> two = comp.get_PostCommentList().iterator();
            while (one.hasNext()) {
                if (!one.next().equals(two.next())) {
                    return false;
                }
            }
        } else {
            return false;
        }
        return true;

    }

    /* generated by template ast.ClassMethod*/


    public ASTMathStatements deepClone() {

        Log.error("DeepClone not supported.");
        return null;

    }

    /* generated by template ast.ClassMethod*/


    public ASTMathStatements deepClone(ASTMathStatements result) {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(result, "0xA7006x721 Parameter 'result' must not be null.");

        /* generated by template ast.additionalmethods.DeepCloneWithParameters*/

        super.deepClone(result);

        for (int i = 0; i < result.getStatementList().size(); i++) {
            result.setStatement(i, this.statements.get(i));
        }
        this.statements.forEach(s -> result.statements.add(s.deepClone()));

        return result;

    }

    /* generated by template ast.ClassMethod*/


    public void clearStatements() {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        this.statements.clear();

    }

    /* generated by template ast.ClassMethod*/


    public boolean addStatement(ASTStatement element) {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.add(element);

    }

    /* generated by template ast.ClassMethod*/


    public boolean addAllStatements(Collection<? extends ASTStatement> collection) {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.addAll(collection);

    }

    /* generated by template ast.ClassMethod*/


    public boolean removeStatement(Object element) {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.remove(element);

    }

    /* generated by template ast.ClassMethod*/


    public boolean removeAllStatements(Collection<?> collection) {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.removeAll(collection);

    }

    /* generated by template ast.ClassMethod*/


    public boolean retainAllStatements(Collection<?> collection) {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.retainAll(collection);

    }

    /* generated by template ast.ClassMethod*/


    public boolean removeIfStatement(Predicate<? super ASTStatement> filter) {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.removeIf(filter);

    }

    /* generated by template ast.ClassMethod*/


    public void forEachStatements(Consumer<? super ASTStatement> action) {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        this.statements.forEach(action);

    }

    /* generated by template ast.ClassMethod*/


    public void addStatement(int index, ASTStatement element) {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        this.statements.add(index, element);

    }

    /* generated by template ast.ClassMethod*/


    public boolean addAllStatements(int index, Collection<? extends ASTStatement> collection) {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.addAll(index, collection);

    }

    /* generated by template ast.ClassMethod*/


    public void replaceAllStatements(UnaryOperator<ASTStatement> operator) {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        this.statements.replaceAll(operator);

    }

    /* generated by template ast.ClassMethod*/


    public void sortStatements(Comparator<? super ASTStatement> comparator) {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        this.statements.sort(comparator);

    }

    /* generated by template ast.ClassMethod*/


    public ASTStatement removeStatement(int index) {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.remove(index);

    }

    /* generated by template ast.ClassMethod*/


    public ASTStatement setStatement(int index, ASTStatement element) {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.set(index, element);

    }

    /* generated by template ast.ClassMethod*/


    public boolean containsStatement(Object element) {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.contains(element);

    }

    /* generated by template ast.ClassMethod*/


    public boolean containsAllStatements(Collection<?> collection) {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.containsAll(collection);

    }

    /* generated by template ast.ClassMethod*/


    public boolean isEmptyStatements() {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.isEmpty();

    }

    /* generated by template ast.ClassMethod*/


    public Iterator<ASTStatement> iteratorStatements() {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.iterator();

    }

    /* generated by template ast.ClassMethod*/


    public int sizeStatements() {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.size();

    }

    /* generated by template ast.ClassMethod*/


    public ASTStatement[] toArrayStatements(ASTStatement[] array) {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.toArray(array);

    }

    /* generated by template ast.ClassMethod*/


    public Object[] toArrayStatements() {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.toArray();

    }

    /* generated by template ast.ClassMethod*/


    public Spliterator<ASTStatement> spliteratorStatements() {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.spliterator();

    }

    /* generated by template ast.ClassMethod*/


    public Stream<ASTStatement> streamStatements() {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.stream();

    }

    /* generated by template ast.ClassMethod*/


    public Stream<ASTStatement> parallelStreamStatements() {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.parallelStream();

    }

    /* generated by template ast.ClassMethod*/


    public ASTStatement getStatement(int index) {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.get(index);

    }

    /* generated by template ast.ClassMethod*/


    public int indexOfStatement(Object element) {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.indexOf(element);

    }

    /* generated by template ast.ClassMethod*/


    public int lastIndexOfStatement(Object element) {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.lastIndexOf(element);

    }

    /* generated by template ast.ClassMethod*/


    public boolean equalsStatements(Object o) {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.equals(o);

    }

    /* generated by template ast.ClassMethod*/


    public int hashCodeStatements() {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.hashCode();

    }

    /* generated by template ast.ClassMethod*/


    public ListIterator<ASTStatement> listIteratorStatements() {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.listIterator();

    }

    /* generated by template ast.ClassMethod*/


    public ListIterator<ASTStatement> listIteratorStatements(int index) {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.listIterator(index);

    }

    /* generated by template ast.ClassMethod*/


    public List<ASTStatement> subListStatements(int start, int end) {

        /* generated by template ast.additionalmethods.ListAttributeMethod*/


        return this.statements.subList(start, end);

    }

    /* generated by template ast.ClassMethod*/


    public List<ASTStatement> getStatementList() {

        /* generated by template ast.additionalmethods.Get*/

        return this.statements;

    }

    /* generated by template ast.ClassMethod*/


    public void setStatementList(List<ASTStatement> statements) {
        /* generated by template ast.ErrorIfNull*/
        // MontiCore generally assumes that null is not used, but if you are
        // unsure then override template ast.ErrorIfNull
        // Log.errorIfNull(statements, "0xA7006x099 Parameter 'statements' must not be null.");

        /* generated by template ast.additionalmethods.Set*/

        this.statements = statements;

    }


}
