/* generated by template symboltable.SymbolTableCreator*/




package simulation._symboltable;

import de.se_rwth.commons.logging.Log;

import simulation._visitor.SimulationVisitor;
import de.monticore.symboltable.MutableScope;
import de.monticore.symboltable.ResolvingConfiguration;
import de.monticore.symboltable.Scope;
import java.util.Deque;

public class SimulationSymbolTableCreator extends de.monticore.symboltable.CommonSymbolTableCreator
         implements SimulationVisitor {

  public SimulationSymbolTableCreator(
    final ResolvingConfiguration resolvingConfig, final MutableScope enclosingScope) {
    super(resolvingConfig, enclosingScope);
  }

  public SimulationSymbolTableCreator(final ResolvingConfiguration resolvingConfig, final Deque<MutableScope> scopeStack) {
    super(resolvingConfig, scopeStack);
  }

  private void initSuperSTC() {
  }

  /**
  * Creates the symbol table starting from the <code>rootNode</code> and
  * returns the first scope that was created.
  *
  * @param rootNode the root node
  * @return the first scope that was created
  */
  public Scope createFromAST(simulation._ast.ASTSimulationNode rootNode) {
    Log.errorIfNull(rootNode, "0xA7004_298 Error by creating of the SimulationSymbolTableCreator symbol table: top ast node is null");
    rootNode.accept(realThis);
    return getFirstCreatedScope();
  }

  private SimulationVisitor realThis = this;

  public SimulationVisitor getRealThis() {
    return realThis;
  }

  @Override
  public void setRealThis(SimulationVisitor realThis) {
    if (this.realThis != realThis) {
      this.realThis = realThis;
    }
  }

  /* generated by template symboltable.symboltablecreators.ScopeSpanningSymbolMethods*/



  /* generated by template symboltable.symboltablecreators.SymbolMethods*/



  @Override
  public void visit(simulation._ast.ASTSimulation ast) {
    SimulationSymbol simulation = create_Simulation(ast);
    initialize_Simulation(simulation, ast);
    addToScopeAndLinkWithNode(simulation, ast);
  }

  protected SimulationSymbol create_Simulation(simulation._ast.ASTSimulation ast) {
      return new SimulationSymbol(ast.getName());
  }

  protected void initialize_Simulation(SimulationSymbol simulation, simulation._ast.ASTSimulation ast) {
    /* generated by template symboltable.symboltablecreators.InitializeSymbol*/


    

  }


  /* generated by template symboltable.symboltablecreators.EndVisitMethod*/



  @Override
  public void endVisit(simulation._ast.ASTSimulation ast) {
    removeCurrentScope();
    setEnclosingScopeOfNodes(ast);
  }



}
