/* generated by template cocos.CoCoChecker*/



package simulation._cocos;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.LinkedHashSet;

import simulation._ast.ASTSimulationNode;
import simulation._visitor.SimulationVisitor;
import simulation._visitor.SimulationInheritanceVisitor;

/**
 * This class is capable of checking context conditions of the language and all
 * their super languages. Beside such composition of single context conditions
 * ({@code addCoCo(...)}) it also allows composing of existing checkers of
 * the language itself and checkers of (transitive) super languages
 * ({@code addChecker(...)}). Composing multiple checkers of the same (super)
 * language is possible. The composed checkers are not modified. Also it is
 * supported to mix both composing existing checkers as well as single.<br/>
 * <b>Keep in mind</b> that context conditions are executed multiple-times if
 * added multiple times. This might be tricky when multiple composed checkers
 * hold the same context condition.<br/>
 * <br/>
 * <b>Add context conditions</b> using {@code #addCoCo(...}.<br/>
 * <br/>
 * <b>Add checkers</b> using {@code #addCoCo(...}.<br/>
 * <br/>
 * <b>Execute all</b> registered context conditions and checkers by calling
 * {@link #checkAll(ASTSimulationNode)}.
 * 
 * @author Robert Heim
 */
public class SimulationCoCoChecker implements SimulationInheritanceVisitor {

  public SimulationCoCoChecker() {
  }

  // --- realThis-Pattern ---
  
  private SimulationVisitor realThis = this;

  @Override
  public SimulationVisitor getRealThis() {
    return realThis;
  }

  @Override
  public void setRealThis(SimulationVisitor realThis) {
    this.realThis = realThis;
  }
  
  // --- /realThis-Pattern ---

    /**
     * Executes all registered context conditions and checkers on the given ast.
     * @param node the node to check the context conditions on.
     */
    public void checkAll(simulation._ast.ASTSimulationNode node) {
      // start the double-dispatch visitor
      // checks are performed in the visit methods.
      node.accept(getRealThis());
    }
    /**
     * Executes all registered context conditions and checkers on the given ast.
     * @param node the node to check the context conditions on.
     */
    public void checkAll(weather._ast.ASTWeatherNode node) {
      // start the double-dispatch visitor
      // checks are performed in the visit methods.
      node.accept(getRealThis());
    }
    /**
     * Executes all registered context conditions and checkers on the given ast.
     * @param node the node to check the context conditions on.
     */
    public void checkAll(si._ast.ASTSINode node) {
      // start the double-dispatch visitor
      // checks are performed in the visit methods.
      node.accept(getRealThis());
    }


      private List<simulation._cocos.SimulationCoCoChecker> simulation__cocos_SimulationCoCoChecker = new ArrayList<>();

    /**
     * Registers a checker whose context conditions will be executed once the
     * checker runs.<br/>
     * <br/>
     * Use this to compose checkers that already have cocos added. All
     * registered context conditions of all checkers are executed. By default
     * at least an empty checker is registered for super languages.
     * {@code simulation._cocos.SimulationCoCoChecker} is used.
     * 
     * @param checker the checker to add.
     * @see #checkAll(ASTSimulationNode)
     */
    public void addChecker(simulation._cocos.SimulationCoCoChecker checker) {
      // note that getRealThis is not needed here.
      this.simulation__cocos_SimulationCoCoChecker.add(checker);
    }


          private Collection<simulation._cocos.SimulationASTSimulationCoCo> simulation__ast_ASTSimulationCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTSimulationCoCo coco) {
            simulation__ast_ASTSimulationCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTSimulation node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTSimulationCoCo coco : simulation__ast_ASTSimulationCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTSimulationRenderFrequencyCoCo> simulation__ast_ASTSimulationRenderFrequencyCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTSimulationRenderFrequencyCoCo coco) {
            simulation__ast_ASTSimulationRenderFrequencyCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTSimulationRenderFrequency node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTSimulationRenderFrequencyCoCo coco : simulation__ast_ASTSimulationRenderFrequencyCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTSimulationLoopFrequencyCoCo> simulation__ast_ASTSimulationLoopFrequencyCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTSimulationLoopFrequencyCoCo coco) {
            simulation__ast_ASTSimulationLoopFrequencyCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTSimulationLoopFrequency node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTSimulationLoopFrequencyCoCo coco : simulation__ast_ASTSimulationLoopFrequencyCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTSimulationDurationCoCo> simulation__ast_ASTSimulationDurationCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTSimulationDurationCoCo coco) {
            simulation__ast_ASTSimulationDurationCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTSimulationDuration node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTSimulationDurationCoCo coco : simulation__ast_ASTSimulationDurationCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTSimulationTypeCoCo> simulation__ast_ASTSimulationTypeCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTSimulationTypeCoCo coco) {
            simulation__ast_ASTSimulationTypeCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTSimulationType node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTSimulationTypeCoCo coco : simulation__ast_ASTSimulationTypeCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTWeatherObjCoCo> simulation__ast_ASTWeatherObjCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTWeatherObjCoCo coco) {
            simulation__ast_ASTWeatherObjCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTWeatherObj node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTWeatherObjCoCo coco : simulation__ast_ASTWeatherObjCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTWeatherCoCo> simulation__ast_ASTWeatherCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTWeatherCoCo coco) {
            simulation__ast_ASTWeatherCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTWeather node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTWeatherCoCo coco : simulation__ast_ASTWeatherCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTFixedWeatherCoCo> simulation__ast_ASTFixedWeatherCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTFixedWeatherCoCo coco) {
            simulation__ast_ASTFixedWeatherCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTFixedWeather node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTFixedWeatherCoCo coco : simulation__ast_ASTFixedWeatherCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTSequenceWeatherCoCo> simulation__ast_ASTSequenceWeatherCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTSequenceWeatherCoCo coco) {
            simulation__ast_ASTSequenceWeatherCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTSequenceWeather node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTSequenceWeatherCoCo coco : simulation__ast_ASTSequenceWeatherCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTRandomWeatherCoCo> simulation__ast_ASTRandomWeatherCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTRandomWeatherCoCo coco) {
            simulation__ast_ASTRandomWeatherCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTRandomWeather node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTRandomWeatherCoCo coco : simulation__ast_ASTRandomWeatherCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTForecastCoCo> simulation__ast_ASTForecastCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTForecastCoCo coco) {
            simulation__ast_ASTForecastCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTForecast node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTForecastCoCo coco : simulation__ast_ASTForecastCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTTimeCoCo> simulation__ast_ASTTimeCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTTimeCoCo coco) {
            simulation__ast_ASTTimeCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTTime node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTTimeCoCo coco : simulation__ast_ASTTimeCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTMapPathCoCo> simulation__ast_ASTMapPathCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTMapPathCoCo coco) {
            simulation__ast_ASTMapPathCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTMapPath node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTMapPathCoCo coco : simulation__ast_ASTMapPathCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTMapNameCoCo> simulation__ast_ASTMapNameCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTMapNameCoCo coco) {
            simulation__ast_ASTMapNameCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTMapName node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTMapNameCoCo coco : simulation__ast_ASTMapNameCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTMapHeightCoCo> simulation__ast_ASTMapHeightCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTMapHeightCoCo coco) {
            simulation__ast_ASTMapHeightCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTMapHeight node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTMapHeightCoCo coco : simulation__ast_ASTMapHeightCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTMapOverlapCoCo> simulation__ast_ASTMapOverlapCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTMapOverlapCoCo coco) {
            simulation__ast_ASTMapOverlapCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTMapOverlap node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTMapOverlapCoCo coco : simulation__ast_ASTMapOverlapCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTMapSectorWidthCoCo> simulation__ast_ASTMapSectorWidthCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTMapSectorWidthCoCo coco) {
            simulation__ast_ASTMapSectorWidthCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTMapSectorWidth node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTMapSectorWidthCoCo coco : simulation__ast_ASTMapSectorWidthCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTMapSectorHeightCoCo> simulation__ast_ASTMapSectorHeightCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTMapSectorHeightCoCo coco) {
            simulation__ast_ASTMapSectorHeightCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTMapSectorHeight node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTMapSectorHeightCoCo coco : simulation__ast_ASTMapSectorHeightCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTMaxSectorUsersCoCo> simulation__ast_ASTMaxSectorUsersCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTMaxSectorUsersCoCo coco) {
            simulation__ast_ASTMaxSectorUsersCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTMaxSectorUsers node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTMaxSectorUsersCoCo coco : simulation__ast_ASTMaxSectorUsersCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTTimeoutCoCo> simulation__ast_ASTTimeoutCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTTimeoutCoCo coco) {
            simulation__ast_ASTTimeoutCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTTimeout node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTTimeoutCoCo coco : simulation__ast_ASTTimeoutCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTPedestriansCoCo> simulation__ast_ASTPedestriansCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTPedestriansCoCo coco) {
            simulation__ast_ASTPedestriansCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTPedestrians node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTPedestriansCoCo coco : simulation__ast_ASTPedestriansCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTPedestrianDensityCoCo> simulation__ast_ASTPedestrianDensityCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTPedestrianDensityCoCo coco) {
            simulation__ast_ASTPedestrianDensityCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTPedestrianDensity node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTPedestrianDensityCoCo coco : simulation__ast_ASTPedestrianDensityCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTVehiclesCoCo> simulation__ast_ASTVehiclesCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTVehiclesCoCo coco) {
            simulation__ast_ASTVehiclesCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTVehicles node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTVehiclesCoCo coco : simulation__ast_ASTVehiclesCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTExplicitVehicleCoCo> simulation__ast_ASTExplicitVehicleCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTExplicitVehicleCoCo coco) {
            simulation__ast_ASTExplicitVehicleCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTExplicitVehicle node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTExplicitVehicleCoCo coco : simulation__ast_ASTExplicitVehicleCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTPathedVehicleCoCo> simulation__ast_ASTPathedVehicleCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTPathedVehicleCoCo coco) {
            simulation__ast_ASTPathedVehicleCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTPathedVehicle node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTPathedVehicleCoCo coco : simulation__ast_ASTPathedVehicleCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTRandomVehicleCoCo> simulation__ast_ASTRandomVehicleCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTRandomVehicleCoCo coco) {
            simulation__ast_ASTRandomVehicleCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTRandomVehicle node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTRandomVehicleCoCo coco : simulation__ast_ASTRandomVehicleCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

          private Collection<simulation._cocos.SimulationASTSimulationNodeCoCo> simulation__ast_ASTSimulationNodeCoCos = new LinkedHashSet<>();
 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(simulation._cocos.SimulationASTSimulationNodeCoCo coco) {
            simulation__ast_ASTSimulationNodeCoCos.add(coco);
          return this;
        }

        @Override
        public void visit(simulation._ast.ASTSimulationNode node) {
            // execute all registered cocos of this checker
            for (simulation._cocos.SimulationASTSimulationNodeCoCo coco : simulation__ast_ASTSimulationNodeCoCos) {
              coco.check(node);
            }
            // and delegate to all registered checkers of the same language as well
            simulation__cocos_SimulationCoCoChecker.stream().forEach(c -> c.visit(node));
        }

      private List<weather._cocos.WeatherCoCoChecker> weather__cocos_WeatherCoCoChecker = new ArrayList<>(Arrays.asList(new weather._cocos.WeatherCoCoChecker()));

    /**
     * Registers a checker whose context conditions will be executed once the
     * checker runs.<br/>
     * <br/>
     * Use this to compose checkers that already have cocos added. All
     * registered context conditions of all checkers are executed. By default
     * at least an empty checker is registered for super languages.
     * {@code weather._cocos.WeatherCoCoChecker} is used.
     * 
     * @param checker the checker to add.
     * @see #checkAll(ASTSimulationNode)
     */
    public void addChecker(weather._cocos.WeatherCoCoChecker checker) {
      // note that getRealThis is not needed here.
      this.weather__cocos_WeatherCoCoChecker.add(checker);
    }


 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(weather._cocos.WeatherASTTemperatureCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            weather__cocos_WeatherCoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTTemperature node) {
            // delegate to all registered checkers of the corresponding super language
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(weather._cocos.WeatherASTHumidityCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            weather__cocos_WeatherCoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTHumidity node) {
            // delegate to all registered checkers of the corresponding super language
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(weather._cocos.WeatherASTPressureCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            weather__cocos_WeatherCoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTPressure node) {
            // delegate to all registered checkers of the corresponding super language
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(weather._cocos.WeatherASTWindstrengthCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            weather__cocos_WeatherCoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTWindstrength node) {
            // delegate to all registered checkers of the corresponding super language
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(weather._cocos.WeatherASTWinddirectionCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            weather__cocos_WeatherCoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTWinddirection node) {
            // delegate to all registered checkers of the corresponding super language
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(weather._cocos.WeatherASTPrecipitationtypeCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            weather__cocos_WeatherCoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTPrecipitationtype node) {
            // delegate to all registered checkers of the corresponding super language
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(weather._cocos.WeatherASTPrecipitationamountCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            weather__cocos_WeatherCoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTPrecipitationamount node) {
            // delegate to all registered checkers of the corresponding super language
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(weather._cocos.WeatherASTCloudingCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            weather__cocos_WeatherCoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTClouding node) {
            // delegate to all registered checkers of the corresponding super language
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(weather._cocos.WeatherASTSightCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            weather__cocos_WeatherCoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTSight node) {
            // delegate to all registered checkers of the corresponding super language
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(weather._cocos.WeatherASTWeatherPhenomenaCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            weather__cocos_WeatherCoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTWeatherPhenomena node) {
            // delegate to all registered checkers of the corresponding super language
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(weather._cocos.WeatherASTOpticalPhenomenaCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            weather__cocos_WeatherCoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTOpticalPhenomena node) {
            // delegate to all registered checkers of the corresponding super language
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(weather._cocos.WeatherASTArtificialPhenomenaCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            weather__cocos_WeatherCoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTArtificialPhenomena node) {
            // delegate to all registered checkers of the corresponding super language
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(weather._cocos.WeatherASTWeatherNodeCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            weather__cocos_WeatherCoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(weather._ast.ASTWeatherNode node) {
            // delegate to all registered checkers of the corresponding super language
            weather__cocos_WeatherCoCoChecker.stream().forEach(c -> c.visit(node));
        }

      private List<si._cocos.SICoCoChecker> si__cocos_SICoCoChecker = new ArrayList<>(Arrays.asList(new si._cocos.SICoCoChecker()));

    /**
     * Registers a checker whose context conditions will be executed once the
     * checker runs.<br/>
     * <br/>
     * Use this to compose checkers that already have cocos added. All
     * registered context conditions of all checkers are executed. By default
     * at least an empty checker is registered for super languages.
     * {@code si._cocos.SICoCoChecker} is used.
     * 
     * @param checker the checker to add.
     * @see #checkAll(ASTSimulationNode)
     */
    public void addChecker(si._cocos.SICoCoChecker checker) {
      // note that getRealThis is not needed here.
      this.si__cocos_SICoCoChecker.add(checker);
    }


 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(si._cocos.SIASTNumberCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            si__cocos_SICoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(si._ast.ASTNumber node) {
            // delegate to all registered checkers of the corresponding super language
            si__cocos_SICoCoChecker.stream().forEach(c -> c.visit(node));
        }

 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(si._cocos.SIASTFloatPointUnitNumberCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            si__cocos_SICoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(si._ast.ASTFloatPointUnitNumber node) {
            // delegate to all registered checkers of the corresponding super language
            si__cocos_SICoCoChecker.stream().forEach(c -> c.visit(node));
        }

 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(si._cocos.SIASTHexUnitNumberCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            si__cocos_SICoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(si._ast.ASTHexUnitNumber node) {
            // delegate to all registered checkers of the corresponding super language
            si__cocos_SICoCoChecker.stream().forEach(c -> c.visit(node));
        }

 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(si._cocos.SIASTUnitNumberCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            si__cocos_SICoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(si._ast.ASTUnitNumber node) {
            // delegate to all registered checkers of the corresponding super language
            si__cocos_SICoCoChecker.stream().forEach(c -> c.visit(node));
        }

 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(si._cocos.SIASTComplexNumberCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            si__cocos_SICoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(si._ast.ASTComplexNumber node) {
            // delegate to all registered checkers of the corresponding super language
            si__cocos_SICoCoChecker.stream().forEach(c -> c.visit(node));
        }

 
        /**
         * Adds a context condition. It is executed when running the checker.
         * 
         * @param coco the coco to add.
         * @see #checkAll(ASTSimulationNode)
         */
        public SimulationCoCoChecker addCoCo(si._cocos.SIASTSINodeCoCo coco) {
            /* add it to the corresponding language's checker.
             * The findFirst is always present because we add at least
             * one checker during initialization. This checker is used, so we
             * do not modify composed checkers.
             */
            si__cocos_SICoCoChecker.stream().findFirst().get().addCoCo(coco);
          return this;
        }

        @Override
        public void visit(si._ast.ASTSINode node) {
            // delegate to all registered checkers of the corresponding super language
            si__cocos_SICoCoChecker.stream().forEach(c -> c.visit(node));
        }
}
