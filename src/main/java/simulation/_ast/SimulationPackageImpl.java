/* generated from model Simulation*/
/* generated by template ast.Class*/
// Class declaration
/* generated by template ast_emf.EPackageImpl*/




package simulation._ast;

import java.util.*;
import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EOperation;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.impl.EPackageImpl;
import de.monticore.emf._ast.*;

public class SimulationPackageImpl extends EPackageImpl implements SimulationPackage {

  private EClass simulationEClass = null;
  private EClass simulationRenderFrequencyEClass = null;
  private EClass simulationLoopFrequencyEClass = null;
  private EClass simulationDurationEClass = null;
  private EClass simulationTypeEClass = null;
  private EClass weatherObjEClass = null;
  private EClass weatherEClass = null;
  private EClass fixedWeatherEClass = null;
  private EClass sequenceWeatherEClass = null;
  private EClass randomWeatherEClass = null;
  private EClass forecastEClass = null;
  private EClass timeEClass = null;
  private EClass mapPathEClass = null;
  private EClass mapNameEClass = null;
  private EClass mapHeightEClass = null;
  private EClass mapOverlapEClass = null;
  private EClass mapSectorWidthEClass = null;
  private EClass mapSectorHeightEClass = null;
  private EClass maxSectorUsersEClass = null;
  private EClass timeoutEClass = null;
  private EClass pedestriansEClass = null;
  private EClass pedestrianDensityEClass = null;
  private EClass vehiclesEClass = null;
  private EClass explicitVehicleEClass = null;
  private EClass pathedVehicleEClass = null;
  private EClass randomVehicleEClass = null;
  private EEnum constantsSimulationEEnum = null;
  
  private boolean isCreated = false;
    
  private boolean isInitialized = false;
    
  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
  */
  private SimulationPackageImpl() {
    super(eNS_URI, SimulationNodeFactory.getFactory());
  }
    
  private static boolean isInited = false;
    
  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   * 
   * This method is used to initialize eInstance when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
  */
  public static SimulationPackage init() {
    if (isInited) {
      return (SimulationPackage)EPackage.Registry.INSTANCE.getEPackage(SimulationPackage.eNS_URI);
    }
        
    // Obtain or create and register package
    SimulationPackageImpl theSimulationPackage = (SimulationPackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof SimulationPackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new SimulationPackageImpl());

    isInited = true;
       
    // Obtain or create and register interdependencies
    ASTENodePackageImpl theASTENodePackage = (ASTENodePackageImpl) (EPackage.Registry.INSTANCE.getEPackage(ASTENodePackage.eNS_URI)  instanceof ASTENodePackage ? 
                                                                    EPackage.Registry.INSTANCE.getEPackage(ASTENodePackage.eNS_URI) : ASTENodePackage.eINSTANCE);
        
      weather._ast.WeatherPackageImpl theWeather_Package = 
      (weather._ast.WeatherPackageImpl)(EPackage.Registry.INSTANCE.getEPackage(
      weather._ast.WeatherPackage.eNS_URI) instanceof weather._ast.WeatherPackage? 
      EPackage.Registry.INSTANCE.getEPackage(weather._ast.WeatherPackage.eNS_URI) :
      weather._ast.WeatherPackage.eINSTANCE);
      si._ast.SIPackageImpl theSi_Package = 
      (si._ast.SIPackageImpl)(EPackage.Registry.INSTANCE.getEPackage(
      si._ast.SIPackage.eNS_URI) instanceof si._ast.SIPackage? 
      EPackage.Registry.INSTANCE.getEPackage(si._ast.SIPackage.eNS_URI) :
      si._ast.SIPackage.eINSTANCE);
    
    // Create package meta-data objects
    theSimulationPackage.createPackageContents();
    theASTENodePackage.createPackageContents();
    theWeather_Package.createPackageContents();
    theSi_Package.createPackageContents();
        
    // Initialize created meta-data
    theSimulationPackage.initializePackageContents();
    theASTENodePackage.initializePackageContents();
    theWeather_Package.initializePackageContents();
    theSi_Package.initializePackageContents();
        
    // Mark meta-data to indicate it can't be changed
  //  theSimulationPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(SimulationPackage.eNS_URI, theSimulationPackage);
    return theSimulationPackage;
  }
    
  public SimulationNodeFactory getSimulationFactory() {
    return (SimulationNodeFactory)getEFactoryInstance();
  }
  
  public EEnum getConstantsSimulation(){
    return constantsSimulationEEnum;
  }
  
  public String getPackageName() {
    return "simulation";
  }
  
  public List<ASTEPackage> getASTESuperPackages() {
    List<ASTEPackage> eSuperPackages = new ArrayList<>();
    eSuperPackages.add((ASTEPackage)weather._ast.WeatherPackage.eINSTANCE);
    eSuperPackages.add((ASTEPackage)si._ast.SIPackage.eINSTANCE);
    return eSuperPackages;
  }
    
  public EClass getSimulation() {
    return simulationEClass;
  }
  public EClass getSimulationRenderFrequency() {
    return simulationRenderFrequencyEClass;
  }
  public EClass getSimulationLoopFrequency() {
    return simulationLoopFrequencyEClass;
  }
  public EClass getSimulationDuration() {
    return simulationDurationEClass;
  }
  public EClass getSimulationType() {
    return simulationTypeEClass;
  }
  public EClass getWeatherObj() {
    return weatherObjEClass;
  }
  public EClass getWeather() {
    return weatherEClass;
  }
  public EClass getFixedWeather() {
    return fixedWeatherEClass;
  }
  public EClass getSequenceWeather() {
    return sequenceWeatherEClass;
  }
  public EClass getRandomWeather() {
    return randomWeatherEClass;
  }
  public EClass getForecast() {
    return forecastEClass;
  }
  public EClass getTime() {
    return timeEClass;
  }
  public EClass getMapPath() {
    return mapPathEClass;
  }
  public EClass getMapName() {
    return mapNameEClass;
  }
  public EClass getMapHeight() {
    return mapHeightEClass;
  }
  public EClass getMapOverlap() {
    return mapOverlapEClass;
  }
  public EClass getMapSectorWidth() {
    return mapSectorWidthEClass;
  }
  public EClass getMapSectorHeight() {
    return mapSectorHeightEClass;
  }
  public EClass getMaxSectorUsers() {
    return maxSectorUsersEClass;
  }
  public EClass getTimeout() {
    return timeoutEClass;
  }
  public EClass getPedestrians() {
    return pedestriansEClass;
  }
  public EClass getPedestrianDensity() {
    return pedestrianDensityEClass;
  }
  public EClass getVehicles() {
    return vehiclesEClass;
  }
  public EClass getExplicitVehicle() {
    return explicitVehicleEClass;
  }
  public EClass getPathedVehicle() {
    return pathedVehicleEClass;
  }
  public EClass getRandomVehicle() {
    return randomVehicleEClass;
  }
   
  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTSimulation_MapHeight()   { 
     
     return (EReference)simulationEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTSimulation_MapName()   { 
     
     return (EReference)simulationEClass.getEStructuralFeatures().get(1);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTSimulation_MapOverlap()   { 
     
     return (EReference)simulationEClass.getEStructuralFeatures().get(2);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTSimulation_MapPath()   { 
     
     return (EReference)simulationEClass.getEStructuralFeatures().get(3);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTSimulation_MapSectorHeight()   { 
     
     return (EReference)simulationEClass.getEStructuralFeatures().get(4);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTSimulation_MapSectorWidth()   { 
     
     return (EReference)simulationEClass.getEStructuralFeatures().get(5);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTSimulation_MaxSectorUsers()   { 
     
     return (EReference)simulationEClass.getEStructuralFeatures().get(6);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTSimulation_Name()   { 
     
     return (EAttribute)simulationEClass.getEStructuralFeatures().get(7);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTSimulation_PedestrianDensity()   { 
     
     return (EReference)simulationEClass.getEStructuralFeatures().get(8);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTSimulation_Pedestrians()   { 
     
     return (EReference)simulationEClass.getEStructuralFeatures().get(9);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTSimulation_SimulationDuration()   { 
     
     return (EReference)simulationEClass.getEStructuralFeatures().get(10);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTSimulation_SimulationLoopFrequency()   { 
     
     return (EReference)simulationEClass.getEStructuralFeatures().get(11);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTSimulation_SimulationRenderFrequency()   { 
     
     return (EReference)simulationEClass.getEStructuralFeatures().get(12);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTSimulation_SimulationType()   { 
     
     return (EReference)simulationEClass.getEStructuralFeatures().get(13);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTSimulation_Time()   { 
     
     return (EReference)simulationEClass.getEStructuralFeatures().get(14);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTSimulation_Timeout()   { 
     
     return (EReference)simulationEClass.getEStructuralFeatures().get(15);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTSimulation_Vehicles()   { 
     
     return (EReference)simulationEClass.getEStructuralFeatures().get(16);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTSimulation_Weather()   { 
     
     return (EReference)simulationEClass.getEStructuralFeatures().get(17);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTSimulationRenderFrequency_SimRenderFreq()   { 
     
     return (EReference)simulationRenderFrequencyEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTSimulationLoopFrequency_SimLoopFreq()   { 
     
     return (EReference)simulationLoopFrequencyEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTSimulationDuration_SimDuration()   { 
     
     return (EReference)simulationDurationEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTWeatherObj_ArtificialPhenomenas()   { 
     
     return (EReference)weatherObjEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTWeatherObj_Clouding()   { 
     
     return (EReference)weatherObjEClass.getEStructuralFeatures().get(1);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTWeatherObj_Humidity()   { 
     
     return (EReference)weatherObjEClass.getEStructuralFeatures().get(2);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTWeatherObj_OpticalPhenomenas()   { 
     
     return (EReference)weatherObjEClass.getEStructuralFeatures().get(3);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTWeatherObj_Precipitationamount()   { 
     
     return (EReference)weatherObjEClass.getEStructuralFeatures().get(4);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTWeatherObj_Precipitationtype()   { 
     
     return (EReference)weatherObjEClass.getEStructuralFeatures().get(5);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTWeatherObj_Pressure()   { 
     
     return (EReference)weatherObjEClass.getEStructuralFeatures().get(6);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTWeatherObj_Sight()   { 
     
     return (EReference)weatherObjEClass.getEStructuralFeatures().get(7);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTWeatherObj_Temperature()   { 
     
     return (EReference)weatherObjEClass.getEStructuralFeatures().get(8);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTWeatherObj_WeatherPhenomenas()   { 
     
     return (EReference)weatherObjEClass.getEStructuralFeatures().get(9);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTWeatherObj_Winddirection()   { 
     
     return (EReference)weatherObjEClass.getEStructuralFeatures().get(10);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTWeatherObj_Windstrength()   { 
     
     return (EReference)weatherObjEClass.getEStructuralFeatures().get(11);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTWeather_FixedWeather()   { 
     
     return (EReference)weatherEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTWeather_Forecast()   { 
     
     return (EReference)weatherEClass.getEStructuralFeatures().get(1);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTWeather_RandomWeather()   { 
     
     return (EReference)weatherEClass.getEStructuralFeatures().get(2);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTWeather_SequenceWeather()   { 
     
     return (EReference)weatherEClass.getEStructuralFeatures().get(3);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTFixedWeather_FixedWeatherObj()   { 
     
     return (EReference)fixedWeatherEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTSequenceWeather_RandomWeatherObj()   { 
     
     return (EReference)sequenceWeatherEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTSequenceWeather_SequenceDuration()   { 
     
     return (EReference)sequenceWeatherEClass.getEStructuralFeatures().get(1);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTRandomWeather_RandomDuration()   { 
     
     return (EReference)randomWeatherEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTForecast_ForecastDuration()   { 
     
     return (EReference)forecastEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTForecast_ForecastWeatherObj()   { 
     
     return (EReference)forecastEClass.getEStructuralFeatures().get(1);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTTime_TimeHours()   { 
     
     return (EAttribute)timeEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTTime_TimeMilliseconds()   { 
     
     return (EAttribute)timeEClass.getEStructuralFeatures().get(1);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTTime_TimeMinutes()   { 
     
     return (EAttribute)timeEClass.getEStructuralFeatures().get(2);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTTime_TimeSeconds()   { 
     
     return (EAttribute)timeEClass.getEStructuralFeatures().get(3);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTTime_UnitNumber()   { 
     
     return (EReference)timeEClass.getEStructuralFeatures().get(4);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTMapPath_MapPath()   { 
     
     return (EAttribute)mapPathEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTMapName_MapName()   { 
     
     return (EAttribute)mapNameEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTMapHeight_HeightMap()   { 
     
     return (EAttribute)mapHeightEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTMapOverlap_MapOverlap()   { 
     
     return (EAttribute)mapOverlapEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTMapSectorWidth_SectorWidth()   { 
     
     return (EAttribute)mapSectorWidthEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTMapSectorHeight_SectorHeight()   { 
     
     return (EAttribute)mapSectorHeightEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTMaxSectorUsers_MaxSectorUsers()   { 
     
     return (EAttribute)maxSectorUsersEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTTimeout_Timeout()   { 
     
     return (EReference)timeoutEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTPedestrians_EndX()   { 
     
     return (EReference)pedestriansEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTPedestrians_EndY()   { 
     
     return (EReference)pedestriansEClass.getEStructuralFeatures().get(1);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTPedestrians_EndZ()   { 
     
     return (EReference)pedestriansEClass.getEStructuralFeatures().get(2);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTPedestrians_StartX()   { 
     
     return (EReference)pedestriansEClass.getEStructuralFeatures().get(3);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTPedestrians_StartY()   { 
     
     return (EReference)pedestriansEClass.getEStructuralFeatures().get(4);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTPedestrianDensity_PedestrianDensity()   { 
     
     return (EReference)pedestrianDensityEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTVehicles_ExplicitVehicles()   { 
     
     return (EReference)vehiclesEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTVehicles_PathedVehicles()   { 
     
     return (EReference)vehiclesEClass.getEStructuralFeatures().get(1);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTVehicles_RandomVehicles()   { 
     
     return (EReference)vehiclesEClass.getEStructuralFeatures().get(2);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTExplicitVehicle_DestX()   { 
     
     return (EReference)explicitVehicleEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTExplicitVehicle_DestY()   { 
     
     return (EReference)explicitVehicleEClass.getEStructuralFeatures().get(1);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTExplicitVehicle_DestZ()   { 
     
     return (EReference)explicitVehicleEClass.getEStructuralFeatures().get(2);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTExplicitVehicle_StartRot()   { 
     
     return (EReference)explicitVehicleEClass.getEStructuralFeatures().get(3);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTExplicitVehicle_StartX()   { 
     
     return (EReference)explicitVehicleEClass.getEStructuralFeatures().get(4);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTExplicitVehicle_StartY()   { 
     
     return (EReference)explicitVehicleEClass.getEStructuralFeatures().get(5);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTExplicitVehicle_Vehicle()   { 
     
     return (EAttribute)explicitVehicleEClass.getEStructuralFeatures().get(6);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTPathedVehicle_Amount()   { 
     
     return (EAttribute)pathedVehicleEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTPathedVehicle_DestRadius()   { 
     
     return (EReference)pathedVehicleEClass.getEStructuralFeatures().get(1);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTPathedVehicle_DestX()   { 
     
     return (EReference)pathedVehicleEClass.getEStructuralFeatures().get(2);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTPathedVehicle_DestY()   { 
     
     return (EReference)pathedVehicleEClass.getEStructuralFeatures().get(3);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTPathedVehicle_SpawnRadius()   { 
     
     return (EReference)pathedVehicleEClass.getEStructuralFeatures().get(4);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTPathedVehicle_SpawnX()   { 
     
     return (EReference)pathedVehicleEClass.getEStructuralFeatures().get(5);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTPathedVehicle_SpawnY()   { 
     
     return (EReference)pathedVehicleEClass.getEStructuralFeatures().get(6);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EAttribute getASTRandomVehicle_Amount()   { 
     
     return (EAttribute)randomVehicleEClass.getEStructuralFeatures().get(0);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTRandomVehicle_DestX()   { 
     
     return (EReference)randomVehicleEClass.getEStructuralFeatures().get(1);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTRandomVehicle_DestY()   { 
     
     return (EReference)randomVehicleEClass.getEStructuralFeatures().get(2);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTRandomVehicle_StartX()   { 
     
     return (EReference)randomVehicleEClass.getEStructuralFeatures().get(3);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  EReference getASTRandomVehicle_StartY()   { 
     
     return (EReference)randomVehicleEClass.getEStructuralFeatures().get(4);
  } 

  /* generated by template ast.ClassMethod*/
  
   public  void createPackageContents()   { 
     
     /* generated by template ast_emf.epackagemethods.CreatePackageContents*/
  
/**
 * Creates the meta-model objects for the package.  This method is
 * guarded to have no affect on any invocation but its first.
*/
    if (isCreated) {
      return;
    }
    isCreated = true;
    
    // Create classes and their features
    constantsSimulationEEnum = createEEnum(ConstantsSimulation);
  
    simulationEClass = createEClass(ASTSimulation);
    simulationRenderFrequencyEClass = createEClass(ASTSimulationRenderFrequency);
    simulationLoopFrequencyEClass = createEClass(ASTSimulationLoopFrequency);
    simulationDurationEClass = createEClass(ASTSimulationDuration);
    simulationTypeEClass = createEClass(ASTSimulationType);
    weatherObjEClass = createEClass(ASTWeatherObj);
    weatherEClass = createEClass(ASTWeather);
    fixedWeatherEClass = createEClass(ASTFixedWeather);
    sequenceWeatherEClass = createEClass(ASTSequenceWeather);
    randomWeatherEClass = createEClass(ASTRandomWeather);
    forecastEClass = createEClass(ASTForecast);
    timeEClass = createEClass(ASTTime);
    mapPathEClass = createEClass(ASTMapPath);
    mapNameEClass = createEClass(ASTMapName);
    mapHeightEClass = createEClass(ASTMapHeight);
    mapOverlapEClass = createEClass(ASTMapOverlap);
    mapSectorWidthEClass = createEClass(ASTMapSectorWidth);
    mapSectorHeightEClass = createEClass(ASTMapSectorHeight);
    maxSectorUsersEClass = createEClass(ASTMaxSectorUsers);
    timeoutEClass = createEClass(ASTTimeout);
    pedestriansEClass = createEClass(ASTPedestrians);
    pedestrianDensityEClass = createEClass(ASTPedestrianDensity);
    vehiclesEClass = createEClass(ASTVehicles);
    explicitVehicleEClass = createEClass(ASTExplicitVehicle);
    pathedVehicleEClass = createEClass(ASTPathedVehicle);
    randomVehicleEClass = createEClass(ASTRandomVehicle);
  
    createEReference(simulationEClass, ASTSimulation_MapHeight);
    createEReference(simulationEClass, ASTSimulation_MapName);
    createEReference(simulationEClass, ASTSimulation_MapOverlap);
    createEReference(simulationEClass, ASTSimulation_MapPath);
    createEReference(simulationEClass, ASTSimulation_MapSectorHeight);
    createEReference(simulationEClass, ASTSimulation_MapSectorWidth);
    createEReference(simulationEClass, ASTSimulation_MaxSectorUsers);
    createEAttribute(simulationEClass, ASTSimulation_Name);
    createEReference(simulationEClass, ASTSimulation_PedestrianDensity);
    createEReference(simulationEClass, ASTSimulation_Pedestrians);
    createEReference(simulationEClass, ASTSimulation_SimulationDuration);
    createEReference(simulationEClass, ASTSimulation_SimulationLoopFrequency);
    createEReference(simulationEClass, ASTSimulation_SimulationRenderFrequency);
    createEReference(simulationEClass, ASTSimulation_SimulationType);
    createEReference(simulationEClass, ASTSimulation_Time);
    createEReference(simulationEClass, ASTSimulation_Timeout);
    createEReference(simulationEClass, ASTSimulation_Vehicles);
    createEReference(simulationEClass, ASTSimulation_Weather);
    createEReference(simulationRenderFrequencyEClass, ASTSimulationRenderFrequency_SimRenderFreq);
    createEReference(simulationLoopFrequencyEClass, ASTSimulationLoopFrequency_SimLoopFreq);
    createEReference(simulationDurationEClass, ASTSimulationDuration_SimDuration);
    createEReference(weatherObjEClass, ASTWeatherObj_ArtificialPhenomenas);
    createEReference(weatherObjEClass, ASTWeatherObj_Clouding);
    createEReference(weatherObjEClass, ASTWeatherObj_Humidity);
    createEReference(weatherObjEClass, ASTWeatherObj_OpticalPhenomenas);
    createEReference(weatherObjEClass, ASTWeatherObj_Precipitationamount);
    createEReference(weatherObjEClass, ASTWeatherObj_Precipitationtype);
    createEReference(weatherObjEClass, ASTWeatherObj_Pressure);
    createEReference(weatherObjEClass, ASTWeatherObj_Sight);
    createEReference(weatherObjEClass, ASTWeatherObj_Temperature);
    createEReference(weatherObjEClass, ASTWeatherObj_WeatherPhenomenas);
    createEReference(weatherObjEClass, ASTWeatherObj_Winddirection);
    createEReference(weatherObjEClass, ASTWeatherObj_Windstrength);
    createEReference(weatherEClass, ASTWeather_FixedWeather);
    createEReference(weatherEClass, ASTWeather_Forecast);
    createEReference(weatherEClass, ASTWeather_RandomWeather);
    createEReference(weatherEClass, ASTWeather_SequenceWeather);
    createEReference(fixedWeatherEClass, ASTFixedWeather_FixedWeatherObj);
    createEReference(sequenceWeatherEClass, ASTSequenceWeather_RandomWeatherObj);
    createEReference(sequenceWeatherEClass, ASTSequenceWeather_SequenceDuration);
    createEReference(randomWeatherEClass, ASTRandomWeather_RandomDuration);
    createEReference(forecastEClass, ASTForecast_ForecastDuration);
    createEReference(forecastEClass, ASTForecast_ForecastWeatherObj);
    createEAttribute(timeEClass, ASTTime_TimeHours);
    createEAttribute(timeEClass, ASTTime_TimeMilliseconds);
    createEAttribute(timeEClass, ASTTime_TimeMinutes);
    createEAttribute(timeEClass, ASTTime_TimeSeconds);
    createEReference(timeEClass, ASTTime_UnitNumber);
    createEAttribute(mapPathEClass, ASTMapPath_MapPath);
    createEAttribute(mapNameEClass, ASTMapName_MapName);
    createEAttribute(mapHeightEClass, ASTMapHeight_HeightMap);
    createEAttribute(mapOverlapEClass, ASTMapOverlap_MapOverlap);
    createEAttribute(mapSectorWidthEClass, ASTMapSectorWidth_SectorWidth);
    createEAttribute(mapSectorHeightEClass, ASTMapSectorHeight_SectorHeight);
    createEAttribute(maxSectorUsersEClass, ASTMaxSectorUsers_MaxSectorUsers);
    createEReference(timeoutEClass, ASTTimeout_Timeout);
    createEReference(pedestriansEClass, ASTPedestrians_EndX);
    createEReference(pedestriansEClass, ASTPedestrians_EndY);
    createEReference(pedestriansEClass, ASTPedestrians_EndZ);
    createEReference(pedestriansEClass, ASTPedestrians_StartX);
    createEReference(pedestriansEClass, ASTPedestrians_StartY);
    createEReference(pedestrianDensityEClass, ASTPedestrianDensity_PedestrianDensity);
    createEReference(vehiclesEClass, ASTVehicles_ExplicitVehicles);
    createEReference(vehiclesEClass, ASTVehicles_PathedVehicles);
    createEReference(vehiclesEClass, ASTVehicles_RandomVehicles);
    createEReference(explicitVehicleEClass, ASTExplicitVehicle_DestX);
    createEReference(explicitVehicleEClass, ASTExplicitVehicle_DestY);
    createEReference(explicitVehicleEClass, ASTExplicitVehicle_DestZ);
    createEReference(explicitVehicleEClass, ASTExplicitVehicle_StartRot);
    createEReference(explicitVehicleEClass, ASTExplicitVehicle_StartX);
    createEReference(explicitVehicleEClass, ASTExplicitVehicle_StartY);
    createEAttribute(explicitVehicleEClass, ASTExplicitVehicle_Vehicle);
    createEAttribute(pathedVehicleEClass, ASTPathedVehicle_Amount);
    createEReference(pathedVehicleEClass, ASTPathedVehicle_DestRadius);
    createEReference(pathedVehicleEClass, ASTPathedVehicle_DestX);
    createEReference(pathedVehicleEClass, ASTPathedVehicle_DestY);
    createEReference(pathedVehicleEClass, ASTPathedVehicle_SpawnRadius);
    createEReference(pathedVehicleEClass, ASTPathedVehicle_SpawnX);
    createEReference(pathedVehicleEClass, ASTPathedVehicle_SpawnY);
    createEAttribute(randomVehicleEClass, ASTRandomVehicle_Amount);
    createEReference(randomVehicleEClass, ASTRandomVehicle_DestX);
    createEReference(randomVehicleEClass, ASTRandomVehicle_DestY);
    createEReference(randomVehicleEClass, ASTRandomVehicle_StartX);
    createEReference(randomVehicleEClass, ASTRandomVehicle_StartY);
  
   
  } 

  /* generated by template ast.ClassMethod*/
  
   public  void initializePackageContents()   { 
     
     /* generated by template ast_emf.epackagemethods.InitializePackageContents*/
  
/**
 * Complete the initialization of the package and its meta-model.  This
 * method is guarded to have no affect on any invocation but its first.
*/
    if (isInitialized) {
      return;
    }
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);
    
       
    EOperation op;
     // Obtain other dependent packages
    ASTENodePackage theASTENodePackage = (ASTENodePackage)EPackage.Registry.INSTANCE.getEPackage(ASTENodePackage.eNS_URI);      
    weather._ast.WeatherPackage theWeather_Package = 
      (weather._ast.WeatherPackage)EPackage.Registry.INSTANCE.getEPackage(
      weather._ast.WeatherPackage.eNS_URI); 
    si._ast.SIPackage theSi_Package = 
      (si._ast.SIPackage)EPackage.Registry.INSTANCE.getEPackage(
      si._ast.SIPackage.eNS_URI); 
  
    simulationEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    simulationRenderFrequencyEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    simulationLoopFrequencyEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    simulationDurationEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    simulationTypeEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    weatherObjEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    weatherEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    fixedWeatherEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    sequenceWeatherEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    randomWeatherEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    forecastEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    timeEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    mapPathEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    mapNameEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    mapHeightEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    mapOverlapEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    mapSectorWidthEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    mapSectorHeightEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    maxSectorUsersEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    timeoutEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    pedestriansEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    pedestrianDensityEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    vehiclesEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    explicitVehicleEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    pathedVehicleEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
    randomVehicleEClass.getESuperTypes().add(theASTENodePackage.getENode()); 
  
    // Initialize classes and features; add operations and parameters
  
    // Initialize enums and add enum literals
    initEEnum(constantsSimulationEEnum, SimulationLiterals.class, "SimulationLiterals");
    
    initEClass(simulationEClass, ASTSimulation.class, "ASTSimulation", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(simulationRenderFrequencyEClass, ASTSimulationRenderFrequency.class, "ASTSimulationRenderFrequency", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(simulationLoopFrequencyEClass, ASTSimulationLoopFrequency.class, "ASTSimulationLoopFrequency", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(simulationDurationEClass, ASTSimulationDuration.class, "ASTSimulationDuration", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(simulationTypeEClass, ASTSimulationType.class, "ASTSimulationType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(weatherObjEClass, ASTWeatherObj.class, "ASTWeatherObj", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(weatherEClass, ASTWeather.class, "ASTWeather", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(fixedWeatherEClass, ASTFixedWeather.class, "ASTFixedWeather", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(sequenceWeatherEClass, ASTSequenceWeather.class, "ASTSequenceWeather", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(randomWeatherEClass, ASTRandomWeather.class, "ASTRandomWeather", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(forecastEClass, ASTForecast.class, "ASTForecast", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(timeEClass, ASTTime.class, "ASTTime", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(mapPathEClass, ASTMapPath.class, "ASTMapPath", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(mapNameEClass, ASTMapName.class, "ASTMapName", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(mapHeightEClass, ASTMapHeight.class, "ASTMapHeight", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(mapOverlapEClass, ASTMapOverlap.class, "ASTMapOverlap", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(mapSectorWidthEClass, ASTMapSectorWidth.class, "ASTMapSectorWidth", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(mapSectorHeightEClass, ASTMapSectorHeight.class, "ASTMapSectorHeight", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(maxSectorUsersEClass, ASTMaxSectorUsers.class, "ASTMaxSectorUsers", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(timeoutEClass, ASTTimeout.class, "ASTTimeout", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(pedestriansEClass, ASTPedestrians.class, "ASTPedestrians", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(pedestrianDensityEClass, ASTPedestrianDensity.class, "ASTPedestrianDensity", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(vehiclesEClass, ASTVehicles.class, "ASTVehicles", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(explicitVehicleEClass, ASTExplicitVehicle.class, "ASTExplicitVehicle", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(pathedVehicleEClass, ASTPathedVehicle.class, "ASTPathedVehicle", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEClass(randomVehicleEClass, ASTRandomVehicle.class, "ASTRandomVehicle", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getASTSimulation_MapHeight(), this.getMapHeight(), null, "MapHeight", null,
      0, 1, ASTSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTSimulation_MapName(), this.getMapName(), null, "MapName", null,
      0, 1, ASTSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTSimulation_MapOverlap(), this.getMapOverlap(), null, "MapOverlap", null,
      0, 1, ASTSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTSimulation_MapPath(), this.getMapPath(), null, "MapPath", null,
      0, 1, ASTSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTSimulation_MapSectorHeight(), this.getMapSectorHeight(), null, "MapSectorHeight", null,
      0, 1, ASTSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTSimulation_MapSectorWidth(), this.getMapSectorWidth(), null, "MapSectorWidth", null,
      0, 1, ASTSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTSimulation_MaxSectorUsers(), this.getMaxSectorUsers(), null, "MaxSectorUsers", null,
      0, 1, ASTSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTSimulation_Name(), ecorePackage.getEString(), "Name", null, 
      0, 1, ASTSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTSimulation_PedestrianDensity(), this.getPedestrianDensity(), null, "PedestrianDensity", null,
      0, 1, ASTSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTSimulation_Pedestrians(), this.getPedestrians(), null, "Pedestrians", null,
      0, 1, ASTSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTSimulation_SimulationDuration(), this.getSimulationDuration(), null, "SimulationDuration", null,
      0, 1, ASTSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTSimulation_SimulationLoopFrequency(), this.getSimulationLoopFrequency(), null, "SimulationLoopFrequency", null,
      0, 1, ASTSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTSimulation_SimulationRenderFrequency(), this.getSimulationRenderFrequency(), null, "SimulationRenderFrequency", null,
      0, 1, ASTSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTSimulation_SimulationType(), this.getSimulationType(), null, "SimulationType", null,
      0, 1, ASTSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTSimulation_Time(), this.getTime(), null, "Time", null,
      0, 1, ASTSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTSimulation_Timeout(), this.getTimeout(), null, "Timeout", null,
      0, 1, ASTSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTSimulation_Vehicles(), this.getVehicles(), null, "Vehicles", null,
      0, 1, ASTSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTSimulation_Weather(), this.getWeather(), null, "Weather", null,
      0, 1, ASTSimulation.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTSimulationRenderFrequency_SimRenderFreq(), theSi_Package.getUnitNumber(), null, "SimRenderFreq", null,
      0, 1, ASTSimulationRenderFrequency.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTSimulationLoopFrequency_SimLoopFreq(), theSi_Package.getUnitNumber(), null, "SimLoopFreq", null,
      0, 1, ASTSimulationLoopFrequency.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTSimulationDuration_SimDuration(), theSi_Package.getUnitNumber(), null, "SimDuration", null,
      0, 1, ASTSimulationDuration.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTWeatherObj_ArtificialPhenomenas(), theWeather_Package.getArtificialPhenomena(), null, "ArtificialPhenomenas", null,
      0, -1, ASTWeatherObj.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTWeatherObj_Clouding(), theWeather_Package.getClouding(), null, "Clouding", null,
      0, 1, ASTWeatherObj.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTWeatherObj_Humidity(), theWeather_Package.getHumidity(), null, "Humidity", null,
      0, 1, ASTWeatherObj.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTWeatherObj_OpticalPhenomenas(), theWeather_Package.getOpticalPhenomena(), null, "OpticalPhenomenas", null,
      0, -1, ASTWeatherObj.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTWeatherObj_Precipitationamount(), theWeather_Package.getPrecipitationamount(), null, "Precipitationamount", null,
      0, 1, ASTWeatherObj.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTWeatherObj_Precipitationtype(), theWeather_Package.getPrecipitationtype(), null, "Precipitationtype", null,
      0, 1, ASTWeatherObj.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTWeatherObj_Pressure(), theWeather_Package.getPressure(), null, "Pressure", null,
      0, 1, ASTWeatherObj.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTWeatherObj_Sight(), theWeather_Package.getSight(), null, "Sight", null,
      0, 1, ASTWeatherObj.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTWeatherObj_Temperature(), theWeather_Package.getTemperature(), null, "Temperature", null,
      0, 1, ASTWeatherObj.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTWeatherObj_WeatherPhenomenas(), theWeather_Package.getWeatherPhenomena(), null, "WeatherPhenomenas", null,
      0, -1, ASTWeatherObj.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTWeatherObj_Winddirection(), theWeather_Package.getWinddirection(), null, "Winddirection", null,
      0, 1, ASTWeatherObj.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTWeatherObj_Windstrength(), theWeather_Package.getWindstrength(), null, "Windstrength", null,
      0, 1, ASTWeatherObj.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTWeather_FixedWeather(), this.getFixedWeather(), null, "FixedWeather", null,
      0, 1, ASTWeather.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTWeather_Forecast(), this.getForecast(), null, "Forecast", null,
      0, 1, ASTWeather.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTWeather_RandomWeather(), this.getRandomWeather(), null, "RandomWeather", null,
      0, 1, ASTWeather.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTWeather_SequenceWeather(), this.getSequenceWeather(), null, "SequenceWeather", null,
      0, 1, ASTWeather.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTFixedWeather_FixedWeatherObj(), this.getWeatherObj(), null, "FixedWeatherObj", null,
      0, 1, ASTFixedWeather.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTSequenceWeather_RandomWeatherObj(), this.getWeatherObj(), null, "RandomWeatherObj", null,
      0, -1, ASTSequenceWeather.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTSequenceWeather_SequenceDuration(), theSi_Package.getUnitNumber(), null, "SequenceDuration", null,
      0, 1, ASTSequenceWeather.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTRandomWeather_RandomDuration(), theSi_Package.getUnitNumber(), null, "RandomDuration", null,
      0, 1, ASTRandomWeather.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTForecast_ForecastDuration(), theSi_Package.getUnitNumber(), null, "ForecastDuration", null,
      0, 1, ASTForecast.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTForecast_ForecastWeatherObj(), this.getWeatherObj(), null, "ForecastWeatherObj", null,
      0, 1, ASTForecast.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTTime_TimeHours(), ecorePackage.getEString(), "TimeHours", null, 
      0, 1, ASTTime.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTTime_TimeMilliseconds(), ecorePackage.getEString(), "TimeMilliseconds", null, 
      0, 1, ASTTime.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTTime_TimeMinutes(), ecorePackage.getEString(), "TimeMinutes", null, 
      0, 1, ASTTime.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTTime_TimeSeconds(), ecorePackage.getEString(), "TimeSeconds", null, 
      0, 1, ASTTime.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTTime_UnitNumber(), theSi_Package.getUnitNumber(), null, "UnitNumber", null,
      0, 1, ASTTime.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTMapPath_MapPath(), ecorePackage.getEString(), "MapPath", null, 
      0, 1, ASTMapPath.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTMapName_MapName(), ecorePackage.getEString(), "MapName", null, 
      0, 1, ASTMapName.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTMapHeight_HeightMap(), ecorePackage.getEString(), "HeightMap", null, 
      0, 1, ASTMapHeight.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTMapOverlap_MapOverlap(), ecorePackage.getEString(), "MapOverlap", null, 
      0, 1, ASTMapOverlap.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTMapSectorWidth_SectorWidth(), ecorePackage.getEString(), "SectorWidth", null, 
      0, 1, ASTMapSectorWidth.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTMapSectorHeight_SectorHeight(), ecorePackage.getEString(), "SectorHeight", null, 
      0, 1, ASTMapSectorHeight.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTMaxSectorUsers_MaxSectorUsers(), ecorePackage.getEString(), "MaxSectorUsers", null, 
      0, 1, ASTMaxSectorUsers.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTTimeout_Timeout(), theSi_Package.getUnitNumber(), null, "Timeout", null,
      0, 1, ASTTimeout.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTPedestrians_EndX(), theSi_Package.getUnitNumber(), null, "EndX", null,
      0, -1, ASTPedestrians.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTPedestrians_EndY(), theSi_Package.getUnitNumber(), null, "EndY", null,
      0, -1, ASTPedestrians.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTPedestrians_EndZ(), theSi_Package.getUnitNumber(), null, "EndZ", null,
      0, -1, ASTPedestrians.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTPedestrians_StartX(), theSi_Package.getUnitNumber(), null, "StartX", null,
      0, -1, ASTPedestrians.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTPedestrians_StartY(), theSi_Package.getUnitNumber(), null, "StartY", null,
      0, -1, ASTPedestrians.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTPedestrianDensity_PedestrianDensity(), theSi_Package.getUnitNumber(), null, "PedestrianDensity", null,
      0, 1, ASTPedestrianDensity.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTVehicles_ExplicitVehicles(), this.getExplicitVehicle(), null, "ExplicitVehicles", null,
      0, -1, ASTVehicles.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTVehicles_PathedVehicles(), this.getPathedVehicle(), null, "PathedVehicles", null,
      0, -1, ASTVehicles.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTVehicles_RandomVehicles(), this.getRandomVehicle(), null, "RandomVehicles", null,
      0, -1, ASTVehicles.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTExplicitVehicle_DestX(), theSi_Package.getUnitNumber(), null, "DestX", null,
      0, 1, ASTExplicitVehicle.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTExplicitVehicle_DestY(), theSi_Package.getUnitNumber(), null, "DestY", null,
      0, 1, ASTExplicitVehicle.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTExplicitVehicle_DestZ(), theSi_Package.getUnitNumber(), null, "DestZ", null,
      0, 1, ASTExplicitVehicle.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTExplicitVehicle_StartRot(), theSi_Package.getUnitNumber(), null, "StartRot", null,
      0, 1, ASTExplicitVehicle.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTExplicitVehicle_StartX(), theSi_Package.getUnitNumber(), null, "StartX", null,
      0, 1, ASTExplicitVehicle.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTExplicitVehicle_StartY(), theSi_Package.getUnitNumber(), null, "StartY", null,
      0, 1, ASTExplicitVehicle.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTExplicitVehicle_Vehicle(), ecorePackage.getEString(), "Vehicle", null, 
      0, 1, ASTExplicitVehicle.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTPathedVehicle_Amount(), ecorePackage.getEString(), "Amount", null, 
      0, 1, ASTPathedVehicle.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTPathedVehicle_DestRadius(), theSi_Package.getUnitNumber(), null, "DestRadius", null,
      0, 1, ASTPathedVehicle.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTPathedVehicle_DestX(), theSi_Package.getUnitNumber(), null, "DestX", null,
      0, 1, ASTPathedVehicle.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTPathedVehicle_DestY(), theSi_Package.getUnitNumber(), null, "DestY", null,
      0, 1, ASTPathedVehicle.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTPathedVehicle_SpawnRadius(), theSi_Package.getUnitNumber(), null, "SpawnRadius", null,
      0, 1, ASTPathedVehicle.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTPathedVehicle_SpawnX(), theSi_Package.getUnitNumber(), null, "SpawnX", null,
      0, 1, ASTPathedVehicle.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTPathedVehicle_SpawnY(), theSi_Package.getUnitNumber(), null, "SpawnY", null,
      0, 1, ASTPathedVehicle.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getASTRandomVehicle_Amount(), ecorePackage.getEString(), "Amount", null, 
      0, 1, ASTRandomVehicle.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTRandomVehicle_DestX(), theSi_Package.getUnitNumber(), null, "DestX", null,
      0, 1, ASTRandomVehicle.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTRandomVehicle_DestY(), theSi_Package.getUnitNumber(), null, "DestY", null,
      0, 1, ASTRandomVehicle.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTRandomVehicle_StartX(), theSi_Package.getUnitNumber(), null, "StartX", null,
      0, 1, ASTRandomVehicle.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getASTRandomVehicle_StartY(), theSi_Package.getUnitNumber(), null, "StartY", null,
      0, 1, ASTRandomVehicle.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
  
   
  
    // Create resource
    createResource(eNS_URI);
    

  } 

   
}
