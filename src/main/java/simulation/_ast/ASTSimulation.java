/* generated from model Simulation*/
/* generated by template ast.AstClass*/

package simulation._ast;

/* generated by template ast_emf.AstEImports*/
import java.util.Optional;
import java.util.Iterator;
import de.se_rwth.commons.logging.Log;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;

 public  class ASTSimulation extends /* generated by template ast.AstSuperTypes*/
de.monticore.emf._ast.ASTECNode implements  ASTSimulationNode
 {
  /* generated by template ast.Attribute*/
  
   protected  String name;

  /* generated by template ast.Attribute*/
  
   protected  Optional<simulation._ast.ASTSimulationRenderFrequency> simulationRenderFrequency = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<simulation._ast.ASTSimulationLoopFrequency> simulationLoopFrequency = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<simulation._ast.ASTSimulationDuration> simulationDuration = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<simulation._ast.ASTSimulationType> simulationType = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<simulation._ast.ASTWeather> weather = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<simulation._ast.ASTTime> time = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<simulation._ast.ASTMapPath> mapPath = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  simulation._ast.ASTMapName mapName;

  /* generated by template ast.Attribute*/
  
   protected  Optional<simulation._ast.ASTMapHeight> mapHeight = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<simulation._ast.ASTMapOverlap> mapOverlap = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<simulation._ast.ASTMapSectorWidth> mapSectorWidth = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<simulation._ast.ASTMapSectorHeight> mapSectorHeight = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<simulation._ast.ASTMaxSectorUsers> maxSectorUsers = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<simulation._ast.ASTTimeout> timeout = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<simulation._ast.ASTPedestrians> pedestrians = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<simulation._ast.ASTPedestrianDensity> pedestrianDensity = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<simulation._ast.ASTVehicles> vehicles = Optional.empty();

    /* generated by template ast.Constructor*/
  
   protected  ASTSimulation (/* generated by template ast.ParametersDeclaration*/
    // Parameters declaration
 
    )  
  /* generated by template ast.EmptyMethodBody*/

  { // empty body 
  }


    /* generated by template ast.Constructor*/
  
   protected  ASTSimulation (/* generated by template ast.ConstructorParametersDeclaration*/
     String name 
    ,
     simulation._ast.ASTSimulationRenderFrequency simulationRenderFrequency 
    ,
     simulation._ast.ASTSimulationLoopFrequency simulationLoopFrequency 
    ,
     simulation._ast.ASTSimulationDuration simulationDuration 
    ,
     simulation._ast.ASTSimulationType simulationType 
    ,
     simulation._ast.ASTWeather weather 
    ,
     simulation._ast.ASTTime time 
    ,
     simulation._ast.ASTMapPath mapPath 
    ,
     simulation._ast.ASTMapName mapName 
    ,
     simulation._ast.ASTMapHeight mapHeight 
    ,
     simulation._ast.ASTMapOverlap mapOverlap 
    ,
     simulation._ast.ASTMapSectorWidth mapSectorWidth 
    ,
     simulation._ast.ASTMapSectorHeight mapSectorHeight 
    ,
     simulation._ast.ASTMaxSectorUsers maxSectorUsers 
    ,
     simulation._ast.ASTTimeout timeout 
    ,
     simulation._ast.ASTPedestrians pedestrians 
    ,
     simulation._ast.ASTPedestrianDensity pedestrianDensity 
    ,
     simulation._ast.ASTVehicles vehicles 
 
    )  
  /* generated by template ast.ConstructorAttributesSetter*/
  {
    setName(name);
    setSimulationRenderFrequency(simulationRenderFrequency);
    setSimulationLoopFrequency(simulationLoopFrequency);
    setSimulationDuration(simulationDuration);
    setSimulationType(simulationType);
    setWeather(weather);
    setTime(time);
    setMapPath(mapPath);
    setMapName(mapName);
    setMapHeight(mapHeight);
    setMapOverlap(mapOverlap);
    setMapSectorWidth(mapSectorWidth);
    setMapSectorHeight(mapSectorHeight);
    setMaxSectorUsers(maxSectorUsers);
    setTimeout(timeout);
    setPedestrians(pedestrians);
    setPedestrianDensity(pedestrianDensity);
    setVehicles(vehicles);
  }


  
    /* generated by template ast.ClassMethod*/
  
   public  void accept(simulation._visitor.SimulationVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_954 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.Accept*/

      visitor.handle(this);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void accept(weather._visitor.WeatherVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_320 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.AcceptSuper*/

    if (visitor instanceof simulation._visitor.SimulationVisitor) {
      accept((simulation._visitor.SimulationVisitor) visitor);      
    } else {
      de.se_rwth.commons.logging.Log.error("0xA7000_226AST node type ASTSimulation of the sub language Simulation expected a visitor of type simulation._visitor.SimulationVisitor, but got weather._visitor.WeatherVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
    }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void accept(si._visitor.SIVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_401 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.AcceptSuper*/

    if (visitor instanceof simulation._visitor.SimulationVisitor) {
      accept((simulation._visitor.SimulationVisitor) visitor);      
    } else {
      de.se_rwth.commons.logging.Log.error("0xA7000_495AST node type ASTSimulation of the sub language Simulation expected a visitor of type simulation._visitor.SimulationVisitor, but got si._visitor.SIVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
    }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEquals(Object o,boolean forceSameOrder)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_982 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.DeepEqualsWithOrder*/

      ASTSimulation comp;
    if ((o instanceof ASTSimulation)) {
      comp = (ASTSimulation) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing simulationRenderFrequency   
    if ( this.simulationRenderFrequency.isPresent() != comp.simulationRenderFrequency.isPresent() ||
      (this.simulationRenderFrequency.isPresent() && !this.simulationRenderFrequency.get().deepEquals(comp.simulationRenderFrequency.get())) ) {
      return false;
    }
    // comparing simulationLoopFrequency   
    if ( this.simulationLoopFrequency.isPresent() != comp.simulationLoopFrequency.isPresent() ||
      (this.simulationLoopFrequency.isPresent() && !this.simulationLoopFrequency.get().deepEquals(comp.simulationLoopFrequency.get())) ) {
      return false;
    }
    // comparing simulationDuration   
    if ( this.simulationDuration.isPresent() != comp.simulationDuration.isPresent() ||
      (this.simulationDuration.isPresent() && !this.simulationDuration.get().deepEquals(comp.simulationDuration.get())) ) {
      return false;
    }
    // comparing simulationType   
    if ( this.simulationType.isPresent() != comp.simulationType.isPresent() ||
      (this.simulationType.isPresent() && !this.simulationType.get().deepEquals(comp.simulationType.get())) ) {
      return false;
    }
    // comparing weather   
    if ( this.weather.isPresent() != comp.weather.isPresent() ||
      (this.weather.isPresent() && !this.weather.get().deepEquals(comp.weather.get())) ) {
      return false;
    }
    // comparing time   
    if ( this.time.isPresent() != comp.time.isPresent() ||
      (this.time.isPresent() && !this.time.get().deepEquals(comp.time.get())) ) {
      return false;
    }
    // comparing mapPath   
    if ( this.mapPath.isPresent() != comp.mapPath.isPresent() ||
      (this.mapPath.isPresent() && !this.mapPath.get().deepEquals(comp.mapPath.get())) ) {
      return false;
    }
    // comparing mapName
    if ( (this.mapName == null && comp.mapName != null) || 
      (this.mapName != null && !this.mapName.deepEquals(comp.mapName)) ) {
      return false;
    }
    // comparing mapHeight   
    if ( this.mapHeight.isPresent() != comp.mapHeight.isPresent() ||
      (this.mapHeight.isPresent() && !this.mapHeight.get().deepEquals(comp.mapHeight.get())) ) {
      return false;
    }
    // comparing mapOverlap   
    if ( this.mapOverlap.isPresent() != comp.mapOverlap.isPresent() ||
      (this.mapOverlap.isPresent() && !this.mapOverlap.get().deepEquals(comp.mapOverlap.get())) ) {
      return false;
    }
    // comparing mapSectorWidth   
    if ( this.mapSectorWidth.isPresent() != comp.mapSectorWidth.isPresent() ||
      (this.mapSectorWidth.isPresent() && !this.mapSectorWidth.get().deepEquals(comp.mapSectorWidth.get())) ) {
      return false;
    }
    // comparing mapSectorHeight   
    if ( this.mapSectorHeight.isPresent() != comp.mapSectorHeight.isPresent() ||
      (this.mapSectorHeight.isPresent() && !this.mapSectorHeight.get().deepEquals(comp.mapSectorHeight.get())) ) {
      return false;
    }
    // comparing maxSectorUsers   
    if ( this.maxSectorUsers.isPresent() != comp.maxSectorUsers.isPresent() ||
      (this.maxSectorUsers.isPresent() && !this.maxSectorUsers.get().deepEquals(comp.maxSectorUsers.get())) ) {
      return false;
    }
    // comparing timeout   
    if ( this.timeout.isPresent() != comp.timeout.isPresent() ||
      (this.timeout.isPresent() && !this.timeout.get().deepEquals(comp.timeout.get())) ) {
      return false;
    }
    // comparing pedestrians   
    if ( this.pedestrians.isPresent() != comp.pedestrians.isPresent() ||
      (this.pedestrians.isPresent() && !this.pedestrians.get().deepEquals(comp.pedestrians.get())) ) {
      return false;
    }
    // comparing pedestrianDensity   
    if ( this.pedestrianDensity.isPresent() != comp.pedestrianDensity.isPresent() ||
      (this.pedestrianDensity.isPresent() && !this.pedestrianDensity.get().deepEquals(comp.pedestrianDensity.get())) ) {
      return false;
    }
    // comparing vehicles   
    if ( this.vehicles.isPresent() != comp.vehicles.isPresent() ||
      (this.vehicles.isPresent() && !this.vehicles.get().deepEquals(comp.vehicles.get())) ) {
      return false;
    }
    return true;     


  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEquals(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_085 Parameter 'o' must not be null.");

     return deepEquals(o, true);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEqualsWithComments(Object o,boolean forceSameOrder)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_545 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.DeepEqualsWithComments*/

      ASTSimulation comp;
    if ((o instanceof ASTSimulation)) {
      comp = (ASTSimulation) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    // comparing simulationRenderFrequency
    if ( this.simulationRenderFrequency.isPresent() != comp.simulationRenderFrequency.isPresent() ||
      (this.simulationRenderFrequency.isPresent() && !this.simulationRenderFrequency.get().deepEqualsWithComments(comp.simulationRenderFrequency.get())) ) {
      return false;
    }
    // comparing simulationLoopFrequency
    if ( this.simulationLoopFrequency.isPresent() != comp.simulationLoopFrequency.isPresent() ||
      (this.simulationLoopFrequency.isPresent() && !this.simulationLoopFrequency.get().deepEqualsWithComments(comp.simulationLoopFrequency.get())) ) {
      return false;
    }
    // comparing simulationDuration
    if ( this.simulationDuration.isPresent() != comp.simulationDuration.isPresent() ||
      (this.simulationDuration.isPresent() && !this.simulationDuration.get().deepEqualsWithComments(comp.simulationDuration.get())) ) {
      return false;
    }
    // comparing simulationType
    if ( this.simulationType.isPresent() != comp.simulationType.isPresent() ||
      (this.simulationType.isPresent() && !this.simulationType.get().deepEqualsWithComments(comp.simulationType.get())) ) {
      return false;
    }
    // comparing weather
    if ( this.weather.isPresent() != comp.weather.isPresent() ||
      (this.weather.isPresent() && !this.weather.get().deepEqualsWithComments(comp.weather.get())) ) {
      return false;
    }
    // comparing time
    if ( this.time.isPresent() != comp.time.isPresent() ||
      (this.time.isPresent() && !this.time.get().deepEqualsWithComments(comp.time.get())) ) {
      return false;
    }
    // comparing mapPath
    if ( this.mapPath.isPresent() != comp.mapPath.isPresent() ||
      (this.mapPath.isPresent() && !this.mapPath.get().deepEqualsWithComments(comp.mapPath.get())) ) {
      return false;
    }
    // comparing mapName
    if ( (this.mapName == null && comp.mapName != null) || 
      (this.mapName != null && !this.mapName.deepEqualsWithComments(comp.mapName)) ) {
      return false;
    }
    // comparing mapHeight
    if ( this.mapHeight.isPresent() != comp.mapHeight.isPresent() ||
      (this.mapHeight.isPresent() && !this.mapHeight.get().deepEqualsWithComments(comp.mapHeight.get())) ) {
      return false;
    }
    // comparing mapOverlap
    if ( this.mapOverlap.isPresent() != comp.mapOverlap.isPresent() ||
      (this.mapOverlap.isPresent() && !this.mapOverlap.get().deepEqualsWithComments(comp.mapOverlap.get())) ) {
      return false;
    }
    // comparing mapSectorWidth
    if ( this.mapSectorWidth.isPresent() != comp.mapSectorWidth.isPresent() ||
      (this.mapSectorWidth.isPresent() && !this.mapSectorWidth.get().deepEqualsWithComments(comp.mapSectorWidth.get())) ) {
      return false;
    }
    // comparing mapSectorHeight
    if ( this.mapSectorHeight.isPresent() != comp.mapSectorHeight.isPresent() ||
      (this.mapSectorHeight.isPresent() && !this.mapSectorHeight.get().deepEqualsWithComments(comp.mapSectorHeight.get())) ) {
      return false;
    }
    // comparing maxSectorUsers
    if ( this.maxSectorUsers.isPresent() != comp.maxSectorUsers.isPresent() ||
      (this.maxSectorUsers.isPresent() && !this.maxSectorUsers.get().deepEqualsWithComments(comp.maxSectorUsers.get())) ) {
      return false;
    }
    // comparing timeout
    if ( this.timeout.isPresent() != comp.timeout.isPresent() ||
      (this.timeout.isPresent() && !this.timeout.get().deepEqualsWithComments(comp.timeout.get())) ) {
      return false;
    }
    // comparing pedestrians
    if ( this.pedestrians.isPresent() != comp.pedestrians.isPresent() ||
      (this.pedestrians.isPresent() && !this.pedestrians.get().deepEqualsWithComments(comp.pedestrians.get())) ) {
      return false;
    }
    // comparing pedestrianDensity
    if ( this.pedestrianDensity.isPresent() != comp.pedestrianDensity.isPresent() ||
      (this.pedestrianDensity.isPresent() && !this.pedestrianDensity.get().deepEqualsWithComments(comp.pedestrianDensity.get())) ) {
      return false;
    }
    // comparing vehicles
    if ( this.vehicles.isPresent() != comp.vehicles.isPresent() ||
      (this.vehicles.isPresent() && !this.vehicles.get().deepEqualsWithComments(comp.vehicles.get())) ) {
      return false;
    }
    return true;     

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEqualsWithComments(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_438 Parameter 'o' must not be null.");

     return deepEqualsWithComments(o, true);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean equalAttributes(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_043 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.EqualAttributes*/

      ASTSimulation comp;
    if ((o instanceof ASTSimulation)) {
      comp = (ASTSimulation) o;
    } else {
      return false;
    }
	// comparing name 
    if ( (this.name == null && comp.name != null) 
      || (this.name != null && !this.name.equals(comp.name)) ) {
      return false;
    }
    return true;     


  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean equalsWithComments(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_404 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.EqualsWithComments*/

      ASTSimulation comp;
    if ((o instanceof ASTSimulation)) {
      comp = (ASTSimulation) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreComments().size() == comp.get_PreComments().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreComments().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreComments().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostComments().size() == comp.get_PostComments().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostComments().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostComments().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  java.util.Collection<de.monticore.ast.ASTNode> get_Children()   { 
     
     /* generated by template ast.additionalmethods.GetChildren*/

    java.util.LinkedList<de.monticore.ast.ASTNode> result = new java.util.LinkedList<de.monticore.ast.ASTNode>();
        if (getSimulationRenderFrequency().isPresent()) {
          result.add(getSimulationRenderFrequency().get());
        }
        if (getSimulationLoopFrequency().isPresent()) {
          result.add(getSimulationLoopFrequency().get());
        }
        if (getSimulationDuration().isPresent()) {
          result.add(getSimulationDuration().get());
        }
        if (getSimulationType().isPresent()) {
          result.add(getSimulationType().get());
        }
        if (getWeather().isPresent()) {
          result.add(getWeather().get());
        }
        if (getTime().isPresent()) {
          result.add(getTime().get());
        }
        if (getMapPath().isPresent()) {
          result.add(getMapPath().get());
        }
        if ( getMapName() != null ) {
          result.add(getMapName());
        }
        if (getMapHeight().isPresent()) {
          result.add(getMapHeight().get());
        }
        if (getMapOverlap().isPresent()) {
          result.add(getMapOverlap().get());
        }
        if (getMapSectorWidth().isPresent()) {
          result.add(getMapSectorWidth().get());
        }
        if (getMapSectorHeight().isPresent()) {
          result.add(getMapSectorHeight().get());
        }
        if (getMaxSectorUsers().isPresent()) {
          result.add(getMaxSectorUsers().get());
        }
        if (getTimeout().isPresent()) {
          result.add(getTimeout().get());
        }
        if (getPedestrians().isPresent()) {
          result.add(getPedestrians().get());
        }
        if (getPedestrianDensity().isPresent()) {
          result.add(getPedestrianDensity().get());
        }
        if (getVehicles().isPresent()) {
          result.add(getVehicles().get());
        }
    return result;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void remove_Child(de.monticore.ast.ASTNode child)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(child, "0xA7006_275 Parameter 'child' must not be null.");

     /* generated by template ast.additionalmethods.RemoveChild*/

      if (getSimulationRenderFrequency().isPresent() && getSimulationRenderFrequency().get() == child) {
        setSimulationRenderFrequency(null);
      }
      if (getSimulationLoopFrequency().isPresent() && getSimulationLoopFrequency().get() == child) {
        setSimulationLoopFrequency(null);
      }
      if (getSimulationDuration().isPresent() && getSimulationDuration().get() == child) {
        setSimulationDuration(null);
      }
      if (getSimulationType().isPresent() && getSimulationType().get() == child) {
        setSimulationType(null);
      }
      if (getWeather().isPresent() && getWeather().get() == child) {
        setWeather(null);
      }
      if (getTime().isPresent() && getTime().get() == child) {
        setTime(null);
      }
      if (getMapPath().isPresent() && getMapPath().get() == child) {
        setMapPath(null);
      }
      if (getMapName() == child) {
        setMapName(null);
      }
      if (getMapHeight().isPresent() && getMapHeight().get() == child) {
        setMapHeight(null);
      }
      if (getMapOverlap().isPresent() && getMapOverlap().get() == child) {
        setMapOverlap(null);
      }
      if (getMapSectorWidth().isPresent() && getMapSectorWidth().get() == child) {
        setMapSectorWidth(null);
      }
      if (getMapSectorHeight().isPresent() && getMapSectorHeight().get() == child) {
        setMapSectorHeight(null);
      }
      if (getMaxSectorUsers().isPresent() && getMaxSectorUsers().get() == child) {
        setMaxSectorUsers(null);
      }
      if (getTimeout().isPresent() && getTimeout().get() == child) {
        setTimeout(null);
      }
      if (getPedestrians().isPresent() && getPedestrians().get() == child) {
        setPedestrians(null);
      }
      if (getPedestrianDensity().isPresent() && getPedestrianDensity().get() == child) {
        setPedestrianDensity(null);
      }
      if (getVehicles().isPresent() && getVehicles().get() == child) {
        setVehicles(null);
      }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  static  Builder getBuilder()   { 
     
     return new Builder();

  } 

    /* generated by template ast.ClassMethod*/
  
   public  ASTSimulation deepClone()   { 
     
     return deepClone(_construct());

  } 

    /* generated by template ast.ClassMethod*/
  
   public  ASTSimulation deepClone(ASTSimulation result)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(result, "0xA7006_811 Parameter 'result' must not be null.");

     /* generated by template ast.additionalmethods.DeepCloneWithParameters*/
  
    super.deepClone(result);
    
    result.name = this.name;
    result.simulationRenderFrequency = this.simulationRenderFrequency.isPresent()? Optional.ofNullable((simulation._ast.ASTSimulationRenderFrequency)this.simulationRenderFrequency.get().deepClone()) : Optional.empty();
    result.simulationLoopFrequency = this.simulationLoopFrequency.isPresent()? Optional.ofNullable((simulation._ast.ASTSimulationLoopFrequency)this.simulationLoopFrequency.get().deepClone()) : Optional.empty();
    result.simulationDuration = this.simulationDuration.isPresent()? Optional.ofNullable((simulation._ast.ASTSimulationDuration)this.simulationDuration.get().deepClone()) : Optional.empty();
    result.simulationType = this.simulationType.isPresent()? Optional.ofNullable((simulation._ast.ASTSimulationType)this.simulationType.get().deepClone()) : Optional.empty();
    result.weather = this.weather.isPresent()? Optional.ofNullable((simulation._ast.ASTWeather)this.weather.get().deepClone()) : Optional.empty();
    result.time = this.time.isPresent()? Optional.ofNullable((simulation._ast.ASTTime)this.time.get().deepClone()) : Optional.empty();
    result.mapPath = this.mapPath.isPresent()? Optional.ofNullable((simulation._ast.ASTMapPath)this.mapPath.get().deepClone()) : Optional.empty();
    result.setMapName((simulation._ast.ASTMapName) this.mapName.deepClone());
    result.mapHeight = this.mapHeight.isPresent()? Optional.ofNullable((simulation._ast.ASTMapHeight)this.mapHeight.get().deepClone()) : Optional.empty();
    result.mapOverlap = this.mapOverlap.isPresent()? Optional.ofNullable((simulation._ast.ASTMapOverlap)this.mapOverlap.get().deepClone()) : Optional.empty();
    result.mapSectorWidth = this.mapSectorWidth.isPresent()? Optional.ofNullable((simulation._ast.ASTMapSectorWidth)this.mapSectorWidth.get().deepClone()) : Optional.empty();
    result.mapSectorHeight = this.mapSectorHeight.isPresent()? Optional.ofNullable((simulation._ast.ASTMapSectorHeight)this.mapSectorHeight.get().deepClone()) : Optional.empty();
    result.maxSectorUsers = this.maxSectorUsers.isPresent()? Optional.ofNullable((simulation._ast.ASTMaxSectorUsers)this.maxSectorUsers.get().deepClone()) : Optional.empty();
    result.timeout = this.timeout.isPresent()? Optional.ofNullable((simulation._ast.ASTTimeout)this.timeout.get().deepClone()) : Optional.empty();
    result.pedestrians = this.pedestrians.isPresent()? Optional.ofNullable((simulation._ast.ASTPedestrians)this.pedestrians.get().deepClone()) : Optional.empty();
    result.pedestrianDensity = this.pedestrianDensity.isPresent()? Optional.ofNullable((simulation._ast.ASTPedestrianDensity)this.pedestrianDensity.get().deepClone()) : Optional.empty();
    result.vehicles = this.vehicles.isPresent()? Optional.ofNullable((simulation._ast.ASTVehicles)this.vehicles.get().deepClone()) : Optional.empty();
    
    return result;

  } 

    /* generated by template ast.ClassMethod*/
  
   protected  ASTSimulation _construct()   { 
     
     return new ASTSimulation();

  } 

    /* generated by template ast.ClassMethod*/
  
   public  String getName()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.name;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<simulation._ast.ASTSimulationRenderFrequency> getSimulationRenderFrequency()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.simulationRenderFrequency;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<simulation._ast.ASTSimulationLoopFrequency> getSimulationLoopFrequency()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.simulationLoopFrequency;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<simulation._ast.ASTSimulationDuration> getSimulationDuration()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.simulationDuration;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<simulation._ast.ASTSimulationType> getSimulationType()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.simulationType;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<simulation._ast.ASTWeather> getWeather()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.weather;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<simulation._ast.ASTTime> getTime()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.time;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<simulation._ast.ASTMapPath> getMapPath()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.mapPath;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  simulation._ast.ASTMapName getMapName()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.mapName;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<simulation._ast.ASTMapHeight> getMapHeight()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.mapHeight;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<simulation._ast.ASTMapOverlap> getMapOverlap()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.mapOverlap;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<simulation._ast.ASTMapSectorWidth> getMapSectorWidth()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.mapSectorWidth;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<simulation._ast.ASTMapSectorHeight> getMapSectorHeight()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.mapSectorHeight;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<simulation._ast.ASTMaxSectorUsers> getMaxSectorUsers()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.maxSectorUsers;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<simulation._ast.ASTTimeout> getTimeout()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.timeout;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<simulation._ast.ASTPedestrians> getPedestrians()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.pedestrians;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<simulation._ast.ASTPedestrianDensity> getPedestrianDensity()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.pedestrianDensity;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<simulation._ast.ASTVehicles> getVehicles()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.vehicles;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setMapHeight(simulation._ast.ASTMapHeight mapHeight)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    simulation._ast.ASTMapHeight oldMapHeight = this.mapHeight.isPresent()? this.mapHeight.get() : null;
    this.mapHeight = Optional.ofNullable(mapHeight);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTSimulation_MapHeight, oldMapHeight, mapHeight));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean mapHeightIsPresent()   { 
     
       return mapHeight.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setMapName(simulation._ast.ASTMapName mapName)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(mapName, "0xA7006_497 Parameter 'mapName' must not be null.");

     /* generated by template ast_emf.additionalmethods.Set*/

    simulation._ast.ASTMapName oldMapName = this.mapName;
    this.mapName = mapName;
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTSimulation_MapName, oldMapName, mapName));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setMapOverlap(simulation._ast.ASTMapOverlap mapOverlap)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    simulation._ast.ASTMapOverlap oldMapOverlap = this.mapOverlap.isPresent()? this.mapOverlap.get() : null;
    this.mapOverlap = Optional.ofNullable(mapOverlap);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTSimulation_MapOverlap, oldMapOverlap, mapOverlap));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean mapOverlapIsPresent()   { 
     
       return mapOverlap.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setMapPath(simulation._ast.ASTMapPath mapPath)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    simulation._ast.ASTMapPath oldMapPath = this.mapPath.isPresent()? this.mapPath.get() : null;
    this.mapPath = Optional.ofNullable(mapPath);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTSimulation_MapPath, oldMapPath, mapPath));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean mapPathIsPresent()   { 
     
       return mapPath.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setMapSectorHeight(simulation._ast.ASTMapSectorHeight mapSectorHeight)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    simulation._ast.ASTMapSectorHeight oldMapSectorHeight = this.mapSectorHeight.isPresent()? this.mapSectorHeight.get() : null;
    this.mapSectorHeight = Optional.ofNullable(mapSectorHeight);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTSimulation_MapSectorHeight, oldMapSectorHeight, mapSectorHeight));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean mapSectorHeightIsPresent()   { 
     
       return mapSectorHeight.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setMapSectorWidth(simulation._ast.ASTMapSectorWidth mapSectorWidth)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    simulation._ast.ASTMapSectorWidth oldMapSectorWidth = this.mapSectorWidth.isPresent()? this.mapSectorWidth.get() : null;
    this.mapSectorWidth = Optional.ofNullable(mapSectorWidth);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTSimulation_MapSectorWidth, oldMapSectorWidth, mapSectorWidth));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean mapSectorWidthIsPresent()   { 
     
       return mapSectorWidth.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setMaxSectorUsers(simulation._ast.ASTMaxSectorUsers maxSectorUsers)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    simulation._ast.ASTMaxSectorUsers oldMaxSectorUsers = this.maxSectorUsers.isPresent()? this.maxSectorUsers.get() : null;
    this.maxSectorUsers = Optional.ofNullable(maxSectorUsers);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTSimulation_MaxSectorUsers, oldMaxSectorUsers, maxSectorUsers));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean maxSectorUsersIsPresent()   { 
     
       return maxSectorUsers.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setName(String name)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(name, "0xA7006_163 Parameter 'name' must not be null.");

     /* generated by template ast_emf.additionalmethods.Set*/

    String oldName = this.name;
    this.name = name;
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTSimulation_Name, oldName, name));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setPedestrianDensity(simulation._ast.ASTPedestrianDensity pedestrianDensity)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    simulation._ast.ASTPedestrianDensity oldPedestrianDensity = this.pedestrianDensity.isPresent()? this.pedestrianDensity.get() : null;
    this.pedestrianDensity = Optional.ofNullable(pedestrianDensity);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTSimulation_PedestrianDensity, oldPedestrianDensity, pedestrianDensity));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean pedestrianDensityIsPresent()   { 
     
       return pedestrianDensity.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setPedestrians(simulation._ast.ASTPedestrians pedestrians)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    simulation._ast.ASTPedestrians oldPedestrians = this.pedestrians.isPresent()? this.pedestrians.get() : null;
    this.pedestrians = Optional.ofNullable(pedestrians);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTSimulation_Pedestrians, oldPedestrians, pedestrians));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean pedestriansIsPresent()   { 
     
       return pedestrians.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setSimulationDuration(simulation._ast.ASTSimulationDuration simulationDuration)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    simulation._ast.ASTSimulationDuration oldSimulationDuration = this.simulationDuration.isPresent()? this.simulationDuration.get() : null;
    this.simulationDuration = Optional.ofNullable(simulationDuration);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTSimulation_SimulationDuration, oldSimulationDuration, simulationDuration));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean simulationDurationIsPresent()   { 
     
       return simulationDuration.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setSimulationLoopFrequency(simulation._ast.ASTSimulationLoopFrequency simulationLoopFrequency)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    simulation._ast.ASTSimulationLoopFrequency oldSimulationLoopFrequency = this.simulationLoopFrequency.isPresent()? this.simulationLoopFrequency.get() : null;
    this.simulationLoopFrequency = Optional.ofNullable(simulationLoopFrequency);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTSimulation_SimulationLoopFrequency, oldSimulationLoopFrequency, simulationLoopFrequency));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean simulationLoopFrequencyIsPresent()   { 
     
       return simulationLoopFrequency.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setSimulationRenderFrequency(simulation._ast.ASTSimulationRenderFrequency simulationRenderFrequency)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    simulation._ast.ASTSimulationRenderFrequency oldSimulationRenderFrequency = this.simulationRenderFrequency.isPresent()? this.simulationRenderFrequency.get() : null;
    this.simulationRenderFrequency = Optional.ofNullable(simulationRenderFrequency);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTSimulation_SimulationRenderFrequency, oldSimulationRenderFrequency, simulationRenderFrequency));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean simulationRenderFrequencyIsPresent()   { 
     
       return simulationRenderFrequency.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setSimulationType(simulation._ast.ASTSimulationType simulationType)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    simulation._ast.ASTSimulationType oldSimulationType = this.simulationType.isPresent()? this.simulationType.get() : null;
    this.simulationType = Optional.ofNullable(simulationType);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTSimulation_SimulationType, oldSimulationType, simulationType));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean simulationTypeIsPresent()   { 
     
       return simulationType.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setTime(simulation._ast.ASTTime time)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    simulation._ast.ASTTime oldTime = this.time.isPresent()? this.time.get() : null;
    this.time = Optional.ofNullable(time);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTSimulation_Time, oldTime, time));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean timeIsPresent()   { 
     
       return time.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setTimeout(simulation._ast.ASTTimeout timeout)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    simulation._ast.ASTTimeout oldTimeout = this.timeout.isPresent()? this.timeout.get() : null;
    this.timeout = Optional.ofNullable(timeout);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTSimulation_Timeout, oldTimeout, timeout));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean timeoutIsPresent()   { 
     
       return timeout.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setVehicles(simulation._ast.ASTVehicles vehicles)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    simulation._ast.ASTVehicles oldVehicles = this.vehicles.isPresent()? this.vehicles.get() : null;
    this.vehicles = Optional.ofNullable(vehicles);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTSimulation_Vehicles, oldVehicles, vehicles));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean vehiclesIsPresent()   { 
     
       return vehicles.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setWeather(simulation._ast.ASTWeather weather)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    simulation._ast.ASTWeather oldWeather = this.weather.isPresent()? this.weather.get() : null;
    this.weather = Optional.ofNullable(weather);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTSimulation_Weather, oldWeather, weather));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean weatherIsPresent()   { 
     
       return weather.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Object eGet(int featureID,boolean resolve,boolean coreType)   { 
     
     /* generated by template ast_emf.additionalmethods.EGet*/
  
    switch (featureID) {
      case SimulationPackage.ASTSimulation_Name:
         return getName();
      case SimulationPackage.ASTSimulation_SimulationRenderFrequency:
         return getSimulationRenderFrequency().isPresent()? getSimulationRenderFrequency().get() : null;
      case SimulationPackage.ASTSimulation_SimulationLoopFrequency:
         return getSimulationLoopFrequency().isPresent()? getSimulationLoopFrequency().get() : null;
      case SimulationPackage.ASTSimulation_SimulationDuration:
         return getSimulationDuration().isPresent()? getSimulationDuration().get() : null;
      case SimulationPackage.ASTSimulation_SimulationType:
         return getSimulationType().isPresent()? getSimulationType().get() : null;
      case SimulationPackage.ASTSimulation_Weather:
         return getWeather().isPresent()? getWeather().get() : null;
      case SimulationPackage.ASTSimulation_Time:
         return getTime().isPresent()? getTime().get() : null;
      case SimulationPackage.ASTSimulation_MapPath:
         return getMapPath().isPresent()? getMapPath().get() : null;
      case SimulationPackage.ASTSimulation_MapName:
         return getMapName();
      case SimulationPackage.ASTSimulation_MapHeight:
         return getMapHeight().isPresent()? getMapHeight().get() : null;
      case SimulationPackage.ASTSimulation_MapOverlap:
         return getMapOverlap().isPresent()? getMapOverlap().get() : null;
      case SimulationPackage.ASTSimulation_MapSectorWidth:
         return getMapSectorWidth().isPresent()? getMapSectorWidth().get() : null;
      case SimulationPackage.ASTSimulation_MapSectorHeight:
         return getMapSectorHeight().isPresent()? getMapSectorHeight().get() : null;
      case SimulationPackage.ASTSimulation_MaxSectorUsers:
         return getMaxSectorUsers().isPresent()? getMaxSectorUsers().get() : null;
      case SimulationPackage.ASTSimulation_Timeout:
         return getTimeout().isPresent()? getTimeout().get() : null;
      case SimulationPackage.ASTSimulation_Pedestrians:
         return getPedestrians().isPresent()? getPedestrians().get() : null;
      case SimulationPackage.ASTSimulation_PedestrianDensity:
         return getPedestrianDensity().isPresent()? getPedestrianDensity().get() : null;
      case SimulationPackage.ASTSimulation_Vehicles:
         return getVehicles().isPresent()? getVehicles().get() : null;
    }
    return eDynamicGet(featureID, resolve, coreType);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  void eSet(int featureID,Object newValue)   { 
     
     /* generated by template ast_emf.additionalmethods.ESet*/
  
    switch (featureID) {
      case SimulationPackage.ASTSimulation_Name:
        setName((String)newValue);
        return;
      case SimulationPackage.ASTSimulation_SimulationRenderFrequency:
        setSimulationRenderFrequency((simulation._ast.ASTSimulationRenderFrequency)newValue);
        return;
      case SimulationPackage.ASTSimulation_SimulationLoopFrequency:
        setSimulationLoopFrequency((simulation._ast.ASTSimulationLoopFrequency)newValue);
        return;
      case SimulationPackage.ASTSimulation_SimulationDuration:
        setSimulationDuration((simulation._ast.ASTSimulationDuration)newValue);
        return;
      case SimulationPackage.ASTSimulation_SimulationType:
        setSimulationType((simulation._ast.ASTSimulationType)newValue);
        return;
      case SimulationPackage.ASTSimulation_Weather:
        setWeather((simulation._ast.ASTWeather)newValue);
        return;
      case SimulationPackage.ASTSimulation_Time:
        setTime((simulation._ast.ASTTime)newValue);
        return;
      case SimulationPackage.ASTSimulation_MapPath:
        setMapPath((simulation._ast.ASTMapPath)newValue);
        return;
      case SimulationPackage.ASTSimulation_MapName:
        setMapName((simulation._ast.ASTMapName)newValue);
        return;
      case SimulationPackage.ASTSimulation_MapHeight:
        setMapHeight((simulation._ast.ASTMapHeight)newValue);
        return;
      case SimulationPackage.ASTSimulation_MapOverlap:
        setMapOverlap((simulation._ast.ASTMapOverlap)newValue);
        return;
      case SimulationPackage.ASTSimulation_MapSectorWidth:
        setMapSectorWidth((simulation._ast.ASTMapSectorWidth)newValue);
        return;
      case SimulationPackage.ASTSimulation_MapSectorHeight:
        setMapSectorHeight((simulation._ast.ASTMapSectorHeight)newValue);
        return;
      case SimulationPackage.ASTSimulation_MaxSectorUsers:
        setMaxSectorUsers((simulation._ast.ASTMaxSectorUsers)newValue);
        return;
      case SimulationPackage.ASTSimulation_Timeout:
        setTimeout((simulation._ast.ASTTimeout)newValue);
        return;
      case SimulationPackage.ASTSimulation_Pedestrians:
        setPedestrians((simulation._ast.ASTPedestrians)newValue);
        return;
      case SimulationPackage.ASTSimulation_PedestrianDensity:
        setPedestrianDensity((simulation._ast.ASTPedestrianDensity)newValue);
        return;
      case SimulationPackage.ASTSimulation_Vehicles:
        setVehicles((simulation._ast.ASTVehicles)newValue);
        return;
    }
    eDynamicSet(featureID, newValue);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  void eUnset(int featureID)   { 
     
     /* generated by template ast_emf.additionalmethods.EUnset*/
 
    switch (featureID) {
      case SimulationPackage.ASTSimulation_Name:
        setName(null);
      return;
      case SimulationPackage.ASTSimulation_SimulationRenderFrequency:
        setSimulationRenderFrequency(null);
      return;
      case SimulationPackage.ASTSimulation_SimulationLoopFrequency:
        setSimulationLoopFrequency(null);
      return;
      case SimulationPackage.ASTSimulation_SimulationDuration:
        setSimulationDuration(null);
      return;
      case SimulationPackage.ASTSimulation_SimulationType:
        setSimulationType(null);
      return;
      case SimulationPackage.ASTSimulation_Weather:
        setWeather(null);
      return;
      case SimulationPackage.ASTSimulation_Time:
        setTime(null);
      return;
      case SimulationPackage.ASTSimulation_MapPath:
        setMapPath(null);
      return;
      case SimulationPackage.ASTSimulation_MapName:
        setMapName(null);
      return;
      case SimulationPackage.ASTSimulation_MapHeight:
        setMapHeight(null);
      return;
      case SimulationPackage.ASTSimulation_MapOverlap:
        setMapOverlap(null);
      return;
      case SimulationPackage.ASTSimulation_MapSectorWidth:
        setMapSectorWidth(null);
      return;
      case SimulationPackage.ASTSimulation_MapSectorHeight:
        setMapSectorHeight(null);
      return;
      case SimulationPackage.ASTSimulation_MaxSectorUsers:
        setMaxSectorUsers(null);
      return;
      case SimulationPackage.ASTSimulation_Timeout:
        setTimeout(null);
      return;
      case SimulationPackage.ASTSimulation_Pedestrians:
        setPedestrians(null);
      return;
      case SimulationPackage.ASTSimulation_PedestrianDensity:
        setPedestrianDensity(null);
      return;
      case SimulationPackage.ASTSimulation_Vehicles:
        setVehicles(null);
      return;
    }
    eDynamicUnset(featureID);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean eIsSet(int featureID)   { 
     
     /* generated by template ast_emf.additionalmethods.EIsSet*/
 
    switch (featureID) {
      case SimulationPackage.ASTSimulation_Name:
        return getName() != null;
      case SimulationPackage.ASTSimulation_SimulationRenderFrequency:
        return getSimulationRenderFrequency().isPresent();
      case SimulationPackage.ASTSimulation_SimulationLoopFrequency:
        return getSimulationLoopFrequency().isPresent();
      case SimulationPackage.ASTSimulation_SimulationDuration:
        return getSimulationDuration().isPresent();
      case SimulationPackage.ASTSimulation_SimulationType:
        return getSimulationType().isPresent();
      case SimulationPackage.ASTSimulation_Weather:
        return getWeather().isPresent();
      case SimulationPackage.ASTSimulation_Time:
        return getTime().isPresent();
      case SimulationPackage.ASTSimulation_MapPath:
        return getMapPath().isPresent();
      case SimulationPackage.ASTSimulation_MapName:
        return getMapName() != null;
      case SimulationPackage.ASTSimulation_MapHeight:
        return getMapHeight().isPresent();
      case SimulationPackage.ASTSimulation_MapOverlap:
        return getMapOverlap().isPresent();
      case SimulationPackage.ASTSimulation_MapSectorWidth:
        return getMapSectorWidth().isPresent();
      case SimulationPackage.ASTSimulation_MapSectorHeight:
        return getMapSectorHeight().isPresent();
      case SimulationPackage.ASTSimulation_MaxSectorUsers:
        return getMaxSectorUsers().isPresent();
      case SimulationPackage.ASTSimulation_Timeout:
        return getTimeout().isPresent();
      case SimulationPackage.ASTSimulation_Pedestrians:
        return getPedestrians().isPresent();
      case SimulationPackage.ASTSimulation_PedestrianDensity:
        return getPedestrianDensity().isPresent();
      case SimulationPackage.ASTSimulation_Vehicles:
        return getVehicles().isPresent();
    }
    return eDynamicIsSet(featureID);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  int eBaseStructuralFeatureID(int featureID,Class<?> baseClass)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(baseClass, "0xA7006_323 Parameter 'baseClass' must not be null.");

     /* generated by template ast_emf.additionalmethods.EStructuralFeature*/
  
    return super.eBaseStructuralFeatureID(featureID, baseClass);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  int eDerivedStructuralFeatureID(int featureID,Class<?> baseClass)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(baseClass, "0xA7006_490 Parameter 'baseClass' must not be null.");

     /* generated by template ast_emf.additionalmethods.EStructuralFeature*/
  
    return super.eDerivedStructuralFeatureID(featureID, baseClass);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  String toString()   { 
     
     /* generated by template ast_emf.additionalmethods.EToString*/
  
    if (eIsProxy()) {
      return super.toString();
    }
    StringBuffer result = new StringBuffer(getClass().getSimpleName());
    if (mapHeight.isPresent()) {
      result.append(" MapHeight: ");
      result.append(mapHeight.get());
    } 
    result.append(" MapName: ");
    result.append(mapName);
    if (mapOverlap.isPresent()) {
      result.append(" MapOverlap: ");
      result.append(mapOverlap.get());
    } 
    if (mapPath.isPresent()) {
      result.append(" MapPath: ");
      result.append(mapPath.get());
    } 
    if (mapSectorHeight.isPresent()) {
      result.append(" MapSectorHeight: ");
      result.append(mapSectorHeight.get());
    } 
    if (mapSectorWidth.isPresent()) {
      result.append(" MapSectorWidth: ");
      result.append(mapSectorWidth.get());
    } 
    if (maxSectorUsers.isPresent()) {
      result.append(" MaxSectorUsers: ");
      result.append(maxSectorUsers.get());
    } 
    result.append(" Name: ");
    result.append(name);
    if (pedestrianDensity.isPresent()) {
      result.append(" PedestrianDensity: ");
      result.append(pedestrianDensity.get());
    } 
    if (pedestrians.isPresent()) {
      result.append(" Pedestrians: ");
      result.append(pedestrians.get());
    } 
    if (simulationDuration.isPresent()) {
      result.append(" SimulationDuration: ");
      result.append(simulationDuration.get());
    } 
    if (simulationLoopFrequency.isPresent()) {
      result.append(" SimulationLoopFrequency: ");
      result.append(simulationLoopFrequency.get());
    } 
    if (simulationRenderFrequency.isPresent()) {
      result.append(" SimulationRenderFrequency: ");
      result.append(simulationRenderFrequency.get());
    } 
    if (simulationType.isPresent()) {
      result.append(" SimulationType: ");
      result.append(simulationType.get());
    } 
    if (time.isPresent()) {
      result.append(" Time: ");
      result.append(time.get());
    } 
    if (timeout.isPresent()) {
      result.append(" Timeout: ");
      result.append(timeout.get());
    } 
    if (vehicles.isPresent()) {
      result.append(" Vehicles: ");
      result.append(vehicles.get());
    } 
    if (weather.isPresent()) {
      result.append(" Weather: ");
      result.append(weather.get());
    } 
    return result.toString();
  } 

    /* generated by template ast.ClassMethod*/
  
   protected  EClass eStaticClass()   { 
     
     return SimulationPackage.Literals.ASTSimulation;
  } 

   
  /* generated by template ast.ClassContent*/
  // Class content

    /* generated by template ast.AstBuilder*/

 /**
   * Builder for {@link ASTSimulation}.
   */
  public static class Builder  {
    /* generated by template ast.BuilderAttribute*/
     protected  String name;

    /* generated by template ast.BuilderAttribute*/
     protected  simulation._ast.ASTSimulationRenderFrequency simulationRenderFrequency;

    /* generated by template ast.BuilderAttribute*/
     protected  simulation._ast.ASTSimulationLoopFrequency simulationLoopFrequency;

    /* generated by template ast.BuilderAttribute*/
     protected  simulation._ast.ASTSimulationDuration simulationDuration;

    /* generated by template ast.BuilderAttribute*/
     protected  simulation._ast.ASTSimulationType simulationType;

    /* generated by template ast.BuilderAttribute*/
     protected  simulation._ast.ASTWeather weather;

    /* generated by template ast.BuilderAttribute*/
     protected  simulation._ast.ASTTime time;

    /* generated by template ast.BuilderAttribute*/
     protected  simulation._ast.ASTMapPath mapPath;

    /* generated by template ast.BuilderAttribute*/
     protected  simulation._ast.ASTMapName mapName;

    /* generated by template ast.BuilderAttribute*/
     protected  simulation._ast.ASTMapHeight mapHeight;

    /* generated by template ast.BuilderAttribute*/
     protected  simulation._ast.ASTMapOverlap mapOverlap;

    /* generated by template ast.BuilderAttribute*/
     protected  simulation._ast.ASTMapSectorWidth mapSectorWidth;

    /* generated by template ast.BuilderAttribute*/
     protected  simulation._ast.ASTMapSectorHeight mapSectorHeight;

    /* generated by template ast.BuilderAttribute*/
     protected  simulation._ast.ASTMaxSectorUsers maxSectorUsers;

    /* generated by template ast.BuilderAttribute*/
     protected  simulation._ast.ASTTimeout timeout;

    /* generated by template ast.BuilderAttribute*/
     protected  simulation._ast.ASTPedestrians pedestrians;

    /* generated by template ast.BuilderAttribute*/
     protected  simulation._ast.ASTPedestrianDensity pedestrianDensity;

    /* generated by template ast.BuilderAttribute*/
     protected  simulation._ast.ASTVehicles vehicles;

    public ASTSimulation build() {
      return new ASTSimulation (/* generated by template ast.BuilderConstructorParametersDeclaration*/
  
        this.name 
       ,
       this.simulationRenderFrequency 
       ,
       this.simulationLoopFrequency 
       ,
       this.simulationDuration 
       ,
       this.simulationType 
       ,
       this.weather 
       ,
       this.time 
       ,
       this.mapPath 
       ,
       this.mapName 
       ,
       this.mapHeight 
       ,
       this.mapOverlap 
       ,
       this.mapSectorWidth 
       ,
       this.mapSectorHeight 
       ,
       this.maxSectorUsers 
       ,
       this.timeout 
       ,
       this.pedestrians 
       ,
       this.pedestrianDensity 
       ,
       this.vehicles 

      );
    }
    /* generated by template ast.AstBuilderAttributeSetter*/
    public Builder name(String name) {
      this.name = name;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder simulationRenderFrequency(simulation._ast.ASTSimulationRenderFrequency simulationRenderFrequency) {
      this.simulationRenderFrequency = simulationRenderFrequency;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder simulationLoopFrequency(simulation._ast.ASTSimulationLoopFrequency simulationLoopFrequency) {
      this.simulationLoopFrequency = simulationLoopFrequency;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder simulationDuration(simulation._ast.ASTSimulationDuration simulationDuration) {
      this.simulationDuration = simulationDuration;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder simulationType(simulation._ast.ASTSimulationType simulationType) {
      this.simulationType = simulationType;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder weather(simulation._ast.ASTWeather weather) {
      this.weather = weather;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder time(simulation._ast.ASTTime time) {
      this.time = time;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder mapPath(simulation._ast.ASTMapPath mapPath) {
      this.mapPath = mapPath;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder mapName(simulation._ast.ASTMapName mapName) {
      this.mapName = mapName;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder mapHeight(simulation._ast.ASTMapHeight mapHeight) {
      this.mapHeight = mapHeight;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder mapOverlap(simulation._ast.ASTMapOverlap mapOverlap) {
      this.mapOverlap = mapOverlap;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder mapSectorWidth(simulation._ast.ASTMapSectorWidth mapSectorWidth) {
      this.mapSectorWidth = mapSectorWidth;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder mapSectorHeight(simulation._ast.ASTMapSectorHeight mapSectorHeight) {
      this.mapSectorHeight = mapSectorHeight;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder maxSectorUsers(simulation._ast.ASTMaxSectorUsers maxSectorUsers) {
      this.maxSectorUsers = maxSectorUsers;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder timeout(simulation._ast.ASTTimeout timeout) {
      this.timeout = timeout;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder pedestrians(simulation._ast.ASTPedestrians pedestrians) {
      this.pedestrians = pedestrians;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder pedestrianDensity(simulation._ast.ASTPedestrianDensity pedestrianDensity) {
      this.pedestrianDensity = pedestrianDensity;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder vehicles(simulation._ast.ASTVehicles vehicles) {
      this.vehicles = vehicles;
      return this;
    }

  }    

  
}
