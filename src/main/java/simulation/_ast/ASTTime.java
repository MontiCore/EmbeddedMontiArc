/* generated from model Simulation*/
/* generated by template ast.AstClass*/

package simulation._ast;

/* generated by template ast_emf.AstEImports*/
import java.util.Optional;
import java.util.Iterator;
import de.se_rwth.commons.logging.Log;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;

 public  class ASTTime extends /* generated by template ast.AstSuperTypes*/
de.monticore.emf._ast.ASTECNode implements  ASTSimulationNode
 {
  /* generated by template ast.Attribute*/
  
   protected  Optional<si._ast.ASTUnitNumber> unitNumber = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<String> timeHours = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<String> timeMinutes = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<String> timeSeconds = Optional.empty();

  /* generated by template ast.Attribute*/
  
   protected  Optional<String> timeMilliseconds = Optional.empty();

    /* generated by template ast.Constructor*/
  
   protected  ASTTime (/* generated by template ast.ParametersDeclaration*/
    // Parameters declaration
 
    )  
  /* generated by template ast.EmptyMethodBody*/

  { // empty body 
  }


    /* generated by template ast.Constructor*/
  
   protected  ASTTime (/* generated by template ast.ConstructorParametersDeclaration*/
     si._ast.ASTUnitNumber unitNumber 
    ,
     String timeHours 
    ,
     String timeMinutes 
    ,
     String timeSeconds 
    ,
     String timeMilliseconds 
 
    )  
  /* generated by template ast.ConstructorAttributesSetter*/
  {
    setUnitNumber(unitNumber);
    setTimeHours(timeHours);
    setTimeMinutes(timeMinutes);
    setTimeSeconds(timeSeconds);
    setTimeMilliseconds(timeMilliseconds);
  }


  
    /* generated by template ast.ClassMethod*/
  
   public  void accept(simulation._visitor.SimulationVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_575 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.Accept*/

      visitor.handle(this);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void accept(weather._visitor.WeatherVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_643 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.AcceptSuper*/

    if (visitor instanceof simulation._visitor.SimulationVisitor) {
      accept((simulation._visitor.SimulationVisitor) visitor);      
    } else {
      de.se_rwth.commons.logging.Log.error("0xA7000_800AST node type ASTTime of the sub language Simulation expected a visitor of type simulation._visitor.SimulationVisitor, but got weather._visitor.WeatherVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
    }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void accept(si._visitor.SIVisitor visitor)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(visitor, "0xA7006_223 Parameter 'visitor' must not be null.");

     /* generated by template ast.additionalmethods.AcceptSuper*/

    if (visitor instanceof simulation._visitor.SimulationVisitor) {
      accept((simulation._visitor.SimulationVisitor) visitor);      
    } else {
      de.se_rwth.commons.logging.Log.error("0xA7000_508AST node type ASTTime of the sub language Simulation expected a visitor of type simulation._visitor.SimulationVisitor, but got si._visitor.SIVisitor. Visitors of a super language may not be used on ASTs containing nodes of the sub language. Use a visitor of the sub language.");
    }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEquals(Object o,boolean forceSameOrder)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_810 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.DeepEqualsWithOrder*/

      ASTTime comp;
    if ((o instanceof ASTTime)) {
      comp = (ASTTime) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing unitNumber   
    if ( this.unitNumber.isPresent() != comp.unitNumber.isPresent() ||
      (this.unitNumber.isPresent() && !this.unitNumber.get().deepEquals(comp.unitNumber.get())) ) {
      return false;
    }
    return true;     


  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEquals(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_019 Parameter 'o' must not be null.");

     return deepEquals(o, true);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEqualsWithComments(Object o,boolean forceSameOrder)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_874 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.DeepEqualsWithComments*/

      ASTTime comp;
    if ((o instanceof ASTTime)) {
      comp = (ASTTime) o;
    } else {
      return false;
    }
    if (!equalsWithComments(comp)) {
      return false;
    }
    // comparing unitNumber
    if ( this.unitNumber.isPresent() != comp.unitNumber.isPresent() ||
      (this.unitNumber.isPresent() && !this.unitNumber.get().deepEqualsWithComments(comp.unitNumber.get())) ) {
      return false;
    }
    return true;     

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean deepEqualsWithComments(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_248 Parameter 'o' must not be null.");

     return deepEqualsWithComments(o, true);

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean equalAttributes(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_448 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.EqualAttributes*/

      ASTTime comp;
    if ((o instanceof ASTTime)) {
      comp = (ASTTime) o;
    } else {
      return false;
    }
	// comparing timeHours 
    if ( this.timeHours.isPresent() != comp.timeHours.isPresent() ||
       (this.timeHours.isPresent() && !this.timeHours.get().equals(comp.timeHours.get())) ) {
      return false;
    }
	// comparing timeMinutes 
    if ( this.timeMinutes.isPresent() != comp.timeMinutes.isPresent() ||
       (this.timeMinutes.isPresent() && !this.timeMinutes.get().equals(comp.timeMinutes.get())) ) {
      return false;
    }
	// comparing timeSeconds 
    if ( this.timeSeconds.isPresent() != comp.timeSeconds.isPresent() ||
       (this.timeSeconds.isPresent() && !this.timeSeconds.get().equals(comp.timeSeconds.get())) ) {
      return false;
    }
	// comparing timeMilliseconds 
    if ( this.timeMilliseconds.isPresent() != comp.timeMilliseconds.isPresent() ||
       (this.timeMilliseconds.isPresent() && !this.timeMilliseconds.get().equals(comp.timeMilliseconds.get())) ) {
      return false;
    }
    return true;     


  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean equalsWithComments(Object o)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(o, "0xA7006_672 Parameter 'o' must not be null.");

     /* generated by template ast.additionalmethods.EqualsWithComments*/

      ASTTime comp;
    if ((o instanceof ASTTime)) {
      comp = (ASTTime) o;
    } else {
      return false;
    }
    if (!equalAttributes(comp)) {
      return false;
    }
    // comparing comments
    if (get_PreComments().size() == comp.get_PreComments().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PreComments().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PreComments().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    
    if (get_PostComments().size() == comp.get_PostComments().size()) {
      java.util.Iterator<de.monticore.ast.Comment> one = get_PostComments().iterator();
      java.util.Iterator<de.monticore.ast.Comment> two = comp.get_PostComments().iterator();
      while (one.hasNext()) {
        if (!one.next().equals(two.next())) {
          return false;
        }
      }
    } else {
      return false;
    }
    return true;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  java.util.Collection<de.monticore.ast.ASTNode> get_Children()   { 
     
     /* generated by template ast.additionalmethods.GetChildren*/

    java.util.LinkedList<de.monticore.ast.ASTNode> result = new java.util.LinkedList<de.monticore.ast.ASTNode>();
        if (getUnitNumber().isPresent()) {
          result.add(getUnitNumber().get());
        }
    return result;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void remove_Child(de.monticore.ast.ASTNode child)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(child, "0xA7006_061 Parameter 'child' must not be null.");

     /* generated by template ast.additionalmethods.RemoveChild*/

      if (getUnitNumber().isPresent() && getUnitNumber().get() == child) {
        setUnitNumber(null);
      }

  } 

    /* generated by template ast.ClassMethod*/
  
   public  static  Builder getBuilder()   { 
     
     return new Builder();

  } 

    /* generated by template ast.ClassMethod*/
  
   public  ASTTime deepClone()   { 
     
     return deepClone(_construct());

  } 

    /* generated by template ast.ClassMethod*/
  
   public  ASTTime deepClone(ASTTime result)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(result, "0xA7006_120 Parameter 'result' must not be null.");

     /* generated by template ast.additionalmethods.DeepCloneWithParameters*/
  
    super.deepClone(result);
    
    result.unitNumber = this.unitNumber.isPresent()? Optional.ofNullable((si._ast.ASTUnitNumber)this.unitNumber.get().deepClone()) : Optional.empty();
    result.timeHours = this.timeHours.isPresent()? Optional.ofNullable((String)this.timeHours.get()) : Optional.empty();
    result.timeMinutes = this.timeMinutes.isPresent()? Optional.ofNullable((String)this.timeMinutes.get()) : Optional.empty();
    result.timeSeconds = this.timeSeconds.isPresent()? Optional.ofNullable((String)this.timeSeconds.get()) : Optional.empty();
    result.timeMilliseconds = this.timeMilliseconds.isPresent()? Optional.ofNullable((String)this.timeMilliseconds.get()) : Optional.empty();
    
    return result;

  } 

    /* generated by template ast.ClassMethod*/
  
   protected  ASTTime _construct()   { 
     
     return new ASTTime();

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<si._ast.ASTUnitNumber> getUnitNumber()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.unitNumber;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<String> getTimeHours()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.timeHours;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<String> getTimeMinutes()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.timeMinutes;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<String> getTimeSeconds()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.timeSeconds;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Optional<String> getTimeMilliseconds()   { 
     
     /* generated by template ast.additionalmethods.Get*/

    return  this.timeMilliseconds;

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setTimeHours(String timeHours)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    String oldTimeHours = this.timeHours.isPresent()? this.timeHours.get() : null;
    this.timeHours = Optional.ofNullable(timeHours);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTTime_TimeHours, oldTimeHours, timeHours));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean timeHoursIsPresent()   { 
     
       return timeHours.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setTimeMilliseconds(String timeMilliseconds)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    String oldTimeMilliseconds = this.timeMilliseconds.isPresent()? this.timeMilliseconds.get() : null;
    this.timeMilliseconds = Optional.ofNullable(timeMilliseconds);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTTime_TimeMilliseconds, oldTimeMilliseconds, timeMilliseconds));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean timeMillisecondsIsPresent()   { 
     
       return timeMilliseconds.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setTimeMinutes(String timeMinutes)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    String oldTimeMinutes = this.timeMinutes.isPresent()? this.timeMinutes.get() : null;
    this.timeMinutes = Optional.ofNullable(timeMinutes);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTTime_TimeMinutes, oldTimeMinutes, timeMinutes));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean timeMinutesIsPresent()   { 
     
       return timeMinutes.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setTimeSeconds(String timeSeconds)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    String oldTimeSeconds = this.timeSeconds.isPresent()? this.timeSeconds.get() : null;
    this.timeSeconds = Optional.ofNullable(timeSeconds);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTTime_TimeSeconds, oldTimeSeconds, timeSeconds));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean timeSecondsIsPresent()   { 
     
       return timeSeconds.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  void setUnitNumber(si._ast.ASTUnitNumber unitNumber)   { 
     
     /* generated by template ast_emf.additionalmethods.Set*/

    si._ast.ASTUnitNumber oldUnitNumber = this.unitNumber.isPresent()? this.unitNumber.get() : null;
    this.unitNumber = Optional.ofNullable(unitNumber);
    if (eNotificationRequired()) {
      eNotify(new ENotificationImpl(this, Notification.SET, SimulationPackage.ASTTime_UnitNumber, oldUnitNumber, unitNumber));
    }  

  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean unitNumberIsPresent()   { 
     
       return unitNumber.isPresent(); 

  } 

    /* generated by template ast.ClassMethod*/
  
   public  Object eGet(int featureID,boolean resolve,boolean coreType)   { 
     
     /* generated by template ast_emf.additionalmethods.EGet*/
  
    switch (featureID) {
      case SimulationPackage.ASTTime_UnitNumber:
         return getUnitNumber().isPresent()? getUnitNumber().get() : null;
      case SimulationPackage.ASTTime_TimeHours:
         return getTimeHours().isPresent()? getTimeHours().get() : null;
      case SimulationPackage.ASTTime_TimeMinutes:
         return getTimeMinutes().isPresent()? getTimeMinutes().get() : null;
      case SimulationPackage.ASTTime_TimeSeconds:
         return getTimeSeconds().isPresent()? getTimeSeconds().get() : null;
      case SimulationPackage.ASTTime_TimeMilliseconds:
         return getTimeMilliseconds().isPresent()? getTimeMilliseconds().get() : null;
    }
    return eDynamicGet(featureID, resolve, coreType);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  void eSet(int featureID,Object newValue)   { 
     
     /* generated by template ast_emf.additionalmethods.ESet*/
  
    switch (featureID) {
      case SimulationPackage.ASTTime_UnitNumber:
        setUnitNumber((si._ast.ASTUnitNumber)newValue);
        return;
      case SimulationPackage.ASTTime_TimeHours:
        setTimeHours((String)newValue);
        return;
      case SimulationPackage.ASTTime_TimeMinutes:
        setTimeMinutes((String)newValue);
        return;
      case SimulationPackage.ASTTime_TimeSeconds:
        setTimeSeconds((String)newValue);
        return;
      case SimulationPackage.ASTTime_TimeMilliseconds:
        setTimeMilliseconds((String)newValue);
        return;
    }
    eDynamicSet(featureID, newValue);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  void eUnset(int featureID)   { 
     
     /* generated by template ast_emf.additionalmethods.EUnset*/
 
    switch (featureID) {
      case SimulationPackage.ASTTime_UnitNumber:
        setUnitNumber(null);
      return;
      case SimulationPackage.ASTTime_TimeHours:
        setTimeHours(null);
      return;
      case SimulationPackage.ASTTime_TimeMinutes:
        setTimeMinutes(null);
      return;
      case SimulationPackage.ASTTime_TimeSeconds:
        setTimeSeconds(null);
      return;
      case SimulationPackage.ASTTime_TimeMilliseconds:
        setTimeMilliseconds(null);
      return;
    }
    eDynamicUnset(featureID);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  boolean eIsSet(int featureID)   { 
     
     /* generated by template ast_emf.additionalmethods.EIsSet*/
 
    switch (featureID) {
      case SimulationPackage.ASTTime_UnitNumber:
        return getUnitNumber().isPresent();
      case SimulationPackage.ASTTime_TimeHours:
        return getTimeHours().isPresent();
      case SimulationPackage.ASTTime_TimeMinutes:
        return getTimeMinutes().isPresent();
      case SimulationPackage.ASTTime_TimeSeconds:
        return getTimeSeconds().isPresent();
      case SimulationPackage.ASTTime_TimeMilliseconds:
        return getTimeMilliseconds().isPresent();
    }
    return eDynamicIsSet(featureID);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  int eBaseStructuralFeatureID(int featureID,Class<?> baseClass)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(baseClass, "0xA7006_998 Parameter 'baseClass' must not be null.");

     /* generated by template ast_emf.additionalmethods.EStructuralFeature*/
  
    return super.eBaseStructuralFeatureID(featureID, baseClass);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  int eDerivedStructuralFeatureID(int featureID,Class<?> baseClass)   { 
     /* generated by template ast.ErrorIfNull*/
    Log.errorIfNull(baseClass, "0xA7006_135 Parameter 'baseClass' must not be null.");

     /* generated by template ast_emf.additionalmethods.EStructuralFeature*/
  
    return super.eDerivedStructuralFeatureID(featureID, baseClass);
  } 

    /* generated by template ast.ClassMethod*/
  
   public  String toString()   { 
     
     /* generated by template ast_emf.additionalmethods.EToString*/
  
    if (eIsProxy()) {
      return super.toString();
    }
    StringBuffer result = new StringBuffer(getClass().getSimpleName());
    if (timeHours.isPresent()) {
      result.append(" TimeHours: ");
      result.append(timeHours.get());
    } 
    if (timeMilliseconds.isPresent()) {
      result.append(" TimeMilliseconds: ");
      result.append(timeMilliseconds.get());
    } 
    if (timeMinutes.isPresent()) {
      result.append(" TimeMinutes: ");
      result.append(timeMinutes.get());
    } 
    if (timeSeconds.isPresent()) {
      result.append(" TimeSeconds: ");
      result.append(timeSeconds.get());
    } 
    if (unitNumber.isPresent()) {
      result.append(" UnitNumber: ");
      result.append(unitNumber.get());
    } 
    return result.toString();
  } 

    /* generated by template ast.ClassMethod*/
  
   protected  EClass eStaticClass()   { 
     
     return SimulationPackage.Literals.ASTTime;
  } 

   
  /* generated by template ast.ClassContent*/
  // Class content

    /* generated by template ast.AstBuilder*/

 /**
   * Builder for {@link ASTTime}.
   */
  public static class Builder  {
    /* generated by template ast.BuilderAttribute*/
     protected  si._ast.ASTUnitNumber unitNumber;

    /* generated by template ast.BuilderAttribute*/
     protected  String timeHours;

    /* generated by template ast.BuilderAttribute*/
     protected  String timeMinutes;

    /* generated by template ast.BuilderAttribute*/
     protected  String timeSeconds;

    /* generated by template ast.BuilderAttribute*/
     protected  String timeMilliseconds;

    public ASTTime build() {
      return new ASTTime (/* generated by template ast.BuilderConstructorParametersDeclaration*/
  
        this.unitNumber 
       ,
       this.timeHours 
       ,
       this.timeMinutes 
       ,
       this.timeSeconds 
       ,
       this.timeMilliseconds 

      );
    }
    /* generated by template ast.AstBuilderAttributeSetter*/
    public Builder unitNumber(si._ast.ASTUnitNumber unitNumber) {
      this.unitNumber = unitNumber;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder timeHours(String timeHours) {
      this.timeHours = timeHours;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder timeMinutes(String timeMinutes) {
      this.timeMinutes = timeMinutes;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder timeSeconds(String timeSeconds) {
      this.timeSeconds = timeSeconds;
      return this;
    }
/* generated by template ast.AstBuilderAttributeSetter*/
    public Builder timeMilliseconds(String timeMilliseconds) {
      this.timeMilliseconds = timeMilliseconds;
      return this;
    }

  }    

  
}
