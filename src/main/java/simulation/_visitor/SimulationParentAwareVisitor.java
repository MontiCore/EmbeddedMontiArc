/* generated by template visitor.ParentAwareVisitor*/



package simulation._visitor;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Stack;

import simulation._ast.ASTSimulationNode;
import de.monticore.ast.ASTNode;


/**
* The ParentAwareVisitor of the language keeps track of the parent nodes during a traversal.<br/>
* <br/>
* <b>Access current parent</b>: use {@code getParent()} to access the current parent.<br/>
* <br/>
* <b>Access the complete parents list:</b> use {@code getParents()} to access a list of all parents.<br/>
*/
public abstract class SimulationParentAwareVisitor  implements SimulationVisitor {

  final Stack<ASTSimulationNode> parents = new Stack<>();

  public Optional<ASTSimulationNode> getParent() {
    if (!parents.isEmpty()) {
      ASTSimulationNode topElement = (ASTSimulationNode) parents.peek();
      return Optional.of(topElement);
    }
    // no parent, return an absent value
    return Optional.empty();
  }

  public List<ASTSimulationNode> getParents() {
    return new ArrayList<>(parents);
  }

      @Override
      public void traverse(simulation._ast.ASTSimulation node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTSimulationRenderFrequency node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTSimulationLoopFrequency node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTSimulationDuration node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTSimulationType node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTWeatherObj node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTWeather node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTFixedWeather node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTSequenceWeather node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTRandomWeather node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTForecast node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTTime node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTMapPath node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTMapName node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTMapHeight node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTMapOverlap node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTMapSectorWidth node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTMapSectorHeight node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTMaxSectorUsers node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTTimeout node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTPedestrians node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTPedestrianDensity node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTVehicles node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTExplicitVehicle node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTPathedVehicle node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(simulation._ast.ASTRandomVehicle node) {
        parents.push(node);
        SimulationVisitor.super.traverse(node);
        parents.pop();
      }
}
