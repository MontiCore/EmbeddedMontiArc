/* generated from model Weather*/
/* generated by template ast.AstInterface*/



package weather._ast;


/* generated by template ast_emf.EPackage*/




import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.EDataType;
import de.monticore.emf._ast.ASTEPackage;

public interface WeatherPackage extends ASTEPackage {
  // The package name.
  String eNAME = "Weather";
  // The package namespace URI.
  String eNS_URI = "http://Weather/1.0";
  // The package namespace name.
  String eNS_PREFIX = "Weather";
  // The singleton instance of the package.
  WeatherPackage eINSTANCE = WeatherPackageImpl.init();
  
  int ConstantsWeather = 0;
    
  int ASTTemperature = 1;
  int ASTHumidity = 2;
  int ASTPressure = 3;
  int ASTWindstrength = 4;
  int ASTWinddirection = 5;
  int ASTPrecipitationtype = 6;
  int ASTPrecipitationamount = 7;
  int ASTClouding = 8;
  int ASTSight = 9;
  int ASTWeatherPhenomena = 10;
  int ASTOpticalPhenomena = 11;
  int ASTArtificialPhenomena = 12;
  
    /* generated by template ast.Constant*/
   int ASTTemperature_WeatherTemperature = 0;

    /* generated by template ast.Constant*/
   int ASTHumidity_WeatherHumidity = 0;

    /* generated by template ast.Constant*/
   int ASTPressure_WeatherPressure = 0;

    /* generated by template ast.Constant*/
   int ASTWindstrength_WeatherWindstrength = 0;

    /* generated by template ast.Constant*/
   int ASTWinddirection_WeatherWinddirection = 0;

    /* generated by template ast.Constant*/
   int ASTPrecipitationamount_WeatherPrecipitationamount = 0;

    /* generated by template ast.Constant*/
   int ASTSight_WeatherSight = 0;

    /* generated by template ast.Constant*/
   int ASTWeatherPhenomena_PosX = 0;

    /* generated by template ast.Constant*/
   int ASTWeatherPhenomena_PosY = 1;

    
    // Returns the factory that creates the instances of the model.
  WeatherNodeFactory getWeatherFactory();
  
  EEnum getConstantsWeather();
    
  EClass getTemperature();
  EClass getHumidity();
  EClass getPressure();
  EClass getWindstrength();
  EClass getWinddirection();
  EClass getPrecipitationtype();
  EClass getPrecipitationamount();
  EClass getClouding();
  EClass getSight();
  EClass getWeatherPhenomena();
  EClass getOpticalPhenomena();
  EClass getArtificialPhenomena();
    
  /* generated by template ast.ClassMethod*/
  
   EReference getASTTemperature_WeatherTemperature() ;

  /* generated by template ast.ClassMethod*/
  
   EReference getASTHumidity_WeatherHumidity() ;

  /* generated by template ast.ClassMethod*/
  
   EReference getASTPressure_WeatherPressure() ;

  /* generated by template ast.ClassMethod*/
  
   EReference getASTWindstrength_WeatherWindstrength() ;

  /* generated by template ast.ClassMethod*/
  
   EReference getASTWinddirection_WeatherWinddirection() ;

  /* generated by template ast.ClassMethod*/
  
   EReference getASTPrecipitationamount_WeatherPrecipitationamount() ;

  /* generated by template ast.ClassMethod*/
  
   EReference getASTSight_WeatherSight() ;

  /* generated by template ast.ClassMethod*/
  
   EAttribute getASTWeatherPhenomena_PosX() ;

  /* generated by template ast.ClassMethod*/
  
   EAttribute getASTWeatherPhenomena_PosY() ;

     
  /**
   * <!-- begin-user-doc -->
   * Defines literals for the meta objects that represent
   * <ul>
   *   <li>each class,</li>
   *   <li>each feature of each class,</li>
   *   <li>each enum,</li>
   *   <li>and each data type</li>
   * </ul>
   * <!-- end-user-doc -->
  */
  interface Literals {
  
    EEnum ConstantsWeather = eINSTANCE.getConstantsWeather();
    
    EClass ASTTemperature = eINSTANCE.getTemperature();
    EClass ASTHumidity = eINSTANCE.getHumidity();
    EClass ASTPressure = eINSTANCE.getPressure();
    EClass ASTWindstrength = eINSTANCE.getWindstrength();
    EClass ASTWinddirection = eINSTANCE.getWinddirection();
    EClass ASTPrecipitationtype = eINSTANCE.getPrecipitationtype();
    EClass ASTPrecipitationamount = eINSTANCE.getPrecipitationamount();
    EClass ASTClouding = eINSTANCE.getClouding();
    EClass ASTSight = eINSTANCE.getSight();
    EClass ASTWeatherPhenomena = eINSTANCE.getWeatherPhenomena();
    EClass ASTOpticalPhenomena = eINSTANCE.getOpticalPhenomena();
    EClass ASTArtificialPhenomena = eINSTANCE.getArtificialPhenomena();
  }
}

