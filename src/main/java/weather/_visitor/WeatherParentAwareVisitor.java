/* generated by template visitor.ParentAwareVisitor*/



package weather._visitor;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Stack;

import weather._ast.ASTWeatherNode;
import de.monticore.ast.ASTNode;


/**
* The ParentAwareVisitor of the language keeps track of the parent nodes during a traversal.<br/>
* <br/>
* <b>Access current parent</b>: use {@code getParent()} to access the current parent.<br/>
* <br/>
* <b>Access the complete parents list:</b> use {@code getParents()} to access a list of all parents.<br/>
*/
public abstract class WeatherParentAwareVisitor  implements WeatherVisitor {

  final Stack<ASTWeatherNode> parents = new Stack<>();

  public Optional<ASTWeatherNode> getParent() {
    if (!parents.isEmpty()) {
      ASTWeatherNode topElement = (ASTWeatherNode) parents.peek();
      return Optional.of(topElement);
    }
    // no parent, return an absent value
    return Optional.empty();
  }

  public List<ASTWeatherNode> getParents() {
    return new ArrayList<>(parents);
  }

      @Override
      public void traverse(weather._ast.ASTTemperature node) {
        parents.push(node);
        WeatherVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(weather._ast.ASTHumidity node) {
        parents.push(node);
        WeatherVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(weather._ast.ASTPressure node) {
        parents.push(node);
        WeatherVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(weather._ast.ASTWindstrength node) {
        parents.push(node);
        WeatherVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(weather._ast.ASTWinddirection node) {
        parents.push(node);
        WeatherVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(weather._ast.ASTPrecipitationtype node) {
        parents.push(node);
        WeatherVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(weather._ast.ASTPrecipitationamount node) {
        parents.push(node);
        WeatherVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(weather._ast.ASTClouding node) {
        parents.push(node);
        WeatherVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(weather._ast.ASTSight node) {
        parents.push(node);
        WeatherVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(weather._ast.ASTWeatherPhenomena node) {
        parents.push(node);
        WeatherVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(weather._ast.ASTOpticalPhenomena node) {
        parents.push(node);
        WeatherVisitor.super.traverse(node);
        parents.pop();
      }
      @Override
      public void traverse(weather._ast.ASTArtificialPhenomena node) {
        parents.push(node);
        WeatherVisitor.super.traverse(node);
        parents.pop();
      }
}
