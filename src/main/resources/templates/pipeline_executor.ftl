# generated by pipeline_executor.ftl
${tc.signature("importStatementsString", "pipelineConfigurationEntryList", "executionOrder", "pipelineModel", "ModelDirString", "schemaAPINameString","trainConfNameString")}
<#assign templateUtil= tc.instantiate("de.monticore.montipipes.util.TemplateUtil")/>
<#assign pipelineConfigurationEntries = pipelineConfigurationEntryList>
<#assign modelDirValue = ModelDirString>
<#assign schemaAPI = schemaAPINameString>
<#assign trainConf = trainConfNameString>
import sys
sys.path.append("./steps")
sys.path.append("./schema_apis")
sys.path.append("../../src/test/resources/experiments/steps")
sys.path.append("../../src/test/resources/experiments/schema_apis")
sys.path.append("./configurations")
sys.path.append("./backend")

${importStatementsString}

class Pipeline_Executor:
    def __init__(self):
        pass
<#list executionOrder as pipelineStep>
    <#assign methodParameters = templateUtil.getParametersForPipelineStep(pipelineStep)>
    <#assign stepConfiguration = templateUtil.filterConfigurationEntriesForName(pipelineConfigurationEntries, pipelineStep.getName())/>
    <#assign calledComponentName = stepConfiguration.getValue().toString()/>
    <#assign methodParametersWithKeywords = templateUtil.addKeywordsToMethodParameters(methodParameters)>
    def initialise_${pipelineStep.getName()}(self,${methodParameters}, model_dir):
        return ${calledComponentName}(${methodParametersWithKeywords} , model_dir = model_dir)
</#list>

    def execute(self):
        print("Starting pipeline execution")
        schema_api= ${schemaAPI}()
        schema_api.set_training_configuration(${trainConf}())
<#list executionOrder as pipelineStep>
    <#assign stepConfiguration = templateUtil.filterConfigurationEntriesForName(pipelineConfigurationEntries, pipelineStep.getName())/>
    <#assign stepName = pipelineStep.getName()/>
    <#assign stepArguments = templateUtil.getArgumentsForPipelineStep(pipelineStep, stepConfiguration)>
        ${stepName} = self.initialise_${stepName}( ${stepArguments} schema_api = schema_api, model_dir ='${modelDirValue}')
        ${templateUtil.getOutputPortsFromEMAInstanceAsCommaSeperatedList(pipelineStep)}=${stepName}.execute()

</#list>
        print("Execution finished")

Pipeline_Executor().execute()