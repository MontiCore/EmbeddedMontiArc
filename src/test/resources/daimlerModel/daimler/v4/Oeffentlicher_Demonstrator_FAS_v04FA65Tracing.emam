package daimler.v4;
// The C&C model Oeffentlicher_Demonstrator_FAS_v04 satisfies the view FA65.
  component Oeffentlicher_Demonstrator_FAS_v04FA65Tracing {
    component DEMO_FAS_1 {
      component DEMO_FAS_2 {
        component Subsystem {
          component DEMO_FAS_3 {
            port
              in Double _LeverUp_stat,
              out Boolean _Limiter_active_b;

            component DEMO_FAS_Funktion {
              port
                in Double leverUp_stat,
                out Boolean limiter_active_b;

              component Limiter {
                port
                  in Double leverUp_stat,
                  out Double vMax_kmh,
                  out Boolean limiter_active_b,
                  out Double out2,
                  in Double in3;

                component Limiter_Function {
                  port
                    in Double leverUp_stat,
                    out Double vMax_kmh,
                    out Double out2,
                    in Double in2;

                  component Limiter_SetValue {
                    port
                      in Double leverUp_stat,
                      out Double out1,
                      out Double out2,
                      in Double in3,
                      in Double in1;

                    component RelOp3_1 {
                      port
                        in Double in1,
                        out Boolean out1;

                    }
instance RelOp3_1 relOp3_1;
                    component RisingEdgeDetector_1 {
                      port
                        in Boolean in1,
                        out Boolean out1;

                      component CompareToZero1_1 {
                        port
                          in Boolean u,
                          out Boolean y;

                        component Compare_2 {
                          port
                            in Boolean in1,
                            out Boolean out1;

                        }
instance Compare_2 compare_2;
  connect u -> compare_2.in1;
  connect compare_2.out1 -> y;
                      }
instance CompareToZero1_1 compareToZero1_1;
                      component LogicalOperator_3 {
                        port
                          in Boolean in2,
                          out Boolean out1;

                      }
instance LogicalOperator_3 logicalOperator_3;
                      component LogicalOperator2_2 {
                        port
                          in Boolean in1,
                          out Boolean out1;

                      }
instance LogicalOperator2_2 logicalOperator2_2;
                      component SwitchBlock_9 {
                        port
                          in Boolean ifIn,
                          out Boolean out1;

                      }
instance SwitchBlock_9 switchBlock_9;
  connect logicalOperator_3.out1 -> logicalOperator2_2.in1;
  connect logicalOperator2_2.out1 -> switchBlock_9.ifIn;
  connect compareToZero1_1.y -> logicalOperator_3.in2;
  connect in1 -> compareToZero1_1.u;
  connect switchBlock_9.out1 -> out1;
                    }
instance RisingEdgeDetector_1 risingEdgeDetector_1;
                    component Condition_13 {
                      port
                        in Boolean in1,
                        out Boolean out1;

                    }
instance Condition_13 condition_13;
                    component SwitchBlock_11 {
                      port
                        in Boolean condition,
                        out Double out1,
                        in Double elseIn,
                        in Double ifIn;

                    }
instance SwitchBlock_11 switchBlock_11;
                    component Condition2_3 {
                      port
                        in Boolean in1,
                        out Boolean out1;

                    }
instance Condition2_3 condition2_3;
                    component SwitchBlock2_3 {
                      port
                        in Boolean condition,
                        out Double out1;

                    }
instance SwitchBlock2_3 switchBlock2_3;
                    component SwitchBlock1_6 {
                      port
                        in Double elseIn,
                        out Double out1;

                    }
instance SwitchBlock1_6 switchBlock1_6;
                    component V_LimSetValuePlus {
                      port
                        in Double v_LimiterSetValue,
                        out Double out1;

                      component Sum_5 {
                        port
                          in Double in1,
                          out Double out1;

                      }
instance Sum_5 sum_5;
  connect v_LimiterSetValue -> sum_5.in1;
  connect sum_5.out1 -> out1;
                    }
instance V_LimSetValuePlus v_LimSetValuePlus;
  connect v_LimSetValuePlus.out1 -> switchBlock_11.ifIn;
  connect in1 -> v_LimSetValuePlus.v_LimiterSetValue;
  connect condition2_3.out1 -> switchBlock2_3.condition;
  connect switchBlock2_3.out1 -> out2;
  connect risingEdgeDetector_1.out1 -> condition_13.in1;
  connect relOp3_1.out1 -> risingEdgeDetector_1.in1;
  connect risingEdgeDetector_1.out1 -> condition2_3.in1;
  connect condition_13.out1 -> switchBlock_11.condition;
  connect switchBlock1_6.out1 -> switchBlock_11.elseIn;
  connect in3 -> switchBlock1_6.elseIn;
  connect leverUp_stat -> relOp3_1.in1;
  connect switchBlock_11.out1 -> out1;
                  }
instance Limiter_SetValue limiter_SetValue;
                  component SwitchBlock5_2 {
                    port
                      in Double ifIn,
                      out Double out1;

                  }
instance SwitchBlock5_2 switchBlock5_2;
                  component Limiter_Enabled {
                    port
                      in Double in1,
                      out Double vMax_kmh;

                    component Limiter_Active {
                      port
                        in Double in1,
                        out Double vMax_kmh;

                      component Gain_1 {
                        port
                          in Double vMax_kmh,
                          out Double vMax_kmhOut1;

                      }
instance Gain_1 gain_1;
  connect in1 -> gain_1.vMax_kmh;
  connect gain_1.vMax_kmhOut1 -> vMax_kmh;
                    }
instance Limiter_Active limiter_Active;
                    component SwitchBlock_8 {
                      port
                        in Double ifIn,
                        out Double out1,
                        in Double elseIn;

                    }
instance SwitchBlock_8 switchBlock_8;
                    component UnitDelay_4 {
                      port
                        in Double valueIn,
                        out Double valueOut;

                    }
instance UnitDelay_4 unitDelay_4;
                    component SwitchBlock1_5 {
                      port
                        in Double elseIn,
                        out Double out1;

                    }
instance SwitchBlock1_5 switchBlock1_5;
  connect limiter_Active.vMax_kmh -> switchBlock_8.ifIn;
  connect in1 -> limiter_Active.in1;
  connect switchBlock_8.out1 -> unitDelay_4.valueIn;
  connect switchBlock1_5.out1 -> switchBlock_8.elseIn;
  connect switchBlock_8.out1 -> vMax_kmh;
  connect unitDelay_4.valueOut -> switchBlock1_5.elseIn;
                  }
instance Limiter_Enabled limiter_Enabled;
                  component SwitchBlock_12 {
                    port
                      in Double elseIn,
                      out Double vMax_kmh;

                  }
instance SwitchBlock_12 switchBlock_12;
                  component SwitchBlock8_1 {
                    port
                      in Double ifIn,
                      out Double out1;

                  }
instance SwitchBlock8_1 switchBlock8_1;
                  component SwitchBlock4_2 {
                    port
                      in Double elseIn,
                      out Double out1;

                  }
instance SwitchBlock4_2 switchBlock4_2;
                  component SwitchBlock2_4 {
                    port
                      in Double elseIn,
                      out Double out1;

                  }
instance SwitchBlock2_4 switchBlock2_4;
  connect limiter_Enabled.vMax_kmh -> switchBlock_12.elseIn;
  connect switchBlock5_2.out1 -> limiter_Enabled.in1;
  connect switchBlock_12.vMax_kmh -> vMax_kmh;
  connect limiter_SetValue.out2 -> switchBlock8_1.ifIn;
  connect switchBlock8_1.out1 -> out2;
  connect switchBlock4_2.out1 -> limiter_SetValue.in3;
  connect in2 -> switchBlock4_2.elseIn;
  connect switchBlock2_4.out1 -> limiter_SetValue.in1;
  connect in2 -> switchBlock2_4.elseIn;
  connect limiter_SetValue.out1 -> switchBlock5_2.ifIn;
  connect leverUp_stat -> limiter_SetValue.leverUp_stat;
                }
instance Limiter_Function limiter_Function;
                component SwitchBlock2_5 {
                  port
                    in Double ifIn,
                    out Double out1,
                    in Double elseIn;

                }
instance SwitchBlock2_5 switchBlock2_5;
                component SwitchBlock1_8 {
                  port
                    in Double ifIn,
                    out Double out1;

                }
instance SwitchBlock1_8 switchBlock1_8;
                component UnitDelay_5 {
                  port
                    in Double valueIn,
                    out Double valueOut;

                }
instance UnitDelay_5 unitDelay_5;
  connect switchBlock2_5.out1 -> unitDelay_5.valueIn;
  connect unitDelay_5.valueOut -> switchBlock2_5.elseIn;
  connect limiter_Function.out2 -> switchBlock1_8.ifIn;
  connect limiter_Function.vMax_kmh -> switchBlock2_5.ifIn;
  connect leverUp_stat -> limiter_Function.leverUp_stat;
  connect in3 -> limiter_Function.in2;
  connect switchBlock1_8.out1 -> out2;
  connect switchBlock2_5.out1 -> vMax_kmh;
              }
instance Limiter limiter;
              component VelocityControl {
                port
                  in Double vMax_kmh;

              }
instance VelocityControl velocityControl;
              component FAS_Input {
                port
                  in Double leverUp_stat,
                  out Double leverUp_stat1;

  connect leverUp_stat -> leverUp_stat1;
              }
instance FAS_Input fAS_Input;
              component UnitDelay1_6 {
                port
                  in Double valueIn,
                  out Double valueOut;

              }
instance UnitDelay1_6 unitDelay1_6;
  connect limiter.vMax_kmh -> velocityControl.vMax_kmh;
  connect fAS_Input.leverUp_stat1 -> limiter.leverUp_stat;
  connect limiter.out2 -> unitDelay1_6.valueIn;
  connect unitDelay1_6.valueOut -> limiter.in3;
  connect limiter.limiter_active_b -> limiter_active_b;
  connect leverUp_stat -> fAS_Input.leverUp_stat;
            }
instance DEMO_FAS_Funktion dEMO_FAS_Funktion;
            component DEMO_FAS_Input {
              port
                in Double leverUp_statIn6,
                out Double leverUp_stat;

  connect leverUp_statIn6 -> leverUp_stat;
            }
instance DEMO_FAS_Input dEMO_FAS_Input;
            component DEMO_FAS_Output {
              port
                in Boolean limiter_active_b,
                out Boolean limiter_active_bOut6;

  connect limiter_active_b -> limiter_active_bOut6  ;
            }
instance DEMO_FAS_Output dEMO_FAS_Output;
  connect dEMO_FAS_Input.leverUp_stat -> dEMO_FAS_Funktion.leverUp_stat;
  connect dEMO_FAS_Funktion.limiter_active_b -> dEMO_FAS_Output.limiter_active_b;
  connect _LeverUp_stat -> dEMO_FAS_Input.leverUp_statIn6;
  connect dEMO_FAS_Output.limiter_active_bOut6 -> _Limiter_active_b;
          }
instance DEMO_FAS_3 dEMO_FAS_3;
        }
instance Subsystem subsystem;
      }
instance DEMO_FAS_2 dEMO_FAS_2;
    }
instance DEMO_FAS_1 dEMO_FAS_1;
  }


























































































