/* (c) https://github.com/MontiCore/monticore */
package daimler.v4;
// The C&C model Oeffentlicher_Demonstrator_FAS_v04 satisfies the view FA15.
  component Oeffentlicher_Demonstrator_FAS_v04FA15 {
    component DEMO_FAS_1 {
      port
        in Double v_Sign_kmh,
        out Double acceleration_pc,
        out Boolean opti_warn_b;

      component DEMO_FAS_2 {
        port
          in Double _V_Sign_kmh,
          out Double _Acceleration_pc,
          out Boolean _Opti_warn_b;

        component Subsystem {
          port
            in Double _V_Sign_kmh,
            out Double _Acceleration_pc,
            out Boolean _Opti_warn_b;

          component DEMO_FAS_3 {
            port
              in Double _V_Sign_kmh,
              out Double _Acceleration_pc,
              out Boolean _Opti_warn_b;

            component DEMO_FAS_Funktion {
              port
                in Double v_Sign_kmh,
                out Double acceleration_pc,
                out Boolean opti_warn_b;

              component FollowToStop {
                port
                  out Double fTS_Abstand_soll_m;

              }
instance FollowToStop followToStop;
              component Distronic {
                port
                  in Double fTS_Abstand_soll_m,
                  out Double brakeForce_Distronic_pc;

              }
instance Distronic distronic;
              component Tempomat {
                port
                  out Double v_CC_delta_kmh;

              }
instance Tempomat tempomat;
              component EmergencyBrake {
                port
                  out Double brakeForce_Emergency_pc;

              }
instance EmergencyBrake emergencyBrake;
              component Limiter {
                port
                  in Double v_Sign_kmh,
                  out Double vMax_kmh;

              }
instance Limiter limiter;
              component BrakeAssistant {
                port
                  out Double brakeForceBoosted_pc;

              }
instance BrakeAssistant brakeAssistant;
              component Distancewarner {
                port
                  out Boolean opti_warn_b;

              }
instance Distancewarner distancewarner;
              component VelocityControl {
                port
                  in Double brakeForce_Distronic_pc,
                  in Double v_CC_delta_kmh,
                  in Double brakeForce_Emergency_pc,
                  in Double vMax_kmh,
                  in Double brakeForceBoosted_pc,
                  out Double acceleration_pc;

              }
instance VelocityControl velocityControl;
              component FAS_Input {
                port
                  in Double v_Sign_kmh,
                  out Double v_Sign_kmh1;

  connect v_Sign_kmh -> v_Sign_kmh1;
              }
instance FAS_Input fAS_Input;
  connect followToStop.fTS_Abstand_soll_m -> distronic.fTS_Abstand_soll_m;
  connect distronic.brakeForce_Distronic_pc ->   velocityControl.brakeForce_Distronic_pc;
  connect limiter.vMax_kmh -> velocityControl.vMax_kmh;
  connect brakeAssistant.brakeForceBoosted_pc ->   velocityControl.brakeForceBoosted_pc;
  connect tempomat.v_CC_delta_kmh -> velocityControl.v_CC_delta_kmh;
  connect emergencyBrake.brakeForce_Emergency_pc ->   velocityControl.brakeForce_Emergency_pc;
  connect velocityControl.acceleration_pc -> acceleration_pc;
  connect fAS_Input.v_Sign_kmh1 -> limiter.v_Sign_kmh;
  connect v_Sign_kmh -> fAS_Input.v_Sign_kmh;
  connect distancewarner.opti_warn_b -> opti_warn_b;
            }
instance DEMO_FAS_Funktion dEMO_FAS_Funktion;
            component DEMO_FAS_Input {
              port
                in Double v_Sign_kmhIn9,
                out Double v_Sign_kmh;

  connect v_Sign_kmhIn9 -> v_Sign_kmh;
            }
instance DEMO_FAS_Input dEMO_FAS_Input;
            component DEMO_FAS_Output {
              port
                in Double acceleration_pc,
                out Double acceleration_pcOut2,
                in Boolean opti_warn_b,
                out Boolean opti_warn_bOut7;

  connect acceleration_pc -> acceleration_pcOut2;
  connect opti_warn_b -> opti_warn_bOut7;
            }
instance DEMO_FAS_Output dEMO_FAS_Output;
  connect dEMO_FAS_Input.v_Sign_kmh -> dEMO_FAS_Funktion.v_Sign_kmh;
  connect dEMO_FAS_Funktion.acceleration_pc -> dEMO_FAS_Output.acceleration_pc;
  connect dEMO_FAS_Funktion.opti_warn_b -> dEMO_FAS_Output.opti_warn_b;
  connect _V_Sign_kmh -> dEMO_FAS_Input.v_Sign_kmhIn9;
  connect dEMO_FAS_Output.acceleration_pcOut2 -> _Acceleration_pc;
  connect dEMO_FAS_Output.opti_warn_bOut7 -> _Opti_warn_b;
          }
instance DEMO_FAS_3 dEMO_FAS_3;
  connect _V_Sign_kmh -> dEMO_FAS_3._V_Sign_kmh;
  connect dEMO_FAS_3._Acceleration_pc -> _Acceleration_pc;
  connect dEMO_FAS_3._Opti_warn_b -> _Opti_warn_b;
        }
instance Subsystem subsystem;
  connect _V_Sign_kmh -> subsystem._V_Sign_kmh;
  connect subsystem._Acceleration_pc -> _Acceleration_pc;
  connect subsystem._Opti_warn_b -> _Opti_warn_b;
      }
instance DEMO_FAS_2 dEMO_FAS_2;
  connect v_Sign_kmh -> dEMO_FAS_2._V_Sign_kmh;
  connect dEMO_FAS_2._Acceleration_pc -> acceleration_pc;
  connect dEMO_FAS_2._Opti_warn_b -> opti_warn_b;
    }
instance DEMO_FAS_1 dEMO_FAS_1;
    component Umgebung {
      port
        out Double v_Sign_kmh;

    }
instance Umgebung umgebung;
  connect umgebung.v_Sign_kmh -> dEMO_FAS_1.v_Sign_kmh;
  }































