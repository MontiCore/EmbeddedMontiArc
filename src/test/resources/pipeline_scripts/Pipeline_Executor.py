# generated by pipeline_executor.ftl

import sys
import argparse
sys.path.append("./steps")
sys.path.append("./schema_apis")
sys.path.append("../../src/test/resources/experiments/steps")
sys.path.append("../../src/test/resources/experiments/schema_apis")
sys.path.append("./configurations")
sys.path.append("./backend")

from Supervised_Schema_API import Supervised_Schema_API
from Training_Configuration_LeNetNet import Training_Configuration_LeNetNet
from CNNCreator_LeNet import CNNCreator_LeNet
from HDF5_Component import HDF5_Component
from MySupervisedTrainer import MySupervisedTrainer
from MyEvaluation import MyEvaluation

class Pipeline_Executor:
    def __init__(self):
        pass
    def initialise_data_access_step(self,datasource, schema_api, model_dir, cli_arguments):
        return HDF5_Component(datasource=datasource, schema_api= schema_api , model_dir = model_dir, cli_arguments=cli_arguments)
    def initialise_training_step(self,trainData, network, schema_api, model_dir, cli_arguments):
        return MySupervisedTrainer(trainData=trainData, network= network, schema_api= schema_api , model_dir = model_dir, cli_arguments=cli_arguments)
    def initialise_evaluation_step(self,testData, trainedModel, schema_api, model_dir, cli_arguments):
        return MyEvaluation(testData=testData, trainedModel= trainedModel, schema_api= schema_api , model_dir = model_dir, cli_arguments=cli_arguments)

    def execute(self, args):
        print("Starting pipeline execution")
        schema_api= Supervised_Schema_API()
        schema_api.set_training_configuration(Training_Configuration_LeNetNet())
        data_access_step = self.initialise_data_access_step( datasource='path.to.source', schema_api = schema_api, model_dir ='./model/mnist/', cli_arguments=args)
        trainData, testData=data_access_step.execute()

        training_step = self.initialise_training_step( trainData=trainData,network=CNNCreator_LeNet(), schema_api = schema_api, model_dir ='./model/mnist/', cli_arguments=args)
        trainedModel, accuracy, loss=training_step.execute()

        evaluation_step = self.initialise_evaluation_step( testData=testData, trainedModel=trainedModel, schema_api = schema_api, model_dir ='./model/mnist/', cli_arguments=args)
        accuracy=evaluation_step.execute()

        print("Execution finished")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--tracking_backends", type=str)
    parser.add_argument("--mlflow_run_id", type=str)
    parser.add_argument("--mlflow_tracking_uri", type=str)
    args = parser.parse_args()
    Pipeline_Executor().execute(args)