# generated by pipeline_executor.ftl


import sys
sys.path.append("../../src/test/resources/experiments/steps")
sys.path.append("../../src/test/resources/experiments/schema_apis")
sys.path.append("./configurations")
sys.path.append("./backend")

from  Supervised_Schema_API import Supervised_Schema_API
from  Training_Configuration_mnist_mnistClassifier_net import Training_Configuration_mnist_mnistClassifier_net
from  CNNNet_mnist_mnistClassifier_net import CNNNet_mnist_mnistClassifier_net
from  HDF5DataAccess import HDF5DataAccess
from  MySupervisedTrainer import MySupervisedTrainer
from  MyEvaluation import MyEvaluation

class Pipeline_Executor:
    def __init__(self):
        pass
    def initialise_data_access_step(self,datasource, schema_api):
        return HDF5DataAccess(datasource, schema_api)
    def initialise_training_step(self,trainData, network, schema_api, model_dir, model_prefix):
        return MySupervisedTrainer(trainData = trainData, network = network, schemaApi = schema_api, model_dir = model_dir, model_prefix =model_prefix)
    def initialise_evaluation_step(self,test_loader, trained_model_path, schema_api):
        return MyEvaluation(test_loader = test_loader, trained_model_path =trained_model_path, schema_api =schema_api)

    def execute(self):
        print("Starting pipeline execution")
        schema_api= Supervised_Schema_API()
        schema_api.set_training_configuration(Training_Configuration_mnist_mnistClassifier_net())
        data_access_step = self.initialise_data_access_step( datasource='../../src/test/resources/experiments/data/', schema_api = schema_api)
        trainData, test_loader=data_access_step.execute()

        training_step = self.initialise_training_step( trainData=trainData,network=CNNNet_mnist_mnistClassifier_net(), schema_api = schema_api, model_dir="./model/mnist.LeNetNetwork/", model_prefix="model")
        trained_model_path, accuracy, Loss=training_step.execute()

        evaluation_step = self.initialise_evaluation_step(test_loader=test_loader, trained_model_path=trained_model_path, schema_api = schema_api)
        accuracy=evaluation_step.execute()

        print("Execution finished")

Pipeline_Executor().execute()