/* (c) https://github.com/MontiCore/monticore */
// Kinematic Bicycle model
// @author Christoph Richter

package de.rwth.monticar.mpc.bicycle;

component BicycleMPC<Q dt = 0.1, Q l_f = 1, Q l_r = 1, Z hp = 1>
{
    ports
        // state vector z
        in Q                                        x,
        in Q                                        y,
        in Q                                        yaw,
        in Q (0.0 m/s : 0.01 m/s : oo m/s)          v,

        // reference trajectory
        in Q^{4, 5}                                z_ref,

        // previous control in/output
        in Q (-3.0 m/s^2 : 2.5 m/s^2)               a_prev,
        in Q (-0.785 rad : 0.001 rad : 0.785 rad)   steering_prev,

        out Q (-3.0 m/s^2 : 2.5 m/s^2)              a,
        out Q (-0.785 rad : 0.001 rad : 0.785 rad)  steering;

    implementation Math
    {
        // workaround for generator bug -> declare generic type arguments
        Q dt = 0.1 s;
        Q l_f = 1 m;
        Q l_r = 1 m;
        Z hp = 1;

        // create state vector
        Q^{4} z;
        z(1) = x;
        z(2) = y;
        z(3) = yaw;
        z(4) = v;
        // create previous input vector
        Q^{2} u_prev;
        u_prev(1) = a_prev;
        u_prev(2) = steering_prev;

        // static bounds on u
        Q^{2} u_min = [0.0 m/s^2; -0.785];
        Q^{2} u_max = [2.5 m/s^2; 0.785];
        Q^{2} du_min = [-3 m/s^3; -0.5];
        Q^{2} du_max = [2.5 m/s^3; 0.5];

        // define cost matrices
        Q^{4,4} costQ = eye(4,4);
        Q^{2,2} costR = eye(2,2);
        Q^{2,2} costRBar = eye(2,2);

        Q^{4,1} z_reft;
        z_reft(:, 1) = z_ref(:,1);

        // optimization variable
        Q^{2, 1} u = zeros(2,1);

        Q^{4, 1} zt = [z(1) + z(4) * cos(z(3) + atan(l_r / (l_f + l_r) * tan(u(2, 1)))) * dt;

                       z(2) + z(4) * sin(z(3) + atan(l_r / (l_f + l_r) * tan(u(2, 1))))  * dt;

                       z(3) + z(4) / l_r * sin(atan(l_r / (l_f + l_r) * tan(u(2, 1))))  * dt;

                       z(4) + u(1,1)  * dt];

        // minimization statement
        Q error = minimize(u)
          //abs(sum((zt - z_reft)' * costQ * (zt - z_reft)));
          abs(sum(zt - z_reft));
        subject to
          for i=1:hp
            u_min(1) <= u(1,i) <= u_max(1);
            u_min(2) <= u(2,i) <= u_max(2);
          end
        end
        // assign output
        a = u(1,1);
        steering = u(2,1);
    }
}
