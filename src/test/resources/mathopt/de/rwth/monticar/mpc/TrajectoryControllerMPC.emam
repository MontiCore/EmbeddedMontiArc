package de.rwth.monticar.mpc;

import de.rwth.monticar.mpc.bicycle.*;
import de.rwth.monticar.mpc.trajectory.*;

component TrajectoryControllerMPC {
  port
    // length of simulation time frame
    in  Q (0.0 s : 0.001 s : 1.0 s)              timeIncrement,

    // current velocity
    in  Q (0.0 m/s : 0.01 m/s : oo m/s)          currentVelocity,

    // current vehicle's position
    in  Q (-oo m : 0.01 m : oo m)                x,
    in  Q (-oo m : 0.01 m : oo m)                y,

    // current vehicle's yaw angle
    in  Q (-oo rad : 0.001 rad : oo rad)         compass,

    // current engine actuation
    in  Q (0.0 m/s : 0.001m/s : 2.5 m/s)         currentEngine,

    // current steering actuation
    // negative value: left turn
    // positive value: right turn
    in  Q (-0.785 rad : 0.001 rad : 0.785 rad)   currentSteering,

    // current brakes actuation
    in  Q (0.0 m/s : 0.001 m/s : 3.0 m/s)        currentBrakes,

    // planned trajectory (with look ahead 100-200m)
    // represented by two arrays trajectory_x[] and trajectory_y[]
    // which both have length trajectory_length
    in  Z (0 : 100)                              trajectory_length,
    in  Q (-oo m : 0.01 m : oo m) ^ {1,100}      trajectory_x,
    in  Q (-oo m : 0.01 m : oo m) ^ {1,100}      trajectory_y,

    // output actuation commands
    out Q (0.0 m/s : 0.001 m/s : 2.5 m/s)        engine,
    out Q (-0.785 rad : 0.001 rad : 0.785 rad)   steering,
    out Q (0.0 m/s : 0.001 m/s : 3.0 m/s)        brakes;

  // trajectory planer
  instance PathPlaner                            pathPlanner;

  // mpc trajectory controller
	instance BicycleMPC               		         mpc;

	// actuator controller
  instance ActuatorController                    actuatorController;

  // connect trajectory planer
	connect x                                      ->      pathPlanner.x;
  connect y                                      ->      pathPlanner.y;
  connect compass                                ->      pathPlanner.yaw;
  connect currentVelocity                        ->      pathPlanner.v;

  connect trajectory_length                      ->      pathPlanner.trajectory_length;
  connect trajectory_x                           ->      pathPlanner.trajectory_x;
  connect trajectory_y                           ->      pathPlanner.trajectory_y;

	// connect mpc trajectory controller
  connect x												               ->      mpc.x;
  connect y                                      ->      mpc.y;
	connect compass                                ->      mpc.yaw;
	connect currentVelocity	   					           -> 	   mpc.v;
	connect pathPlanner.z_ref                      ->      mpc.z_ref;

	connect mpc.a                                  ->      mpc.a_prev;
  connect mpc.steering                           ->      mpc.steering_prev;

  // mpc to actuator controller
  connect mpc.a                                  ->      actuatorController.acceleration;
  connect mpc.steering                           ->      actuatorController.steering_angle;

	// output
	connect actuatorController.engine              ->      engine;
  connect actuatorController.steering            ->      steering;
  connect actuatorController.brakes              ->      brakes;

}
