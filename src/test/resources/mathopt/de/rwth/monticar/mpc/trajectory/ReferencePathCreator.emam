// ReferencePath: Created a reference path for the prediction horizon of the mpc controller
// @author Christoph Richter

package de.rwth.monticar.mpc.trajectory;

component ReferencePathCreator<Q dt = 0.1>
{
    ports
        // state vector z
        in Q                                        x,
        in Q                                        y,
        in Q (0.0 m/s : 0.01 m/s : oo m/s)          desiredVelocity,

        // trajectory trimmed to current position
        in  Z (0 : 100)                             trajectory_length,
        in  Q (-oo m : 0.01 m : oo m) ^ {1,100}     trajectory_x,
        in  Q (-oo m : 0.01 m : oo m) ^ {1,100}     trajectory_y,

        // reference trajectory for prediction horizon
        out Q^{4, 5}                                   z_ref;

    implementation Math
    {
        Z hp = 5; // prediction horizon
        Q dt = 0.1 s; // time increment;

        Q^{2} segmentStart;
        segmentStart(1) = trajectory_x(1);
        segmentStart(2) = trajectory_y(1);

        Z segmentIdx = 2;

        Q^{2} segmentEnd;
        segmentEnd(1) = trajectory_x(segmentIdx);
        segmentEnd(2) = trajectory_y(segmentIdx);

        // yaw angle heading to the next waypoint
        Q^{2} dir;
        dir(1) = segmentStart(1) - x;
        dir(2) = segmentStart(2) - y;

        // assign first state
        z_ref(1,1) = segmentStart(1);
        z_ref(2,1) = segmentStart(2);
        z_ref(3,1) = atan2(dir(2), dir(1));
        z_ref(4,1) = desiredVelocity;

        for i = 2:hp

          // calculate desired waypoint distance dependent on desired velocity and time increment
          Q waypointDistance = desiredVelocity * dt;

          // calculate possible direction vector
          dir(1) = cos(z_ref(3, i - 1));
          dir(2) = sin(z_ref(3, i - 1));

          // calculate possible next state
          Q^{2} next;
          Q^{2} possibleNext;
          possibleNext(1) = z_ref(1, i - 1) + dir(1) * waypointDistance;
          possibleNext(2) = z_ref(2, i - 1) + dir(2) * waypointDistance;

          // check if trajectory point is reached
          if sum(segmentEnd - possibleNext) > 0
            // possible next is fine
            next = possibleNext;
          else
            // use segment end
            next(1) = segmentEnd(1);
            next(2) = segmentEnd(2);
            // assign next segment
            segmentIdx = segmentIdx + 1;
            segmentStart = segmentEnd;
            segmentEnd(1) = trajectory_x(segmentIdx);
            segmentEnd(2) = trajectory_y(segmentIdx);
            // update direction
            dir(1) = segmentEnd(1) - segmentStart(1);
            dir(2) = segmentEnd(2) - segmentStart(2);
          end

          // assign next
          z_ref(1,i) = next(1);
          z_ref(2,i) = next(2);
          z_ref(3,i) = atan2(dir(2), dir(1));
          z_ref(4,i) = desiredVelocity;

        end
    }
}