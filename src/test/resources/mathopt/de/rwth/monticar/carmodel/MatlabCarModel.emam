package de.rwth.monticar.carmodel;

component MatlabCarModel<Q dt = 0.1 s, Q m = 2000 kg, Q a = 1.5 m, Q b = 1.5 m, Q cx = 150000, Q cy = 40000, Q ca =  0.5>
{
    ports
      // current vehicle state
      in Q                                      currentVelocityX,
      in Q                                      currentVelocityY,
      in Q                                      currentYawRate,

      // input
      in Q (-37° : 37°)                         steeringAngle,
      in Q^{4}                                  tireSlipRatio, // front left, front right, rear left, rear right

      // output
      out Q                                     predictedVelocityX,
      out Q                                     predictedVelocityY,
      out Q                                     predictedYawRate;

    implementation Math
    {
      // calculate state delta
      Q dvx = currentVelocityY * currentYawRate + 1/m *(cx* (tireSlipRatio(1) + tireSlipRatio(2)) * cos(steeringAngle)
            - 2 * cy * (steeringAngle - (currentVelocityY + a * currentYawRate) / currentVelocityX ) * sin(steeringAngle)
            + cx*(tireSlipRatio(3) + tireSlipRatio(4)) - ca * currentVelocityX * currentVelocityX);

      Q dvy = -currentVelocityX * currentYawRate + 1/m * (cx * (tireSlipRatio(1) + tireSlipRatio(2)) * sin(steeringAngle)
              + 2 * cy * (steeringAngle - (currentVelocityY + a* currentYawRate) / currentVelocityX)*cos(steeringAngle)
              + 2 * cy * (b * currentYawRate - currentVelocityY) / currentVelocityX);

      Q dYawRate = 1 / ((0.5 * (a + b)) * (0.5 * (a + b)) * m)
                   * (a * (cx * (tireSlipRatio(1) + tireSlipRatio(2) * sin(steeringAngle)
                   + 2 * cy * (steeringAngle - (currentVelocityY + a * currentYawRate) / currentVelocityX) * cos(steeringAngle))))
                   - (2 * b * cy * (b * currentYawRate - currentVelocityY) / currentVelocityX);

      // assign predicted state
      predictedVelocityX = currentVelocityX + dvx * dt;
      predictedVelocityY = currentVelocityY + dvy * dt;
      predictedYawRate = currentYawRate + dYawRate * dt;
    }
}