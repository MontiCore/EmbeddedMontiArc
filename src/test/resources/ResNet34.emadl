component ResNet34{
    ports in Z(0:255)^{3, 224, 224} image,
         out Q(0:1)^{1000,1,1} predictions;

    implementation CNN {
        def conv(filter, channels, stride=1, act=true){
            Convolution(kernel=(filter,filter), channels=channels, stride=(stride,stride)) ->
            BatchNorm() ->
            Relu(?=act)
        }
        def skip(channels, stride){
            Convolution(kernel=(1,1), channels=channels, stride=(stride,stride)) ->
            BatchNorm()
        }
        def resLayer(channels, stride=1){
            (
                conv(filter=3, channels=channels, stride=stride) ->
                conv(filter=3, channels=channels, act=false)
            |
                skip(channels=channels, stride=stride, ? = (stride != 1))
            ) ->
            Add() ->
            Relu()
        }

        image ->
        conv(filter=7, channels=64, stride=2) ->
        Pooling(pool_type="max", kernel=(3,3), stride=(2,2)) ->
        resLayer(channels=64, ->=3) ->
        resLayer(channels=128, stride=2) ->
        resLayer(channels=128, ->=3) ->
        resLayer(channels=256, stride=2) ->
        resLayer(channels=256, ->=5) ->
        resLayer(channels=512, stride=2) ->
        resLayer(channels=512, ->=2) ->
        GlobalPooling(pool_type="avg") ->
        FullyConnected(units=1000) ->
        Softmax() ->
        predictions
    }
}