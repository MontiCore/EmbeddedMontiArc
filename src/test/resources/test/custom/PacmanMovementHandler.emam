package test.custom;

component PacmanMovementHandler<N tilesMaxX = 16, N tilesMaxY = 16>{
    port in B moveUp,
         in B moveDown,
         in B moveLeft,
         in B moveRight,
         in N pacmanPositionX,
         in N pacmanPositionY,
         in N pacmanPositionMaxX,
         in N pacmanPositionMaxY,
         in Z^{tilesMaxX,tilesMaxY} world,
         out N pacmanNextPositionX,
         out N pacmanNextPositionY;

    instance PacmanMovementPositionCalculator pacmanMovementPositionCalculator;
    instance PacmanMovementCollisionChecker pacmanMovementCollisionChecker;
    instance PacmanMovementController controller;

    connect moveUp -> pacmanMovementPositionCalculator.moveUp;
    connect moveDown -> pacmanMovementPositionCalculator.moveDown;
    connect moveLeft -> pacmanMovementPositionCalculator.moveLeft;
    connect moveRight-> pacmanMovementPositionCalculator.moveRight;

    connect world -> pacmanMovementCollisionChecker.world;
    connect pacmanPositionX -> pacmanMovementPositionCalculator.pacmanPositionX;
    connect pacmanPositionY -> pacmanMovementPositionCalculator.pacmanPositionY;

    connect pacmanPositionX -> pacmanMovementCollisionChecker.pacmanPositionX;
    connect pacmanPositionY -> pacmanMovementCollisionChecker.pacmanPositionY;
    connect pacmanMovementPositionCalculator.pacmanNextPositionX -> pacmanMovementCollisionChecker.pacmanPossibleNextPositionX;
    connect pacmanMovementPositionCalculator.pacmanNextPositionY -> pacmanMovementCollisionChecker.pacmanPossibleNextPositionY;

    connect pacmanMovementCollisionChecker.pacmanChosenNextPositionX -> controller.pacmanPositionX;
    connect pacmanMovementCollisionChecker.pacmanChosenNextPositionY -> controller.pacmanPositionY;


    connect pacmanMovementCollisionChecker.pacmanChosenNextPositionX -> pacmanNextPositionX;
    connect pacmanMovementCollisionChecker.pacmanChosenNextPositionY -> pacmanNextPositionY;


}