/* (c) https://github.com/MontiCore/monticore */
package cNNSegment;

component SmallSeg<Z(2:oo) classes = 10>{
    ports in Z(0:255)^{1, 56, 56} data,
         out Q(0:1)^{classes, 56, 56} softmax;

        implementation CNN {

            def conv(filter, channels, stride=(1,1)){
                Convolution(kernel=(filter,filter), channels=channels, stride=stride) ->
                Relu()
            }

            data ->
            conv(filter=3, channels=32) ->
            conv(filter=3, channels=32) ->
            Pooling(pool_type="max", kernel=(2,2), stride=(2,2)) ->

            (
                conv(filter=3, channels=64) ->
                conv(filter=3, channels=64) ->
                Pooling(pool_type="max", kernel=(2,2), stride=(2,2)) ->

                (

                    conv(filter=3, channels=128) ->
                    conv(filter=3, channels=128) ->
                    Pooling(pool_type="max", kernel=(2,2), stride=(2,2)) ->

                    conv(filter=1, channels=1024) ->
                    Dropout(p=0.5) ->
                    conv(filter=1, channels=1024) ->
                    Dropout(p=0.5) ->
                    Convolution(kernel=(1,1), channels=classes) ->
                    TransConv(kernel=(2,2), channels=classes, stride=(2,2))

                    |

                    Convolution(kernel=(1,1), channels=classes)

                ) ->

                Concatenate() ->
                TransConv(kernel=(4,4), channels=classes, stride=(2,2))

                |

                Convolution(kernel=(1,1), channels=classes)

            ) ->

            Concatenate() ->
            TransConv(kernel=(4,4), channels=classes, stride=(2,2)) ->

            Softmax() ->
            softmax;
        }
  }
