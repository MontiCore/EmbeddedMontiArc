// 6 nimmt!

//----
// Roles
//----
(role red)
(role blue)
(role green)
(role yellow)

(role random)

(type player red)
(type player blue)
(type player green)
(type player yellow)

(type stack a)
(type stack b)
(type stack c)
(type stack d)

(type posS 1)
(type posS 2)
(type posS 3)
(type posS 4)
(type posS 5)
(type posS 6)

(typecombine posH posS c_h)

(type c_a 0)
(type c_h 7)
(type c_h 8)
(type c_h 9)
(type c_h 10)
(type c_t 11)
(type c_t 12)
(type c_t 13)
(type c_t 14)
(type c_t 15)
(type c_t 16)
(type c_t 17)
(type c_t 18)
(type c_t 19)
(type c_t 20)
(type c_t 21)
(type c_t 22)
(type c_t 23)
(type c_t 24)
(type c_t 25)
(type c_t 26)
(type c_t 27)
(type c_t 28)
(type c_t 29)
(type c_t 30)
(type c_t 31)
(type c_t 32)
(type c_t 33)
(type c_t 34)
(type c_t 35)
(type c_t 36)
(type c_t 37)
(type c_t 38)
(type c_t 39)
(type c_t 40)
(type c_t 41)
(type c_t 42)
(type c_t 43)
(type c_t 44)
(type c_t 45)
(type c_t 46)
(type c_t 47)
(type c_t 48)
(type c_t 49)
(type c_t 50)
(type c_t 51)
(type c_t 52)
(type c_t 53)
(type c_t 54)
(type c_t 55)
(type c_t 56)
(type c_t 57)
(type c_t 58)
(type c_t 59)
(type c_t 60)
(type c_t 61)
(type c_t 62)
(type c_t 63)
(type c_t 64)
(type c_t 65)
(type c_t 66)
(type c_t 67)
(type c_t 68)
(type c_t 69)
(type c_t 70)
(type c_t 71)
(type c_t 72)
(type c_t 73)
(type c_t 74)
(type c_t 75)
(type c_t 76)
(type c_t 77)
(type c_t 78)
(type c_t 79)
(type c_t 80)
(type c_t 81)
(type c_t 82)
(type c_t 83)
(type c_t 84)
(type c_t 85)
(type c_t 86)
(type c_t 87)
(type c_t 88)
(type c_t 89)
(type c_t 90)
(type c_t 91)
(type c_t 92)
(type c_t 93)
(type c_t 94)
(type c_t 95)
(type c_t 96)
(type c_t 97)
(type c_t 98)
(type c_t 99)
(type c_t 100)
(type c_t 101)
(type c_t 102)
(type c_t 103)
(type c_t 104)
(type c_a 1000)

(typecombine c_c c_t posH)
(typecombine card c_a c_c)

(type p_t 105)
(type p_t 106)
(type p_t 107)
(type p_t 108)
(type p_t 109)
(type p_t 110)
(type p_t 111)
(type p_t 112)
(type p_t 113)
(type p_t 114)
(type p_t 115)
(type p_t 116)
(type p_t 117)
(type p_t 118)
(type p_t 119)
(type p_t 120)
(type p_t 121)
(type p_t 122)
(type p_t 123)
(type p_t 124)
(type p_t 125)
(type p_t 126)
(type p_t 127)
(type p_t 128)
(type p_t 129)
(type p_t 130)
(type p_t 131)
(type p_t 132)
(type p_t 133)
(type p_t 134)
(type p_t 135)
(type p_t 136)
(type p_t 137)
(type p_t 138)
(type p_t 139)
(type p_t 140)
(type p_t 141)
(type p_t 142)
(type p_t 143)
(type p_t 144)
(type p_t 145)
(type p_t 146)
(type p_t 147)
(type p_t 148)
(type p_t 149)
(type p_t 150)
(type p_t 151)
(type p_t 152)
(type p_t 153)
(type p_t 154)
(type p_t 155)
(type p_t 156)
(type p_t 157)
(type p_t 158)
(type p_t 159)
(type p_t 160)
(type p_t 161)
(type p_t 162)
(type p_t 163)
(type p_t 164)
(type p_t 165)
(type p_t 166)
(type p_t 167)
(type p_t 168)
(type p_t 169)
(type p_t 170)
(type p_t 171)

(typecombine points p_t card)

//----
//Initial State
//----
//Before dealing cards

//all, red, blue, green, yellow, random

(init (control random))

//init points
(init (currPoints red 0))
(init (currPoints blue 0))
(init (currPoints green 0))
(init (currPoints yellow 0))

// 4 Stacks
//(stack <stack#> <stack pos>)
(init (stack a 1 0))
(init (stack a 2 0))
(init (stack a 3 0))
(init (stack a 4 0))
(init (stack a 5 0))
(init (stack a 6 0))

(init (stack b 1 0))
(init (stack b 2 0))
(init (stack b 3 0))
(init (stack b 4 0))
(init (stack b 5 0))
(init (stack b 6 0))

(init (stack c 1 0))
(init (stack c 2 0))
(init (stack c 3 0))
(init (stack c 4 0))
(init (stack c 5 0))
(init (stack c 6 0))

(init (stack d 1 0))
(init (stack d 2 0))
(init (stack d 3 0))
(init (stack d 4 0))
(init (stack d 5 0))
(init (stack d 6 0))

//4 Hands, 10 cards each
// (hand <role> <pos> <card>)
(init (sees red (hand red 1 0)))
(init (sees red (hand red 2 0)))
(init (sees red (hand red 3 0)))
(init (sees red (hand red 4 0)))
(init (sees red (hand red 5 0)))
(init (sees red (hand red 6 0)))
(init (sees red (hand red 7 0)))
(init (sees red (hand red 8 0)))
(init (sees red (hand red 9 0)))
(init (sees red (hand red 10 0)))

(init (sees blue (hand blue 1 0)))
(init (sees blue (hand blue 2 0)))
(init (sees blue (hand blue 3 0)))
(init (sees blue (hand blue 4 0)))
(init (sees blue (hand blue 5 0)))
(init (sees blue (hand blue 6 0)))
(init (sees blue (hand blue 7 0)))
(init (sees blue (hand blue 8 0)))
(init (sees blue (hand blue 9 0)))
(init (sees blue (hand blue 10 0)))

(init (sees green (hand green 1 0)))
(init (sees green (hand green 2 0)))
(init (sees green (hand green 3 0)))
(init (sees green (hand green 4 0)))
(init (sees green (hand green 5 0)))
(init (sees green (hand green 6 0)))
(init (sees green (hand green 7 0)))
(init (sees green (hand green 8 0)))
(init (sees green (hand green 9 0)))
(init (sees green (hand green 10 0)))

(init (sees yellow (hand yellow 1 0)))
(init (sees yellow (hand yellow 2 0)))
(init (sees yellow (hand yellow 3 0)))
(init (sees yellow (hand yellow 4 0)))
(init (sees yellow (hand yellow 5 0)))
(init (sees yellow (hand yellow 6 0)))
(init (sees yellow (hand yellow 7 0)))
(init (sees yellow (hand yellow 8 0)))
(init (sees yellow (hand yellow 9 0)))
(init (sees yellow (hand yellow 10 0)))

(init (inPlay red 1000))
(init (inPlay blue 1000))
(init (inPlay green 1000))
(init (inPlay yellow 1000))

//------------
//Stack Functions
//------------
(<= (isFull stack:?stack)
    (not (true (stack ?stack 6 0)))
)

(<= (isFull stack:?stack)
    (does ?player (put ?stack 6))
)

//Atleast one smaller stack; One function for each possible stack to optimize runtime
(<= (isMatchingStack a card:?card)
    (lastCard a ?pos1 ?card1)
    (lastCard b ?pos2 ?card2)
    (lastCard c ?pos3 ?card3)
    (lastCard d ?pos4 ?card4)
    //is ?card closest to ?stack ?
    (less ?card1 ?card)
    (not (between ?card2 ?card1 ?card))
    (not (between ?card3 ?card1 ?card))
    (not (between ?card4 ?card1 ?card))
)

(<= (isMatchingStack b card:?card)
    (lastCard a ?pos1 ?card1)
    (lastCard b ?pos2 ?card2)
    (lastCard c ?pos3 ?card3)
    (lastCard d ?pos4 ?card4)
    //is ?card closest to ?stack ?
    (less ?card2 ?card)
    (not (between ?card1 ?card2 ?card))
    (not (between ?card3 ?card2 ?card))
    (not (between ?card4 ?card2 ?card))
)

(<= (isMatchingStack c card:?card)
    (lastCard a ?pos1 ?card1)
    (lastCard b ?pos2 ?card2)
    (lastCard c ?pos3 ?card3)
    (lastCard d ?pos4 ?card4)
    //is ?card closest to ?stack ?
    (less ?card3 ?card)
    (not (between ?card2 ?card3 ?card))
    (not (between ?card1 ?card3 ?card))
    (not (between ?card4 ?card3 ?card))
)

(<= (isMatchingStack d card:?card)
    (lastCard a ?pos1 ?card1)
    (lastCard b ?pos2 ?card2)
    (lastCard c ?pos3 ?card3)
    (lastCard d ?pos4 ?card4)
    //is ?card closest to ?stack ?
    (less ?card4 ?card)
    (not (between ?card2 ?card4 ?card))
    (not (between ?card3 ?card4 ?card))
    (not (between ?card1 ?card4 ?card))
)

//No smaller stack => any stack returns true
(<= (isMatchingStack stack:?stack card:?card)
    (lastCard a ?pos1 ?card1)
    (lastCard b ?pos2 ?card2)
    (lastCard c ?pos3 ?card3)
    (lastCard d ?pos4 ?card4)
    (not (less ?card1 ?card))
    (not (less ?card2 ?card))
    (not (less ?card3 ?card))
    (not (less ?card4 ?card))
)

//Determine the last card in a stack
(<= (lastCard stack:?stack posS:?pos card:?card)
    (true (stack ?stack ?pos ?card))
    //?pos has a card
    (distinct ?card 0)
    //following slot empty
    (succ ?pos ?posP)
    (true (stack ?stack ?posP 0))
    //previous slot filled
    (succ ?posM ?pos)
    (not (true (stack ?stack ?posM 0)))
)

//special case slot 1
(<= (lastCard stack:?stack 1 card:?card)
    (true (stack ?stack 1 ?card))
    (true (stack ?stack 2 0))
)

//Util Functions

//Return points of the given card, return 0 if not a card
(<= (hasPoints card:?card points:?points)
    (isCard ?card ?points)
)

(<= (hasPoints card:?card 0)
    (not (isCard ?card ?points))
)

//Determine if ?cardMiddle is greater than ?cardLeft and smaller than ?cardRight
(<= (between card:?cardMiddle card:?cardLeft card:?cardRight)
    (less ?cardLeft ?cardMiddle)
    (less ?cardMiddle ?cardRight)
)

//determine the smallest card in Play
(<= (smallest card:?card1)
    (does ?player2 (play ?pos2))
    (true (sees ?player2 (hand ?player2 ?pos2 ?card2)))
    (true (sees ?player1 (inPlay ?player1 ?card1)))
    (true (sees ?player3 (inPlay ?player3 ?card3)))
    (true (sees ?player4 (inPlay ?player4 ?card4)))
    (distinct ?player1 ?player2 ?player3 ?player4)
    (less ?card1 ?card2)
    (less ?card1 ?card3)
    (less ?card1 ?card4)
)

(<= (smallest card:?card1)
    (does ?player1 (play ?pos1))
    (true (sees ?player1 (hand ?player1 ?pos1 ?card1)))
    (true (sees ?player2 (inPlay ?player2 ?card2)))
    (true (sees ?player3 (inPlay ?player3 ?card3)))
    (true (sees ?player4 (inPlay ?player4 ?card4)))
    (distinct ?player1 ?player2 ?player3 ?player4)
    (less ?card1 ?card2)
    (less ?card1 ?card3)
    (less ?card1 ?card4)
)

(<= (smallest card:?card1)
    (true (sees ?player1 (inPlay ?player1 ?card1)))
    (true (sees ?player2 (inPlay ?player2 ?card2)))
    (true (sees ?player3 (inPlay ?player3 ?card3)))
    (true (sees ?player4 (inPlay ?player4 ?card4)))
    (distinct ?player1 ?player2 ?player3 ?player4)
    (less ?card1 ?card2)
    (less ?card1 ?card3)
    (less ?card1 ?card4)
)

(<= (smallest card:?card1)
    (does ?player2 (put ?stack2 ?pos2))
    (true (sees ?player2 (inPlay ?player2 ?card2)))
    (true (sees ?player1 (inPlay ?player1 ?card1)))
    (true (sees ?player3 (inPlay ?player3 ?card3)))
    (true (sees ?player4 (inPlay ?player4 ?card4)))
    (distinct ?player1 ?player2 ?player3 ?player4)
    (less ?card1 ?card3)
    (less ?card1 ?card4)
)

(<= (lessEqual ?num1 ?num2)
    (less ?num1 ?num2)
)

//Both parameters equal
(<= (lessEqual ?num1 ?num1)
    (number ?num1) //one operation to avoid prolog error, make sure numbers are being compared
)

(<= (hasCardInPlay player:?player)
    (true (sees ?player (inPlay ?player ?card)))
    (distinct 1000 ?card)
)

(<= (allPlayed)
    (true (control all))
    (true (sees ?player1 (inPlay ?player1 ?card1)))
    (true (sees ?player2 (inPlay ?player2 ?card2)))
    (true (sees ?player3 (inPlay ?player3 ?card3)))
    (does ?player4 (play ?pos4))
    (true (sees ?player4 (hand ?player4 ?pos4 ?card4)))
    (distinct ?player1 ?player2 ?player3 ?player4)
    (distinct ?card1 1000)
    (distinct ?card2 1000)
    (distinct ?card3 1000)
)

//-------------
//Legal
//-------------

//define legal moves

//---Player---
//Enable players to do nothing if it's not their turn to do something
(<= (legal player:?player (noop))
    (not (true (control ?player)))
    (not (true (control all)))
    (true (control ?player1))
    (isPlayer ?player)
)
//Karten dürfen nur gespielt werden, wenn alle spielen
(<= (legal player:?player (play posH:?pos))
    (true (control all))
    (true (sees ?player (hand ?player ?pos ?card)))
    (isCard ?card ?val)
    (distinct ?card 0)
    (not (hasCardInPlay ?player))
)

//Anlegen
(<= (legal player:?player (put stack:?stack posS:?pos))
    (true (control ?player))
    (true (sees ?player (inPlay ?player ?card)))
    (isMatchingStack ?stack ?card)
    (lastCard ?stack ?posP ?cardP)
    (succ ?posP ?pos)
    (less ?cardP ?card)
    (smallest ?card)
)

//Anlegen in slot 6 falls kein passender Stapel vorhanden war
(<= (legal player:?player (put stack:?stack 6))
    (true (control ?player))
    (true (sees ?player (inPlay ?player ?card)))
    (isMatchingStack ?stack ?card)
    (lastCard ?stack ?posLast ?cardLast)
    (greater ?cardLast ?card)
    (smallest ?card)
)

//---random---

//Kein Spieler hat einen freien Platz auf der Hand, Poisition 1 jedes Stapels ist belegt
(<= (legal random (gameReady))
    (true (control random))
    (not (true (stack ?stack 1 0)))
    (not (true (sees ?player (hand ?player ?pos 0))))
)

(<= (legal random (deal stack stack:?stack c_c:?card))
    (true (control random))
    (true (stack ?stack 1 0))
    (isCard ?card ?val)
    (not (true (dealt ?card)))
)

(<= (legal random (deal hand player:?player posH:?pos c_c:?card))
    (true (control random))
    (true (sees ?player (hand ?player ?pos 0)))
    (isCard ?card ?val)
    (not (true (dealt ?card)))
)

//-------------
//Build next state
//-------------

//---deal cards---
//handle dealt cards
(<= (next (dealt card:?card))
    (true (control random))
    (true (dealt ?card))
    //discard flags to save space after random is done
)

(<= (next (dealt card:?card))
    (does random (deal hand ?player ?pos ?card))
)

(<= (next (dealt card:?card))
    (does random (deal stack ?stack ?card))
)

(<= (next (sees player:?player (hand player:?player posH:?pos card:?card)))
    (does random (deal hand ?player ?pos ?card))
)

(<= (next (stack stack:?stack 1 card:?card))
    (does random (deal stack ?stack ?card))
)

//---handle card plays---

//place card
(<= (next (stack stack:?stack posS:?pos card:?card))
    (does ?player (put ?stack ?pos))
    (true (sees ?player (inPlay ?player ?card)))
    (distinct ?pos 6)
)

//handle inPlay flags
(<= (next (sees player:?player (inPlay player:?player card:?card)))
    (does ?player (play ?pos))
    (true (sees ?player (hand ?player ?pos ?card)))
)

//copy inPlay card while it's not beeing put or replaced
(<= (next (sees player:?player (inPlay player:?player card:?card)))
    (true (sees ?player (inPlay ?player ?card)))
    (not (does ?player (put ?stack ?pos)))
    (not (does ?player (play ?pos2)))
)

//remove card from inPlay when it's put
(<= (next (sees player:?player (inPlay player:?player 1000)))
    (does ?player (put ?stack ?pos))
)

//mark player as having no card in play
(<= (next (sees player:?player (inPlay player:?player 1000)))
    (not (true (control all)))
    (true (sees ?player (inPlay ?player 1000)))
)

//---Control handling---

//hand control to the player with the smallest card in play which isn't already placed (1000 = card was placed in a prior turn)
(<= (next (control player:?player))
    (not (true (control all)))
    (true (sees ?player (inPlay ?player ?card)))
    (not (does ?player (put ?stack ?pos)))
    (smallest ?card)
    (distinct ?card 1000)
)

//transition to put phase
(<= (next (control player:?player))
    (true (sees ?player (inPlay ?player ?card)))
    (allPlayed)
    (smallest ?card)
)

(<= (next (control player:?player))
    (does ?player (play ?pos))
    (true (sees ?player (hand ?player ?pos ?card)))
    (allPlayed)
    (smallest ?card)
)

//Warten bis alle gespielt haben
(<= (next (control all))
    (true (control all))
    (not (allPlayed))
)

//Letzter Spieler legt an
(<= (next (control all))
    (not (true (control all)))
    (does ?player1 (put ?stack ?pos))
    (true (sees ?player2 (inPlay ?player2 1000)))
    (true (sees ?player3 (inPlay ?player3 1000)))
    (true (sees ?player4 (inPlay ?player4 1000)))
    (distinct ?player1 ?player2 ?player3 ?player4)
)

//Random control handling
(<= (next (control random))
    (not (does random (gameReady)))
    (true (control random))
)

(<= (next (control all))
    (does random (gameReady))
    (true (control random))
)

//Hands
//Copy all non played cards
(<= (next (sees player:?player (hand player:?player posH:?pos card:?card)))
    (true (sees ?player (hand ?player ?pos ?card)))
    (not (does ?player (play ?pos)))
    (not (does random (deal hand ?player ?pos ?card1)))
)
//Set all played cards in hand to zero
(<= (next (sees player:?player (hand player:?player posH:?pos 0)))
    (does ?player (play ?pos))
)

//Copy Stacks and remove overflow
//Copy non full stacks 1 to 1 except positions where a card was put
(<= (next (stack stack:?stack posS:?pos card:?card))
    (true (stack ?stack ?pos ?card))
    (not (isFull ?stack))
    (not (does random (deal stack ?stack ?card1)))
    (not (does ?player (put ?stack ?pos)))
)

(<= (next (stack stack:?stack posS:?pos card:?card))
    (true (stack ?stack ?pos ?card))
    (not (isFull ?stack))
    (distinct ?pos 1)
    (not (does ?player (put ?stack ?pos)))
)

//Copy slots 6 into 1 if stack is full, write 0 to others
(<= (next (stack stack:?stack 1 card:?card))
    (does ?player (put ?stack 6))
    (true (sees ?player (inPlay ?player ?card)))
)

(<= (next (stack stack:?stack 2 0))
    (isFull ?stack)
)

(<= (next (stack stack:?stack 3 0))
    (isFull ?stack)
)

(<= (next (stack stack:?stack 4 0))
    (isFull ?stack)
)

(<= (next (stack stack:?stack 5 0))
    (isFull ?stack)
)

(<= (next (stack stack:?stack 6 0))
    (isFull ?stack)
)

//---Point handling---
//Arith Points 
//add all points in pos 1-5 if player puts card at 6
(<= (next (currPoints player:?player points:?num))
    (does ?player (put ?stack 6))
    (true (currPoints ?player ?p))
    (true (stack ?stack 1 ?card1))
    (hasPoints ?card1 ?points1)
    (add ?p ?points1 ?temp1) 
    (true (stack ?stack 2 ?card2))
    (hasPoints ?card2 ?points2)
    (add ?temp1 ?points2 ?temp2)
    (true (stack ?stack 3 ?card3))
    (hasPoints ?card3 ?points3)
    (add ?temp2 ?points3 ?temp3)
    (true (stack ?stack 4 ?card4))
    (hasPoints ?card4 ?points4)
    (add ?temp3 ?points4 ?temp4)
    (true (stack ?stack 5 ?card5))
    (hasPoints ?card5 ?points5)
    (add ?temp4 ?points5 ?num)
)

//If player is not gaining points, copy old score
(<= (next (currPoints player:?player points:?num))
    (true (currPoints ?player ?num))
    (not (does ?player (put ?stack 6)))
)

//copy existing points
(<= (next (points player:?player card:?card))
    (true (points ?player ?card))
)

//apply Points gained by moving pos 1-5 to points
(<= (next (points player:?player card:?card1))
    (does ?player (put ?stack 6))
    (true (stack ?stack 1 ?card1))
)

(<= (next (points player:?player card:?card2))
    (does ?player (put ?stack 6))
    (true (stack ?stack 2 ?card2))
    (distinct ?card2 0)
)

(<= (next (points player:?player card:?card3))
    (does ?player (put ?stack 6))
    (true (stack ?stack 3 ?card3))
    (distinct ?card3 0)
)

(<= (next (points player:?player card:?card4))
    (does ?player (put ?stack 6))
    (true (stack ?stack 4 ?card4))
    (distinct ?card4 0)
)

(<= (next (points player:?player card:?card5))
    (does ?player (put ?stack 6))
    (true (stack ?stack 5 ?card5))
    (distinct ?card5 0)
)

//------------
//Goals
//------------

//First Place
(<= (goal player:?player 100)
    (true (currPoints ?player ?points))
    (true (currPoints ?player2 ?points2))
    (true (currPoints ?player3 ?points3))
    (true (currPoints ?player4 ?points4))
    (distinct ?player1 ?player2 ?player3 ?player4)
    (lessEqual ?points ?points2)
    (lessEqual ?points ?points3 )
    (lessEqual ?points ?points4)
)

//Second Place
(<= (goal player:?player 50)
    (true (currPoints ?player ?points))
    (true (currPoints ?player2 ?points2))
    (true (currPoints ?player3 ?points3))
    (true (currPoints ?player4 ?points4))
    (distinct ?player1 ?player2 ?player3 ?player4)
    (greater ?points ?points2)
    (lessEqual ?points ?points3)
    (lessEqual ?points ?points4)
)

//third or fourth place
(<= (goal player:?player 0)
    (true (currPoints ?player ?points))
    (true (currPoints ?player2 ?points2))
    (true (currPoints ?player3 ?points3))
    (true (currPoints ?player4 ?points4))
    (distinct ?player1 ?player2 ?player3 ?player4)
    (less ?points2 ?points)
    (less ?points3 ?points)
)

//------------
//Terminal
//------------
(<= terminal
    (true (sees red (hand red 1 0)))
    (true (sees red (hand red 2 0)))
    (true (sees red (hand red 3 0)))
    (true (sees red (hand red 4 0)))
    (true (sees red (hand red 5 0)))
    (true (sees red (hand red 6 0)))
    (true (sees red (hand red 7 0)))
    (true (sees red (hand red 8 0)))
    (true (sees red (hand red 9 0)))
    (true (sees red (hand red 10 0)))
    (true (sees blue (hand blue 1 0)))
    (true (sees blue (hand blue 2 0)))
    (true (sees blue (hand blue 3 0)))
    (true (sees blue (hand blue 4 0)))
    (true (sees blue (hand blue 5 0)))
    (true (sees blue (hand blue 6 0)))
    (true (sees blue (hand blue 7 0)))
    (true (sees blue (hand blue 8 0)))
    (true (sees blue (hand blue 9 0)))
    (true (sees blue (hand blue 10 0)))
    (true (sees green (hand green 1 0)))
    (true (sees green (hand green 2 0)))
    (true (sees green (hand green 3 0)))
    (true (sees green (hand green 4 0)))
    (true (sees green (hand green 5 0)))
    (true (sees green (hand green 6 0)))
    (true (sees green (hand green 7 0)))
    (true (sees green (hand green 8 0)))
    (true (sees green (hand green 9 0)))
    (true (sees green (hand green 10 0)))
    (true (sees yellow (hand yellow 1 0)))
    (true (sees yellow (hand yellow 2 0)))
    (true (sees yellow (hand yellow 3 0)))
    (true (sees yellow (hand yellow 4 0)))
    (true (sees yellow (hand yellow 5 0)))
    (true (sees yellow (hand yellow 6 0)))
    (true (sees yellow (hand yellow 7 0)))
    (true (sees yellow (hand yellow 8 0)))
    (true (sees yellow (hand yellow 9 0)))
    (true (sees yellow (hand yellow 10 0)))
    (true (sees red (inPlay red 1000)))
    (true (sees blue (inPlay blue 1000)))
    (true (sees green (inPlay green 1000)))
    (true (sees yellow (inPlay yellow 1000)))
)


//------------
//Constants
//------------
//(isPlayer <player>)
(isPlayer red)
(isPlayer blue)
(isPlayer green)
(isPlayer yellow)

//(isPos <Position>)
(isPos 1)
(isPos 2)
(isPos 3)
(isPos 4)
(isPos 5)
(isPos 6)

//Points per card
//(isCard <number> <points>)
(isCard 1 1)
(isCard 2 1)
(isCard 3 1)
(isCard 4 1)
(isCard 5 2)
(isCard 6 1)
(isCard 7 1)
(isCard 8 1)
(isCard 9 1)
(isCard 10 3)
(isCard 11 5)
(isCard 12 1)
(isCard 13 1)
(isCard 14 1)
(isCard 15 2)
(isCard 16 1)
(isCard 17 1)
(isCard 18 1)
(isCard 19 1)
(isCard 20 3)
(isCard 21 1)
(isCard 22 5)
(isCard 23 1)
(isCard 24 1)
(isCard 25 2)
(isCard 26 1)
(isCard 27 1)
(isCard 28 1)
(isCard 29 1)
(isCard 30 3)
(isCard 31 1)
(isCard 32 1)
(isCard 33 5)
(isCard 34 1)
(isCard 35 2)
(isCard 36 1)
(isCard 37 1)
(isCard 38 1)
(isCard 39 1)
(isCard 40 3)
(isCard 41 1)
(isCard 42 1)
(isCard 43 1)
(isCard 44 5)
(isCard 45 2)
(isCard 46 1)
(isCard 47 1)
(isCard 48 1)
(isCard 49 1)
(isCard 50 3)
(isCard 51 1)
(isCard 52 1)
(isCard 53 1)
(isCard 54 1)
(isCard 55 7)
(isCard 56 1)
(isCard 57 1)
(isCard 58 1)
(isCard 59 1)
(isCard 60 3)
(isCard 61 1)
(isCard 62 1)
(isCard 63 1)
(isCard 64 1)
(isCard 65 2)
(isCard 66 5)
(isCard 67 1)
(isCard 68 1)
(isCard 69 1)
(isCard 70 3)
(isCard 71 1)
(isCard 72 1)
(isCard 73 1)
(isCard 74 1)
(isCard 75 2)
(isCard 76 1)
(isCard 77 5)
(isCard 78 1)
(isCard 79 1)
(isCard 80 3)
(isCard 81 1)
(isCard 82 1)
(isCard 83 1)
(isCard 84 1)
(isCard 85 2)
(isCard 86 1)
(isCard 87 1)
(isCard 88 5)
(isCard 89 1)
(isCard 90 3)
(isCard 91 1)
(isCard 92 1)
(isCard 93 1)
(isCard 94 1)
(isCard 95 2)
(isCard 96 1)
(isCard 97 1)
(isCard 98 1)
(isCard 99 5)
(isCard 100 3)
(isCard 101 1)
(isCard 102 1)
(isCard 103 1)
(isCard 104 1)