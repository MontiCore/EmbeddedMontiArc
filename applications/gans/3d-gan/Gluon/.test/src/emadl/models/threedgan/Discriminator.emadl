package threedgan;

component Discriminator {
    ports in Q(0:1)^{1,32,32,32} data,          
          out Q(0:1)^{1} discriminated;

    implementation CNN {

		data->
		Convolution3D(kernel=(4,4,4), channels=32, stride=(2,2,2), padding=(1,1,1)) ->
		BatchNorm() ->
		LeakyRelu(alpha=0.2) ->
		Convolution3D(kernel=(4,4,4), channels=64, stride=(2,2,2), padding=(1,1,1)) ->
		BatchNorm() ->
		LeakyRelu(alpha=0.2) ->
		Convolution3D(kernel=(4,4,4), channels=128, stride=(2,2,2), padding="simple3d") ->
		BatchNorm() ->
		LeakyRelu(alpha=0.2) ->
		Convolution3D(kernel=(4,4,4), channels=256, stride=(2,2,2), padding="simple3d") ->
		BatchNorm() ->
		LeakyRelu(alpha=0.2) ->
		Convolution3D(kernel=(4,4,4), channels=1, stride=(2,2,2), padding="simple3d") ->
		Sigmoid() ->
        discriminated;
    }
}
