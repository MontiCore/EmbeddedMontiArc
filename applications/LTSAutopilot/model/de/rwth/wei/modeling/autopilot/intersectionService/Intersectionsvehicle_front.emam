/* (c) https://github.com/MontiCore/monticore */
package de.rwth.wei.modeling.autopilot.intersectionService;
import  de.rwth.wei.modeling.autopilot.messagestruct.*;

dynamic component Intersectionsvehicle_front{
// to find the vehicle or platoon which is need to be processed in the current processing intersection
 ports
   dynamic in Statusmessage       status_msg[0:32],
   dynamic in Trajectorymessage   traj_msg[0:32],
   dynamic in Platoonmessage      plat_msg[0:32],
   in   Q                next_x,
   in   Q                next_y,
   in   Q                car_length,

   dynamic out  Statusmessage   front_status_msg[0:32],
   //used as public variables
   out Statusmessage       smsg,
   out Trajectorymessage   tmsg,
   out Platoonmessage      pmsg;

   @ status_msg::connect{}
   @ traj_msg::connect{}
   @ plat_msg::connect{}

   // consider the minimal distance
   implementation Math{
    Z counter = 1;
    // single vehicle at next intersection
    for i = 1:32
       if is_connected(status_msg,i)
          smsg = status_msg(i);
          B tag = 0;
          for a = 1:32
             if is_connected(plat_msg,a)
               pmsg = plat_msg(a);
               // platoon msg update, vehicle is not single
               if pmsg.vehicleid == smsg.vehicleid && pmsg.timestamp > smsg.timestamp
                  tag = 1;
               end
             end
          end
          for j = 1:32
            if is_connected(traj_msg,j)
               tmsg = traj_msg(j);
               if smsg.vehicleid == tmsg.vehicleid && tag != 1
                  Q first_x = tmsg.nextintersection_x;
                  Q first_y = tmsg.nextintersection_y;
                  Q sqrt_distance = (next_x - first_x)*(next_x - first_x) + (next_y - first_y)*(next_y - first_y);
                  Q distance = sqrt(sqrt_distance);
                  // distance to intersection
                  Q vx = smsg.position_x;
                  Q vy = smsg.position_y;
                  Q sqrt_dis2intersection = (vx - first_x)*(vx - first_x) + (vy - first_y)*(vy - first_y);
                  Q dis2intersection = sqrt(sqrt_dis2intersection);
                  // if located at the same intersection with current vehicle
                  if distance <= 6.0 && dis2intersection >= 1.3 * car_length
                     if ports_connect (front_status_msg,counter,smsg)
                        front_status_msg(counter) = smsg;
                     end
                     Z r = ports_free(front_status_msg,counter);
                     counter = counter + 1;
                  end
               end//if smsg.vehicleid == tmsg.vehicleid && tag != 1
             end//if is_connected(traj_msg,j)
           end//for j = 1:32
         end//if is_connected(status_msg,i)
      end//for i = 1:32
     }
  }
