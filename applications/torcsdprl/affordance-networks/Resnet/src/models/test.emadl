
component ResNet <Z(2:3) l2=1, Z(2:8) l3=1, Z(2:36) l4=1, Z(2:3) l5=1> {
    ports in Z(0:255)^{3, 210, 280} data,
        out Q(-oo:oo)^{16} predictions;

    implementation CNN{
        def swish(){
            (
                Get(i=0)
            |
                Sigmoid() 
            ) ->
            BroadcastMultiply()
        }

        def conv(kernel=(3,3), channels){
            (
                Get(i=0)
            |
                Convolution(kernel=kernel, channels=channels, stride=(1,1)) ->
                BatchNorm() ->
                swish() -> 
                Convolution(kernel=kernel, channels=channels, stride=(1,1))   
            ) ->
            Add() ->
            BatchNorm() ->
            swish()
        }

        def convFirst(kernel=(3,3), channels, stride=(1,1)){
            (
                [0] ->
                Convolution(kernel=(1,1), channels=channels, stride=stride)
            |
                [0] ->
                Convolution(kernel=kernel, channels=channels, stride=stride) ->
                BatchNorm() ->
                swish() -> 
                Convolution(kernel=kernel, channels=channels, stride=(1,1))  
            ) ->
            Add() ->
            BatchNorm() ->
            swish()
        }    

        //data ->
        //Convolution(kernel=(7,7), channels=64, stride=(2,2)) ->
        //BatchNorm() ->
        //Swish() ->
        //Pooling(pool_type="max", kernel=(3,3), stride=(2,2)) ->
        //convFirst(channels=64) ->
        //conv(channels=64, -> = l2) ->
        //convFirst(channels=128, stride=(2,2)) ->
        //conv(channels=128, -> = l3) ->
        //convFirst(channels=256, stride=(2,2)) ->
        //conv(channels=256, -> = l4) ->
        //convFirst(channels=512, stride=(2,2)) ->
        //conv(channels=512, -> = l5) ->
        //GlobalPooling(pool_type="avg") ->
        //FullyConnected(units=16, no_bias=true) ->
        //predictions;
        data ->
        FullyConnected(units=16) ->
        predictions;
    }
}