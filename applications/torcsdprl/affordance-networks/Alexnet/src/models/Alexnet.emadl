component Alexnet{
    ports in Z(0:255)^{3, 210, 280} data,
         out Q(0:1)^{14} predictions;

    implementation CNN {
        def swish(){
            (
                [0]
            |
                [0] ->
                Sigmoid() 
            ) ->
            BroadcastMultiply()
        }

       def conv(kernel, channels, stride=(1,1)){
            Convolution(kernel=kernel, channels=channels, stride=stride, padding="same") ->
            swish()
        }

        def fc(units){
            FullyConnected(units=units) ->
            swish() ->
            Dropout()
        }

        data ->
        conv(kernel=(11,11), channels=96, stride=(4,4)) ->
        Pooling(pool_type="max", kernel=(3,3), stride=(2,2), padding="same") ->
        conv(kernel=(5,5), channels=256, stride=(2,2)) ->
        Pooling(pool_type="max", kernel=(3,3), stride=(2,2), padding="same") ->
        conv(kernel=(3,3), channels=384) ->
        conv(kernel=(3,3), channels=384) ->
        conv(kernel=(3,3), channels=256) ->
        Pooling(pool_type="max", kernel=(3,3), stride=(2,2), padding="same") ->
        fc(units=1280) -> 
        fc(units=1280) ->
        FullyConnected(units=14) ->
        Sigmoid() ->
        predictions;
    }
}
